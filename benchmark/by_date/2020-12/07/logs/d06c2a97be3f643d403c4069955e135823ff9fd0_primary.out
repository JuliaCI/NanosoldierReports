cset: moving following pidspec: 15175
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.849180563 seconds)
loading group "shootout"... done (took 1.136373845 seconds)
loading group "string"... done (took 0.674018892 seconds)
loading group "linalg"... done (took 8.659959799 seconds)
loading group "parallel"... done (took 0.16724094 seconds)
loading group "find"... done (took 3.050682869 seconds)
loading group "tuple"... done (took 2.156124002 seconds)
loading group "union"... done (took 15.07063399 seconds)
loading group "dates"... done (took 1.482206841 seconds)
loading group "micro"... done (took 0.222474015 seconds)
loading group "simd"... done (took 4.81895627 seconds)
loading group "io"... done (took 1.084905517 seconds)
loading group "random"... done (took 9.615172865 seconds)
loading group "problem"... done (took 1.532957634 seconds)
loading group "array"... done (took 25.392205397 seconds)
loading group "misc"... done (took 1.908618634 seconds)
loading group "scalar"... done (took 43.975838422 seconds)
loading group "sort"... done (took 3.369131092 seconds)
loading group "sparse"... done (took 12.896330592 seconds)
loading group "collection"... done (took 18.933086662 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.427881551 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.126912981 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.131437557 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.117374664 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.191696512 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.125218549 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.133651962 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087691446 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.860832499 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139032914 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.118497979 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.433048575 seconds)
done (took 5.341945913 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167254741 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093437856 seconds)
    (2/2) benchmarking "String"...
    done (took 0.085787653 seconds)
  done (took 1.40201156 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072193632 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.065513524 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069485075 seconds)
  done (took 1.430301874 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.067225008 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135921458 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.068622275 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068515014 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068825492 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067914343 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068158808 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068096663 seconds)
  done (took 1.773212262 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072403732 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069443649 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067245227 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069822894 seconds)
  done (took 1.506216496 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066156866 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.124072996 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066738848 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066297032 seconds)
  done (took 1.548113126 seconds)
done (took 9.139292528 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.142966105 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.822213793 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.759855426 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.127089336 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250183666 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.45414461 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.127516055 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.187300398 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.092844703 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077654439 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.125268754 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080675388 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.404610741 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.406717068 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.0738341 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.173098151 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.653953172 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.090037839 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.138007231 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.468240128 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.075263103 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.090105977 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087749836 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071957662 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.345408247 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.158495302 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.659227886 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097752436 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070819512 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.097239324 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.073623625 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.080467602 seconds)
  done (took 10.82439545 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093813454 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.0909647 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070911372 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126665668 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094016422 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071550223 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07759942 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069401314 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.09195784 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126854193 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090436033 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.10178632 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068929573 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.076841541 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.076247239 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.199921145 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081571279 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083941191 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.070057086 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082840584 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108586747 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079682904 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080844727 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080388558 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.134886646 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.170064234 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096877363 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098790686 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066480774 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080778726 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118205059 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128423785 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066905572 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066960758 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122599218 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096329017 seconds)
  done (took 4.722884977 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.893243664 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.117379474 seconds)
    (2/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.097490238 seconds)
    (3/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085406346 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076919561 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109369032 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.11417099 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.125309126 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.125918495 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103800969 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.074563096 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153031567 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.654005281 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.160489589 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071881602 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.12283365 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.367770543 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.092520569 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070797676 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070456613 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073371359 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071713297 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.115320506 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.06796316 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.183186566 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.581164936 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07335649 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072202821 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098596564 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067783905 seconds)
    (30/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.066582091 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.143722419 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095101544 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072048329 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.550806295 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066776327 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065952069 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090606462 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094842894 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.180423276 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069021757 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081283243 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068625342 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111183998 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082878988 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.493425822 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.07233222 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.571454071 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.229463635 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.075611659 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07407324 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104088846 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.066523219 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069292401 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.843770263 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.123728124 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068209832 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.276243066 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068302291 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06919842 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.07089801 seconds)
    (61/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.06664141 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.105637037 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069625535 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070564463 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074852701 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099130724 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.798645676 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090296863 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.09847144 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069335265 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.411239856 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074933658 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071641267 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071706374 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.086002569 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.113885219 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068660632 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068314813 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110498065 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.091287079 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.092584762 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072112514 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069786146 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068255925 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.32361435 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.190579819 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067641178 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068795004 seconds)
    (89/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066341411 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.4818375 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065733063 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068698373 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069485478 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.09115102 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069250386 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065021858 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066232694 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101207763 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.072827628 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.455590638 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067658664 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.458754096 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071786501 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.105969148 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.123582962 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06995113 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098751557 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.069971271 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066695125 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075294427 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067688367 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066226557 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071197376 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067259169 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068162221 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070796879 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069791643 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069484291 seconds)
  done (took 22.893477574 seconds)
done (took 40.563576235 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.335937282 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.081006153 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080719016 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.081723591 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081478656 seconds)
  done (took 1.938155836 seconds)
done (took 3.310698779 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133253138 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.07758012 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065932745 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103207251 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070370303 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104463241 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111780894 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.106946956 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.07104545 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.071058746 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070620154 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.108178953 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107954956 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070888503 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100826642 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106928162 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.07115459 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.066199751 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070801097 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070545311 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070725738 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066147582 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070828048 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070665463 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101828736 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070952806 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066327782 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101652859 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.070820059 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.101249544 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070782131 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070906434 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070596455 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.222473087 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.070477779 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.101510098 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066427881 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.070567194 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.071083612 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070916213 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.071051716 seconds)
  done (took 4.829976805 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071259656 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083288379 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085636867 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063670671 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073460069 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084455054 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063773065 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083885428 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.093589911 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083972233 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084330246 seconds)
  done (took 2.199303103 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070163031 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085357262 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08681126 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06345161 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075213352 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085293351 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063867263 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084920856 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087811091 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.0853381 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085989167 seconds)
  done (took 2.180524504 seconds)
done (took 10.507182114 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096829977 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066399056 seconds)
  done (took 1.455759291 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.229654578 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.513756802 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.289213296 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093354615 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.074214893 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.088535053 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.20754043 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.069286307 seconds)
  done (took 8.044857159 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.100434558 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.074548196 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069970949 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070044597 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069273025 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069926993 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.06961542 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.06978029 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070294945 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071160325 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069784454 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070759101 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071447105 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071754482 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071853172 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071276305 seconds)
  done (took 2.570034799 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105813671 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070998211 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.10172403 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064232149 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073812348 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064630628 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.07310261 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075458473 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072365853 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.073200393 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074442609 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.073325214 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073062543 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073568171 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074835313 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074971314 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075703143 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072404226 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074484703 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075817748 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074210103 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075308357 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075354491 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073726529 seconds)
  done (took 3.241751696 seconds)
done (took 16.624116192 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174470715 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076883062 seconds)
  done (took 1.552739612 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068196939 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070839597 seconds)
  done (took 1.457918332 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073625799 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062439416 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080813731 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072364552 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063589699 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063023399 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079795598 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063330237 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063010802 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063590279 seconds)
  done (took 2.002831783 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.064166947 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071013415 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068490177 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066678672 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069594824 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064211434 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.06766598 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065539254 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071954204 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064053081 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068735598 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.086584845 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.068520609 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086671168 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067834794 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068228276 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.070478329 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067068984 seconds)
  done (took 2.580325619 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061566721 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063224731 seconds)
  done (took 1.451240754 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065156156 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063452186 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066380195 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066463216 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.064065116 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063325285 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064092273 seconds)
  done (took 1.772708909 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.429589228 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125893092 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.347904531 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.071012875 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.078911948 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.260039906 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065815964 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070372778 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070688881 seconds)
  done (took 2.884952942 seconds)
done (took 15.036344924 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.0822657 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.184093581 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.090327552 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.410854909 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094288359 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068983247 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114588053 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.178933407 seconds)
done (took 2.572785773 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.278367751 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.251695132 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.404006072 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.127283182 seconds)
  done (took 3.112372449 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336769856 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.08018515 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.07879765 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068772986 seconds)
  done (took 1.907156769 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065504862 seconds)
    (2/2) benchmarking "read"...
    done (took 0.07319127 seconds)
  done (took 1.473171435 seconds)
done (took 8.113049501 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072371473 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.06379436 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.069649477 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066282785 seconds)
    (5/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.096333017 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.066298225 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06515424 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.076385368 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066413231 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063924143 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.066170069 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.066300835 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066423757 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.065156146 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066394092 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066066026 seconds)
    (17/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063916829 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066803219 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.066153038 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065985075 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065692297 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066362075 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065103443 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065896523 seconds)
  done (took 2.991879746 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079935935 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067391397 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068921921 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068858564 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069416921 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.06852999 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068906185 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067647955 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068776034 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067272403 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069422289 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069164681 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067488 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.06986759 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067246035 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069887578 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069158733 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067712928 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067338095 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069505845 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068879535 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068052424 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069613083 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069476703 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069513913 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069193495 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067486095 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067720326 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06892951 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069481564 seconds)
  done (took 3.423386169 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067575237 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061807816 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062167464 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.07181492 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061717788 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062541504 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062641708 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061735265 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062633865 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063564752 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062770933 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062025122 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062931057 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061807618 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061637852 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062777212 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067263094 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081795816 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062562021 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062249424 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066898228 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062323902 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062165946 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061972993 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062684515 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062284867 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062144059 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.063060431 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062059742 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062884192 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061640544 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066511868 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066941393 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.06180226 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072236892 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067213069 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062016741 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066442726 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063381513 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061489587 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061928616 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062138172 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061948971 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062251395 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072201327 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061963992 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063308383 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062760389 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062487171 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062083025 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062151352 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064091156 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070947555 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063900912 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061584288 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063017745 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061880963 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062332766 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061912157 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.06182834 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.06196742 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065766734 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063670561 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063100903 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.082004976 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.06343292 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072578873 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061961884 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062902776 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065697899 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062756609 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080019638 seconds)
  done (took 5.984405387 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071707543 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074097996 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081859757 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072193234 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066361917 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063506471 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06713756 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063396938 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072951993 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067480623 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063497084 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067197707 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073063262 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067843509 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065076955 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072945425 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067648129 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066749533 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063490324 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067769974 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06457843 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067281596 seconds)
  done (took 2.873349916 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135658904 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068521058 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108673789 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.077074768 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070754176 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077245339 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068272208 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068151083 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068369165 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068666614 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068599693 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068612589 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071052566 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068831109 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069209473 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068447786 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068182469 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068899358 seconds)
  done (took 2.717236855 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077105827 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067924352 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091684783 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067482143 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067925483 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06756041 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071771742 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072128685 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067437773 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067776625 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072427034 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067746201 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.068066669 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068214955 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067395482 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067820598 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067615057 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068046101 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071907138 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.07196219 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071753084 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072175468 seconds)
  done (took 2.911071378 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077146231 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066435486 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082326697 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068203913 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062205419 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062251283 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067716193 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067018456 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.068279664 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066816715 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067340386 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062229484 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068748602 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067467856 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06880459 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067350884 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067092968 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067300809 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067124719 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062525079 seconds)
  done (took 2.712598146 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086246062 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064902307 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065157718 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084659596 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065072393 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065152697 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084360482 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065184213 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065148156 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08754467 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.0655114 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065274811 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084706988 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084806771 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064930823 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.0852925 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.08495406 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084675299 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065249362 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065276753 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086919903 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065265329 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.085033105 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065566683 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064989733 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064979231 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065297892 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084689033 seconds)
  done (took 3.426627445 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064883627 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065170185 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065755078 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065497901 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06580689 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065608461 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065477663 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065970762 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066441653 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06629989 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065755073 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065831184 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068876619 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065480642 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065607322 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065685855 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065953004 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066308509 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06583069 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066315091 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065628327 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065560216 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065684698 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065820422 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066384422 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06556465 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065724165 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065960336 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065686699 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065699601 seconds)
  done (took 3.340415046 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073601599 seconds)
    (2/2) benchmarking "in"...
    done (took 0.073704744 seconds)
  done (took 1.512022592 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062893281 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.080212528 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061627124 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074446049 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071274213 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066214164 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07160976 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071895443 seconds)
  done (took 1.919573442 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066868038 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.093110905 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064169968 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064377463 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067440485 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.130009348 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076836525 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076175096 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078253954 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066516045 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.06462764 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076455076 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063621505 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077485303 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065809282 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073144397 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071597063 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.082099359 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077077971 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06247213 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076658347 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065110525 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062761154 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065135663 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064318875 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.07080932 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080287408 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076942883 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072558545 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061728868 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083031588 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062694807 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064092225 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072759418 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.0673501 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062876918 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100305392 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063914314 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068485322 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062760347 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075707245 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084108301 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077449066 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081363363 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.06554091 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065300891 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062265118 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065111554 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066379169 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07250206 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062630798 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070020376 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062203168 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064353977 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073868237 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063640626 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068349434 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072890786 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076895518 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07384732 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071742895 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.079243564 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.072371248 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071298926 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064073054 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.083230913 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064889608 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076338855 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078322188 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064713611 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076619763 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062831223 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061943651 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062819169 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.096849984 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.065383785 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063903671 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.063601633 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.063209073 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064453888 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07289985 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06867837 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070105809 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066339084 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078731081 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071872679 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.06274747 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069751436 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080422828 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066270715 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062825536 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079408118 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065990573 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062470088 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080238986 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072644843 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064720826 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063520537 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.066024694 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075939209 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063569 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.061215317 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070857552 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063989573 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.06522658 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.067100604 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070647433 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.062633618 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072770928 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.067283061 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06441343 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.061400746 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066333855 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063599326 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060774411 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071804252 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062141985 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076154167 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067863397 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07650134 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076613547 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072688 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077823182 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061631936 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060721562 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079341005 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071490484 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.201721885 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081488231 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.063590996 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.078171982 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063395341 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065135361 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073657282 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062232745 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065177073 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062745602 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068000683 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064603209 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064538329 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068192786 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071848402 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075583711 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06439825 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072532851 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063323007 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079038587 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.07295047 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067004304 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066324273 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063610846 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075226257 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069848945 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072727849 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062208606 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063686586 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063192237 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.0738661 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072958931 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064843576 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070506951 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067305606 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.06347554 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062830442 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06425476 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066568734 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066849107 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063812866 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071090775 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.07180203 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077424429 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070388214 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071798157 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061678598 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062414942 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064871869 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062764496 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067582653 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072450265 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078833754 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.075310513 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084606405 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063646204 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073297415 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064542482 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080311326 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076864438 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064560334 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068088671 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061837392 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065188937 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072713717 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074619749 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07734139 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078504626 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067460197 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067744546 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062610364 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078227844 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063868978 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071871408 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072674167 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.0679064 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063032336 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.065146349 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.07238499 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06765095 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063095346 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079125094 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.070266958 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062546152 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077694861 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063196891 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.074438913 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.063044017 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066816587 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068305875 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06497616 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.0726122 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078803947 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061873591 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063827728 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078820875 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.065126542 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064408443 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070829807 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078364766 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067008472 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.07054953 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073824719 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072914398 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067032327 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072086037 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063734679 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071436225 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065482255 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074030771 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.06224377 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080629721 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.06107954 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077951408 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.063171846 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073686954 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063390957 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072752338 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.063739951 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.080065216 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.064317155 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.063391558 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.074014697 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.061329348 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071258509 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061509456 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067016943 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068173021 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071042831 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063757173 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071367638 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.063822126 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.214297022 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.068938014 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073246769 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.07381752 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068632869 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063438712 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072112864 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074840797 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071683835 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064458175 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064922691 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063778507 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072676261 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064839241 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064864961 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071504842 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067548556 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069014217 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06475611 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064861267 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064553873 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072009082 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07281586 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082163507 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071879087 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070792385 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072466564 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.06254968 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078851014 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063113859 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073931058 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061917212 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069378044 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072218946 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063717672 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082282951 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064774548 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071023161 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075986047 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071819073 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066725042 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081331596 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.068079928 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071649799 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071740988 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067401676 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069682772 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065313917 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.072196945 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072856697 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.074723228 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064636231 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.07062762 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072395464 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065060225 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071287382 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.065000316 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.07179628 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065115176 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061853557 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067588378 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074615304 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067903721 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06776766 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063235738 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.06206968 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063720167 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070065268 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067362199 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071882692 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078689697 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061700133 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063577556 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062713115 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066488135 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081313345 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07330116 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070813492 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067785614 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062203015 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064642171 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.06555047 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063341118 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.067017596 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062490153 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062502853 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074003415 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065339387 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067497794 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063752488 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064603829 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07325026 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068146655 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064165664 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069954422 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.062632681 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068204842 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062433919 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064988962 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067471291 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.06264046 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06645071 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.073908857 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.07957887 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069401526 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.072209643 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064317525 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070900919 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07826021 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070487039 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063712773 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072399321 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061770647 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081397806 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072131308 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071372293 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072384776 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063824606 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079376132 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067343889 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072754857 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078223054 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063514303 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.069188453 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061720097 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077833549 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.067309311 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.06147443 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.07013944 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07009463 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.068403584 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073620019 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.062400906 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.218405413 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.069569385 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.068051724 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.066277337 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065776856 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072725552 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079700529 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064530516 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067755898 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.07176972 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071954656 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06765743 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075449162 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071615359 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064572092 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.065369272 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.067143351 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064065875 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075240755 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063557003 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067387982 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067630862 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062631851 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.07036716 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080411453 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072852758 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073163172 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.063127228 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062067251 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081134231 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066459546 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.06695383 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071561884 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072779121 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076147925 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072796586 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.08050724 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064193246 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068546502 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075462317 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064089673 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062797907 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.067277028 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064780351 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072674067 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073048574 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071019707 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065212646 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069635966 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076849151 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064389991 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067837988 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.06832574 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063622868 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073756941 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071553887 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074516987 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064889191 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062955786 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.06628099 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072104953 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070733768 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072765219 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064376134 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070695375 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.07716219 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071198308 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066769458 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062530395 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066958867 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072652521 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067984012 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063175402 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067873367 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066535742 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070541372 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.073113018 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067905602 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063091563 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080678676 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071128477 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072716069 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065437964 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065376957 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064002394 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.063164207 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074343101 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062983081 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064875871 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067637149 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064981547 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080919354 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071811182 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07948663 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064636868 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067525913 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062889816 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073055962 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.068215309 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.064126237 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.074003629 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062501961 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078949563 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.075687032 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068661309 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.083808301 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.067984335 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.07145077 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078147828 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072778817 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.071913868 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066214783 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072765344 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064677065 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.07381165 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062647193 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061785631 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072805179 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071751923 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07534514 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062093448 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072503381 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06399504 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070051324 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070412215 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063486584 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063332002 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063465402 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071244931 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066440497 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071497323 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.066398219 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.22468602 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.065358355 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075760103 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.073508848 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074823344 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077442956 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07634237 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071566787 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.064079766 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071067055 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071205768 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06435358 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068449018 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.06647244 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085138689 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.064804484 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064838688 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077527067 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070014467 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.06355269 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070306994 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.068239119 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073843554 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064171018 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073648401 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067455665 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064115345 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067714171 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067591233 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061966529 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062802191 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062887643 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072707746 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067459006 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063023383 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082045592 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064355493 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.07240112 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074490682 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070344141 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065277846 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061811531 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064005424 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076091135 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078487716 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066801816 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07177877 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064326334 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072875973 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061924099 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.07172506 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071303751 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071820837 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062196865 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063237837 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07823905 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078622939 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067312757 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072398048 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072262515 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064646145 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085317262 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072007865 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064768643 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074854915 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065725761 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062525625 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062253998 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064983866 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.075417402 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.063257911 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065789727 seconds)
  done (took 43.362118751 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099284806 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06375663 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062507352 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062778672 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073353853 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063903878 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062948934 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064038114 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064074343 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065599956 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062895821 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066211797 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074423865 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076601019 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073686972 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066800207 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062926901 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064413839 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063083937 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063727353 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073476182 seconds)
  done (took 2.923188129 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065232735 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.067075698 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067206537 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067587654 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066519118 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063083099 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067561662 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06286725 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06760671 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063603824 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067836668 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063266619 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063833079 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063633141 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063416945 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064963487 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068063082 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066420592 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063105758 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067019425 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064587897 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06691574 seconds)
  done (took 2.908106037 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062790492 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063088608 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071543614 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062568277 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062038902 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066168684 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062356625 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066917803 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066750452 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066542693 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.072082342 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063336664 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062241516 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068013412 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062360794 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063558162 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106515906 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063662499 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063551444 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062398717 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065346491 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072351505 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062556438 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062588547 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066422297 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066489086 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062190897 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065128166 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063234749 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066859281 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.064101744 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062084947 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072434869 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071073136 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067074809 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066977558 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064599017 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063532422 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062562988 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.063048397 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071426297 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064594433 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062912975 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064719337 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.072024274 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062807726 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062270092 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.072185596 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062099504 seconds)
  done (took 4.714835253 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071671848 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115868313 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068371934 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.096434171 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.076194846 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069256683 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068719325 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.098165513 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.064042733 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064624165 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076870498 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.076992765 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06549806 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067284527 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.070437464 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06571289 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06644615 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06526515 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068316713 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065134104 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068579838 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070111107 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.07606847 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.076382555 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066654602 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064874121 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065495102 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066865484 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076122825 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069217545 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067021065 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067708531 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076695516 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.069132164 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065638895 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.066288798 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.077626187 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066403647 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065585727 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.064152913 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065164144 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067244266 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069949287 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077567085 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066119654 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070750568 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065962791 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.06328767 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076551155 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065432182 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.070036455 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077536669 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067150289 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066362398 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067238135 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076593818 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.066035703 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064454345 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065939442 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076098412 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063947214 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066407745 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.080000676 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065454555 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069614278 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077423921 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070983113 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066899488 seconds)
  done (took 6.428414772 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070303883 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097613598 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073776416 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.0742045 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07356155 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073912696 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.07369721 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073504348 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.0733819 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073715361 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07343517 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.113989984 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070183921 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078228319 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074179283 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073774578 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073666091 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073804127 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073430636 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073468694 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073760678 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074044954 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073981549 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07444324 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076128097 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069848045 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073301126 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073577569 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074314005 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073808337 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076161729 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073612608 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074786383 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074554029 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076229503 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073997483 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064014725 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073469802 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073602988 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073651195 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069825212 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074317368 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073999089 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069987531 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074169703 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073889515 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074313945 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076586973 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.081220843 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074621544 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073715603 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074770696 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073792819 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073879676 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07403521 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.080742384 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074358554 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074078143 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073907607 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074378131 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074294019 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080950208 seconds)
  done (took 6.158704848 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074623981 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069498506 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082627604 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062963111 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062478493 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072632559 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062876812 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062761296 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069935994 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.07011703 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071962549 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072476531 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074698235 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072296698 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.073180775 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074611872 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072513343 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072418926 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070334288 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073082202 seconds)
  done (took 2.918299188 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076295341 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.07991846 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068541134 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.072495473 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068190278 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072158802 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067877905 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068595069 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068635945 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068848359 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073510276 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073943579 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069325107 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072865764 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073350654 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072567989 seconds)
  done (took 2.633686354 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.0649875 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070254103 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.069628268 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064008501 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065848283 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.063371792 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064055749 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062654518 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065620337 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077193853 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063902477 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066476067 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064213387 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.066058305 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063505716 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067169996 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.065514543 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06373324 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064299356 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068644094 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.073252645 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064919401 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066638011 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06394556 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.066420805 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.072526694 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065435581 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066270191 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063732046 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066950344 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066391078 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070538844 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06673836 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064709599 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062749152 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063750139 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064505182 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.066930807 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066775564 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064469419 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062598543 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069721097 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064308606 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065832027 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065628043 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066752154 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065493531 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069475106 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064049248 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066238076 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064148449 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065674874 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064607226 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071586967 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066337662 seconds)
  done (took 5.128428701 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078189724 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06813491 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062368345 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062776027 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068183178 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068425489 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067812002 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06837853 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06900571 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062668884 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068845274 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067703248 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068545597 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068306076 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068688034 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068214855 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062940129 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068521085 seconds)
  done (took 2.72238505 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067890314 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068614461 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.067646667 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064841405 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.064383045 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.069767427 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062662975 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.064373292 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064275429 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064648414 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064655526 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064401958 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064346538 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06431547 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068809517 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064946527 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.064438423 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062867944 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.065081532 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062959101 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.069391307 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062991205 seconds)
  done (took 2.931440387 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088343777 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.08555617 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.129975969 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.08246625 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090747562 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073895018 seconds)
  done (took 2.046316331 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093883336 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.106971424 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06773233 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067723537 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076883177 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071025211 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071381922 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071376647 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07710281 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075478583 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071252303 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076821114 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077170668 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073042563 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076860103 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079261723 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071519949 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071336445 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068300418 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07970868 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071925729 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076898575 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071408092 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071086431 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071462027 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07324107 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079360795 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075197809 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071463067 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076594312 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079811475 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071574876 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077581692 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075647505 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068304096 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077124063 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071540137 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079622054 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077158174 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073527833 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068089825 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077172007 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077116641 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073328175 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080335977 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071921005 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073640999 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071558299 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072002288 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081975394 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077615889 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073537221 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077247314 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079949617 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080371421 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082080077 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075546507 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073473657 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077673036 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075536262 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073441127 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077293877 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073149145 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075915576 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080115664 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073392491 seconds)
  done (took 6.489620123 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100909111 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06876786 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071970678 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075606464 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073464693 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071697999 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071908429 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07164908 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071699621 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068864068 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107788089 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072470061 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073449005 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076558871 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071807376 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071763699 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071893264 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073660533 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068684772 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.08194021 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071599191 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073398545 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073095547 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073755739 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075263822 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079419242 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071642437 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071517491 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071430324 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071813284 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073518852 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071302304 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073470298 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068936021 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073044401 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071869967 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071438475 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073132847 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071348176 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077169416 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073065818 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079697769 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071642366 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071936235 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075566528 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070946191 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07151945 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0688232 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070842367 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068976031 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075784456 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075505668 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075738428 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073545372 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072157736 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071981621 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07193794 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072257083 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071959279 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080222207 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073823028 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071626599 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.082221553 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071897051 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072290802 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073700137 seconds)
  done (took 6.408889299 seconds)
done (took 132.925448589 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.21938667 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.190347721 seconds)
  done (took 1.891701485 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075419505 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.16923318 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075622429 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.0752844 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.1115168 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108747761 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076806287 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.075033032 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.077409858 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.075127476 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.142346288 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076672581 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073667955 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.0746367 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074803278 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.074832489 seconds)
  done (took 2.94100306 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108357317 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.188708578 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.084644302 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072858057 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.11734138 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.079727238 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.074805098 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078239898 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079675802 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072773224 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.109947167 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.085018053 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076534223 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.080492332 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.074634751 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076474921 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.077926219 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079867194 seconds)
  done (took 3.131018261 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098188684 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086777756 seconds)
  done (took 1.700483513 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.157687394 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106027678 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145461669 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.331032807 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130960281 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127450821 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133819871 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.127903685 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.117175217 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122043383 seconds)
  done (took 3.007097776 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106480288 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.108388051 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.311494274 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.105742426 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.085651933 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080309392 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.078210966 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082882176 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.077900191 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078981446 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.125858873 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077632337 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.075028962 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127813297 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.102318595 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.10986711 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073656248 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.08102355 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.082414547 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.073154617 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.079202143 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.082742517 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.182577116 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.081518872 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.103998032 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.078519979 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.080074522 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.07744254 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.076833432 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.081176923 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082543896 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.103338865 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.081527412 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.085594106 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.079937589 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.100633073 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07408205 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.103259035 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.077260031 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.075263786 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077981042 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082341074 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.075558702 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.082047963 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.078134077 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.080384145 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.083209182 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073776187 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.078132734 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.077452342 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.075235961 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.079530707 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.079256198 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.080361057 seconds)
  done (took 6.459101298 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107992744 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108532083 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071046417 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117389836 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109475348 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.073447733 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.108342471 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104151454 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.112793322 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072700366 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072150935 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072101442 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079811583 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.084579594 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116698937 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108497737 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072200203 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.073345594 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.111015877 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111159788 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072101276 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.10413168 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.103063735 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.111139198 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.07204211 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.073220189 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070991605 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071855852 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077149398 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.078543143 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071592207 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079300512 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.088651084 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07897271 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070915529 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071469868 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07121391 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.078999772 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079808993 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079802632 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.078261725 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071018113 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071576681 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072049274 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.07260711 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071072259 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07802846 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.079272924 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.078334539 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071949379 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072074084 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071435783 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071820284 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.079127086 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.078316578 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080360012 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079207805 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.072101434 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071659067 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.073427757 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080634655 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.080514575 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079668664 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072915972 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080328962 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071492616 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.08205939 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.086054381 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071886579 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072186642 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071701777 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071178893 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071801871 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.078062763 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.078478994 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072282992 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071133928 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071603147 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080359862 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077570027 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071407568 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07745853 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070854247 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071322276 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071606344 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072201562 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.077264103 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079099522 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072800259 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071046652 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071120227 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071660987 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070749132 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.077183605 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.078792053 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.078375522 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.07700812 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071487045 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.077123075 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077734932 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071749785 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.077069997 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070795292 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070869643 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070907165 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076141468 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.075664582 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07838371 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070568367 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069839922 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07604787 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078194603 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.210676279 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.079183026 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081799636 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.079243996 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.072168972 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082514305 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072468648 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080964368 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070094926 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081191868 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072129149 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07831858 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072184468 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.070900574 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071788918 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.078221709 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072463492 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.302730331 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071719563 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071473804 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.07907824 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.082463636 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072969366 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078028138 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.078414792 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071834857 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078739809 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071910248 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07941507 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071855134 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072045192 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070805634 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081103714 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071878667 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071428676 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071132684 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080747784 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070304252 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080918336 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077365455 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071605613 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.084907792 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077673611 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075835034 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.079284703 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072942848 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071816037 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072097242 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.074654223 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077328821 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078808995 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072509871 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071948684 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.077870743 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.081781584 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071561785 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.077653898 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07807512 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.078119681 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072054784 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071601997 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081537748 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.081653611 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.078671324 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077953292 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079037139 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.07200985 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07803481 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077919356 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071719597 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.086159935 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072157705 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.082495525 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.079049564 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077263257 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079233781 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.080215082 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.080717405 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.081359891 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.083539746 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071409392 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.071116727 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.078183604 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071672128 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071302701 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077834313 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072503254 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072515194 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.083402749 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06959513 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.079072196 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.07130985 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07909991 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071239464 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072411176 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083329817 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.072187806 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071780787 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077524971 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071286818 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.077181898 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080800237 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075813065 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071320146 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071565927 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077961201 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.078013806 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.07071649 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070619422 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071245343 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07603064 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075650191 seconds)
  done (took 19.290192611 seconds)
done (took 39.947684092 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172542402 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.119816527 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.214897429 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.20591034 seconds)
  done (took 2.334804028 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101271143 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066371939 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.082351799 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.091302243 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.067995348 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.079514218 seconds)
  done (took 2.058245991 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200439505 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.176563837 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.241904253 seconds)
  done (took 2.179863266 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367444532 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.153876448 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.220400256 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.510253617 seconds)
  done (took 2.916169677 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.111013413 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.103326563 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.081851092 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.115892075 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.089176419 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.065842515 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.138653381 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.073166447 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.104228843 seconds)
  done (took 2.509283457 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.134103283 seconds)
done (took 13.724009402 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.277219284 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.224569976 seconds)
    (3/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.222450869 seconds)
    (4/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.110508551 seconds)
    (5/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.218877977 seconds)
    (6/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.177820171 seconds)
    (7/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.072400963 seconds)
    (8/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.072005322 seconds)
    (9/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.14610306 seconds)
    (10/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.227716568 seconds)
    (11/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.083715125 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.169484356 seconds)
    (13/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.080780889 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.128951858 seconds)
    (15/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.19216324 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.079029834 seconds)
    (17/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.25789124 seconds)
    (18/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.071624065 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.095408883 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080856773 seconds)
    (21/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.077545904 seconds)
    (22/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.188466994 seconds)
    (23/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.08035278 seconds)
    (24/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.080810706 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.081417561 seconds)
    (26/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.202626219 seconds)
    (27/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.158095847 seconds)
    (28/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.147961073 seconds)
    (29/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.075357879 seconds)
    (30/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.212736871 seconds)
    (31/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.243237219 seconds)
    (32/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.129661039 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076946623 seconds)
    (34/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.154596747 seconds)
    (35/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.222663801 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.147148009 seconds)
    (37/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.086906542 seconds)
    (38/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.07957877 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.079776569 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.075835205 seconds)
    (41/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.085954884 seconds)
    (42/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.119379163 seconds)
    (43/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.070345681 seconds)
    (44/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.147200172 seconds)
    (45/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.068260283 seconds)
    (46/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.082019769 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.1022005 seconds)
    (48/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.089105496 seconds)
    (49/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.076957449 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.08938676 seconds)
    (51/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.146233236 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.091817167 seconds)
    (53/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.129157855 seconds)
    (54/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.203707306 seconds)
    (55/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.087845115 seconds)
    (56/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.195237997 seconds)
    (57/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.241706816 seconds)
    (58/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.185073256 seconds)
    (59/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.068947631 seconds)
    (60/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.094962581 seconds)
    (61/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.232966977 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.086374481 seconds)
    (63/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.16233119 seconds)
    (64/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.186104854 seconds)
    (65/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.078988515 seconds)
    (66/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.068684012 seconds)
    (67/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.199093973 seconds)
    (68/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.096202524 seconds)
    (69/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.086541651 seconds)
    (70/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.202428988 seconds)
    (71/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.15400269 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.069771633 seconds)
    (73/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.115216708 seconds)
    (74/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.080397133 seconds)
    (75/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.068485266 seconds)
    (76/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.430397372 seconds)
    (77/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.191278286 seconds)
    (78/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.10155882 seconds)
    (79/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.096194289 seconds)
    (80/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.229301954 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.07812018 seconds)
    (82/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.099754309 seconds)
    (83/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.160144725 seconds)
    (84/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.197271873 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.091009745 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.077402151 seconds)
    (87/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.068992553 seconds)
    (88/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.076951002 seconds)
    (89/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.069910654 seconds)
    (90/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.074501804 seconds)
    (91/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.189662357 seconds)
    (92/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.077587361 seconds)
    (93/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.077881434 seconds)
    (94/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.091579743 seconds)
    (95/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.070859087 seconds)
    (96/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.159935219 seconds)
    (97/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.078736038 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.084076338 seconds)
    (99/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.085360682 seconds)
    (100/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.076536567 seconds)
    (101/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.069637229 seconds)
    (102/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.23455082 seconds)
    (103/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.069455762 seconds)
    (104/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.068657368 seconds)
    (105/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.168152144 seconds)
    (106/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.077542018 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.091887499 seconds)
    (108/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.202352985 seconds)
    (109/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.168738642 seconds)
    (110/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.070562542 seconds)
    (111/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.076668863 seconds)
    (112/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.203003171 seconds)
    (113/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.175926192 seconds)
    (114/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.069107802 seconds)
    (115/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.080788119 seconds)
    (116/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.186313896 seconds)
    (117/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.150011996 seconds)
    (118/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.087964706 seconds)
    (119/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.082523437 seconds)
    (120/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.177304163 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.146513499 seconds)
    (122/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.092141678 seconds)
    (123/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.077891642 seconds)
    (124/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.078403698 seconds)
    (125/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.069327287 seconds)
    (126/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.167627071 seconds)
    (127/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.201119928 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.079512355 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.073348705 seconds)
    (130/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.095637102 seconds)
    (131/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.068663892 seconds)
    (132/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.22493011 seconds)
    (133/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.116072211 seconds)
    (134/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.146798477 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.138008495 seconds)
    (136/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.068844566 seconds)
    (137/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.095894024 seconds)
    (138/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.078408468 seconds)
    (139/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.069693254 seconds)
    (140/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.070157888 seconds)
    (141/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.174853576 seconds)
    (142/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.068961239 seconds)
    (143/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.077026612 seconds)
    (144/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.076040925 seconds)
    (145/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.079075631 seconds)
    (146/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.07069629 seconds)
    (147/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.069149823 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.091315194 seconds)
    (149/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.070034273 seconds)
    (150/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.068159632 seconds)
    (151/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.077103083 seconds)
    (152/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.087780698 seconds)
    (153/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.081321598 seconds)
    (154/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.077076643 seconds)
    (155/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.072549255 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.077892861 seconds)
    (157/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.175790367 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 0.146726892 seconds)
    (159/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.069709115 seconds)
    (160/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.070747701 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.093668652 seconds)
    (162/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.069207514 seconds)
    (163/341) benchmarking ("sort", Float64, false)...
    done (took 0.140082743 seconds)
    (164/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.074206901 seconds)
    (165/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.160465271 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075963334 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.078256329 seconds)
    (168/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.095253354 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 0.070098306 seconds)
    (170/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.068573449 seconds)
    (171/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.08584746 seconds)
    (172/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.14252683 seconds)
    (173/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.072432702 seconds)
    (174/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.159139946 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.095319501 seconds)
    (176/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.069005686 seconds)
    (177/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.069008132 seconds)
    (178/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.070079047 seconds)
    (179/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.230263141 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067506034 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.139874222 seconds)
    (182/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.068021081 seconds)
    (183/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.253902159 seconds)
    (184/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.068612157 seconds)
    (185/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.088853297 seconds)
    (186/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.173710238 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.080800168 seconds)
    (188/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.070852275 seconds)
    (189/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.071030128 seconds)
    (190/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.069447704 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.06821648 seconds)
    (192/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.069368865 seconds)
    (193/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.173567838 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.069747247 seconds)
    (195/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.214976851 seconds)
    (196/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.08236355 seconds)
    (197/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.070266223 seconds)
    (198/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.070139019 seconds)
    (199/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.072239889 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.135734831 seconds)
    (201/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.069797595 seconds)
    (202/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.073089419 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.150771361 seconds)
    (204/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.148296675 seconds)
    (205/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.069688223 seconds)
    (206/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.069510988 seconds)
    (207/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.06917346 seconds)
    (208/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.076534207 seconds)
    (209/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.069711691 seconds)
    (210/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.068970446 seconds)
    (211/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.077838795 seconds)
    (212/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.075852356 seconds)
    (213/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.069587695 seconds)
    (214/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.071670152 seconds)
    (215/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.078337386 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.156637606 seconds)
    (217/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068913523 seconds)
    (218/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.170222105 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.067435771 seconds)
    (220/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076330621 seconds)
    (221/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.069951649 seconds)
    (222/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.069624711 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.0876061 seconds)
    (224/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.079423262 seconds)
    (225/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.067693867 seconds)
    (226/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073828341 seconds)
    (227/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.069493791 seconds)
    (228/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.077162832 seconds)
    (229/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.077208188 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.076446333 seconds)
    (231/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.067403525 seconds)
    (232/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.075963276 seconds)
    (233/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.068606047 seconds)
    (234/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.068838856 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.15199145 seconds)
    (236/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.070493052 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.07174466 seconds)
    (238/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.076422642 seconds)
    (239/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.071490509 seconds)
    (240/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.070156006 seconds)
    (241/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072629391 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.069041846 seconds)
    (243/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.07693047 seconds)
    (244/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.06895805 seconds)
    (245/341) benchmarking ("sort", Float32, false)...
    done (took 0.141411101 seconds)
    (246/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.069799577 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.147677555 seconds)
    (248/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.068926468 seconds)
    (249/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.069112519 seconds)
    (250/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.08214583 seconds)
    (251/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.081301795 seconds)
    (252/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.079365422 seconds)
    (253/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.176799717 seconds)
    (254/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.074033253 seconds)
    (255/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.072656752 seconds)
    (256/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.156119643 seconds)
    (257/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.071778118 seconds)
    (258/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.0700744 seconds)
    (259/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.076374909 seconds)
    (260/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.06946477 seconds)
    (261/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.180659654 seconds)
    (262/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.069335079 seconds)
    (263/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.076093755 seconds)
    (264/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.072690073 seconds)
    (265/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.069066209 seconds)
    (266/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.069901414 seconds)
    (267/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.067596885 seconds)
    (268/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.069529066 seconds)
    (269/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.07035587 seconds)
    (270/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.069320925 seconds)
    (271/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.071750809 seconds)
    (272/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.067656945 seconds)
    (273/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.069840035 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.120726995 seconds)
    (275/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.070843024 seconds)
    (276/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126968567 seconds)
    (277/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.083229012 seconds)
    (278/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.073867786 seconds)
    (279/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.069114227 seconds)
    (280/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.07616003 seconds)
    (281/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.183586493 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.068588889 seconds)
    (283/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.069799908 seconds)
    (284/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.06962812 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.067403158 seconds)
    (286/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.068689585 seconds)
    (287/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084739209 seconds)
    (288/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.071664541 seconds)
    (289/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.069891723 seconds)
    (290/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.068642146 seconds)
    (291/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.076826998 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.068944979 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.153565186 seconds)
    (294/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.070158212 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.088140817 seconds)
    (296/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.077218216 seconds)
    (297/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.069775129 seconds)
    (298/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.070024249 seconds)
    (299/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083918363 seconds)
    (300/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.070217625 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151034809 seconds)
    (302/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.076517608 seconds)
    (303/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074451614 seconds)
    (304/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088901915 seconds)
    (305/341) benchmarking ("sort", BigInt, false)...
    done (took 0.264559679 seconds)
    (306/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.139905922 seconds)
    (307/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.069959834 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067605565 seconds)
    (309/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.06815312 seconds)
    (310/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.069807416 seconds)
    (311/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072352874 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.26564674 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.129474427 seconds)
    (314/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.089412154 seconds)
    (315/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.071016156 seconds)
    (316/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.070080966 seconds)
    (317/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.088487189 seconds)
    (318/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.081209823 seconds)
    (319/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072475889 seconds)
    (320/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.069193571 seconds)
    (321/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071907788 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087892486 seconds)
    (323/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.069181345 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.081217271 seconds)
    (325/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.068186817 seconds)
    (326/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.069043619 seconds)
    (327/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.067372106 seconds)
    (328/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.094901204 seconds)
    (329/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068948751 seconds)
    (330/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.071504057 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.13722382 seconds)
    (332/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.136085332 seconds)
    (333/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.070162829 seconds)
    (334/341) benchmarking ("sort", Int8, false)...
    done (took 0.153256081 seconds)
    (335/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.151078351 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.068947833 seconds)
    (337/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.071933453 seconds)
    (338/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.13038873 seconds)
    (339/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.069494043 seconds)
    (340/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.072924189 seconds)
    (341/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.069838333 seconds)
  done (took 38.086532477 seconds)
done (took 39.669559733 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.091395747 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082608971 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080451667 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.077560314 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081017758 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.079738489 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.080833671 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079254845 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.08058372 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079961343 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.080061723 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.068767938 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.07687389 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.084109285 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.078238224 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.085315208 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.081626059 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.084645755 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.070208695 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.084229608 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.096633864 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.081432256 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077500265 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083060063 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.068990045 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.078889506 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093360575 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.090252907 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.07582504 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07816475 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076700531 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.087762018 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076859112 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.075351002 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078497462 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.074672524 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.078376013 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.076003743 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.093727134 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074868301 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.069437549 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.08162386 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.076505706 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076971531 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077484148 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080618686 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074613313 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.082454258 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068800462 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079954596 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.092811852 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074443587 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.075792225 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.077229299 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.074231997 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.078586475 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.07602717 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080815386 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073849124 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080269967 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.080726475 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077605564 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068383483 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077143055 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.07633136 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.076853825 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067723143 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074075501 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068556541 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068499132 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.06795514 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077552209 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.075583713 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073800049 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.068676656 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068534735 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067879914 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080851628 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074868101 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.078053512 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068719336 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074238902 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.07333327 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068728817 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073926802 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080462517 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.06784113 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068735766 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067771237 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.082825988 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075549866 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068598433 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.08053538 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074487009 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074473047 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068489315 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068128306 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074021906 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.076953444 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.068526394 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067883764 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074155461 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073778175 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.07737264 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.069189751 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074465576 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073891159 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067659226 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07743178 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.076334991 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.077642314 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.082423201 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.077421401 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080968634 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.069089513 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.067837396 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.078670524 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.069219544 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074261141 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076873077 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074578974 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.077465232 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.069304673 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.068357166 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074422181 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075304545 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.068985814 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.06910702 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.069170131 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.07846209 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.076077193 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.067533725 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.068949721 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077321252 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077471654 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067691306 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067401338 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.077207245 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.067894072 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.073693263 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.074535027 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.07656111 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.067396124 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.067790092 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.217811255 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067273958 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.069197994 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.075416612 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07504505 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.069565609 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.077765996 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.075130949 seconds)
done (took 13.351260719 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067634778 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106513629 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.076861761 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.086657005 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.082076539 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.071015876 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.074134341 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.087325137 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.074070678 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090299746 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.098638143 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.09204653 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.097490194 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.069093303 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069614636 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.070794897 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.068784931 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07724871 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.084825637 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.09372607 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099146146 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.069655937 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079168249 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086727637 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.08062405 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.086493443 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.071092122 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.070889987 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.072686887 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.128372476 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.096310148 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.069764213 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070810423 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083786554 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.084571141 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.077276579 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.070845389 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073946241 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.073581723 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.069857883 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.071227151 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08450593 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073841965 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073607035 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.071091822 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.070665356 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.069742498 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073078189 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083846569 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.073385048 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077595187 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081601469 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.071331898 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069746439 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.068024198 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073632347 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069795842 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.070245856 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069987678 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069807578 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.070482271 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.07227769 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070533242 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070414071 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.072987651 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072542182 seconds)
  done (took 6.801675639 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083378701 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.096064456 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.08501207 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.085331585 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.069434638 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069956133 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.070524964 seconds)
  done (took 2.266074873 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068319341 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078226943 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.082459556 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.082583087 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.092010487 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07980745 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070016859 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.102733779 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.069123088 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078915063 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.086184456 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.084088771 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073134008 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.082908248 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.070400944 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.082079218 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.06997741 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07744979 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.078233419 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.083935793 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074561673 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100369182 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.083616433 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070551757 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.083992213 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077205989 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.072566083 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070822633 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070498054 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069832818 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069578412 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.09261665 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076922012 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082363599 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070748078 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.06911347 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.074600301 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070980567 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.074230127 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.078869855 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.073716428 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069757042 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070880046 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.070047006 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070924331 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.074354308 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.07091982 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.069401789 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.069659417 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077758022 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.0688328 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076468971 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.072084763 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074643406 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.074710864 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074456996 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077137852 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.070171323 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077486556 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07645333 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069748024 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.083073666 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.081598095 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.073904517 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.081789782 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.078634775 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076929646 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.074124389 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.069885814 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.069375314 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.070207266 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.081649771 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.073125575 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071909943 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070809246 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074703309 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.074061963 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.085477015 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.085482182 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.083066554 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072180036 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.070254345 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073591534 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.08541165 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07519305 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069988817 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070950637 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069132503 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074820454 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.070263924 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074433632 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.070003223 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076958845 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072552947 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.073116896 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.078531451 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.070104026 seconds)
  done (took 9.052485526 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070366533 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.070555985 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.070966826 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.070945069 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.07188614 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.071430675 seconds)
  done (took 2.166486154 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091906722 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.070522078 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082594694 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.071058004 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.092961005 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.077747545 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.077557826 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072320305 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.087103409 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.081550347 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.077293561 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079622429 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076745071 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.072589576 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.077642598 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.071650404 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.076641827 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073884473 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080483672 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.073238697 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.087280019 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.071858467 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072517713 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082621195 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073727369 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071400356 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071170302 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080775737 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080097188 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.071800801 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.0722372 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.07323905 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.079005337 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.071900472 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.077432495 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.078986355 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070333365 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.07592872 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.073053437 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.07368442 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.079302076 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072506043 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072989892 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.076377349 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.072317499 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.079365401 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.076374284 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.074267311 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.077164892 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.076166561 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.076585635 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.071914646 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.073250568 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.076106027 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.079511086 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072224174 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07689242 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.077024233 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.071850085 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.079145867 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.070715617 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073283768 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072461526 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.073227381 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075446257 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075750796 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.079316197 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072825196 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072614127 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.0702438 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.076246369 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.070676072 seconds)
  done (took 7.169778886 seconds)
done (took 29.148348435 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.545347292 seconds)
  done (took 2.223197472 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.588193812 seconds)
  done (took 2.309552823 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.387306285 seconds)
  done (took 10.10505756 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.305862877 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.327942947 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.736292572 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133267786 seconds)
  done (took 3.25623174 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.757277248 seconds)
  done (took 2.488167419 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231667159 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.224400407 seconds)
  done (took 2.198134898 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.339063766 seconds)
  done (took 2.063112209 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.158776957 seconds)
  done (took 2.877163853 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.228805553 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162627284 seconds)
  done (took 2.120772602 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.547312472 seconds)
  done (took 2.272717615 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.312423442 seconds)
  done (took 6.045241744 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.235028043 seconds)
  done (took 2.009282472 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230926399 seconds)
  done (took 1.961681174 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.060840472 seconds)
  done (took 3.785629466 seconds)
done (took 47.448405375 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085087642 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087386875 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.089396547 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.085718068 seconds)
  done (took 2.043959171 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076290916 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.073972764 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.078179816 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.077716562 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.075316604 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.076132973 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.077109255 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.07400127 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.076106254 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073878903 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072670273 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.074381257 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076654146 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073741634 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076308765 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.07790151 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073921203 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073701558 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.076180501 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073963974 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.076748935 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.073630719 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071997968 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.073735435 seconds)
  done (took 3.529555607 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.080654546 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.076084891 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.079142965 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.07476921 seconds)
  done (took 2.049246056 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077608311 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077584607 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.08676322 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.094340034 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.080066142 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.081276192 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.088011425 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.08852618 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.069177874 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.090870148 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.07159593 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.070644632 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070323572 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.090134186 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.087290867 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.066479472 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.067779052 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080928848 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.08048812 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.082702937 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.072270217 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.069538746 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.079535669 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.080469881 seconds)
  done (took 3.642613997 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080639072 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.068364431 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.0829147 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.095396742 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.096019228 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.069230966 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.083579327 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.096787982 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.132532358 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.069199718 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075201194 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.069651474 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.108810708 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068780007 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.085248875 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.11223777 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115575312 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.073215731 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.102322924 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068732573 seconds)
  done (took 3.500882982 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076645156 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070799384 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.073232524 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06883755 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080057065 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.077004172 seconds)
  done (took 2.197354612 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069532326 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.071397296 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.07294157 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.07569882 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.070961476 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.070997196 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070471467 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069667046 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069527897 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.070014247 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.070416212 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.070834843 seconds)
  done (took 2.594906798 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.156571128 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.073616342 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.074334514 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.068576296 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.074878919 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.070019082 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.085370432 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.072719397 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089800229 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.070592153 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.070248086 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.07285844 seconds)
  done (took 2.724501129 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100987897 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103610853 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150661129 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121848499 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121168881 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101097584 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124158216 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.099629583 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.165550726 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.141774909 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121316352 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097599183 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090816674 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.073432847 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104780248 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106086718 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141575905 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076484794 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118499965 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.169236375 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119481284 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.117233742 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126900494 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12112902 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085576221 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126865535 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099092691 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107247819 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128368657 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11391362 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124003712 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.102306759 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.076072407 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.074732786 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15424795 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10484307 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110886495 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.097921623 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104364677 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092239648 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112001628 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.072962821 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.09102131 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110304409 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088227851 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121559036 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.091888971 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108430964 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085049186 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.136017463 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110852972 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103600602 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089985221 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108735082 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134595736 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099032278 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115133884 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110927973 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086065908 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.121659142 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.104500766 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.259867806 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097722959 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085488134 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.165338405 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093589345 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.117190099 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117816755 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.086685486 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094040512 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107088 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13502159 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111344621 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.111952412 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11830655 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099702205 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114350941 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.095682093 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.132417866 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097247775 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.076523002 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108893169 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133612919 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089257955 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104988655 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134914531 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096041056 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08161101 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096872765 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.123462707 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084741143 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.101280547 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07396546 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.102638047 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11202647 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09988911 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116892365 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112062204 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082019424 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130168134 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113212512 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076280401 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122481788 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103664722 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158447681 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100604697 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.080183107 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105119455 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097913297 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.153709015 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089538316 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0846465 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103401498 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146585379 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098684257 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.175459082 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100656521 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134312816 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102056983 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092031898 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079308844 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.093824825 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10611711 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110866681 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105562673 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091835795 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.080491916 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090096772 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098862894 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.258088236 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083888431 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119254245 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.106807272 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.07949518 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093569181 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.083850174 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130253906 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.082281022 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113019261 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129429636 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.08269097 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109320819 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102570157 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112591492 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.101860313 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110623647 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144582847 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.121135518 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083786595 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.087575758 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112282134 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.146612704 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.118084156 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089437738 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.080471844 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104579538 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11566506 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101860272 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111920587 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105076415 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114199603 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102380675 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146238517 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122459589 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096438154 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09997541 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10110449 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.128441646 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080747845 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160437815 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098893278 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123182231 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089075146 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146380939 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.11940592 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094304131 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088936509 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100257891 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.109136996 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110867748 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148629053 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.100202701 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.076235459 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098121163 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137153489 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080542461 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104845915 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.095423078 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.09773817 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122963516 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.087315233 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085234352 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.071341639 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105377686 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139098076 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.072761157 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116605749 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.284250304 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104251697 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.109038349 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.073697857 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104202172 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143372583 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110414016 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14549002 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120440543 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105126405 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123180547 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.105235604 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110116347 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083730761 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.129502541 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.138850998 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100607196 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094804457 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139175278 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122513396 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.139418489 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.101008722 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119411621 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.11000373 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105982615 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108423203 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.105219183 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149662978 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125370977 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.129795153 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09035517 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111064319 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113615106 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141377367 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086640565 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121484242 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.079514235 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116660178 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.081587903 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111999887 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.083766187 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.116192663 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083792658 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104949716 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.073726175 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.078580127 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.147147441 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.117693426 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094128919 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09075038 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.142547719 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13655123 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.085142107 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106213383 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109121517 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105364742 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104877127 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.112540994 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.088903666 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098193597 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.278338499 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084138956 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.08652952 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10400958 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098988508 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112653583 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088091793 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078816425 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140696172 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108830801 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099276402 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081594133 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099481942 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.125836094 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093866422 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091404788 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109438292 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108285326 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144809424 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094698417 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.102509044 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122331979 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084309959 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096151499 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.073260581 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088813324 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.07951151 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113271722 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080232452 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113551166 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.072540897 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135229494 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091644725 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097474537 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107314831 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105653773 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133762689 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096509023 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133271051 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094947584 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107022682 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112719313 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099099291 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084890102 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108377894 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100730954 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114167699 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100117604 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110519367 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115036459 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098732915 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.147183382 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094253216 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126586664 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111070061 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112427459 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109043657 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12116572 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142860682 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117655731 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11679791 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079456321 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087301526 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111304475 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104924167 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150478779 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106693312 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.075613042 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089568901 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094068603 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099192006 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.272783813 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088365383 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147811737 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092090993 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.091606301 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11841116 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.095002627 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10205507 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080384732 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099940449 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.105440491 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098949669 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099500904 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112248625 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121832288 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118618477 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.137933183 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.103396912 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.096878394 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122905754 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115750486 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11538902 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090319789 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090655958 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128295631 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107531425 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.133015076 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.105028089 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099030301 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107151528 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094730364 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104068832 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101262502 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.114748574 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084981685 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.081086397 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.072627593 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.076690335 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123151319 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113713769 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103935625 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103125134 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.076205158 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108633779 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104307969 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075887279 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092014064 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098696252 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103896353 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.0885144 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096638151 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.118735767 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.095121844 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108817274 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104278211 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134665948 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.105218331 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093663542 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148628135 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133537501 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092932916 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098322534 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.075966712 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083552267 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106893975 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149228029 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122031258 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.080861837 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087016524 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.080248894 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.255888637 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073841253 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.091188362 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.093244979 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108454616 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097069152 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.11721751 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10881354 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08000311 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10739943 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10213063 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09659768 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100965589 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106247603 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.109972555 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.128668562 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105457193 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101835616 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080327437 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084729395 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079388043 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083372785 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10617267 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081581845 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080550795 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134246216 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.095680904 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108706483 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113743532 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089514599 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079773851 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137657146 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.073436051 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139435794 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075568237 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087032874 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085097291 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083500334 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098046859 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109858101 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101318893 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117626347 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110996879 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109508558 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115879843 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161514712 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075521407 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14924596 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080481884 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080125537 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080532583 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119395374 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09458589 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110678552 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146300281 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094641786 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097570899 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081820539 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133616914 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.10219909 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108449901 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087795148 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083410388 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133342228 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084165309 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.076067602 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091389794 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11626937 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.076439 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10777964 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088329845 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.249324335 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115593516 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.635389929 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095409979 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.080392473 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093408343 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.147243634 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133552933 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08751737 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11332671 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.123691841 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094853215 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088517436 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112450616 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.186951886 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078449579 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099063063 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.108099462 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102577962 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097118414 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096086924 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090414738 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.096694134 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.090024214 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084521536 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112586357 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092177397 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096382975 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102523137 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087609866 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084804975 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135565513 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.109259548 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.086864527 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093370914 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105261356 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089283268 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09232157 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.072758922 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118959838 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095986671 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106630411 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.096229903 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112762131 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125413319 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092194811 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117416852 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.09342747 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113004639 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089099949 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.082696087 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107357541 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.08262183 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081853874 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122643011 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.08900504 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.097770879 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109358929 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.100208053 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119258981 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123505228 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116400708 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102394768 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084089823 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091744569 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.0924323 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079625696 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081950065 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.0781467 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.079848302 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110974188 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.255509684 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085919982 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11631694 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083839853 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1061647 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.105347144 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114461533 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087452199 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105797401 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114044974 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093892505 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107793747 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104824118 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132794413 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150328658 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104054789 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127920421 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1377328 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.080775181 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079773969 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072374887 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119755859 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083265228 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.084702205 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085594009 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137800756 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.086638711 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098957266 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.235803555 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084794308 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086249561 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102259623 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.073884184 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08773963 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112815993 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089288477 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085219011 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103534196 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088329734 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123334218 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116539478 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094377475 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087535036 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085784375 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098618484 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.110051012 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.134252568 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094872415 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.07972524 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111583252 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108276526 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128914321 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.07710545 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085037041 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.135108673 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09674248 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108970011 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085085045 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126153601 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138293159 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095022258 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137416959 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075651959 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087717685 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094129838 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.13136902 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079117736 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092564845 seconds)
  done (took 67.507232683 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.158309158 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143506097 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083619714 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098762894 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188751519 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198708207 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120894029 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097734253 seconds)
  done (took 3.027279269 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071621305 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.086821975 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084859188 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.214237192 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.113367932 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.071386598 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.077411165 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.085791222 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.072375193 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.070996377 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.106663972 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.071243763 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.072190736 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.380598186 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.070295263 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.076175786 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.071991528 seconds)
  done (took 3.691481231 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.326191513 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.455887992 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.223700101 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.694637924 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.13832133 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486259678 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.079690108 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.086309116 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.634670821 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372425818 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.132126166 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.090891573 seconds)
  done (took 18.622945891 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.079368999 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.081902969 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.082620713 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.084725554 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.0788137 seconds)
  done (took 2.299173139 seconds)
done (took 119.185450762 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08654068 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.178015867 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.071948982 seconds)
  done (took 2.181449555 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.085686964 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.085667667 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.085573001 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.082839029 seconds)
  done (took 2.243205448 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.077320159 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.081181064 seconds)
  done (took 2.052712208 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.229357491 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.180422926 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.094978953 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.086334849 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.083982694 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.084220693 seconds)
  done (took 2.158582161 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.075419134 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.075766373 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.076425942 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.076112649 seconds)
  done (took 2.195403383 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.071270004 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.069959887 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072182352 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.074987905 seconds)
  done (took 2.182821838 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.089155723 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.087993108 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116620042 seconds)
  done (took 2.183713622 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.087765164 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.087163234 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.082361994 seconds)
  done (took 2.150896008 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.113794591 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.101517412 seconds)
  done (took 2.106151435 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.0838189 seconds)
  done (took 1.977669474 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093481931 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.100994789 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.144570326 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.110673451 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.145533444 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.130997098 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.081771152 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.082466104 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.078105499 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.077238785 seconds)
  done (took 2.932789484 seconds)
done (took 26.852247313 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.08026354 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.373194714 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.364307384 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.092179531 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.676838285 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.361043358 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.010585022 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096660484 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.105124715 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072743472 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090666037 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.654680569 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.998763756 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.331627863 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.983702894 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.334611522 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.656170607 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07293772 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.07219718 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073059523 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.990804087 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072231615 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072568104 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073219406 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.655736651 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.378366535 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073919748 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.329953235 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072393158 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075507311 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.361360567 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074291835 seconds)
  done (took 16.597493995 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07389222 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127686873 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077465958 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088874674 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.075206858 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.074235762 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.075745169 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.073555755 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115975327 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073231392 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091203039 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072481965 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.076640982 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074382054 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093123919 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072925441 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074505095 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.077281281 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073096175 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.074178704 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.091751823 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072557606 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.07374897 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073565307 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073813266 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.086401055 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073483548 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071755511 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073224012 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075136355 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076352799 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074581573 seconds)
  done (took 4.471589235 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.124984914 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.132932044 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077981487 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.114758981 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.123761789 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.074867404 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156282421 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096969422 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.119394552 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073368884 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091154499 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072720771 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.109628008 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074682517 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09435756 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073105536 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07452681 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073558207 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073030847 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07390135 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.09236698 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072922194 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073255519 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073601896 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073693744 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.088033163 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074370116 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.073026332 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073089519 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075716615 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.077300006 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074434459 seconds)
  done (took 4.749070549 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072444106 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.075720079 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.084698003 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.085185244 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.071504139 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.073186358 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.074152631 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.071051108 seconds)
  done (took 2.530143159 seconds)
done (took 30.265488299 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081839796 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.071337648 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.075363354 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.092316304 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.078225568 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.074517685 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.068786934 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.078878562 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.075163099 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.075400197 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.077763012 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.071512961 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07419884 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.06936652 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07663446 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.070095007 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.076690399 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.074409447 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.074897854 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.075992309 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.072696448 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.075847717 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.078461489 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.074625732 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.075184923 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.075211334 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.079183047 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.075966317 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.070752769 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.072971845 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.072607027 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.086229976 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.076577246 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.076761077 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.070383862 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.070180608 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.075053274 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.072222679 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.07672941 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07960812 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.072888282 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.079146793 seconds)
  done (took 5.047192644 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.091504065 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.099413325 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.091920433 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.086893061 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.113210615 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.086179155 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.09589956 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.084746446 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.082881926 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.095896728 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.078717719 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.084168418 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.085980929 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.080517651 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.083374008 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.079379398 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.08530502 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.078174109 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.083076683 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.083306739 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.096160184 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.076241999 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.083558782 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.084278102 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.078583949 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.084358251 seconds)
  done (took 4.18689029 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.076570937 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.092439357 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.096942877 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.147011437 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.114542528 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.086640067 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.086870599 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.102179114 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.10537109 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.07193966 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.076481303 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.09973474 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.101831548 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.079659586 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.111104154 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.091016648 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.084658424 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.074166193 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.078434057 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.107512373 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.095192992 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.091035684 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.104942455 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.092397739 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.071245235 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080962017 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.0793056 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.087375172 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.079618638 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.084435525 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.076708908 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.076251355 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.07277588 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.08542084 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.079557291 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.070123145 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.094829344 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.085261687 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.088093502 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.11082253 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.082807054 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.073507997 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.102584297 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.137732892 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071537683 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074944509 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.075911592 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.084647006 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.073588166 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.102007252 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.091722763 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.071930142 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.091168821 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.073876642 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.073604219 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089899846 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.073847867 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.074096555 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.08449132 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.078367034 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.093702584 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07752813 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.093964716 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.071735701 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.08341111 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.073094719 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073591122 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.070703847 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.108831848 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079666608 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.125640273 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.073204414 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.070209774 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.084389543 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.083404244 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.079363505 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.071998322 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.092650607 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.084780288 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.075639615 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.08362973 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.075042658 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.075508915 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.108156149 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.070938041 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.07006876 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.069677212 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.074641518 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.075381175 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.073034167 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.086534966 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.071507015 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.075781199 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.088039001 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.072320889 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.072546088 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.074799869 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.073769956 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.071498149 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083180434 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.075890538 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.073418722 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.084223987 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.073214652 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.075329633 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.087098754 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.081456702 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.071594402 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.073927886 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.074443487 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.073529868 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.076396065 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.075246988 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.073993549 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.079564793 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.079474501 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.078076285 seconds)
  done (took 11.729222592 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.168241667 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.159382836 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.073227527 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.154384626 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.080498357 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.076914636 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.155826266 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.092965967 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.073216996 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.074192282 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.071926711 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.101853094 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.096587081 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.110735629 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.077823266 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.073987655 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.098844279 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.106680392 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.158368574 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.153126515 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.096367286 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.080406586 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.074901154 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.073794943 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.074257866 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.081809898 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.091246016 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.081393565 seconds)
  done (took 4.785941577 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078013654 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.08505398 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074558755 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.096285284 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.091773872 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.072939098 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.07451091 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.073626596 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08963657 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.079851576 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.072752017 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.07700972 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.076494643 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.073125412 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.072998903 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.079455125 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.079017508 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.072009136 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.076396847 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.0776977 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.083450783 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.098942867 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.077051292 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.07290518 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.075288683 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.072696588 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.07937747 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.08199898 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.071700041 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.102109277 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.069934643 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.077048981 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.087075882 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.073491546 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.072408476 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.07353722 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.07263468 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.072840765 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.072919156 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.07043491 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.070359264 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.077436443 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.071115696 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.079287991 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.086534549 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.080228786 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.074130686 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.077926085 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.07489954 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.069027404 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.075460898 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.07547468 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.074703899 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.080973567 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.075998249 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.074826756 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.073756004 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.103872934 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.079173064 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.072057505 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.07162969 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.071188713 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.074312573 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.080405272 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.089298512 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.07438596 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.071138264 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.072541996 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.077607736 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.086442973 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.071976116 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.07760012 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.069247355 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.072754226 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.074874208 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.075597618 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.073795286 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.070935288 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.071906286 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.072704952 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.072707108 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.072099838 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.071956266 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.075123419 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.069912767 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.071087856 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.073213072 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.073817129 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07919355 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.071725786 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.075176065 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.07374312 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.071690105 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.075265957 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.077629179 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.075719107 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.092926978 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.081659834 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.073177801 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.070635081 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.087189481 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.074375241 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.072263053 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.079366511 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.077060845 seconds)
  done (took 10.030001088 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.09600872 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.074325569 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.091933468 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.099441455 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.083410144 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.078097322 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.086977829 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.073553834 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.089530213 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.072284815 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.081864188 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.071249049 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.086415519 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.081778488 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.073950549 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.082860037 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.075756 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.093260433 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.087760214 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.070860465 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.081549773 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.085875044 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.085208632 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.091100016 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.090426322 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.090773489 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.08472085 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.075122566 seconds)
  done (took 4.313184869 seconds)
done (took 42.005271434 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.993803425 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.164576785 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.987655744 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.236221782 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.040849162 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.229815379 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.109216681 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.984902642 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.117432499 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.009602784 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.306252219 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.348758701 seconds)
done (took 69.5134297 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.005544344 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.12827978 seconds)
    (2/2) benchmarking "String"...
    done (took 2.210311395 seconds)
  done (took 6.248195483 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.581422522 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.991351572 seconds)
    (3/3) benchmarking "different"...
    done (took 2.035287863 seconds)
  done (took 8.518315864 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.075702977 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.619985214 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.238410659 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.98845534 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.989411204 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.399069004 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.798323008 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.453078558 seconds)
  done (took 33.398502005 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.130506427 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.171287905 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.710954701 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.745870076 seconds)
  done (took 16.719707261 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.603097448 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.250629615 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.251212306 seconds)
    (4/4) benchmarking "different"...
    done (took 2.242910688 seconds)
  done (took 11.318716882 seconds)
done (took 88.295055784 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.992311097 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.169396165 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.030307647 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.1379191 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.996186559 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.01513227 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.002189923 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.011269207 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.988547315 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.984783946 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.415358987 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.986382415 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.989250623 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.022079675 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.984961765 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.004862227 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.592125062 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.006979972 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.01365121 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.479807641 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.503318617 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.00690206 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.991929357 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.043034692 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.03068929 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.031782176 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.595887455 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.997991506 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.601597335 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.007477509 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.168875899 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.993416577 seconds)
  done (took 211.706512197 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.993061942 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.142648531 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.216244783 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.029463936 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.649488439 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.181985129 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.135620014 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.691632515 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.993471768 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.994395224 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.312328964 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.991483663 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.341094354 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.938040693 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.990597507 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.003118632 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.240366903 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.329948514 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.989291984 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.174571487 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.998741499 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.104056661 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.065645303 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.285500537 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.029256556 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.997324808 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.999949464 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.005661304 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.177355378 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.212276101 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.019832281 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.00623479 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.192131447 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.855750167 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.012205271 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.992422555 seconds)
  done (took 179.214858248 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.160409668 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.998551423 seconds)
    (2/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.002933658 seconds)
    (3/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.061118016 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.128307305 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.74697695 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.720765663 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.996111743 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.997674347 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.99627804 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.005827881 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.001158768 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.068064044 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.582167722 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.002569475 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.996165071 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.996386206 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.718361478 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.992057231 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.994363051 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.997365822 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.061785523 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.365832616 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.12715615 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.99617162 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.009212128 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.133446372 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.003671744 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.0000569 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.134064721 seconds)
    (30/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.000676467 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.998256047 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.078289122 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.129020206 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.005205787 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.07883872 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.00150804 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.48552573 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.994787682 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.999873755 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.000106667 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.062740933 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.992452988 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.100074319 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.08743943 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.983322999 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.006850242 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.062989451 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.676535383 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.995279454 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.998314811 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.997056355 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.001068075 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.004167815 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.765066147 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.999383088 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.022208472 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.60726292 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.000143375 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.002138014 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.003219329 seconds)
    (61/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.000855883 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.998544801 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.001655188 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.006212076 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.039868837 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.809592528 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.430234161 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.388869018 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.810140814 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.002387079 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.248637211 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.049836212 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.00179544 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.080908699 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.992434245 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.998495993 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.996640686 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.99727249 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.094958088 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.082598497 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.998537514 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.135064144 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.001028271 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.000082695 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.523341217 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.80041085 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.993491009 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.014860434 seconds)
    (89/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.99609188 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.057817124 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.99984486 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.001217643 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.00598425 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.094804952 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.997441454 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.999807085 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.001596901 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.092676867 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.995984258 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.553611653 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.220860315 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.06992574 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.245523001 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.227311585 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.998675028 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.983794643 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.017971738 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.999344813 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.001424352 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.01129686 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.999678583 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.001341213 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.002734582 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.000771947 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.998346094 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.003301648 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.014652779 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.995473817 seconds)
  done (took 437.003549769 seconds)
done (took 832.05009038 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.713722287 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.779878299 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.617918666 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.656903892 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.624910882 seconds)
  done (took 15.31638046 seconds)
done (took 17.24155108 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.035909678 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.013860717 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.003064039 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.060497753 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.024370584 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.013239083 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.050306845 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.050868614 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.028433576 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.013727452 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.06355688 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.014194242 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.03745435 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.032793884 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.085034985 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.038579708 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.014156366 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.008494922 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.074529182 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.013334808 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.020112229 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.010638788 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.017370956 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.068247251 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.092131359 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.023262311 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.014677496 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.066770196 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.022241793 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.061860869 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.070164235 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.034180151 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.045402128 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.090518876 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.07085916 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.094589892 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.020408586 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.093626249 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.018610196 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.108156089 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.067195645 seconds)
  done (took 85.712457928 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.016757844 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.141415259 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.220393092 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.040417386 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.010499936 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.225406131 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.062872385 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.143218933 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.13785862 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.224942209 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.24466899 seconds)
  done (took 25.399300076 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.012928997 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.148550815 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.223095145 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.043622349 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.035231335 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.228250597 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.067518339 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.132407177 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.121015363 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.227165993 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.229179461 seconds)
  done (took 25.403210664 seconds)
done (took 138.44517699 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.385655204 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.032385943 seconds)
  done (took 6.346492162 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.005990862 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.024451404 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.159076187 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.009018538 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.010595589 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.009746675 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.010949031 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.013191404 seconds)
  done (took 18.171640205 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.008452156 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.011229341 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.010340846 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.009085753 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.009471426 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.008032793 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.007680846 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.008348176 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.009400349 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.010203639 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.007914939 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.010720127 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.011834009 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.011338755 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.009560204 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.012541411 seconds)
  done (took 34.085359722 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.010350498 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.008489856 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.011873204 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.010866668 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.010951868 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.009957432 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.012716669 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.010294626 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.011650076 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.009466322 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.011228982 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.012423707 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.013271116 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.012003553 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.013314377 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.011307187 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.009735255 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.012088977 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.01438366 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.011036014 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.011925101 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.010872547 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.01712831 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.010752256 seconds)
  done (took 50.20772398 seconds)
done (took 110.751010493 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.189490262 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.830384208 seconds)
  done (took 8.950073966 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.017392621 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.013514137 seconds)
  done (took 6.018043068 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.013030468 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.011309125 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.015352076 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.013321997 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.013498253 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.013664268 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.013654268 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.015340495 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.012099415 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.013730022 seconds)
  done (took 22.067177517 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.013854732 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.013559216 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.012493585 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.016551967 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.015413769 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.013226921 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.014919908 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.015092918 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.013808388 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.019578748 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.012805327 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.014411962 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.014375295 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.014300476 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.013506786 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.016025021 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.014914961 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.015858425 seconds)
  done (took 38.196190908 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.015447353 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.015498994 seconds)
  done (took 5.964658615 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.015992946 seconds)
    (2/7) benchmarking "second"...
    done (took 2.015752281 seconds)
    (3/7) benchmarking "month"...
    done (took 2.013685779 seconds)
    (4/7) benchmarking "year"...
    done (took 2.016318363 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.014084225 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.014825856 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.01675964 seconds)
  done (took 16.042825167 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.014495898 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.169437194 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.220346846 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.624013626 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.01598034 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.020570113 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.896917952 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.018527026 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.019371743 seconds)
  done (took 21.933538443 seconds)
done (took 121.106345824 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.868517234 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.013642909 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.318841219 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.083828981 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.085407455 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.310935744 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.031090265 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.564939256 seconds)
done (took 44.211963407 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.122870288 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.01526693 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.045014978 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.038762569 seconds)
  done (took 23.031452764 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.023751344 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.347203566 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.036805242 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.029381755 seconds)
  done (took 23.382950333 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.392674919 seconds)
    (2/2) benchmarking "read"...
    done (took 2.372152811 seconds)
  done (took 6.70614138 seconds)
done (took 62.182456212 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.017463748 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.020596979 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.018078928 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.017985634 seconds)
    (5/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.018749533 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.018616808 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.019059245 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.019797424 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.017062515 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.018008505 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.018874575 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.031807969 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.030978294 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.032261097 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.032811711 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.029722989 seconds)
    (17/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.032964473 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.031044944 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.030287669 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.029374866 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.031746366 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.034974985 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.0353048 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.03300059 seconds)
  done (took 50.557495395 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.03183135 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.034272827 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.03030801 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.03320367 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.033660146 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.030908023 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.033992881 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.03488982 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.033965612 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.032240142 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.034958321 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.033102358 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.033838286 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.032864649 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.031117484 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.034992546 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.035278684 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.034088322 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.03572858 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.034524445 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.033257812 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.034961063 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.035076036 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.0336593 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.035933197 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.033955203 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.03143291 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.034386005 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.036077829 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.035295437 seconds)
  done (took 62.966648666 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.036367624 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.037085391 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.037490768 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.035128823 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.034194638 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.035627253 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.037094574 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.035690033 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.035831005 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.020064654 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.036007203 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.020702734 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.035577224 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.033950585 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.033338778 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.029579588 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.034629443 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.035503202 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.036757779 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.026256822 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.036363238 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.025327866 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.036940928 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.037513058 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.03835956 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.035531763 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.037233008 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.038665455 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.036696227 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.03865158 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.037202513 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.037102084 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.033149126 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.034547032 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.036042829 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.037170581 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.037361752 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.038425812 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.038224093 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.03828326 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.037928863 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.037590538 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.039908944 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.038585538 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.039791294 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.038837293 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.041641874 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.032414672 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.036433898 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.038993166 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.039634246 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.038043055 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.031078795 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.033979549 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.040391234 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.036687832 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.036137398 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.042347453 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.035480129 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.038045138 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.038174969 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.041986888 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.035853479 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.039649575 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.034714099 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.034342254 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.042802267 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.041274178 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.037409619 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.039023261 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.041863656 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.039924992 seconds)
  done (took 148.573390064 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.035943961 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.037808706 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.040522539 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.037933045 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.035531431 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.042001556 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.040301105 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.03840522 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.041208672 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.037440106 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.041148074 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.041029065 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.040813583 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.038469576 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.039552625 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.041046593 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.039148445 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.040706675 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.042793177 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.043771627 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.039913314 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.039349505 seconds)
  done (took 46.832606834 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.039799901 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.031873689 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.037731985 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.042214867 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.042325857 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.041724111 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.043448269 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.038810581 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041455155 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.039495533 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.041849375 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.044397512 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.039204407 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.044298559 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.041203721 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.04253355 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.043649227 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.041326304 seconds)
  done (took 38.694934409 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.040655518 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.038812183 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.04242332 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.042526518 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.04243248 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.044269453 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.041770897 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.039759952 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.044494558 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.04444225 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.04413131 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.043739194 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.044050247 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.040030991 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.042680065 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.042639637 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.043432386 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.04171595 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.03631166 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.0406945 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.042308704 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.042673675 seconds)
  done (took 46.883647578 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.043352015 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.04131439 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.043398482 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.039929281 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.04511013 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.039768125 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.042819458 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.045548603 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.035361154 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.042412802 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.044903114 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.041474178 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.044526797 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.044094808 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.041954443 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.045346361 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.039603674 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.044132544 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.043353801 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.040798166 seconds)
  done (took 42.810613097 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.041095519 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.046131517 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.041290239 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.045349721 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.043583791 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.04343085 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.044550991 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.043993424 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.046515774 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.043361313 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.041359211 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.048035133 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.045265403 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.046316988 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.044488089 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.044038807 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.044020895 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.045872588 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.045226793 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.048999921 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.045469844 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.044922364 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.017924629 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.045333437 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.044415132 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.04478912 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.047400149 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.044477398 seconds)
  done (took 59.193088029 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.044124153 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.045111949 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.04460772 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.045055018 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.047854179 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.045798822 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.049686344 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.04777394 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.047271429 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.046444475 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.047112673 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.043636433 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.047968654 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.046593899 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.050214433 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.04636375 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.045138937 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.045471338 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.04550252 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.048417671 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.046367426 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.046551439 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.046392405 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.042908316 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.047047276 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.048040262 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.044494128 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.045119845 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.047480042 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.047621067 seconds)
  done (took 63.356203526 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.069239097 seconds)
    (2/2) benchmarking "in"...
    done (took 2.06830265 seconds)
  done (took 6.103022693 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.049158354 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.048355956 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.042874836 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.046810843 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.048247133 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.047367603 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.046537859 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.04659348 seconds)
  done (took 18.340334673 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.047449121 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.051683262 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.047586859 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.050431039 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.046289289 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.055026962 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.04605757 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.046699217 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.052719009 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.050713367 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.051149359 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.050172545 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.057698841 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.047146523 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.044883235 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.04819827 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.051916465 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.05156044 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.048511168 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.046793356 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.049776493 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.047297969 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.049404628 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.043757208 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.048765577 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.048086119 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.056437121 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.04968462 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.052205109 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.049543777 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.056718959 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.048609793 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.044572357 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.046806019 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.049943168 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.045079014 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.054434732 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.050615124 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.04560602 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.050503 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.047207005 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.053751803 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.052576028 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.057196881 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.050285496 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.046215852 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.051025207 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.050602499 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.047143233 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.057276467 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.05965233 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.051245125 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.038909118 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.048132509 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.050754353 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.054670598 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.048819338 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.052391577 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.057130584 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.056456998 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.053336758 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.077772254 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.063447332 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.045654567 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.047369221 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.067213716 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.081429242 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.04892927 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.057670905 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.052081172 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.060538826 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.050044424 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.048949479 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.046607386 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.066368217 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.059211753 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.051952951 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.049740845 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.047772763 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.05348557 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.053779654 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.04946318 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.045882923 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.050867102 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.059941166 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.084805457 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.04005475 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.024767922 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.051351413 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.056408235 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.055492574 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.054621684 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.051236113 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.053392033 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.057540212 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.054090853 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.051679018 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.05559943 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.052751565 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.065056259 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.056303387 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.054632183 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.056711994 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.061404746 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.053387868 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.052251059 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.052264553 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.053818577 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.063686185 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.050304046 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.049413386 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.051812969 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.053786619 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.057623627 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.049915146 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.06221269 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.06028408 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.063186089 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.057332896 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.055414766 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.052509502 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.056749764 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.067942142 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.083967493 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.053387275 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.058198924 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.055620113 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.067983341 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.055260338 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.051863885 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.061893521 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.05552697 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.058731684 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.034489128 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.040371638 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.051535444 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.058275489 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.031399869 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.049354909 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.054676523 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.054887189 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.054167632 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.058698439 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.051570688 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.058653936 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.053271281 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.045995733 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.063524426 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.058358247 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.058545732 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.049546256 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.054125482 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.059451312 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.051485763 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.057662214 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.057502803 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.057614834 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.057026142 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.056000311 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.058986542 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.059833655 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.053673532 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.058857134 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.056457509 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.055727627 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.058746174 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.055110867 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.060859378 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.058210415 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.060427999 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.058427363 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.05693941 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.055958335 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.056191116 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.053274773 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.055384351 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.058069906 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.056992463 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.054790563 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.069707289 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.057221341 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.069316005 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.052802069 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.065726757 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.058029309 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.062290705 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.055103171 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.052789286 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.054501088 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.053369751 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.060620903 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.062733733 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.078476779 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.064858028 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.058820894 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.059968578 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.0653363 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.064437045 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.061635566 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.056748444 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.057325313 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.056847609 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.056490493 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.052432624 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.052384678 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.069219314 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.055303104 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.056912749 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.06301226 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.060632094 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.060007962 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.058165594 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.05578765 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.053708111 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.054891735 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.062885573 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.058959276 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.062105076 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.063897774 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.062656725 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.057738338 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.059197814 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.066611348 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.057950787 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.061858049 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.060218533 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.06312906 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.057048997 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.057517391 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.069503804 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.0569097 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.037509373 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.056443929 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.059761688 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.064684675 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.058040321 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.059728313 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.071906968 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.061222982 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.057995351 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.067068051 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.06125579 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.039673547 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.058787738 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.058202141 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.048798848 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.062780655 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.058590047 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.054649576 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.067705104 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.063520799 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.058640414 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.061660825 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.066391456 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.063360834 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.065306357 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.057755879 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.063905393 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.065384755 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.066618623 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.061624279 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.0646792 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.060564947 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.060432359 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.066926694 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.059775674 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.076853656 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.073073124 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.062813856 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.061685799 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.057793008 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.060551491 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.062155776 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.063359073 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.06994942 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.058891914 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.056117271 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.064220946 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.055938452 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.055603504 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.063172782 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.060461919 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.060544653 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.062645163 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.056572763 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.061907197 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.058169365 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.063887559 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.062042334 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.065098122 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.064967117 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.060919513 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.05864113 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.062137973 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.070834387 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.060819625 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.061959838 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.069167301 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.062987612 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.057008838 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.068934455 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.058951493 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.062111167 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.061476033 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.062976378 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.061571661 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.060788487 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.065443601 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.074472509 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.068729453 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.06927019 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.065100588 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.075781111 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.061536044 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.060542255 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.062118384 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.060611264 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.071570434 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.060324424 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.060844037 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.063995444 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.066177486 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.068140709 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.066704685 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.062824927 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.0635098 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.066147571 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.064451757 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.072128569 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.070522087 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.062274138 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.059552298 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.061341464 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.059192563 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.066199332 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.063484351 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.066862169 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.065795776 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.067181584 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.067855401 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.066264958 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.06662599 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.054765119 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.066741634 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.063860144 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.072129948 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.061391861 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.062376367 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.063428338 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.06365058 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.07385015 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.065426822 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.064617961 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.065216517 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.062994171 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.067062281 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.063930801 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.064947684 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.061337828 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.061866358 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.067907797 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.079806526 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.070381064 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.06894491 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.066883719 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.062281767 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.065883327 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.070719555 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.089411094 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.065222983 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.069065893 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.067946219 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.073035888 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.068484913 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.07255129 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.069965187 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.073881872 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.065767471 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.061348207 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.063594365 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.078402985 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.066205139 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.066260494 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.065607851 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.068234683 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.067602463 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.066540479 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.066143611 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.06703299 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.067458955 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.076934689 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.066209523 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.068199259 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.066336249 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.066705076 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.062243874 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.06673871 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.069791909 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.065421013 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.065978221 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.06684582 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.069256829 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.07581098 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.065633904 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.072537396 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.071511247 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.067751758 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.065007228 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.068248485 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.066602369 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.070797584 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.066463112 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.064615125 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.067376978 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.06367918 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.068274181 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.069441043 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.076469216 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.066761823 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.065955345 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.061075147 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.072069218 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.061301085 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.064925939 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.071213015 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.077868398 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.070618877 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.078534606 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.077907104 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.065237655 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.065802817 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.070509643 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.074375175 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.068973105 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.065036318 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.064684347 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.071500944 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.072680522 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.066332187 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.068658268 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.065614244 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.076399979 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.068460822 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.063955332 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.069655074 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.063333417 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.070896551 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.068283532 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.074405897 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.067968362 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.068228162 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.066593144 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.070957081 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.067630455 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.072134384 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.067818056 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.064297141 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.068184503 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.066499921 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.067893585 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.063743197 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.064928622 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.071834474 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.067063137 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.067274501 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.065265357 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.068446239 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.064876681 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.071493677 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.077983711 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.070285737 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.073119298 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.069720005 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.07623968 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.070935685 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.064791949 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.067235486 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.562579817 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.075212819 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.069150749 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.066550266 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.068952201 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.068080345 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.078633629 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.07295575 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.078401566 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.072513497 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.069575454 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.070013098 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.077040238 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.080257857 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.075497733 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.075397849 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.08140931 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.074723335 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.073369866 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.070263949 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.070202738 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.069685521 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.072939415 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.07684661 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.075649899 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.07732179 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.071892388 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.072725672 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.068418941 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.075271374 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.073148935 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.071858063 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.07706591 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.081814557 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.07869412 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.072509346 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.076243736 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.071838881 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.070931207 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.084280858 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.071947333 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.073106888 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.067391844 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.071228928 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.071448767 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.081089992 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.082653754 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.073667084 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.071989157 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.081560468 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.093205851 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.075337458 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.081055373 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.088187205 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.070624124 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.07198372 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.076163872 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.072777229 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.072942935 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.074059398 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.075230909 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.082889829 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.066944091 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.068111611 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.081092509 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.072045949 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.072164665 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.073014768 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.072039836 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.082224101 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.073431363 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.080071907 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.074476439 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.073578446 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.072253149 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.076478749 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.072272451 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.073228374 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.072051959 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.074358821 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.071409828 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.070726504 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.078860914 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.070881591 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.069301049 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.087124704 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.08186599 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.055291629 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.070962667 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.071926645 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.078291943 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.076583685 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.07193561 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.073150776 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.081557332 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.074777016 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.080884404 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.07255609 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.069770588 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.072110937 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.067909904 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.066871648 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.084824357 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.079576657 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.070752788 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.068223548 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.076876244 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.070394905 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.076184663 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.075435013 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.069851628 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.073066584 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.070557519 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.068671209 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.067345246 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.061026555 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.065412324 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.070034011 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.061611345 seconds)
  done (took 1232.198068306 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.061302014 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.060904195 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.061009152 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.06174202 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.061259255 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.060478715 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.061124896 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.050486047 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.060458541 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.060294863 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.060571428 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.060913375 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.060196012 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.061019415 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.06069659 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.06004325 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.06070842 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.060549705 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.061842235 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.06008615 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.060325937 seconds)
  done (took 45.251959169 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.060178533 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.061194633 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.061024553 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.060075745 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.060838893 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.059628155 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.060882942 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.0611133 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.060198769 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.061238597 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.061999162 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.060278844 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.060715349 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.059882218 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.06004122 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.060701403 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.059261235 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.059336248 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.059760322 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.058952456 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.060187107 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.057644806 seconds)
  done (took 47.311579489 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.058205754 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.058316345 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.061574054 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.05773174 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.058080411 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.05878683 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.058370447 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.048689058 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.057471503 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.059533872 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.066666615 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.067517095 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.058370994 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.060740381 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.058006323 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.058923743 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.189458102 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.058135246 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.057503252 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.056050918 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.057880262 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.051020056 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.056584636 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.05704048 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.056265687 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.058455373 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.057594785 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.058555856 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.056635199 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.058039044 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.061692015 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.05726885 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.059429934 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.061372619 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.058513355 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.05850851 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.062991001 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.057392375 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.058001252 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.058909919 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.068882356 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.08308747 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.058986712 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.058442569 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.068091839 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.05865795 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.059185533 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.06275366 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.066429067 seconds)
  done (took 103.038739819 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.059065865 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.05985228 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.058781001 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.057828275 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.058999646 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.059247479 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.057830415 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.059477039 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.058231286 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.058740979 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.059387163 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.058776979 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.058543998 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.058246372 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.059347113 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.060219863 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.059103712 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.058297144 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.058394743 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.058910364 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.059801274 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.059707779 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.059457754 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.059437752 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.058684305 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.059993561 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.059497692 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.05869578 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.059284054 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.059169939 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.059434487 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.058247241 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.059161896 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.060690721 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.059417114 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.05627897 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.056051235 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.05711968 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.055753301 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.05568014 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.050401802 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.05058799 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.05011998 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.050258451 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.051583669 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.048953654 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.048937067 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.049055111 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.049221984 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.05144445 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.049081999 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.049087796 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.047440255 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.048636593 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.049799693 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.048545315 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.048089128 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.04817629 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.047770122 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.04969389 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.047703181 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.047279242 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.048615264 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.047025025 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.048327363 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.047311128 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.04669404 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.047047936 seconds)
  done (took 141.700661433 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.061390116 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.048355451 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.048151215 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.048039312 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.049423321 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.047676731 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.047049782 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.047769689 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.048390401 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.048766898 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.048474734 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.046533562 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.047315115 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.047002528 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.048848641 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.0474284 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.047498958 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.047304119 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.047537963 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.049240753 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.04749393 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.04691634 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.046896053 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.047390937 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.048372714 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.047565696 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.046928973 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.046972652 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.046812933 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.048760832 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.047964264 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.047913586 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.046748823 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.047033726 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.047827076 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.046540115 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.047562414 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.046879683 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.046861812 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.048530914 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.047346091 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.047451991 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.047081793 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.046023225 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.048012537 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.048400688 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.048125895 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.047822139 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.047129529 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.046900664 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.046985864 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.046070171 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.047770299 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.046650052 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.036494198 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.045096898 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.046613385 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.047582602 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.035097597 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.047020206 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.046168435 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.046408319 seconds)
  done (took 128.905807999 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.046043469 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.044712836 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.044584769 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.044723429 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.045767857 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.046311558 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.044951782 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.045451714 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.044862163 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.045661244 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.045254597 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.044710623 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.0461343 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.04498952 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.046491445 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.046124071 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.044169797 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.045872339 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.045062668 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.045459283 seconds)
  done (took 42.879076327 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.044603841 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.04465422 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.044897312 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.044759852 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.045761144 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.043482285 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.035892296 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.044192332 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.045424589 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.044400996 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.044811548 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.045589276 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.046043003 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.046436592 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.045439093 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.04521014 seconds)
  done (took 34.682031459 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.045352111 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.044916901 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.045428426 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.046387962 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.045269193 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.045712594 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.046164883 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.045289934 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.045592106 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.045491376 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.046455453 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.045328404 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.046289942 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.047869734 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.046813485 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.04614697 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.046249141 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.046817042 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.04632116 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.04658563 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.047462578 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.047294926 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.04820857 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.047030175 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.047448069 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.047721424 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.047572305 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.046950393 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.047942013 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.048512112 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.047964252 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.047402487 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.048123253 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.04784528 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.04843488 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.047828013 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.047536702 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.047534839 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.04795969 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.047330124 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.046826541 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.048006264 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.048248247 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.048324031 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.047886045 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.047826381 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.048497262 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.04803118 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.047598441 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.048419597 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.048455264 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.048389949 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.047735261 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.048206159 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.048084386 seconds)
  done (took 114.5666247 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.048029563 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.048793375 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.049030876 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.048711364 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.04891597 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.048596558 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.049160558 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.048279288 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.049107047 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.049467864 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.049656205 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.048759337 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.048831669 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.048758371 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.048907853 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.048928168 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.04959076 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.048594821 seconds)
  done (took 38.853941368 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.049322184 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.049143294 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.049600548 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.048689559 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.050126545 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.049524467 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.050351249 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.049658284 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.049598474 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.050179519 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.050110223 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.049968034 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.050043718 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.051386835 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.049721853 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.050426322 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.049881681 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.050300454 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.05019891 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.051176606 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.051159817 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.051407031 seconds)
  done (took 47.076219705 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.052007679 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.050869437 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.065876767 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.07161979 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.070646015 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.085669191 seconds)
  done (took 14.372761728 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051586588 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048306703 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.0533883 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051618688 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050860744 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051397573 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.05090612 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051215732 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.05159085 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051121471 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051856362 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.052130329 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.05168973 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051479771 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051894994 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05230702 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051773063 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.052264024 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051666278 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051836271 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052725035 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.052386401 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052719946 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051727238 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.053461083 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052661818 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.052896435 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.053304543 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.052870575 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053327734 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.052843519 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052037496 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.052390721 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052940682 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.053198815 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.052824844 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.052205358 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.05368514 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.053558275 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.054243631 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.053899955 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.054288237 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.053633474 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.053772755 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053982982 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.053789618 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.053972745 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.054203942 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.053809831 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.054726108 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053571105 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.053444659 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.053646519 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.054933019 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.054489501 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.053328545 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.054616539 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.054516727 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.054873666 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.055774602 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.040902867 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.054352308 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.053550653 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.055181385 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.054413077 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.055478853 seconds)
  done (took 137.464115222 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.055221119 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.054344698 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.054758014 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.054767531 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.05501343 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.056063209 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.055205579 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.055085448 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.054746368 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.055209903 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05481144 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.054864993 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.05578816 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.055281676 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.05501446 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.055607494 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.055518028 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.055552481 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.055599802 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.056505446 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.055376004 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.054962294 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.055929112 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.056801938 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.055341166 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.056322087 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.056461444 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05652446 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.056393735 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05656751 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.056424554 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.056273486 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.057507018 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.056949973 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.056599575 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.056945128 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.056788203 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.056555113 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.057446512 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.057642945 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.056916492 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.057354494 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.056879412 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.057705254 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.056600911 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.057231386 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.057691582 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.057500024 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.057176191 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.057913573 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.057192498 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.057289185 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.058185137 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.058197187 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.057497082 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.05809091 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.057403836 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.05730469 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.057612353 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.058242939 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.057989997 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.057444858 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05865139 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.057839794 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.058343465 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.058915241 seconds)
  done (took 137.715695003 seconds)
done (took 2852.276237101 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.075449009 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.108080276 seconds)
  done (took 16.165621371 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.22359934 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.059251883 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.246025868 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.176574383 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.070839811 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.066722546 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.061282269 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.060971583 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.15412869 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.060954814 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.075382907 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.061375218 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.060960694 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.061691847 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.06135848 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.061727212 seconds)
  done (took 55.554962268 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.064825345 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.065533741 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.062986882 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.063045257 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.072631747 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.135526952 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.085002904 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.066452198 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.076116233 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.095772201 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.080182063 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.068322557 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.069519629 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.06667463 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.149083233 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.109054419 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.121677513 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.139012141 seconds)
  done (took 39.575015211 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.143160748 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.073757007 seconds)
  done (took 11.209120996 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.070699138 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.063116003 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.088517339 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.078945124 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.059416314 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.075001463 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.088361044 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.083458362 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.077075642 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.083230453 seconds)
  done (took 72.762291736 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.062735414 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.063717182 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.364527813 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.071261862 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.067453703 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.085018365 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.061835759 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.092239304 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.050015964 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.058542701 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.072201397 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.368497051 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.072681851 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.059865966 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.470805795 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.073965698 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.065565225 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.090646638 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.091967622 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.064803779 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.06742051 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.062632144 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.222917467 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.764003662 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.059767289 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.064449556 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.059427753 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.058658628 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.048609039 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.060986168 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.063178674 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.061767375 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.063724778 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.064314368 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.069128372 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.047725173 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.559956937 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.079252711 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.068180904 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.153999755 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.10492109 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.067749577 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.891320868 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.06555747 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.059748064 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.067407968 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.745993368 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.144339426 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.062398426 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.231536849 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.398509081 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.076763012 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.221289558 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.226598806 seconds)
  done (took 143.457785207 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.060147315 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.297022776 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.211435704 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.060085013 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.317651043 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.270393375 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.062758719 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.106111089 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.062481505 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.262914445 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.317653888 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.164836333 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.063291194 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.059990594 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.0639397 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.058821797 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.210967981 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.12898668 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.064035535 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.060827899 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.089310316 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.263239677 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.184038632 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.065194956 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.086782861 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.266528263 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.185468347 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.162981978 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.879607393 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.060279518 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.123653933 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.064062121 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.066296615 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.060614654 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.216435801 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.154435764 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.144408039 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.063612436 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.063111432 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.064951207 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.738063434 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.265556778 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.157119003 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.186241911 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.309675862 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.276706054 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.677621724 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.061440206 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.695814391 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.226590063 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.268047799 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.269833786 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.183867474 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.065300503 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.61453031 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.062703821 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.061849684 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.287506006 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.280096062 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.161388459 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.064719375 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.063927822 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.064983064 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.301844537 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.068536002 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.154124316 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.069388268 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.064676372 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.154777231 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.163964101 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.288605996 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.269525564 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.093557946 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.386140641 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.548896083 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.265542635 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.128461181 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.283852949 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.06602914 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.062703069 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.141809034 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.906583949 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.317098304 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.305279946 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.26148666 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.094329128 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.715024 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.0636357 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.249829525 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.253785733 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.297457273 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.302742026 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.300461117 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.435475034 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.063627255 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.06302898 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.353264766 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.183185384 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.016999711 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.413681602 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.293163879 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.553904033 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.0903331 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.391985593 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.19405968 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.066664322 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.711868226 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.065997799 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.270056756 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.102919328 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.066802757 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.067005664 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.255558092 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.971954418 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.06482106 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.77361919 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.126157394 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.069937625 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.26991982 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.068633326 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.310186673 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.068192985 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.298539149 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.701782262 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.096811462 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.292211711 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.305996274 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.696846055 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.304970671 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.315965329 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.180462079 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.288667354 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.791059052 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.065596932 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.327637016 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.068612389 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.066843448 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.227115815 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.069688536 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.208749703 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.069532162 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.330899274 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.08777698 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.295814922 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.069095156 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.307026068 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.098138219 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.117330614 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.07069896 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.19612095 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.071428564 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.900650113 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.225396045 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.071368327 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.067977307 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.816460962 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.069112367 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.216222516 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.294287948 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.088936087 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.137207092 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.635038635 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.068400704 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.150859444 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.090108025 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.342976507 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.070237937 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.319374095 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.048989887 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.554166666 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.067841817 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.301675169 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.253275627 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.073517067 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.069434023 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.91208534 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.067970823 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.068046818 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.224204578 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.534271639 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.994747844 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.266773325 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.072840307 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.197666945 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.074120423 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.147412765 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.4137136 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.068955553 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.068945134 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.068833297 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.068857571 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.069848357 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.330299879 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.096387159 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.504428442 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.206347046 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.325573649 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.376410079 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.265887106 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.109870633 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.074328177 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.292241487 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.073833255 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.132321426 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.073494835 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.089498105 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.298096055 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.07481708 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.277884878 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.305833951 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.948556921 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.117760455 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.073900505 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.070799024 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.001704191 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.218775487 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.158248983 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.074270879 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.072277354 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.18581907 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.190867663 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.25250979 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.90837759 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.184707994 seconds)
  done (took 944.808733441 seconds)
done (took 1285.518845782 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.072207194 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.076035108 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.078076173 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.076837802 seconds)
  done (took 30.299299222 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.07337437 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.073359499 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.07420681 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.077190443 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.072988978 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.074188515 seconds)
  done (took 14.441975329 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.073844285 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.076519886 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.077218611 seconds)
  done (took 23.224337048 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.506249627 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.488074873 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.147671754 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.214787392 seconds)
  done (took 11.353660086 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.081481469 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.074572617 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.075535264 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.074590264 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.074586674 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.075154234 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.077820605 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.075695153 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.078431841 seconds)
  done (took 20.692907153 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.225227796 seconds)
done (took 106.234686713 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.084586774 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 4.618951679 seconds)
    (3/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.243021405 seconds)
    (4/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.215506877 seconds)
    (5/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.330617335 seconds)
    (6/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.152599632 seconds)
    (7/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.138258147 seconds)
    (8/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.133142752 seconds)
    (9/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.523899241 seconds)
    (10/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.077490625 seconds)
    (11/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.081167778 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.207734564 seconds)
    (13/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.984955384 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.280002587 seconds)
    (15/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.074470058 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.092097419 seconds)
    (17/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.089478521 seconds)
    (18/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.290013482 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.405138726 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.095326627 seconds)
    (21/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.176970035 seconds)
    (22/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.276279613 seconds)
    (23/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.946243031 seconds)
    (24/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.207860573 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.091006207 seconds)
    (26/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.362851666 seconds)
    (27/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.080729916 seconds)
    (28/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.310958037 seconds)
    (29/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.08171033 seconds)
    (30/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.29125 seconds)
    (31/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.489420239 seconds)
    (32/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.982518553 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.191778166 seconds)
    (34/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.076343841 seconds)
    (35/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.454611074 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.179022612 seconds)
    (37/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.160311634 seconds)
    (38/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.164782635 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.30964139 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.163772736 seconds)
    (41/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.159082017 seconds)
    (42/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.085395475 seconds)
    (43/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.088206179 seconds)
    (44/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.208757787 seconds)
    (45/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.261419936 seconds)
    (46/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.079956684 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.228660877 seconds)
    (48/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.024098338 seconds)
    (49/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.991530097 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.6006813 seconds)
    (51/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.455697108 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.425984914 seconds)
    (53/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.121154485 seconds)
    (54/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.394980387 seconds)
    (55/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.352402138 seconds)
    (56/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.077853251 seconds)
    (57/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.403771714 seconds)
    (58/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.299115799 seconds)
    (59/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.078957877 seconds)
    (60/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.527126899 seconds)
    (61/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.374072921 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.314563814 seconds)
    (63/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.849833907 seconds)
    (64/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.367271523 seconds)
    (65/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.474372964 seconds)
    (66/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.338477912 seconds)
    (67/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.442330152 seconds)
    (68/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.080491818 seconds)
    (69/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.393349366 seconds)
    (70/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.298979345 seconds)
    (71/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.09375148 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.801607061 seconds)
    (73/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.715852427 seconds)
    (74/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.0860321 seconds)
    (75/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.45153225 seconds)
    (76/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.086549484 seconds)
    (77/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.257179226 seconds)
    (78/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.795557282 seconds)
    (79/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.086541694 seconds)
    (80/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 8.619868169 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.15874416 seconds)
    (82/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.078591395 seconds)
    (83/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.121199605 seconds)
    (84/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.086983169 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.325953428 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.093856582 seconds)
    (87/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.413145942 seconds)
    (88/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.31374895 seconds)
    (89/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.083581361 seconds)
    (90/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.246243696 seconds)
    (91/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.220321859 seconds)
    (92/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.099047099 seconds)
    (93/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.159207187 seconds)
    (94/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.472027875 seconds)
    (95/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.102832882 seconds)
    (96/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.796636672 seconds)
    (97/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.092102215 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.394732889 seconds)
    (99/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.532378759 seconds)
    (100/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.094026475 seconds)
    (101/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.282334389 seconds)
    (102/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.869990799 seconds)
    (103/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.263825562 seconds)
    (104/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.957640073 seconds)
    (105/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.337942984 seconds)
    (106/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.221197905 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.080565935 seconds)
    (108/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.49921744 seconds)
    (109/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.198215064 seconds)
    (110/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.086843884 seconds)
    (111/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.105346391 seconds)
    (112/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.477734343 seconds)
    (113/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.011387182 seconds)
    (114/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.203940993 seconds)
    (115/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.087602724 seconds)
    (116/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.591079134 seconds)
    (117/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.49071425 seconds)
    (118/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.393766643 seconds)
    (119/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.682987583 seconds)
    (120/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.089668231 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.210221862 seconds)
    (122/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.094097835 seconds)
    (123/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.230480628 seconds)
    (124/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.09877458 seconds)
    (125/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.499243219 seconds)
    (126/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.368890025 seconds)
    (127/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.271660443 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.382120727 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.35895813 seconds)
    (130/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.858790733 seconds)
    (131/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.217646315 seconds)
    (132/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.544275726 seconds)
    (133/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.309372632 seconds)
    (134/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.186264686 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.221210261 seconds)
    (136/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.08413751 seconds)
    (137/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.146236762 seconds)
    (138/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.098771546 seconds)
    (139/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.082838411 seconds)
    (140/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 8.655653224 seconds)
    (141/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 8.724603937 seconds)
    (142/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.302841342 seconds)
    (143/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.179557464 seconds)
    (144/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.086079477 seconds)
    (145/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.330080987 seconds)
    (146/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.316061471 seconds)
    (147/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.469825996 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.524525117 seconds)
    (149/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.472272792 seconds)
    (150/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.295920269 seconds)
    (151/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.076986409 seconds)
    (152/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.465568341 seconds)
    (153/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.21632233 seconds)
    (154/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.094352485 seconds)
    (155/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.343340153 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.327409015 seconds)
    (157/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.544050058 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 2.310334024 seconds)
    (159/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.399188289 seconds)
    (160/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.213132032 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.989217542 seconds)
    (162/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.358541847 seconds)
    (163/341) benchmarking ("sort", Float64, false)...
    done (took 5.814566937 seconds)
    (164/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.104606856 seconds)
    (165/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.109797729 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.101005659 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.099815881 seconds)
    (168/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.171227655 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 5.742262287 seconds)
    (170/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.389253673 seconds)
    (171/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.191289691 seconds)
    (172/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.194025626 seconds)
    (173/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.365778768 seconds)
    (174/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.978133035 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.035912261 seconds)
    (176/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.356271 seconds)
    (177/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.513609491 seconds)
    (178/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.932990956 seconds)
    (179/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.540224397 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.299833163 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.225888004 seconds)
    (182/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.415773094 seconds)
    (183/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.091670017 seconds)
    (184/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.524540311 seconds)
    (185/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.173030388 seconds)
    (186/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.198951744 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.110769381 seconds)
    (188/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.28431678 seconds)
    (189/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.574833998 seconds)
    (190/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.091015096 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.239890918 seconds)
    (192/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.23667149 seconds)
    (193/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.191017162 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.405409091 seconds)
    (195/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.849796451 seconds)
    (196/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.862924869 seconds)
    (197/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.242451461 seconds)
    (198/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.312991346 seconds)
    (199/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.314413327 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.231979698 seconds)
    (201/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.393535547 seconds)
    (202/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.466337807 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.086882932 seconds)
    (204/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.183548159 seconds)
    (205/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.441982505 seconds)
    (206/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.29211673 seconds)
    (207/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.305293104 seconds)
    (208/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.220851665 seconds)
    (209/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.523732274 seconds)
    (210/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.192267737 seconds)
    (211/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.084344348 seconds)
    (212/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.312901063 seconds)
    (213/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.520797915 seconds)
    (214/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.489898769 seconds)
    (215/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.102569595 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.086791305 seconds)
    (217/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.330401014 seconds)
    (218/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.301680877 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.116408167 seconds)
    (220/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.105880033 seconds)
    (221/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.830056443 seconds)
    (222/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.35077606 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.31088813 seconds)
    (224/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.220796393 seconds)
    (225/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.166320294 seconds)
    (226/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.175937582 seconds)
    (227/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.413706792 seconds)
    (228/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.108072033 seconds)
    (229/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.250048337 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.102219318 seconds)
    (231/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.167369935 seconds)
    (232/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.398962148 seconds)
    (233/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.349305055 seconds)
    (234/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.208360326 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.110033083 seconds)
    (236/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.08986582 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.47507091 seconds)
    (238/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.403307225 seconds)
    (239/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.28556842 seconds)
    (240/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.291732575 seconds)
    (241/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.153667374 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.403482505 seconds)
    (243/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.172951012 seconds)
    (244/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.420356105 seconds)
    (245/341) benchmarking ("sort", Float32, false)...
    done (took 5.758443742 seconds)
    (246/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.472177956 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.224869419 seconds)
    (248/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.250094693 seconds)
    (249/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.183692861 seconds)
    (250/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.102065218 seconds)
    (251/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.759131878 seconds)
    (252/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.381339037 seconds)
    (253/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.627399984 seconds)
    (254/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.294931139 seconds)
    (255/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.171830565 seconds)
    (256/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.093093084 seconds)
    (257/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.15761507 seconds)
    (258/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.863600423 seconds)
    (259/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.105933752 seconds)
    (260/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.292042539 seconds)
    (261/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.095309049 seconds)
    (262/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.543193295 seconds)
    (263/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.106706879 seconds)
    (264/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.176754737 seconds)
    (265/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.498699769 seconds)
    (266/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.405475584 seconds)
    (267/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.189672152 seconds)
    (268/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.22182624 seconds)
    (269/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.319686369 seconds)
    (270/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.170624377 seconds)
    (271/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.674102725 seconds)
    (272/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.203180207 seconds)
    (273/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.372642619 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.221998728 seconds)
    (275/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.091366794 seconds)
    (276/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 8.568726717 seconds)
    (277/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.815356306 seconds)
    (278/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.189907534 seconds)
    (279/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.287932118 seconds)
    (280/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.11086694 seconds)
    (281/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.091320186 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.207207078 seconds)
    (283/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.214771695 seconds)
    (284/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.493003523 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.107220112 seconds)
    (286/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.34111213 seconds)
    (287/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.975409709 seconds)
    (288/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.129349201 seconds)
    (289/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.427233799 seconds)
    (290/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.230935915 seconds)
    (291/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.102688169 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.381762276 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.094551555 seconds)
    (294/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.094424219 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 4.752406371 seconds)
    (296/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.112125642 seconds)
    (297/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.515542725 seconds)
    (298/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.504225004 seconds)
    (299/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.976574339 seconds)
    (300/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.167850562 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.122098557 seconds)
    (302/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.103867728 seconds)
    (303/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.105307652 seconds)
    (304/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.102597121 seconds)
    (305/341) benchmarking ("sort", BigInt, false)...
    done (took 7.092342654 seconds)
    (306/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.176375878 seconds)
    (307/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.096012335 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 4.363124272 seconds)
    (309/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.204643287 seconds)
    (310/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.100485649 seconds)
    (311/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.182163435 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.970540382 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.104381996 seconds)
    (314/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.847366178 seconds)
    (315/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.24582782 seconds)
    (316/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.739850362 seconds)
    (317/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.019752453 seconds)
    (318/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.909425811 seconds)
    (319/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.199379673 seconds)
    (320/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.795652525 seconds)
    (321/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.172677638 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.106570613 seconds)
    (323/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.103057637 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.975149465 seconds)
    (325/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.191349774 seconds)
    (326/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.095424687 seconds)
    (327/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.221475088 seconds)
    (328/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.809304519 seconds)
    (329/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.459569554 seconds)
    (330/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.024531545 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.230733655 seconds)
    (332/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.095578043 seconds)
    (333/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.248572698 seconds)
    (334/341) benchmarking ("sort", Int8, false)...
    done (took 5.059190471 seconds)
    (335/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.096337489 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.502554763 seconds)
    (337/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.062965624 seconds)
    (338/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.283489694 seconds)
    (339/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.259802383 seconds)
    (340/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.327906046 seconds)
    (341/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.322943217 seconds)
  done (took 1170.804239506 seconds)
done (took 1172.898919485 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.116332338 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.096757631 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.601835656 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.108540275 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.097114563 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.101414462 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.613697646 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.127642892 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.116951411 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.614615775 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.1090893 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.097652803 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.112574873 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.131565755 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.108252071 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.11145532 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.103128876 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.121902315 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.132706803 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.103422347 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.148530816 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.104392449 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.097181985 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.149498664 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.097531437 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.112872262 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.118186443 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.149919697 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.149452982 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.101362809 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.104273409 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.441725526 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.14969754 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.104488251 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.110074856 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.113093854 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.092198127 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.106619427 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.117454736 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.114481377 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.098988933 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.10902514 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.103024721 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.102086188 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.099267422 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.098681217 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.100023109 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.224207158 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.113624718 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.441833645 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.159959611 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.118183083 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.150772721 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.102509358 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.101764227 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.103196826 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.150793454 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.106038891 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.105196788 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.443238001 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.193284305 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.114670028 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.442796046 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.163313684 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.10944799 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.109714436 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.099135002 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.118870836 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.461959167 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.656153747 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.132900924 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.120379207 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.101594427 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.101824626 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.114603765 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.614300037 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.116408043 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.685481125 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.128463888 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.116386399 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.107399431 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.104940127 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.102019741 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.118393098 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.120699394 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.10106993 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.107557306 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.108029265 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.116674244 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.463536131 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.144910159 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.606091863 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.11019561 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.122679696 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.122414942 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.687045095 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.131123334 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.12208684 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.104627759 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.464035894 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.143764909 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.122067654 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.104871406 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.114309615 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.217383945 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.121156017 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.122636151 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.102656444 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.124733351 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.109535771 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.103404221 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.117194887 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.122593774 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.137870349 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.120135693 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.103984201 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.113402494 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.108748725 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.120772095 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.112044162 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.110872459 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.11538836 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.103664606 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.155019987 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.122898902 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.119073962 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.219476696 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.10994615 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.229141993 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.118112969 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.110374534 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.107562705 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.436705675 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.150927559 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.130318474 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.113418292 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.129908727 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.128814407 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.124180631 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.108645451 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.12208093 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.109991605 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.159768305 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.106789615 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.131465511 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.159759116 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.121042381 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.113370988 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.124483396 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.14287156 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.128010362 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.112406303 seconds)
done (took 331.155277171 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.153987299 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.106440609 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.182791513 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.10819997 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.174826402 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.159880648 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.108833478 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.108687548 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.108601813 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.486459803 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.108026588 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.114031551 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.108717792 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.108467174 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.157339317 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.108895259 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.110987156 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.342490539 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.109913697 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.168664872 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.09641601 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.109657085 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.109113259 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.496210228 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.107496299 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.109221584 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.168617144 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.110335558 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.348969159 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.108495185 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.107587639 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.349656693 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.168893019 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.122499186 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.11982609 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.115525372 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.175684561 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.119832076 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.156840297 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.155945977 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.184371412 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.146616683 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.109083463 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.10824647 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.113748685 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.112011265 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.110641241 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.143226112 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.108632599 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.115698295 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.342433633 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.118503123 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.116619304 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.097860154 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.111341186 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.128060452 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.112230785 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.112451804 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.17054379 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.111460357 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.1574404 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.499488531 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.495733589 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.111840932 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.11196712 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.111991382 seconds)
  done (took 199.687041003 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.178293227 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.197439065 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.178270505 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.116660362 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.164088852 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.179646564 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.115984522 seconds)
  done (took 17.163485324 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.118266029 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.113238382 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.135238662 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.135774045 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.112842309 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.250579894 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.123567585 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.118425726 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.138216937 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.112843055 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.447555506 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.134875967 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.120430676 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.110653997 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.109398003 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.141530677 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.114918727 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.113429286 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.21147717 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.190116385 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.118455005 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.12075906 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.141717835 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.125312058 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.11457792 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.113879105 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.113745303 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.120340171 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.113962419 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.11415653 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.114074729 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.127578838 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.113491971 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.11444923 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.114157279 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.113796726 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.114821725 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.11512224 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.114601849 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.112229316 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.114249588 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.114967288 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.114396567 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.114704586 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.113208386 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.137033116 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.115612384 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.11534205 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.114041914 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.116411827 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.144379942 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.115803197 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.114818023 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.120636839 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.155954173 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.122650839 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.115877658 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.115748674 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.115993201 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.11615507 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.114865395 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.195947093 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.13854886 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.115106564 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.138874928 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.152821942 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.116599613 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.115447361 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.116132958 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.140308144 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.115749278 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.139032978 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.115062926 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.213415827 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.116869514 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.257929519 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.140041761 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.120145342 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.120246043 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.115269094 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.124000491 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.116472139 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.119840779 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.123130576 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.124901997 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.116574826 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.117627656 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.118493527 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.124887307 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.118612623 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.162252389 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.118254736 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.118072474 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.212887136 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.117234776 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.215570695 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.143516521 seconds)
  done (took 228.940901016 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.12185219 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.118903998 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.132238705 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.119266797 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.117446611 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.122248059 seconds)
  done (took 14.770092599 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.120443257 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.120625438 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.117962586 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.118390106 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.11857539 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.118575992 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.119163774 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.119974278 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.122245973 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.119210848 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.118509299 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.122230037 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.119920576 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.118962768 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.118591477 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.118132528 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.118963302 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.118530787 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.118300784 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.119169556 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.364351095 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.119301708 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.119451878 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.121847432 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.123975901 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.118700133 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.127766963 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.119081944 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.119277168 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.125258998 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.123408851 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.120870503 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.122610217 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.125085477 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.122591688 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.123188537 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.123563851 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.122419775 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.120040117 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.121156935 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.122664309 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.12061053 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.120288136 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.123286144 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.122314632 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.126462802 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.126502249 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.12987956 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.120977585 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.123959844 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.124800535 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.119575448 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.121205078 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.124344708 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.125111996 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.120325776 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.12229478 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.120861435 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.121203952 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.124138885 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.124468222 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.121951943 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.123356792 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.124902827 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.128927045 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.124888279 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.124236749 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.124686536 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.122641535 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.121730205 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.124919477 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.12108927 seconds)
  done (took 156.059932469 seconds)
done (took 618.653188782 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.166012843 seconds)
  done (took 9.208438123 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.183303861 seconds)
  done (took 9.307058991 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.640042725 seconds)
  done (took 12.682797389 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.154059546 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.140696878 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.137205056 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.125673255 seconds)
  done (took 30.610826059 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.324008781 seconds)
  done (took 9.366787825 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.13212576 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.119650721 seconds)
  done (took 16.359013209 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.237360452 seconds)
  done (took 9.281488414 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.59933894 seconds)
  done (took 9.666308067 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.145092999 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.149707772 seconds)
  done (took 16.359855885 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.124057409 seconds)
  done (took 9.167895618 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.94743573 seconds)
  done (took 10.072834594 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.138637287 seconds)
  done (took 9.200821619 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.194578115 seconds)
  done (took 9.239675496 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.117526642 seconds)
  done (took 10.1612863 seconds)
done (took 172.728859604 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.130112605 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.127487153 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.12764898 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.12642321 seconds)
  done (took 30.555646209 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.158818219 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.158037639 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.167108509 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.157517468 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.148799213 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.148710383 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.159485294 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.158843998 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.149148581 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.15764234 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.158719296 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.156334616 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.157990614 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.167249911 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.167420111 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.156788962 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.158663009 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.15923704 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.149278955 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.168706986 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.156994205 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.159193999 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.125078536 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.125349661 seconds)
  done (took 53.775299211 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.315082357 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.191774678 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.278398776 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.171050036 seconds)
  done (took 11.001906118 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.124650772 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.18942303 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.176192369 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.17038742 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.175819751 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.228538015 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.179610096 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.262072538 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.253439193 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.254355002 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.132566831 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.146552059 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.146782125 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.170906753 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.229655585 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.12681528 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.125169819 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.239048025 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.186405024 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.383711467 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.124179292 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.179284204 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.175533515 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.177918238 seconds)
  done (took 54.605197817 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.127078184 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.134754663 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.134289166 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.127789896 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.127815303 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.128066989 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.134540083 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.128010191 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.149322104 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.129434913 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.127388813 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.128034836 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.134311281 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.127844424 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.12819881 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.14154263 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.141989256 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.128366492 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.1323278 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.134700656 seconds)
  done (took 44.69332558 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.126183429 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.96653221 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.473978853 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.378451786 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.126433539 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.126811577 seconds)
  done (took 33.24681152 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.140252083 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.146772139 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.133901495 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.153697093 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.176691979 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.137097012 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.189295942 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.291860676 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.137213341 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.187098812 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.14845673 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.135478311 seconds)
  done (took 28.025963108 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.128953867 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.114904492 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.131717453 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.142238459 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.138908868 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.137128973 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.136331638 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.12793397 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.142789695 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.146634754 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.135880265 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.140247343 seconds)
  done (took 47.672643799 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.341497066 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.355654851 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.347028016 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.706330807 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.443219056 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.109134371 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.414353909 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.342826892 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.851552218 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.815729745 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.419604768 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.10638918 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.082277992 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.056040415 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.048912847 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.372850418 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136823775 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.989713953 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.385864704 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.178286421 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135318321 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.132662934 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13634899 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.414375849 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.459883814 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133012075 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.34508784 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149163101 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.182811645 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.346457967 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.696970163 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.184307206 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.336541449 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.390196724 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.471966662 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.263989955 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.137667644 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.295675651 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.174760151 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.168815655 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.14357259 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.14375173 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.682944669 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.144768427 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.405629136 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134703025 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.209533567 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.146869341 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.060399312 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.455619876 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.241209121 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.134984716 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.169299984 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.567486135 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254190235 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.376656793 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.139268357 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.294596916 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18926098 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.394716705 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.318294673 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.139805283 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.347119069 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.06170624 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.47293664 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.252832863 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.136792611 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.13860877 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.831259005 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.377394881 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.216183913 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.459697983 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.894542445 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.136333193 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.13778996 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.179912963 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.225474261 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.136126717 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.428705407 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.132592308 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.062878564 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.234671701 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.532961799 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.14072186 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.13559636 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.143612615 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.98420943 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.061852211 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.234148885 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.390359062 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.453556756 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.136768656 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.137143792 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.15849669 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13790407 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086714976 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.679670155 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.200427653 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.064279351 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.703113278 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.709341034 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.101846872 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.626053322 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.177950633 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.4179696 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.28356746 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.543265027 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.347011068 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.383983563 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.672959896 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.142220272 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.75452114 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.218920556 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213713108 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.136637189 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.697479257 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.310702157 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.431928583 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.246761781 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.138154488 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.064574017 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.149040415 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.341649719 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.723738331 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.190948228 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13773622 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.141658382 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.126241524 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.141687409 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.302980433 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15543114 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.428525178 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.208413929 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.139467124 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.07590896 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.14365787 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.419724844 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.757164228 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195432233 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.391592974 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.404068905 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.839017976 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.73789552 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.084513631 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.407108144 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.210211796 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213909697 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.721472191 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.274638017 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.236943504 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.139375044 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.267974369 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.151283292 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.142474618 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.498037308 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.555872018 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.565705524 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.185135825 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.139636651 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.094105477 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.305388607 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.380166019 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.181650226 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.162164422 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.145742946 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.22422352 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.367596189 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.141313965 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.067326352 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.392421272 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.386831725 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.42948358 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.54838736 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.182769805 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.212872294 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.151232596 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.354636879 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.222747134 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.795624198 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.688555202 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.363478606 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.689160797 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.10444896 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.783491404 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.407291943 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.51764461 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.15701648 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.596263274 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.300867185 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.808015179 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.170967515 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.670278995 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.069610327 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.1478604 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.495839275 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.101214731 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.454198838 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.209629174 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.202769041 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.145060508 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.143525463 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151456397 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.038145408 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.249132702 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212295621 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215198834 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070480825 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.764469984 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.181776589 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.146186223 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.143788957 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.443153927 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.974421175 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09677304 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.142972331 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.221676838 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.8887888 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.692032272 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.1483542 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.14691473 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.74353191 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.150431135 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.053686415 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.244349672 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.883627139 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.170789062 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.41045315 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.838753 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.427244687 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.218320635 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.220672455 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.143882014 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.152076777 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.846193906 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.153583363 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.845900484 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.428138517 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.417464657 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.587367316 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.207141232 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.355528792 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.160655804 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.145747784 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.637566407 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.170291245 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.147997931 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.322601137 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.662290297 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.474021869 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.783520262 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.231414136 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.147620897 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.41228109 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.148043844 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.716511017 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.83377795 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.148329011 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.126724171 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.407981877 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.831013601 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.148144758 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.123310688 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154803501 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.359884672 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.349938923 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.423443282 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.445472048 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.594736446 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.075778504 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.151981814 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.168562196 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.391395854 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.148015888 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.181970827 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.594390525 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.197940599 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.576885091 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.429590761 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.533750173 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.776380491 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.412295187 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.210923914 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.15981301 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.802150852 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.274828311 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.08212708 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.267186675 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.074883974 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.81506706 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.439888059 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.166546421 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.415842316 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12842256 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.485574215 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.445118792 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.419962046 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.188162848 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.177634891 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.147814377 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.191338281 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.148258033 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.328015312 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.264058815 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.156766443 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.680042985 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.187858279 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195550799 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.154190924 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.626137306 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.17090586 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152616819 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.843749579 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.174780221 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.269195991 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222309471 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.88471751 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.749382877 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.177393071 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.104481308 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.803457573 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.416083607 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.203948432 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.618368729 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.191864817 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.554876768 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.150668203 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.363865173 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.155315842 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.711913349 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195503422 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.425314948 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.110568523 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.364123722 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.357572079 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.171043005 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.157105521 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.077887342 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.314041599 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.026935413 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.122159881 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.154565428 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.828731589 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.57921821 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.339746332 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.601558639 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.973289292 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.153719166 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.446637036 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.526020066 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.766539058 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184166896 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153421249 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.47800438 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.273599092 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.461285421 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.417132475 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.161737196 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.178074835 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.365536939 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.279267903 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.071653774 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.646276411 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.737060021 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.854503715 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.163582725 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.356452036 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.481115254 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.432578291 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.18746401 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.232228634 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.557782426 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.41923033 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.220193811 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.080434945 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.153076175 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.550347462 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.555168494 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.251357615 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.395789501 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.471798921 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.664524583 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.785597639 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.571545711 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.518424472 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.590830608 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.566544848 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.371453261 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.536760775 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.48394076 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.747080251 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.566807477 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.3687276 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.244424654 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.436941104 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.028604949 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.865056401 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.399295384 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.15994981 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.083989042 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.363754257 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.162225773 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.542348794 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.72837366 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.404370091 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.420044169 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.61230238 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.695260925 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.334015207 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.179798916 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.12403063 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.178977691 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.176828927 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.15622595 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.647410213 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.45156007 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.170932421 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.097460433 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.82910869 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.084987921 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.370292584 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.336409367 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.190978798 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.715066965 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.417311325 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.250904691 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.440275244 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.394612216 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.191170978 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.084291479 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.890994496 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.104259924 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.201416168 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.58294961 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.174149341 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.1607596 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.361047632 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.088640446 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.203432575 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.163128403 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.361904728 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.740829727 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.426604059 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.281646836 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.406185138 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.464566998 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.980352975 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.178420589 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.431123822 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.085527127 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.761713574 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.862744115 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.199281535 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.229761866 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.15849086 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.16141779 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.430232926 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.487244477 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.250152268 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.858866446 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.190770681 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.183764737 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.492333322 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.243972677 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.161348118 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.164521595 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.624182382 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.39136121 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.159923962 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.138181339 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.372325023 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.243312648 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.356936163 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.233005937 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.674121866 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.164496033 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.998501877 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.253489118 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.109227986 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.16065216 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.844895075 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.220232158 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.160880654 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.430523377 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.814452995 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.363839352 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.555087205 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.02198683 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.346051692 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.201228438 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.163298057 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.160825278 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.549285896 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.461521128 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.125051749 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.429513814 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.208041613 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.167182291 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.822502146 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.130062021 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.160608034 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.830437722 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.044781367 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.893073145 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.55688311 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.174170579 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.198112134 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.165355077 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.088796663 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.162897018 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.337531154 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.147577311 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.166284603 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.534247397 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.479023193 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.246449821 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.168622192 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.164146155 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.169413961 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.37526101 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.677633732 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.178644304 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.863106357 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.366944513 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.171637949 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.655396134 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.608601479 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.410457855 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.201576098 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.343863886 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.408558454 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.705235527 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.350824275 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.144673991 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.391124534 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.165491641 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.435397219 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.438181243 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.165504193 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.376466561 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.747989788 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.448912185 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.517715367 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.475611209 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.227454069 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.357245466 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.12813464 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.169471931 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.151097428 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.429539829 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.217658815 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.135457268 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.173807162 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.721354002 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.900006844 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.641042988 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.322628294 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.489312566 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.94054682 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.920122032 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.16782745 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.091093527 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.165174929 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.191961597 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.169013946 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.09231366 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.832051313 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.889257518 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.379342507 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.476846374 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.092669617 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.370072911 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.746397427 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.093067402 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.135334577 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.165891661 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.414486905 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.094498896 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.169973827 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.121228421 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.455248294 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.865678239 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.435284044 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.167148962 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.110952246 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.172260431 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.169268499 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.166525963 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.252503382 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.167587908 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284468433 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.430686314 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.546376802 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.267105389 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.805919883 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.912631888 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.104374548 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21112105 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.784342945 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.737778909 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.455610679 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.290654947 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.845043405 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.112935519 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.16929339 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18490706 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.432258487 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.174290478 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.171594238 seconds)
  done (took 2248.761179537 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.20192202 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.245984583 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.23604646 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.209155573 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.189977601 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.20256966 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.198946184 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.190447443 seconds)
  done (took 59.763434158 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.167073401 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.128938624 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.176279551 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.169967549 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.168361729 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.172755725 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.363390892 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.197749589 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.168522593 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.173162098 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.170284543 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.172016707 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.168133505 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.642373687 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.187339701 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.546129514 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.209075959 seconds)
  done (took 82.115596702 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.239775968 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.404688101 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.183823881 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.887221345 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.194623129 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.559429002 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.188074278 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.185798956 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.313878811 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.483949361 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.233795894 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.203697543 seconds)
  done (took 94.192845158 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.18479415 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.183675555 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.185743611 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.184929638 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.184593182 seconds)
  done (took 13.026491452 seconds)
done (took 2803.538834222 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.425473515 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.284172613 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.261758102 seconds)
  done (took 6.649181016 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.328565641 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.377174419 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.49188843 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.511033625 seconds)
  done (took 11.818063843 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.472333145 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.551705859 seconds)
  done (took 7.090894167 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.612200239 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.193882381 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.574569936 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.187631954 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.187357498 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.187505515 seconds)
  done (took 23.671358797 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.178120077 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.18510714 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.185182182 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.186657665 seconds)
  done (took 10.838916431 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.185884422 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.96729775 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.187660187 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.199480616 seconds)
  done (took 22.642795712 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.397128306 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.320701685 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.947086386 seconds)
  done (took 13.769260297 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.810486626 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.631936107 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.803316927 seconds)
  done (took 10.349345618 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.043182326 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.009886281 seconds)
  done (took 8.157365245 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.33021947 seconds)
  done (took 4.433992082 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.019368751 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.498942137 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.668347952 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.712687803 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.772598012 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.404454872 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.525715703 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.46655723 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.590227307 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.645154393 seconds)
  done (took 28.408385578 seconds)
done (took 164.739691119 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.631950117 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.219592106 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.398945781 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.579073884 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.437087109 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.396825681 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.491427691 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.564577638 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.248195554 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.230317848 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.567600285 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.437338752 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.438618562 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.213133786 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.443670642 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.212553371 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.435483077 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.651077684 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.249185534 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.465428267 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.499106055 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.212031413 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.409801977 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.232377543 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.437560668 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.351437213 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.817510284 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.21202312 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.400948279 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.831408987 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.353464717 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.61083491 seconds)
  done (took 179.786097191 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.070482386 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.189731788 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.190825832 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.190183864 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.552668035 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.190302678 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.18922121 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.188971404 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.432150601 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.418647407 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.190545944 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.543865976 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.191426213 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.189212853 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.190356329 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.190965122 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.535115876 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.115282811 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.190478488 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.190371952 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.1916388 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.421280287 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.190830625 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.443993414 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.519463886 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.191136299 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.191135463 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.191102249 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.191021137 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.19057115 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.191674427 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.190744243 seconds)
  done (took 218.354126179 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.190956805 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.192391873 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.19254743 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.192419428 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.192929757 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.192939549 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.193771236 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.185372565 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.897311409 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.889987236 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.192599567 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.19264487 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.193709069 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.1922612 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.193844602 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.192151173 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.191735554 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.192466627 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.192290699 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.191293485 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.192463506 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.066529513 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.193841917 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.080543234 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.193933008 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.193047723 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.193408787 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.192560639 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.192069418 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.192941133 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.195075833 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.194068158 seconds)
  done (took 231.436404283 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.438221039 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.193317932 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.19489518 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.200364704 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.194656297 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.193477105 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.196672884 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.440336717 seconds)
  done (took 22.163543606 seconds)
done (took 653.872732846 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.577041572 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.928143082 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.326133585 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.223373423 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.481315893 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.261829634 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.212088431 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.280556217 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.859419674 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.290919417 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.60752953 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.221313085 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.912260227 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.2427969 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.328259217 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.279583831 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.601468864 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.848314681 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.351763066 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.880868087 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.418509015 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.166285286 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.300353844 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.900010621 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.620552891 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.1705644 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.253664662 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.596073602 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.220318077 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.453413393 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.888483218 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.480796311 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.23367421 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.215680783 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.276067736 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.257346075 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.434547182 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.227361902 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.32606582 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.966765921 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.870126453 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.742540448 seconds)
  done (took 113.846295146 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.202616356 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.201181921 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.2021484 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.20136777 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.20985413 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.201116279 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.201436314 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.201915289 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.201768216 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.202009581 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.201074844 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.210529358 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.202159064 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.210118368 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.202046721 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.202357352 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.202646824 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.209932604 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.202243093 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.202955387 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.20239089 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.203017282 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.199922041 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.202769829 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.202843741 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.202023086 seconds)
  done (took 59.407857977 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.198482014 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.371465915 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.488181339 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.233324404 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.19945973 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.201649265 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.227997899 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.212113768 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.201820432 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.200714671 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.295270049 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.203377433 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.211629508 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.48309487 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.23033219 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.199486367 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.198808622 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.199855656 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.381286019 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.216494629 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.228941454 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.211227464 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.229747242 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.220127615 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.20222578 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.200194247 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.203717159 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.607940694 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.215331769 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.296172585 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.259676674 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.23477572 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.553470303 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.500905119 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.270567727 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.208091495 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.200348148 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.340238596 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.212869277 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.201321171 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.229621316 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.211690137 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.490868432 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.729522019 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.217154561 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.201962768 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.606196162 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.352465812 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.250475644 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.217334253 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.498614671 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.233474291 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.202612375 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.203567045 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.239142459 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.216803886 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.20239269 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.447739713 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.218243535 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.230833308 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.212107871 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.20316355 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.390791547 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.212166542 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.377275698 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.212326223 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.208299039 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.203481098 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.493839738 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.235024263 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.724445749 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.21838955 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.202664121 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.299948037 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.382279592 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.634260595 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.218187597 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.389654725 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.565802137 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.241446169 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.215871994 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.592922565 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.245192648 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.214109749 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.203863656 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.202123882 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.189393505 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.246524705 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.230730025 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.635145795 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.726576449 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.468244803 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.244754404 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.217482449 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.205976369 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.44951635 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.215685225 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.203696139 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.486010508 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.753797966 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.219101018 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.210940233 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.707314613 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.220942142 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.234905567 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.21717745 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.504386526 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.235990868 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.246640607 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.20815499 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.210962667 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.207267869 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.234962177 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.215298479 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.205417208 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.699649595 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.357713512 seconds)
  done (took 271.782966389 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.208767746 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.20529232 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.203962588 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.204767551 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.203474361 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.204999161 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.204503021 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.204960317 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.205494336 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.204812311 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.203913621 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.206200825 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.207905325 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.204933278 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.241730494 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.206817874 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.695074953 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.205779495 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.205638747 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.207046437 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.770244994 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.211716444 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.197880785 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.207496427 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.208049991 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.207371049 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.2153904 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.238370451 seconds)
  done (took 177.02213953 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.207469488 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.2546361 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.220467872 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.254124312 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.221016231 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.207985701 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.228069609 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.222935721 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.213847541 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.208642935 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.208350675 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.236908508 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.216794967 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.284003651 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.237791215 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.239072612 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.286892468 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.216880315 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.208673203 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.208211562 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.255539107 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.224320132 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.235996383 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.262364907 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.221976356 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.255901949 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.224120829 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.209213872 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.209109585 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.299533232 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.230338589 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.236763414 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.24319104 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.228543067 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.303084888 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.302225928 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.293471743 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.239026878 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.212873905 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.209355152 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.208933271 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.212456657 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.257193311 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.22273624 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.211216636 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.302466199 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.231794554 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.210105634 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.230702472 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.209621442 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.221381402 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.226747175 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.242869307 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.310629104 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.258349979 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.236908434 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.23275045 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.228650561 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.212019921 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.285864519 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.222015814 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.300008931 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.233245933 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.214453225 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.213790005 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.214699919 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.259473933 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.246713853 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.28948047 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.221241448 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.2856417 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.267946254 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.225774089 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.212275917 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.212063265 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.260052231 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.300796024 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.268830885 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.27265242 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.249077311 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.224772365 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.212224017 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.215102587 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.240281585 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.219232546 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.30215131 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.307012024 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.22043863 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.212585032 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.212958949 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.214036363 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.23520902 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.272034882 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.255508001 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.298263675 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.249375705 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.248005473 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.220423091 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.225114732 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.217914229 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.243749317 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.220246091 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.225185639 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.552088499 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.248932679 seconds)
  done (took 237.62434254 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.593968469 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.264962925 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.284704428 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.484371948 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.602347357 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.335584963 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.251921183 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.270888901 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.273033417 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.380340882 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.321860138 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.307656006 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.251220705 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.23684208 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.262475512 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.273055632 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.296131408 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.555426525 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.359132921 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.047284267 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.252906686 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.511256922 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.545769661 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.602783422 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.302042205 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.648035126 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.897932084 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.349808734 seconds)
  done (took 71.898910587 seconds)
done (took 933.696124666 seconds)
SAVING RESULT...
DONE!
