cset: moving following pidspec: 31352
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.8167693 seconds)
loading group "shootout"... done (took 1.054411857 seconds)
loading group "string"... done (took 0.680132091 seconds)
loading group "linalg"... done (took 8.669910859 seconds)
loading group "parallel"... done (took 0.167124298 seconds)
loading group "find"... done (took 2.933097927 seconds)
loading group "tuple"... done (took 2.103920127 seconds)
loading group "union"... done (took 14.884850552 seconds)
loading group "dates"... done (took 1.478897399 seconds)
loading group "micro"... done (took 0.221193093 seconds)
loading group "simd"... done (took 4.810376454 seconds)
loading group "io"... done (took 1.077433135 seconds)
loading group "random"... done (took 9.530590123 seconds)
loading group "problem"... done (took 1.515677937 seconds)
loading group "array"... done (took 25.256750459 seconds)
loading group "misc"... done (took 1.878254161 seconds)
loading group "scalar"... done (took 43.500409806 seconds)
loading group "sort"... done (took 3.344657904 seconds)
loading group "sparse"... done (took 12.574754607 seconds)
loading group "collection"... done (took 18.040059619 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.414430147 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.110733799 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.123449894 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.116304991 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.178703884 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.116121209 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.123571407 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082201047 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.846850568 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.130831491 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.110258546 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.407794808 seconds)
done (took 5.073839957 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.161885032 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.086016318 seconds)
    (2/2) benchmarking "String"...
    done (took 0.079527956 seconds)
  done (took 1.25726929 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.067624642 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.059742867 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064016044 seconds)
  done (took 1.282695317 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.062201471 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.130591031 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.063557987 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.063606214 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.063804588 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.063216823 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063105218 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063188488 seconds)
  done (took 1.605750135 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.068537007 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.063901324 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.062703207 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.064211702 seconds)
  done (took 1.353632937 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.062208418 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.116508339 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.061689867 seconds)
    (4/4) benchmarking "different"...
    done (took 0.061836143 seconds)
  done (took 1.393311447 seconds)
done (took 8.225787633 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.133794779 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.807938393 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.750292894 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.119457247 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.242131137 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.359641647 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.119159246 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.176487118 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.084749771 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.071590533 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.116604093 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.07437713 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.372133681 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.481037868 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.067413002 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.16236135 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.628002941 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084421942 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.130218066 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.368514905 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.069629988 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.083999182 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.080340478 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.068143191 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.254571368 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151359455 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.657968493 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.089163468 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.06626801 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.092503021 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069481848 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076377092 seconds)
  done (took 10.240655837 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.08811636 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.085789777 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.065697272 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.120015859 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.091519278 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067205213 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07380406 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.065913938 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087157582 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122102375 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.087622256 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.096241966 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065581144 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067492536 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.071685485 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.193528432 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.079214109 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.07997208 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066000814 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079666681 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.101423793 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.075031748 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07497109 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.074516439 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.128901359 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.16424255 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.092758653 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.095077222 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.06446003 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.076202686 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.112351488 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123996912 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065448387 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064178096 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.117361074 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.094031196 seconds)
  done (took 4.424578863 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.857602457 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.092778831 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079279622 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07082538 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.102522286 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.110146323 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.116789358 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.117258699 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.09471611 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06593144 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.151199438 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.646077963 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.095280492 seconds)
    (13/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.113389347 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067786373 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.115328643 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.346455319 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.046485179 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.06690108 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065153595 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06763044 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06663638 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.108056561 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.0628083 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.172725881 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.562641195 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.067164698 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066169591 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.093140509 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.06228246 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.134155651 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.088914337 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.066660345 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.536172905 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.063028896 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.061441344 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.187610246 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091625638 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064192647 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.065116437 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.075679871 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063773544 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.105353186 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.076163688 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.491571497 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066670204 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.559720456 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.219255029 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.069777133 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.068022008 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.098132043 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.061794139 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.064397986 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.244444057 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.132521185 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.064143922 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.266414614 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066939924 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066898883 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067699925 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.097452459 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065561737 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070173293 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07127079 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094172851 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.782918009 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.085525741 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.093893659 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065723592 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.391113479 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073169898 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067572697 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066301872 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.065350122 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.101950006 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06355092 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.063368675 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.104992622 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.09087648 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.08548869 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.067152251 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.064145661 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.063035846 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.315648435 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.144398848 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.063726683 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.064424105 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.464954594 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.061237429 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.063169999 seconds)
    (90/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.065057176 seconds)
    (91/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.061343568 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.088689074 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.063629933 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.171371819 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.061806132 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.062359166 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.095886208 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065309092 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.688665769 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065202405 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.440308216 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067494195 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098949094 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.114879347 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064704442 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.095101144 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.065280963 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.0619388 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071140666 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.062646841 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.061993312 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.066913442 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.062816717 seconds)
    (114/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.061772852 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.063585453 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.066274291 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.065547732 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064697484 seconds)
  done (took 22.640907818 seconds)
done (took 39.262096258 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.302654234 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.074557017 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.074237633 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.074092945 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.074522647 seconds)
  done (took 1.743195972 seconds)
done (took 2.971872655 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.240371163 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.07214548 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.061704991 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.191413578 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.08286582 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.167463692 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.202851263 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.151529563 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.083124631 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.082875298 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.083257297 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.209378591 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.214077175 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.083294134 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.152982116 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.214748491 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.083631506 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.061326485 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.083348148 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.083412614 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.083323118 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.061312759 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.083456791 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.083314206 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.151503146 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.083568498 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.060902714 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.152445108 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.083115074 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.153017427 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.083143485 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.082721855 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.08320767 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.152530716 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.083130674 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.151082236 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.060964402 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.083241637 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.083675445 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.083220194 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.083412556 seconds)
  done (took 5.819001463 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071608785 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.186521922 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080750195 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059629744 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.068578921 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079192782 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.058972282 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.078716043 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087829023 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.078975494 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.078941883 seconds)
  done (took 2.147431172 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.067063209 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079532222 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080214413 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.05879029 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070033285 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079746383 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.058952314 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079244427 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08190705 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080314673 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079895123 seconds)
  done (took 1.988431136 seconds)
done (took 11.113143575 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.092123146 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.0620129 seconds)
  done (took 1.314135965 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.215713516 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.475015895 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.565770534 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.088313409 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.068732841 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.081741019 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.187932524 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.064515487 seconds)
  done (took 7.089415457 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.094679262 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.06656864 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068512953 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.065450552 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.066003843 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.064356808 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.064392426 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.064806581 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.065791739 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.064354952 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.064189053 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.065458558 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.066338216 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.064768895 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.065699488 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.064026109 seconds)
  done (took 2.343120899 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.099377058 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.065742527 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.096019244 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.059136716 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.068224408 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.05914105 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.06732148 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.068972432 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.066512883 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.067590239 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.068838493 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.067611564 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.06802966 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.067994617 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.069067907 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.069429399 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.069729986 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.067216126 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.06963219 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.069981253 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.06876577 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.069368438 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.070307135 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.06761578 seconds)
  done (took 2.966248354 seconds)
done (took 14.886937304 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.166793882 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070848049 seconds)
  done (took 1.406371647 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.063950443 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.064129408 seconds)
  done (took 1.311961031 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.068740556 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.057333554 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.072547453 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.06576112 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.057895716 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058168332 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.071505769 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.058299426 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.058070266 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.058191322 seconds)
  done (took 1.80937631 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.059712706 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.06425057 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.062582508 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.060701783 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.062797526 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.059051439 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.061430887 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.059347704 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.064605673 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.058370225 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.061920905 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.078162282 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.061597617 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.079343544 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.061421174 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.062088274 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.063198653 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.061316937 seconds)
  done (took 2.328079812 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.057538817 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.058335504 seconds)
  done (took 1.305887388 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.061098783 seconds)
    (2/7) benchmarking "second"...
    done (took 0.058373569 seconds)
    (3/7) benchmarking "month"...
    done (took 0.060301092 seconds)
    (4/7) benchmarking "year"...
    done (took 0.060488403 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.058578806 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.058094504 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.058801106 seconds)
  done (took 1.603231752 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.406608842 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.120099749 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.337875902 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067446314 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074430155 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.250957796 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.061103741 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.065655705 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.065335388 seconds)
  done (took 2.681951151 seconds)
done (took 13.641959037 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.078660214 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.174759712 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.083234238 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.369526074 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.087954821 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.064198394 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.109076863 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.168255033 seconds)
done (took 2.344060927 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.273488877 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.197970037 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.38371692 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.122620043 seconds)
  done (took 2.901362591 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.325568917 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077171883 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075164871 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064921832 seconds)
  done (took 1.748611936 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.061932759 seconds)
    (2/2) benchmarking "read"...
    done (took 0.068291855 seconds)
  done (took 1.333002012 seconds)
done (took 7.465600712 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.067595299 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.087971339 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.057941695 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.063615315 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.059704167 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.060640205 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.060218045 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.059739934 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.059770868 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.06040413 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.058737675 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.061109687 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.062330531 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061749791 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061733843 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061511688 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062233215 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06163375 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061464823 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059771258 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061825173 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062153035 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061160266 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061091836 seconds)
  done (took 2.727905178 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.075135649 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.062162972 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.063415903 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063521759 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.063322763 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.063525178 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.06421158 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.0637212 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064984951 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063331291 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065547195 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065376904 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063441641 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065474122 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063324468 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065299572 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064879559 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064011781 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063612106 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065821803 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.065068859 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064095033 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065308213 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065245382 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.06599581 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065847862 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063714406 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064094414 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065224398 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065337955 seconds)
  done (took 3.15679047 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06322671 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.056676441 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.057278589 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.066470009 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.056746147 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.057286893 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.057573568 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.056850684 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.057238002 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.057976883 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.057532378 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.057244504 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058464653 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058987568 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058357189 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059094382 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063652437 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078118118 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058824669 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058309441 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062816979 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058688135 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058528337 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058597085 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058318035 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.057240839 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.056728278 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.057401341 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.057120721 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.057894712 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.05742888 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.061802319 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.062314118 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.057244702 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.067647521 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.062073205 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.057079505 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.063538681 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.058310464 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.05716154 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.057200508 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.057595684 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.057260111 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.057168518 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.067735042 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.057528143 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.058574676 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.057826 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058125925 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.057435443 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.057568878 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.059040167 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.066100414 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.058668532 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.057240722 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.058439509 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.057261941 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.057929985 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.057556601 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.057210689 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.057245574 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.061067465 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.058569687 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.057942737 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.077025085 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.058529911 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.067617949 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.057851297 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.057690502 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.061194164 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.057973226 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07533058 seconds)
  done (took 5.515429967 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.067215161 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06778518 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.075278346 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066307347 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060510692 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.057852505 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061121161 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058013662 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066632477 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.061591171 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058193633 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061011097 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066917489 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06132124 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058899259 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066567291 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.061342646 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060771473 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.057971573 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061724466 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059213646 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.061256561 seconds)
  done (took 2.599475527 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.132628836 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062643533 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.10151583 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066028895 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065246967 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066475618 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.062911619 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063160982 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063307733 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063818435 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063704474 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063400507 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065360262 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063558082 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063593617 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06381339 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063517518 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063448225 seconds)
  done (took 2.471497226 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.072698946 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.062811699 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.085573745 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063193633 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.062604057 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062343719 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065875808 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066161716 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.062729374 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06290035 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.066562053 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062692462 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.062370698 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063090915 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062549471 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.062814539 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.062441856 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062858946 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066335802 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065830826 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066557422 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067677901 seconds)
  done (took 2.655034211 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073253033 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.061199231 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.076845411 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063202512 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057294278 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.057385173 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.062895523 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.06187094 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.062800808 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.061869733 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062565114 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.057683162 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.063605164 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.062312207 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.063810491 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062440771 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.061734598 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.062215978 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061668607 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.057476749 seconds)
  done (took 2.471346023 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.067885783 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060113677 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059651291 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064248726 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.05990888 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060021688 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064629779 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060275157 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060379056 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.081656108 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060318793 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070222475 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065376052 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06294602 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.060255089 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064599641 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064553788 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064629489 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.060012097 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060143348 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.081383813 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.060238097 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064492583 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060221315 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060162668 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.059905264 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060049175 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.063111758 seconds)
  done (took 2.999635885 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.061518288 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.059915795 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06046099 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.060683165 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.060508993 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.060277262 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.060401918 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.060590432 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060152995 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.060886449 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.060855894 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.06072374 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063169733 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.060551099 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.060646117 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.060471001 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060241786 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.060799162 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060751523 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060709966 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.060321119 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060267384 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.060176534 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.060634394 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060705063 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06055096 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06093613 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.060739935 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.060357843 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.060609031 seconds)
  done (took 3.044146284 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.069444179 seconds)
    (2/2) benchmarking "in"...
    done (took 0.067680233 seconds)
  done (took 1.36134929 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.058530323 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.073487042 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.056528556 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.069120241 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06461445 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.060841593 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066617893 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065176773 seconds)
  done (took 1.734567698 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.062390539 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085687092 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.058668497 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.059217851 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.061679951 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.123261938 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.071065054 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071017933 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072819442 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062223399 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.059365894 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.070548776 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.058146379 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.072384944 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.059693556 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.067680955 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066211273 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.076636307 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.071824578 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.0573008 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071600316 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059179836 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.057575494 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.05956789 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.058577697 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.065926641 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.074102859 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.071273549 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.06760538 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.05743111 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078237109 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.057914044 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.059367554 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068711151 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063928592 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059822756 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.096873707 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059894346 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064095925 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059010428 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071318301 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080327725 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073444662 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.076945359 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060344189 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.060661643 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058504245 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.059901354 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.062355999 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068320513 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058203951 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066177499 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.05754067 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.059655076 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.069188679 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.058564152 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06315522 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.067626447 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071823914 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.068966841 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.066677356 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07329169 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.066901432 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.064447204 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.058302564 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.077034452 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.058913863 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.071030671 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072325712 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.058785519 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070148242 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.056986762 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.056482733 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.057704127 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.090767866 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060002601 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.058569247 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.057559387 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.057911636 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.058807561 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.067205124 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062544762 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.065195901 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061135424 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073513504 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.067109859 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.058027557 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.063727739 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.075789133 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.061631133 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.058284718 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.074410539 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.061618972 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.057725523 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.0754392 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.06807525 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.059619546 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.058897034 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062463911 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072638566 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060052867 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057236297 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067264888 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.059394799 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.05997563 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.062207461 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066428214 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058926422 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069699863 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063861679 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060984264 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057219685 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064020545 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060170715 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058126926 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068601599 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059011603 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073203252 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065454741 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072881192 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074142267 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.06886366 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073409964 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.057757438 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.056380797 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075509897 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067480288 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059052983 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075085917 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.05697328 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.070478407 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057017857 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059124311 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.19558732 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.05846556 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061415876 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.059120938 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063172625 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.05978045 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060343981 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064298023 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.06744811 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070423305 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059076297 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067228425 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058336567 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.073812175 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.068172806 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06248828 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060813254 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.058543305 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.069500666 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.064424173 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.06749248 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.056941781 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.057997885 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.057882725 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070067548 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068908594 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.060877311 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066088435 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063681392 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.058645768 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.058580658 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.059740553 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.062809948 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061834934 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.058720083 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.065599719 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.066163604 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07142049 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063769488 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.066913301 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.056886238 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.057309704 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.059104403 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.057085165 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.062248917 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.066808068 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072903603 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.069222089 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.078643083 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.057802079 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.067818701 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.059073486 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.07401394 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.071634811 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.05852464 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061850813 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.056751329 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.059223408 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.066961125 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.068951891 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.071124343 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072469991 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.062438894 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.062399559 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.058884111 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074068246 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059282752 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06721213 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.066960618 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.061630471 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.058659734 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.060422309 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068265197 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063565005 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.058776754 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.0745889 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.064224184 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.05874799 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.072757327 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059272424 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.069853482 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058326742 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.062363798 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064827431 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.060835755 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068740735 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.0744448 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05723819 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.058254209 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073676516 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.059217431 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059536443 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.066123454 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.072910572 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.062059432 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.065880528 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068266239 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068362818 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.062782755 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.067953037 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.05890178 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.067761011 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.060566301 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07045628 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059014857 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07623306 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.056689076 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073292619 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058279198 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069408008 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.058532745 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.067694479 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.058783098 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075387906 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059577435 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.058783114 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.069471974 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.056590401 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068587818 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058019817 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063249144 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06580164 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069247944 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.0601379 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.0676034 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059198565 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.066545365 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062279402 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.065795476 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.06690693 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.062210937 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057342054 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066180489 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068668514 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066038461 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.058891786 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059450292 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059322745 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.199431237 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060407147 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060434556 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067330563 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.063426199 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.064126917 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059529336 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.05979397 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.059496808 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.066755185 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.067627696 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.075542558 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067035766 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.065823836 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.067256935 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.057208621 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073470923 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.058334513 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.068447554 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.056758017 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.062704007 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.067214034 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.058084145 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076487904 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.058971839 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.065933528 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069859098 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.066266086 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.061271425 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.0751861 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.060500828 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.066794376 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.066092595 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.062743776 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.064533053 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.059234533 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.067118673 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.067687087 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.068403393 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.058498621 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.065415621 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068139625 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060119031 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.065795406 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06062937 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.067908406 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.06058393 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058003449 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063585412 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070468179 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063777546 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06418775 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059524301 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.057259148 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.058174686 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.063655316 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.062346969 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.066920841 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07309622 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.056774375 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.058758412 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.057183371 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062036824 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077018654 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068941578 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067303207 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.063760114 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058191641 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060107583 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.059620481 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058038044 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.060819955 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057013135 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057218724 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068298911 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059361006 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.062529006 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.057972417 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.058629325 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.067997552 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.0619693 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.05845203 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.064318468 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.05757283 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.06289236 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.056865267 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059109431 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.062484386 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057164197 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.061251221 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.068253529 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.073827027 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.064385216 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.066664458 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.058634445 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.065685346 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072825294 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063922301 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059133346 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.067252757 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057052671 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075739229 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.067149434 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.066417482 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067807602 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.05896005 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.074594871 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.062479182 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.067968721 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073057295 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.05903206 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.064452741 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.057516845 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073246916 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.062482519 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.057591814 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.065982175 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066141913 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.063871247 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.069921368 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.058492087 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.065597268 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062340435 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.061101826 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.059123461 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059015954 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.066716044 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074038739 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.058337018 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.061606574 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.065751428 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066244686 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062085226 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.06971472 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066166241 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058588716 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.059076582 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.061405797 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.194089024 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.070994404 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.05953785 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.063664129 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.063124933 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.057907503 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.064954918 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074404252 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.067267731 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.067431761 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.057297185 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.057084975 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.075175019 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.061802657 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.060566121 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.066960007 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.068837698 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071138204 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068757531 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.075691685 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.05966972 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.065294704 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071484571 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.059533779 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.058981254 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.062864081 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.060296389 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.068357727 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069055884 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.066832774 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060656155 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.065673462 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.072098337 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.059060224 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.062442475 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.061552113 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.058363012 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.068179966 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.066021381 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.069674462 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.058857127 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.057553217 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.061525361 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.066925859 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.065428371 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.06702946 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.058311295 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.063515223 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.070799407 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.065499533 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060114643 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.057201945 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060399836 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067010487 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.061763981 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057186228 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.062592454 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.061673615 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063778981 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.06700476 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.062614707 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.057283154 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.074549716 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.065555475 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067037185 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059338232 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.059166132 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.05830072 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057419082 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.068625957 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057614827 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059131314 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.06229023 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059255074 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.075636837 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.065996846 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073544181 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.058724542 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.062450111 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057629107 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067445863 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.062310225 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.057895636 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.068016936 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.056850435 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073052811 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.069185495 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.06219025 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.057373385 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06319324 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.06522951 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.072526522 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.067315264 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.067242381 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.061142591 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.06727737 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.059358615 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.068745334 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.057367271 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.056766086 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.068184497 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.066633135 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.06997805 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.057246907 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.067951347 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.059531082 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.066656035 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.065709638 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.059721241 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059620523 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.059384164 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.067444659 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.062558478 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.067348002 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.06266086 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.074814526 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.058925724 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.069199317 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.067390933 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.068572761 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07161542 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070145006 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.065786276 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.058461614 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.065130816 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.065825441 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059100978 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063020322 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.060623325 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078817386 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059258074 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.058874492 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071160447 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.063289495 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057565536 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.063136268 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06222755 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.067637259 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.058536762 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.068097261 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.061239101 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.058243113 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.062076659 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.062384561 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.056269689 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.056870576 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.057700723 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.067684169 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.062069406 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.057800195 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.075943197 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.059105408 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.06630741 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.068531045 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.064233314 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.058823648 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.056404597 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.058649229 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07094479 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072737786 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.061242851 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.066452604 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.05874643 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.06688364 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.056760847 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.066606204 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.065645823 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.066345212 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057017451 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.057781657 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.072340843 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072554362 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.062148056 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.066620163 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.066586373 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.058945875 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078737698 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.066765407 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.057748685 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.067302082 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058134467 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.056504061 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.055999704 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.057598653 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.068030343 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.056456338 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.058831559 seconds)
  done (took 39.956531227 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.10169108 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060386688 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.05981419 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059688248 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066980407 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060465854 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060351255 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061429036 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061379092 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062633221 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060617081 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063269513 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065959585 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.0725545 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067536489 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063529007 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.05990963 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060389226 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.05970887 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060302736 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064962122 seconds)
  done (took 2.771114845 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.061055705 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.061251586 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061628895 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061569509 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060610578 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.057941898 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061268292 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.057698593 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.061671213 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058030528 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.061370626 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.057876883 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.058236738 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.058028674 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058194606 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059197379 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.061443492 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060865219 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.057574393 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06095535 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059128194 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.060723719 seconds)
  done (took 2.646042339 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.058874428 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.057646165 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.066175181 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.056737578 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.056847297 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.06027097 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.057109063 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.062106102 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.061848055 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.062114154 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.066586444 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.058100713 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.056854013 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.063218054 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.056732921 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.05811427 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.097848667 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.058463506 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.058357363 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.057599619 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.060166009 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067041667 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.057220431 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058493253 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063135364 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061615617 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.057286175 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.059797083 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.057368439 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.06192039 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.058573707 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.057063179 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.066471931 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.065729317 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.061692036 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.062193781 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.059017622 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.058291299 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.05736822 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.057390893 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.065635771 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.058327982 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.057060161 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.059262709 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.066296323 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.056888847 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.057236706 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.066830674 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.056934167 seconds)
  done (took 4.316098968 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.066153706 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.107770268 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.062699099 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.089955836 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.068582279 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.062204009 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.062649641 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.09041812 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.058119071 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.058631485 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.069341514 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.06944009 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.059459753 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.061091666 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.063990901 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.059932971 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.060326167 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.059098595 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.062260141 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.059443168 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.062332763 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.063628361 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.068576066 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.069043873 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.060652463 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.059163406 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.059408 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.060837355 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.068930526 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.062534 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.061161477 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.061455962 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.069058259 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.063400828 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.059105095 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.059353998 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.069544861 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.059476274 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.059056604 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.058041157 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.059219149 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.0604416 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.063730622 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.069210043 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.059465287 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.064814574 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.059419355 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.057918442 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.06856158 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.059098949 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.062693462 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.069186568 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06037638 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.059806578 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.061466295 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.069070342 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.059885841 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.059012738 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.059949556 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.068765109 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.05825647 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.060477619 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072540845 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.059392953 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.062366165 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.069969748 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.064609787 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.060825951 seconds)
  done (took 5.835179102 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065187444 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.09128839 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071363197 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071328061 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066679166 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.067352181 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.067026592 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.066828437 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.066895036 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.070228503 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.0667496 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.10066508 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.063916535 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.068498342 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.067117993 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.067236784 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.067053315 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.067198187 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.067464819 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066743359 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.066947074 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071177785 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06725712 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071110925 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.069255851 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063763083 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.067237764 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.067123004 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071510676 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.067128074 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.069217848 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.066768481 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.066869959 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071470605 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.069042882 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.066454865 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.058206143 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06690036 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.066845041 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.067175972 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063764609 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071428684 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066654633 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.064036367 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.067115885 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.066665309 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071523685 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.069328008 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.068278703 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.070310694 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.067196074 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071589086 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066885208 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.066787479 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071918145 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.073419182 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071467814 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071485298 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06711155 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071568559 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071695303 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.073816057 seconds)
  done (took 5.645911844 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.068687756 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062750859 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.074572902 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.056905208 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.057024269 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065942059 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.057077834 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.057148494 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063051188 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.063020476 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064492014 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065842839 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067512287 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064716215 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065909378 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067526071 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065585871 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065773432 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063311927 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065641583 seconds)
  done (took 2.642069747 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.071828326 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.074681004 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.062399956 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065663368 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.062138673 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.0657614 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.061701464 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06238783 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063038333 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062817734 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066608522 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066484137 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062944088 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065690196 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066184777 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065721603 seconds)
  done (took 2.393446522 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.060735864 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.063892482 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.062822875 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.058443501 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.059776052 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.057944718 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.05882681 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.05836114 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060777227 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072291361 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059500267 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061276668 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.058497925 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.057356384 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.057609126 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.059994006 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.05932371 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.058303054 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.058268484 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.062065823 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.066189157 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.058967319 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.060357594 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.058015617 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.060665179 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.065703321 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.059062273 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.060127871 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.058099766 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.060498008 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.060119612 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.064109009 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.060072946 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.058677529 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.057447229 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.05789805 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.058376356 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.06032696 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.060621676 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.058618501 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.056787157 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.062995064 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.058640327 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.058752845 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.059570455 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.060442306 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.059604438 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.063475279 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.058485628 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.060043477 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.058583582 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.0597274 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.058771802 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.064961518 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06015993 seconds)
  done (took 4.659101485 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073188738 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062085778 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057047028 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.056762807 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.061775702 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.062340068 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.061714836 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.062095205 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062689657 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.05712958 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.062681333 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.061690564 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062595542 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06216707 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.062690554 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062368829 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.056729358 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.062657631 seconds)
  done (took 2.478436804 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.062794105 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062556071 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.061144566 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.058992509 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.058645669 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062956443 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.057113578 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.058450019 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058659457 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.058779715 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.05851546 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.058306489 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058465713 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.058313083 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062258413 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058919064 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.058468052 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.057225561 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.058938728 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.057124224 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062714263 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.057448088 seconds)
  done (took 2.666863165 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.083146942 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.080112961 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.122651581 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.076283849 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.084613522 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.067984914 seconds)
  done (took 1.875627333 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.089557993 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.092817417 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06197758 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.061963141 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065958418 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064302626 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064597125 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064634295 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067373463 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067920325 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0646852 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06797007 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067278699 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069107919 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065931235 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066006097 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064854965 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064563329 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.062092247 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071025275 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06482085 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067966416 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064863012 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064809063 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064738792 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06928185 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067607324 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068299518 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064487791 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06766774 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066254137 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064722911 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067669257 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067977301 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06231993 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067567919 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06509236 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071477058 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066006892 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069264326 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06169978 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065996191 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067768477 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067943018 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06787313 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064953231 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068073081 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06502084 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065143118 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072451864 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066463378 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069407804 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066488366 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068158376 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067774514 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072743248 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067990727 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069142993 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066376142 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068227467 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069534897 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06658816 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069674193 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068751516 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066396068 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069614392 seconds)
  done (took 5.823234961 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.098345591 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062152205 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065354331 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068152436 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06936103 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064795697 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064979815 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06500689 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06491155 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.062457781 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.09850834 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065371499 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069874356 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072531677 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065386618 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064758304 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064747242 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069413387 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06281936 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072403189 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064605695 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069479567 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069032959 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069400627 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068182324 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066169509 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064968086 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064686541 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064775483 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064940018 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067364065 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064977776 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069113818 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062344176 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069395879 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065196002 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065098327 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06756003 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064759596 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066362841 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069295615 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071269413 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064629084 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064935512 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068381019 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064936081 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064820059 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.062439711 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064940819 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.062328666 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068435963 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068726039 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068305509 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069666403 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065311496 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065005133 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06550591 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065245485 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065270801 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066888606 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06976591 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06501478 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072651637 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065258935 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065191757 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069937016 seconds)
  done (took 5.839610275 seconds)
done (took 121.491764108 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.193435964 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.16426961 seconds)
  done (took 1.711416789 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.070667787 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.15253029 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.070625258 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.070503462 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.100350801 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.099423185 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.071489071 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.068053799 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.071279569 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.068727392 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.127645591 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.071950641 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.068320823 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.068269883 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.068023068 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.06830948 seconds)
  done (took 2.685979441 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.102415494 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.177181172 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.097745454 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.066277198 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.145624388 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.072546754 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.068684817 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.072434226 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.072253358 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.06636649 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.102140345 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.078719093 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.071821015 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.073065752 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.0682178 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.070970006 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.072402444 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.072347667 seconds)
  done (took 2.925662681 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.097660613 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086393166 seconds)
  done (took 1.559715759 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.146964164 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.100048095 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.137287201 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.333101787 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.131083848 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.132931347 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.135679756 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.12945983 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.102759664 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.125398627 seconds)
  done (took 2.843184003 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.100565548 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.099788358 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.296511989 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.096952369 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.077637438 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.072363582 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.070751783 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.075263268 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.070710666 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.072421758 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.115877221 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.070986873 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.068842559 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.118597294 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.091440949 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.101403039 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.066847385 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.073516633 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.075612555 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.067078569 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.071279017 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.07553599 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.168476385 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.073599731 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.092625864 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.070978282 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.072750323 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.069893202 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.070187575 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.073535167 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.074176149 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.092787923 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.074078513 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.078396478 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.072239219 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.090052699 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.067669936 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.091935394 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.070448082 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.068817905 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.071275262 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.074907178 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.068497115 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.073403132 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.071229486 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.072875229 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.075289946 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.067181625 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.071050232 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.070057522 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.069211647 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.071684233 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.072136674 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.072508073 seconds)
  done (took 5.887662004 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.101979186 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.102664844 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066388253 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.107567303 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.100350738 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065971734 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.099367693 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.095578449 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.102150989 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065526791 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.064996539 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06497351 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07141114 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.073660385 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.108740522 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10200844 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067437401 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.065781317 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.101793242 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.101398783 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.065057034 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.097011854 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.095474815 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.100939832 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06475296 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066152783 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.064963363 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.065531519 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.069664664 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.070548098 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.064995713 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.070965848 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.074910793 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.070319938 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.064174314 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.064459567 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.064526192 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.071222642 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.071605117 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07134529 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.070446261 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0643203 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.064435989 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.065242609 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.065937307 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.064441774 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.070101028 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.070966847 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.070249467 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065043877 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.065609588 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.064702671 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.0656106 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.070800614 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.069781707 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.071431308 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07106908 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065042243 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.064695492 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.066366809 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072210716 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.072113878 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.071356857 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.065956985 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.072314307 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.065304667 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.072503105 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.076655943 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.064839023 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.065512793 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06518785 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06468056 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06537654 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.070218918 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.070093426 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.065331232 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.065146389 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.064483888 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.072327644 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.070125559 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065142287 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.069801641 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06459863 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.065227963 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06541841 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.065618198 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.070216009 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.071149535 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.065505266 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.064909667 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.064962347 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.065078412 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.064481285 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.069765259 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.071092583 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.071682262 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.070619596 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.0655444 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.071169052 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.070781306 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06548896 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.071012209 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.065501259 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.065755497 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065607452 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.070933847 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.069913005 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07146023 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065371371 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065021366 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.070360038 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073076819 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.064965806 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.069776831 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072198422 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.199636873 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.065725182 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.073770819 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065821408 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.072390239 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065440366 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072538999 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06563636 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.070639528 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065036959 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.064384656 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.064768656 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.070709362 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.065662704 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.064975563 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.065621055 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.064916309 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.070872484 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.073380373 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.065701461 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.070497542 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.07008484 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06521503 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.069922334 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.065187781 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.071055003 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.065172365 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.065249634 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.064321748 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.072695288 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.065024567 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.065178398 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.064551583 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.071702886 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.064678356 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.072151783 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.069708776 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.064866403 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.072920437 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.072263176 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.069979336 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.07241943 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.065539218 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.065174318 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.064739818 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067660148 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.069261348 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.070840636 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065144133 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.064974804 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.069318124 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.072414029 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.064530285 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.070152836 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.070561942 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.070525555 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.065759714 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.065218567 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.073046566 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.072282409 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.07033204 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.07002549 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.071153111 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.064831941 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.070103718 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.070523838 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.064899784 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076403648 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.064774864 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.073074998 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07097517 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.069539996 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.070397667 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.071638524 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.072531887 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07219457 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.074381407 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.065002922 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.064583424 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.070371288 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.0650531 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.064820542 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07001749 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06557515 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.065536734 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.074051743 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.065410496 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.071992133 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.06467013 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.071039867 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.064432825 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065347563 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074502495 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.065080782 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.065580625 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.070747785 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06516021 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.070458516 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.072790314 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.070804092 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.065099409 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065895588 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.071247173 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.072142234 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065149518 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.064685974 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.065879624 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07047324 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.069674303 seconds)
  done (took 17.268936623 seconds)
done (took 36.271478222 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.161133955 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.107916065 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.200060268 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.190281602 seconds)
  done (took 2.134889953 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.094330951 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06135574 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.074712839 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.083422025 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.061693132 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.070568761 seconds)
  done (took 1.86218917 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.187041284 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.165926802 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.229812961 seconds)
  done (took 1.993749693 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.354921376 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.139957488 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.206109519 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.483635264 seconds)
  done (took 2.695801103 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.104146866 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.09286243 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.071634393 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.102896787 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.078912132 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.058609695 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.12332372 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.0653775 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.09239762 seconds)
  done (took 2.262680249 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130282991 seconds)
done (took 12.51010457 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.276547855 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.210546212 seconds)
    (3/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.109402753 seconds)
    (4/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.198590382 seconds)
    (5/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.238135856 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.117926652 seconds)
    (7/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.071175622 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.08624794 seconds)
    (9/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.238624603 seconds)
    (10/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.172485241 seconds)
    (11/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.086161957 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.086514091 seconds)
    (13/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.210346129 seconds)
    (14/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.140678749 seconds)
    (15/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.08578507 seconds)
    (16/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.062192146 seconds)
    (17/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067236171 seconds)
    (18/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.212625813 seconds)
    (19/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.083948907 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.071943475 seconds)
    (21/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.137347383 seconds)
    (22/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.119300795 seconds)
    (23/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.182090023 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.157533656 seconds)
    (25/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.091732131 seconds)
    (26/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.073379137 seconds)
    (27/341) benchmarking ("sort", Int8, false)...
    done (took 0.145937571 seconds)
    (28/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.19829844 seconds)
    (29/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.074090322 seconds)
    (30/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.156114108 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086065887 seconds)
    (32/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.07331776 seconds)
    (33/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.072757424 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.070646231 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.175363797 seconds)
    (36/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.191621471 seconds)
    (37/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.193162879 seconds)
    (38/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.062019737 seconds)
    (39/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.133203386 seconds)
    (40/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.165351579 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.068924458 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072189262 seconds)
    (43/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.062542514 seconds)
    (44/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.083051424 seconds)
    (45/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.074558159 seconds)
    (46/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.062962971 seconds)
    (47/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.155752568 seconds)
    (48/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.208578836 seconds)
    (49/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.132561479 seconds)
    (50/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.071272282 seconds)
    (51/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.230784967 seconds)
    (52/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.212770244 seconds)
    (53/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.075017517 seconds)
    (54/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068859354 seconds)
    (55/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.071673503 seconds)
    (56/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.07399523 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.087848262 seconds)
    (58/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.158563112 seconds)
    (59/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.14537986 seconds)
    (60/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.062031659 seconds)
    (61/341) benchmarking ("sort", Float32, false)...
    done (took 0.132583239 seconds)
    (62/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.073227245 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.087202969 seconds)
    (64/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.223588254 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.071661727 seconds)
    (66/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.070825906 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.137856376 seconds)
    (68/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.071959288 seconds)
    (69/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.070403763 seconds)
    (70/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.066403321 seconds)
    (71/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.138867481 seconds)
    (72/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.061913403 seconds)
    (73/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.062459726 seconds)
    (74/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.07173316 seconds)
    (75/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.233778682 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.064532261 seconds)
    (77/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.062292508 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.146867871 seconds)
    (79/341) benchmarking ("sort", Float64, false)...
    done (took 0.13181699 seconds)
    (80/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.150890553 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.069853903 seconds)
    (82/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.079484571 seconds)
    (83/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.060815688 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.069709693 seconds)
    (85/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.083555749 seconds)
    (86/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.071266256 seconds)
    (87/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.064923505 seconds)
    (88/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.062707226 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.128160637 seconds)
    (90/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.062251074 seconds)
    (91/341) benchmarking ("sort", BigInt, false)...
    done (took 0.253053324 seconds)
    (92/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.064710999 seconds)
    (93/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.065007324 seconds)
    (94/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.063167293 seconds)
    (95/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.136439666 seconds)
    (96/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.070302387 seconds)
    (97/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.062186298 seconds)
    (98/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.138080177 seconds)
    (99/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.146789028 seconds)
    (100/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.0624535 seconds)
    (101/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.069745494 seconds)
    (102/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.149077369 seconds)
    (103/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.1899187 seconds)
    (104/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.173892607 seconds)
    (105/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.069224957 seconds)
    (106/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.063311618 seconds)
    (107/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.137449895 seconds)
    (108/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.066626899 seconds)
    (109/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.070924435 seconds)
    (110/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.173297552 seconds)
    (111/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.078228518 seconds)
    (112/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.176827969 seconds)
    (113/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.08576297 seconds)
    (114/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.069367292 seconds)
    (115/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.062134597 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.069218887 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.090047236 seconds)
    (118/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.157293082 seconds)
    (119/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.145827273 seconds)
    (120/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.070749406 seconds)
    (121/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.084863509 seconds)
    (122/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.210361069 seconds)
    (123/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.061475534 seconds)
    (124/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.076810996 seconds)
    (125/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.091051573 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.079805223 seconds)
    (127/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.061181016 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.061271917 seconds)
    (129/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.085948765 seconds)
    (130/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.079101059 seconds)
    (131/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.155857648 seconds)
    (132/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.117230915 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.070854968 seconds)
    (134/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.064032157 seconds)
    (135/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.061498592 seconds)
    (136/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.061313196 seconds)
    (137/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.070588219 seconds)
    (138/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.060551673 seconds)
    (139/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.162309319 seconds)
    (140/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.062119082 seconds)
    (141/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.069373074 seconds)
    (142/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.081427813 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.07974876 seconds)
    (144/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.060878275 seconds)
    (145/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.063623441 seconds)
    (146/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.062339923 seconds)
    (147/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.134738657 seconds)
    (148/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.084229261 seconds)
    (149/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.062037857 seconds)
    (150/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.184796758 seconds)
    (151/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.067594339 seconds)
    (152/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.086514847 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.068249133 seconds)
    (154/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.108569271 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.070196906 seconds)
    (156/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.061073048 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.146958836 seconds)
    (158/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.1849347 seconds)
    (159/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.061655367 seconds)
    (160/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.069988925 seconds)
    (161/341) benchmarking ("sort", Bool, false)...
    done (took 0.13268578 seconds)
    (162/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.067478551 seconds)
    (163/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.153827183 seconds)
    (164/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.162816731 seconds)
    (165/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.145447297 seconds)
    (166/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.131915321 seconds)
    (167/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.060823026 seconds)
    (168/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.067511145 seconds)
    (169/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.072995423 seconds)
    (170/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.067922327 seconds)
    (171/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.069849423 seconds)
    (172/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.186240465 seconds)
    (173/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.068088143 seconds)
    (174/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.15337981 seconds)
    (175/341) benchmarking ("sort", Int64, false)...
    done (took 0.06218387 seconds)
    (176/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.061008895 seconds)
    (177/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.061280185 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.114854029 seconds)
    (179/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.060557651 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.116258984 seconds)
    (181/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.061095789 seconds)
    (182/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.222810105 seconds)
    (183/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.067417672 seconds)
    (184/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.146940607 seconds)
    (185/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.134757569 seconds)
    (186/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.064205067 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.32661868 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06696445 seconds)
    (189/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.08113958 seconds)
    (190/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074443187 seconds)
    (191/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074390937 seconds)
    (192/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.065858612 seconds)
    (193/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074066873 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.065810629 seconds)
    (195/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092236681 seconds)
    (196/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066500629 seconds)
    (197/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.063751521 seconds)
    (198/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148142127 seconds)
    (199/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073334218 seconds)
    (200/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.065301617 seconds)
    (201/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068688243 seconds)
    (202/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.065052937 seconds)
    (203/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.066195904 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147536535 seconds)
    (205/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.238288036 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.085908726 seconds)
    (207/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072275068 seconds)
    (208/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.065402627 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.116662208 seconds)
    (210/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072679563 seconds)
    (211/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.082316507 seconds)
    (212/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.067693409 seconds)
    (213/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.082526646 seconds)
    (214/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125080272 seconds)
    (215/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.065323696 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.061589538 seconds)
    (217/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.069828618 seconds)
    (218/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.064020722 seconds)
    (219/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.150044241 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.114481612 seconds)
    (221/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.062569283 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071310445 seconds)
    (223/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.06459753 seconds)
    (224/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.061575781 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.069271665 seconds)
    (226/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.062334139 seconds)
    (227/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.064365378 seconds)
    (228/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.062615584 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.064486553 seconds)
    (230/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.062765569 seconds)
    (231/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.061328921 seconds)
    (232/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.062338135 seconds)
    (233/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.080388289 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.110701246 seconds)
    (235/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.186977991 seconds)
    (236/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.076581859 seconds)
    (237/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.063986404 seconds)
    (238/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.182564502 seconds)
    (239/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.074834448 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.079785345 seconds)
    (241/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.064085301 seconds)
    (242/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.063331456 seconds)
    (243/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.062611717 seconds)
    (244/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.063484117 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.062145091 seconds)
    (246/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.069386475 seconds)
    (247/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.063199601 seconds)
    (248/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.069995127 seconds)
    (249/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.063311716 seconds)
    (250/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.221868881 seconds)
    (251/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.062869499 seconds)
    (252/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.062017957 seconds)
    (253/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.070038714 seconds)
    (254/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.062555631 seconds)
    (255/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.069577082 seconds)
    (256/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.065487813 seconds)
    (257/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.088195763 seconds)
    (258/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.078043009 seconds)
    (259/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.164077946 seconds)
    (260/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.061028744 seconds)
    (261/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.070591751 seconds)
    (262/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.063544603 seconds)
    (263/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.07428937 seconds)
    (264/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.062656345 seconds)
    (265/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.075651511 seconds)
    (266/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.062477213 seconds)
    (267/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.184549978 seconds)
    (268/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.063267934 seconds)
    (269/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.062623873 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.08755949 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.062081457 seconds)
    (272/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.063562721 seconds)
    (273/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.062548487 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.128364841 seconds)
    (275/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.063843964 seconds)
    (276/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.062888775 seconds)
    (277/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.061660063 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.0605919 seconds)
    (279/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.072575302 seconds)
    (280/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.062124109 seconds)
    (281/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.062246727 seconds)
    (282/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.062490839 seconds)
    (283/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.070558354 seconds)
    (284/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.061652433 seconds)
    (285/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.062554152 seconds)
    (286/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.061887834 seconds)
    (287/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.062206105 seconds)
    (288/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.062537884 seconds)
    (289/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.064347327 seconds)
    (290/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.062686233 seconds)
    (291/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.060217996 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.144433532 seconds)
    (293/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.069723946 seconds)
    (294/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.070083748 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.144734212 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06199523 seconds)
    (297/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.060449383 seconds)
    (298/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.062355273 seconds)
    (299/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.079566445 seconds)
    (300/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.062528483 seconds)
    (301/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.063924418 seconds)
    (302/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.065467601 seconds)
    (303/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.073981479 seconds)
    (304/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.06274664 seconds)
    (305/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.064279191 seconds)
    (306/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.065000965 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.142053378 seconds)
    (308/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.062698521 seconds)
    (309/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.062556296 seconds)
    (310/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.06413988 seconds)
    (311/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.061839905 seconds)
    (312/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.062426019 seconds)
    (313/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.127735451 seconds)
    (314/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.148304908 seconds)
    (315/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.164792246 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.136016456 seconds)
    (317/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.063936265 seconds)
    (318/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.066432545 seconds)
    (319/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.062174792 seconds)
    (320/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.173449629 seconds)
    (321/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.234311682 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066892495 seconds)
    (323/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064724901 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.086753811 seconds)
    (325/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.175757419 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.07642837 seconds)
    (327/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065482977 seconds)
    (328/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.065365495 seconds)
    (329/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076208373 seconds)
    (330/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.068065921 seconds)
    (331/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072890725 seconds)
    (332/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.075756681 seconds)
    (333/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.063519778 seconds)
    (334/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067381949 seconds)
    (335/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.06941452 seconds)
    (336/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.064951865 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.12686918 seconds)
    (338/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.063149969 seconds)
    (339/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.063250186 seconds)
    (340/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.06682851 seconds)
    (341/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.065258747 seconds)
  done (took 35.23513692 seconds)
done (took 36.66608476 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.086691337 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.07607759 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075271182 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072318027 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075581077 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.073675756 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.075188362 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073231964 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.0745716 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.07447817 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.073552603 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.062295452 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070397201 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.076896824 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.071479561 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.077708643 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.074293484 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.077477147 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.063170917 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.076799191 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089093554 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.074287943 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.071425126 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.07604973 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.063228495 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.071631827 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.085542027 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083348891 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069245687 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.072240949 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.070086945 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.08094808 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.070596522 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.068752649 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.071920235 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.068726666 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.071773157 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.069589471 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.084686143 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.068464964 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.062640974 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.074316874 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.069598118 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07101213 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.071449593 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.074333273 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.068100038 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.075470544 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.062521386 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.074132807 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.084952778 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.067929298 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069795454 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.07132276 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.067921534 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.071790635 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.069453647 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.073718812 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068351748 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.074881313 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074093259 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071104258 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.062413114 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.071283846 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.069683779 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.069975205 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.061070894 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067493635 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.062106411 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06229691 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.061384338 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.071267029 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.068979205 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.067297415 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.061805644 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.062544859 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.061740874 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.074413121 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.068830907 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072011053 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.062553936 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.067687472 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.067300062 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063233145 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067292578 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.07366969 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.061479093 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.062931722 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.061791075 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.077185226 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.068813342 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06260227 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.074154011 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067771154 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.067238179 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.06213161 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.061274018 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067249435 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.070439224 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.062544725 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.061150854 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067670011 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.06724959 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.071201216 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.062730899 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067177283 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067180404 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.061347338 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07081009 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.069584135 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.071045809 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.075313767 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07093984 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.074513504 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.062530372 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.061162433 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.071731342 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.062841278 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067707875 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.070142233 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.067794448 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.070568983 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.062642485 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.061725513 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067360261 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.068802725 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.062422126 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.0629277 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.06271321 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071633724 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.069614258 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061167303 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.062091302 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071068058 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.070731938 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.061386879 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.061394276 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071434895 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.062589147 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068193757 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068313296 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071356534 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.061956116 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.062794747 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.061480784 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.061855678 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065492028 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.0676269 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067364161 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063129999 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.070959706 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.204948738 seconds)
done (took 12.263803417 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.064113062 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.103290799 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.075315778 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.078081934 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.074710764 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.064150427 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.066568928 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.080385693 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.066561183 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086526043 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.088449805 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.084461744 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093931897 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.061461805 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06319674 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064296401 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.061430669 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074432324 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.079004858 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.086117659 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.097132283 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063152906 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.077783047 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.082511555 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.076476297 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.080196072 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.064328115 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.064420332 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.066216329 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.081328534 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.088758957 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.062966805 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.064461351 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.079697303 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.078195509 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.070806965 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.063996033 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.06894189 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.066624318 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.063356868 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.06513153 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.079818432 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.069243588 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.069270806 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.064352864 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.064146951 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.063502141 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.069506711 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080001271 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.068649794 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074382795 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.080914895 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.064613658 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.063832419 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.061791517 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.069552149 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.063476784 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.064838222 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.063778883 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.063404692 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.063595591 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.066082792 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.06778344 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.068449368 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.066649134 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.06862253 seconds)
  done (took 6.295902219 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.078877583 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.088893123 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.077056654 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.077696798 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.062303462 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.063155709 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.063360719 seconds)
  done (took 2.111428345 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.063779821 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.070218728 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074405903 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074855773 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.083979795 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.072703211 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.064118808 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.094343899 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.062791822 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.071686418 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.078970061 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.07594482 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.066564338 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.075430658 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064009892 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.075303481 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.064018926 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.070601193 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.070797303 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07641615 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.067455095 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.092650389 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.076991043 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.064266007 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.076558946 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.071200992 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066430815 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.0641989 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064185067 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.063161147 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06329898 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.084903487 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.069320294 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.07535485 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.063939233 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.062748882 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.067512816 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064234609 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.067563763 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072448651 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.066449191 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.062991261 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064136716 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.063384472 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.064133203 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.067246096 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.064210859 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.063404986 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.062829787 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.070146434 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.062445994 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.068872913 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.065323392 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.068065695 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.06782597 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.067766933 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.070126443 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.063485233 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.070070477 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.069405623 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063237286 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.075054137 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074795882 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.066338139 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074309908 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.071420503 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.069030833 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.066116426 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06258071 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.062710194 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.063437967 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.0742005 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.066261968 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.065564778 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.0639319 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.068296546 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.066784659 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.077989227 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.077741912 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.076227413 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06601191 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.063480828 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.066738791 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.077476035 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.067870273 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063146129 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.064028469 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.062514654 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.068169924 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.063222857 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.068008267 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.063119084 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.069893217 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.065755995 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.065278551 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.070641469 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.063434521 seconds)
  done (took 8.268443117 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.065737651 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.065318156 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.064300185 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.064053593 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.064619982 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.064132593 seconds)
  done (took 2.022552133 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.085678389 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.063461189 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.075199986 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.063655228 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.084535841 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.069766623 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07000648 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.065609276 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.079871165 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.073706236 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.069667759 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.071977204 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.071848659 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.064918217 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.069108058 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.064169627 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.069396313 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.066708369 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.073235366 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065474109 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079622036 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.065286164 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.065593945 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.07514135 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.066491717 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.064354295 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065116502 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.07348191 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.07309175 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.064988321 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.064780022 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.066335669 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.071420714 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.065095234 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.069158769 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.071857499 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.063286133 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.069506656 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065545272 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.066173555 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.071634191 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.065431302 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.06541724 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.068754749 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.065118839 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.071941538 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.068649951 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.066879518 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.069297254 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.068631177 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.068966263 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.064004296 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.066420695 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.068968815 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.071667507 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065010585 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.068849453 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.069493013 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.065008758 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.072033922 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.063518932 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.066305529 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.065587551 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.066042791 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.067464135 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.06887281 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.071639928 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.065288248 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069933127 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.063569774 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.068478887 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.063724986 seconds)
  done (took 6.54540103 seconds)
done (took 26.82483416 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.531242195 seconds)
  done (took 2.114331298 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.857562887 seconds)
  done (took 2.475872245 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.82421163 seconds)
  done (took 9.446861771 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.316289417 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.379485199 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.711863668 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.12597868 seconds)
  done (took 3.185029744 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.722899453 seconds)
  done (took 2.356605897 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.22023159 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.213166701 seconds)
  done (took 2.070434079 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.324812005 seconds)
  done (took 1.947535971 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.14977327 seconds)
  done (took 2.770723102 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.219701094 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.155217179 seconds)
  done (took 2.004842821 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.522382729 seconds)
  done (took 2.146816406 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.16346908 seconds)
  done (took 5.793397708 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.224714241 seconds)
  done (took 1.89034792 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.222251031 seconds)
  done (took 1.85506136 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 1.963542612 seconds)
  done (took 3.589671918 seconds)
done (took 45.274491167 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.080338718 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08270726 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.082195689 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.077614177 seconds)
  done (took 1.928370516 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.070339334 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.066627803 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.069434734 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.069628224 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.067435126 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.068575246 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.069028825 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.066253014 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.067440077 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.06631139 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.065060918 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.066467792 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.068891699 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.066194971 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.06863768 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.069888702 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.066344786 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.066580748 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.068532354 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.06669199 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.069033819 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.066146154 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.064612843 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.06643223 seconds)
  done (took 3.248667488 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.074012022 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.068161011 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.071593389 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.067279401 seconds)
  done (took 1.918861524 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.072927185 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.072456252 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.080456564 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.085261421 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.072092367 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.072763139 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.078898556 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.079680138 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.061910668 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.082058226 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.064670783 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.063269102 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.063574308 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08128336 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.078876511 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.058693746 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.060053661 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.073088068 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.072370481 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.07528148 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.064764153 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.061793303 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.072296858 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.073028423 seconds)
  done (took 3.359410083 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.076948527 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.061938646 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.076506633 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.086590731 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.087855702 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.061675988 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.074559179 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.088799705 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.123188015 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.062233901 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.068259502 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.062009692 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.100046956 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.062133731 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.076136836 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.10435755 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.108031704 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.066419934 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.09431728 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.062126762 seconds)
  done (took 3.251040337 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.071970369 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.06615777 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.066940928 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.061983197 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.072804522 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.069313962 seconds)
  done (took 2.059033381 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.064685579 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.064423587 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.066447895 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.068780077 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06436882 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.064441758 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.063640746 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.062396562 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.062711011 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.063423879 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.063412114 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.063765463 seconds)
  done (took 2.415772365 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.141219135 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.065439157 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.066014462 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.062617338 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.064405008 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.063109106 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.077405052 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.064727919 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.079959535 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.063393067 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.063264056 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.065157485 seconds)
  done (took 2.520629189 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098598445 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103936217 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136798976 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109959459 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110240845 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090670483 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117835632 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.090930546 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.152085315 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129997263 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111128381 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089004827 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082034816 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.065899841 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093908456 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110711712 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130645887 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069999171 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107339301 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.156604857 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123843347 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.126477584 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139005725 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110539153 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084240839 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138489179 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092620174 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097136809 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117968187 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118105853 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112812293 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.09263722 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.067748444 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.067013394 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142577171 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.09700216 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113854531 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.088778663 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099894326 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083689319 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101908641 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.066302452 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.081571982 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107238202 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079507787 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124118759 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.084334313 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108774562 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0770367 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131093671 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116935976 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094108984 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081419631 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099304336 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.274311506 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105246528 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125720895 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102010266 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077979606 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.112192068 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.096574068 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094339723 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100158831 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075760973 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.167076392 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083935126 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.105814529 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105358433 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.090679909 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091011581 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10317989 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.129786945 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11738889 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.117426342 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129311834 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090424513 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114881908 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093864787 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.1231554 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098711847 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.069074 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.113510147 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12290397 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09295698 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095124146 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120866518 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087383831 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073709622 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093562903 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.112700673 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076415053 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.105127454 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075457326 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.103097597 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124993038 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091560785 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106139342 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110898138 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073905299 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146171977 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103818211 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069131704 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111765129 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107974579 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150205332 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090497796 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.072602319 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094401948 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.244086692 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.143841424 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100373644 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075944862 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104891876 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131211793 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089968523 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.160904167 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09052196 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132325896 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105868602 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083355995 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071298439 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.08599458 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105450526 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101313051 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105537046 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085188207 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.079163481 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083269033 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104758221 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087483211 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076584939 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107476161 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.096327101 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.070787804 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083395371 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075931715 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134279521 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.073655172 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12873481 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118918327 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.074829656 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100895079 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092822352 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103381929 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.093059955 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111085031 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132072823 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11057693 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084614013 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.088325721 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102050252 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.136459353 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.119909238 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087737785 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.072992241 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094901871 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10611237 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093059125 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118977735 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095083422 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103085692 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097855891 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13478915 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137268344 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095803066 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096604746 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101002367 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.26594309 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073310271 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147097597 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09794899 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112286223 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080755178 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132921019 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.10941385 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08442046 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082651007 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095244277 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.097955275 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100752942 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134811819 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.091460857 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.068697564 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08705124 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134889448 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072423612 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103548527 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.085966414 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.088400844 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111957823 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.087990888 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077131638 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.065254462 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119059815 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148578611 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.066421762 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10878144 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.106094386 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096703375 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.113051373 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.066986676 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111707967 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131042299 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11161192 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13213118 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13815726 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109740515 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112847611 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.10739078 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100857015 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076287026 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.120077837 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.128747548 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091506929 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088191085 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128705937 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11360141 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.129875578 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.110392802 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10852185 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.10043367 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.25075245 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097547998 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.096468783 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135775262 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114605512 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.117723781 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081699952 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100308738 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111386173 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127120994 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078090869 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132986071 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.078472572 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11172646 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.073212835 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116292161 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.075952052 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.106449092 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07560367 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094259655 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.065741173 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.069801576 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134032001 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.10646746 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098914005 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093824181 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.129764903 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.129186467 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.07729114 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102777695 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109270222 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096215209 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108917608 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103902933 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.084466035 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089870321 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10374341 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081321394 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.077372657 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.108224599 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088677614 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119309902 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080715835 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0714494 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132693875 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099290929 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090380222 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074170339 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101791309 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.117302582 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08865684 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083814731 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109549956 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099184386 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134853478 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.086478425 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.093916234 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118883116 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076493265 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.087835111 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.066116812 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.081641877 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.072077817 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.26953027 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072308521 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108995617 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.065723321 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122606003 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080854056 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.088743653 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096650835 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104546142 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120960253 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089787973 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132144729 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084314604 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111314184 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101811399 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090120759 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083794295 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098448848 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096037309 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.115769896 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.091630901 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114400963 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133973955 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098489408 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.134523716 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086423771 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115894054 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100992094 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116974399 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105156026 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138737576 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130380292 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106622176 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106404834 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071155027 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089660632 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099799406 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105350391 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16411208 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11796835 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.068871153 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100161959 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089339195 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102185233 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099287149 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078012469 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138821637 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095749523 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.084036498 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107300346 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.086047517 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100079592 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072197998 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09098341 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.095256513 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.235847304 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093702024 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109315228 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119908276 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106273651 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.135153442 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.095696673 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.088933625 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.112307943 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104404095 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104655398 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084162648 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08495955 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135374648 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116445366 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125844724 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.098196935 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107458407 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109254129 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09788484 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1227893 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1054577 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.123814513 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078872059 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.073886685 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066506842 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070421474 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120998392 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106009762 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10913654 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096449599 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070680149 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101247951 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103611144 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069760578 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08657658 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09172725 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096833309 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.08901955 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104316633 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111689101 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089364102 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102062281 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097140684 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144072013 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.097986138 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086601098 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14046408 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146358407 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085727476 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090461735 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.06939606 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077057794 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111221807 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147552491 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14946718 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.075817483 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084559891 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.083493977 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084244218 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.069092599 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.240072649 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087739876 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102467423 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097492398 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110514894 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102486624 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074025688 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100832632 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097414569 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090030112 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101674152 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115141658 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121716903 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.138572342 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109566207 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10493775 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07457625 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.078890151 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073590036 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077682049 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099462447 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.076979759 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074494897 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139686619 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089676209 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102346361 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106392993 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086361561 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073369741 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131331957 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067329098 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132456433 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069140913 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080360546 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080677234 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07745803 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091597847 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136237238 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10749205 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11035693 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103628742 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10273224 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1374153 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153574293 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078028003 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140878944 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073846743 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07330259 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073972193 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111078517 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087168889 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112059627 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137832926 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088930107 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101306154 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074942325 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140635332 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096721247 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101721732 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085108015 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077131026 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.298153475 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078351986 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078508289 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088483976 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109116892 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.070604711 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101949288 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082996224 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077879505 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139142338 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.627819241 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088350886 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.073351582 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093783906 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.138874527 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125050103 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09216351 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10605831 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116207204 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097069674 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092862734 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105185815 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.180656608 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07213252 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092123585 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100828706 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09594611 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099683123 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096335841 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.083291574 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09013943 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085129905 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077955525 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105306275 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087107186 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094647792 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10505882 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081423252 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084782398 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127948573 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101288958 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080044282 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08639088 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103500917 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086919334 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098719038 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067381769 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111660491 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088740803 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114496938 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.093031955 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105096636 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123973773 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088011373 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134944377 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.104071455 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120280957 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085709498 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.075893614 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122735074 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.085819595 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075894533 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.302620096 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092494667 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091746051 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101742785 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094233639 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111137571 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114438169 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109331474 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095244037 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077093792 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097689439 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.099829543 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083004023 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076317208 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072684746 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.07425143 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104880463 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083257884 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081684954 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112443613 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086965266 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100943756 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.097713472 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120172712 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081082026 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098734837 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107903779 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09038573 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107280202 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098403075 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125990235 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171221474 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123218859 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126443736 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131637683 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074446418 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073538087 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066948646 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112630647 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077069971 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.086711993 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079203762 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130939676 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.079631175 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109429597 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.227159395 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07818842 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091495392 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094692472 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.067895267 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080777484 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105761092 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085354692 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078133115 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116244622 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081473339 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125211374 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108883854 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096918414 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092758026 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079060929 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111857369 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102321193 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126647826 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093065454 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.073183749 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110486152 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100024808 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132614569 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.070295591 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077404111 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12440287 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099071402 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126433239 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076618789 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143479286 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137247195 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09599059 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128569822 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068190894 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079894114 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085756111 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.121042975 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080309973 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104668147 seconds)
  done (took 65.006421109 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.152592145 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141788704 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.081530239 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.102917729 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.186678639 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.196703938 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.118956969 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.09495557 seconds)
  done (took 3.070620539 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.0669003 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081598823 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079842103 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.204520695 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.094063383 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066121836 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.070763554 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080358596 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065594266 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065170352 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100227917 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065697425 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065719157 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.365198991 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064358927 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.070040326 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065503857 seconds)
  done (took 3.587719554 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.330665721 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.964409883 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.238107222 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.336920431 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.14428058 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.553855286 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074762969 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081005816 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.693172933 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.365984979 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.141021903 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087955433 seconds)
  done (took 19.939209902 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.074404158 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.076902101 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.076569981 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073189819 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072521064 seconds)
  done (took 2.297702228 seconds)
done (took 116.253494214 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081491841 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.169640781 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.0656708 seconds)
  done (took 2.195850355 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.079865282 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078856336 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.078840744 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076185679 seconds)
  done (took 2.249024381 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.072724941 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.07466623 seconds)
  done (took 2.0745023 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.217772221 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.175060778 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.08837948 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.08013033 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.07773874 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078033422 seconds)
  done (took 2.17609897 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.069632575 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.06957347 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069684911 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.070010493 seconds)
  done (took 2.205308544 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.066150255 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064537835 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.066722023 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.06935355 seconds)
  done (took 2.195314415 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082843807 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084088317 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113536698 seconds)
  done (took 2.208507433 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.081015618 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.080930002 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076153511 seconds)
  done (took 2.171915056 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.107301967 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094753659 seconds)
  done (took 2.131542867 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.078012788 seconds)
  done (took 2.010464918 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.087295546 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095790764 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.135861722 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.104210387 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.136693069 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.122705588 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074881474 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075736969 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071385365 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070647235 seconds)
  done (took 2.902983449 seconds)
done (took 27.009455185 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076862111 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.366620014 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.357538319 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085207861 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.669351829 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.387993091 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.030717797 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088679551 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.099001957 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066040711 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082821775 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.646556146 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.022300433 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.324272864 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 1.00594068 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.322112724 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.649459116 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066917314 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065757551 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066331177 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 1.015243003 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065580506 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.065826679 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066758556 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.647522109 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.371360571 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.066828367 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.32262903 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066315615 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069899045 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.355341698 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.066940003 seconds)
  done (took 16.566948759 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.067853209 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120668946 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070424189 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.081876043 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068253052 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067440323 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069028788 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066631549 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109595175 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066211197 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083602145 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065644314 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.069886031 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067333884 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086138049 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066141239 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068680899 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070227825 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066959381 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067447952 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085462477 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066373397 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067623619 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067652202 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066627439 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079243293 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067451169 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066338444 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066489868 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.06994159 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071104947 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06742865 seconds)
  done (took 4.285379649 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.119430908 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12370134 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070769639 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107085 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.116052991 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068354961 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149030946 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089343321 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113241886 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066808613 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083489693 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06701288 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101908115 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067276999 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086273079 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066552441 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068997531 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066903483 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066045381 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06673297 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085278558 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065963117 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066642482 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067111459 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06700141 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081195711 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067125753 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066538441 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066498789 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070388798 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071767194 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067696124 seconds)
  done (took 4.554081742 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.067281944 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069307049 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075533434 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078560175 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064421262 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067188525 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067798339 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064304648 seconds)
  done (took 2.505575795 seconds)
done (took 29.861450586 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.077158785 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.06603767 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068957706 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085879847 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07208762 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.068122049 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062496666 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072506565 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069479903 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069220439 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071430796 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065274157 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.06797353 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062860574 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070025224 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.063850028 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.070283127 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068089223 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.068410711 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.069797079 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066300489 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069389011 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072841107 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.068298717 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.068444098 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.068392642 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.072737704 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.069801714 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064170045 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067389573 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.066291908 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.078681769 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.070337366 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070317419 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064029409 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.063902636 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068106384 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066399485 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070472378 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07304593 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066318822 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.072730352 seconds)
  done (took 4.82291015 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.085907431 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091897682 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084304276 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079603148 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.105545855 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079294996 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.08867914 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076704579 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075736637 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.088731685 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071757818 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076749542 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.07847255 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.072872488 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076110646 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072457958 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078094281 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071256503 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076307669 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076217065 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.088916259 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069414555 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.076668517 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.07776421 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071466381 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.07766348 seconds)
  done (took 4.027720044 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070936514 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.08648065 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090289915 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.138314992 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.107230459 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.080928879 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080386865 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091460388 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.098834503 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066238568 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070389544 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.091675145 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094484095 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073024301 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.10423009 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084170264 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078612837 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067858477 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072482588 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100236769 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088639929 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084656424 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098659946 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086115903 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065407029 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075629024 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073200281 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082325809 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073591359 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078801154 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070086841 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069749866 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067035797 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078188527 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073166485 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064233468 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.087930874 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079396247 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08055545 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.103952596 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.075874059 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.067997597 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096392181 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.131803502 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.065759701 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068820842 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070162106 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.078710779 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067251059 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09601986 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084199854 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.065865695 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.084636716 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.06739952 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067340229 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082382331 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.06786471 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.109293287 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078122474 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072077569 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.086063316 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071048424 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.086795113 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.065284689 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077088765 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.06684908 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067513953 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.064134255 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101442349 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073044148 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117747759 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.066797652 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.063720111 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078210961 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077076089 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072223188 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065591454 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085597209 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077705576 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.06946822 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077597337 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068806701 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.068768703 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101240666 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06457574 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.063786975 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.063969627 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.067839305 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.068809036 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.06596033 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.078622059 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.06541182 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.069303169 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081054948 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.065389983 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066449241 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.067855861 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.066983717 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.065210406 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.076113161 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.069962184 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067543833 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.077848036 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.066860906 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069053553 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.080409457 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.074730801 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.065166548 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.066502118 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.067841312 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.067560364 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.06991435 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.06883227 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.067449584 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072517158 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.072869221 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071590705 seconds)
  done (took 11.031965574 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.160285069 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.150988139 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.066732431 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.145351827 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.074119394 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.070340567 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.147232396 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.085933187 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066804174 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067700154 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066072669 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.094404275 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.089856567 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.100838558 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.070032351 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.066957185 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.091608564 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.099291201 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.150081228 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.146588484 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090618585 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074270954 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069112134 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.067688594 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.067406267 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.075445839 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082493124 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.074324793 seconds)
  done (took 4.610046076 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.073036003 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.081598217 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070427204 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090094083 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084012183 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066686199 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068289753 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067771827 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08335524 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072592987 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.06621765 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071030253 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.07008042 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067318083 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067260975 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072722928 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.072556496 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065259399 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070135682 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07050353 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.076733206 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.091675885 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.070461789 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.066265286 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.068830296 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066625805 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073655001 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075710118 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.06594268 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.096168788 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06343018 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070918172 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.080469744 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067131205 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066039422 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.066975269 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066187367 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.06633913 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.066917414 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064171086 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.063831747 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071878816 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.064727387 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071902665 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.079879066 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.073918941 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.067946648 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072012295 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.068773707 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063054044 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.069451499 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.069734076 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069000281 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.074787542 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.069843775 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.068695691 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.067355192 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096026696 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.07189175 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.065334607 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066084091 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.064149364 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.067652087 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074496409 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.082419685 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.067570983 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064424015 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.066257583 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.070958345 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080847715 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.065390794 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.071509166 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063046992 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066692045 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.068640891 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069282558 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.067587324 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.064389593 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.065969579 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.06647657 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.066776604 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.065992556 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.065733316 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.06867247 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064415523 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.064575887 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.066750843 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.067352768 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072189918 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.064826077 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.068867737 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.067593936 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065060167 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.069156567 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07211191 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.068922977 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.085824548 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.074787835 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.066525881 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064283373 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.080762416 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.068254124 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.065437554 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071629644 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.070362423 seconds)
  done (took 9.396058323 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088966256 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068067125 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086239669 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.092405569 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076353395 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071717123 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080886107 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.066983317 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.082692247 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065287795 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075429613 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064524316 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.07967202 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075646317 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.06774398 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076800983 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068837837 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.086646833 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081147921 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064707649 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075489236 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078673061 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078881207 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084720782 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.08428593 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.084973422 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078765317 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068526812 seconds)
  done (took 4.165440367 seconds)
done (took 39.997748358 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.04040656 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.198094996 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.035042379 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.295330534 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.336930086 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.04438497 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.259097188 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.024137329 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.174922357 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.060776562 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.370428582 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.400576137 seconds)
done (took 70.26367431 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.10977646 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.166312583 seconds)
    (2/2) benchmarking "String"...
    done (took 2.245204841 seconds)
  done (took 6.376280142 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.61838744 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.022299686 seconds)
    (3/3) benchmarking "different"...
    done (took 2.074823083 seconds)
  done (took 8.673593189 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.134364931 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.662394088 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.283639984 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.022177458 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.028074822 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.437549738 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.818198556 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.495743349 seconds)
  done (took 33.707805514 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.366745292 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.279291734 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.764013736 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.800883211 seconds)
  done (took 17.21621596 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.62767523 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.284353405 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.284434201 seconds)
    (4/4) benchmarking "different"...
    done (took 2.284597471 seconds)
  done (took 11.499019743 seconds)
done (took 89.772734597 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.023381151 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.129784979 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.030578019 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.179199502 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.083474143 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.055004091 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.030020317 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.069355651 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.025648557 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.028299504 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.455723492 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.042144453 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.021434738 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.060750169 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.024452253 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.045234014 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.051943262 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.033766288 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.049974241 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.635699392 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.555887406 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.031339391 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.033691267 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.084552197 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.090681322 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.085296812 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.201747587 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.037852374 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.642961866 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.026070161 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.039047406 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.033952612 seconds)
  done (took 211.899148894 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.024832846 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.134672072 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.180843135 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.057009039 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.733627028 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.216459463 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.163521365 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.770604856 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.027453748 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.048800053 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.226142467 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.024687352 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.246960678 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.960351202 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.020437101 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.066743384 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.190258738 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.255532689 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.02381101 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.21224605 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.041773198 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.018530884 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.974831105 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.209620276 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.031166353 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.061034285 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.064672658 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.04954457 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.216521445 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.172946369 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.042202558 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.070597041 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.163333097 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.895606274 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.04853446 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.039245163 seconds)
  done (took 179.647243471 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.38960889 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.044471423 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.088041365 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.246634703 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.784287343 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.750960318 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.030037379 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.025675496 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.025401351 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.032240377 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.027537181 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.094713105 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.342270617 seconds)
    (13/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.029604299 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.037028026 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.026556795 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.026202441 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.384687191 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.033055121 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.026010117 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.025176389 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.090124137 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.399191009 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.164533623 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.029855235 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.036562588 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.166119898 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.037754719 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.026818496 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.163986399 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.030172338 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.104959213 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.163748847 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.03759101 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.107726222 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.034743462 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.502788713 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.029722324 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.026074721 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.028120525 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.08934962 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.027685751 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.129512996 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.12114857 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.027480327 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.04068946 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.10361438 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.714493393 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.030050945 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.026556739 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.027246386 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.027186349 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.027768623 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.564294226 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.03064347 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.054333393 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.641478749 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.031517278 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.030063518 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.028600233 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.027885598 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.028151694 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.034842703 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.066325577 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.830637298 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.264337316 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.417749745 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.833246343 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.031897514 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.796888422 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.09000939 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.02916064 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.106910785 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.02846469 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.027481148 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.027278345 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.02772996 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.171724065 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.143098318 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.031267329 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.167082306 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.032736926 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.028597635 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.244741932 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.416749356 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.035016186 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.038903924 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.084588428 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.028773041 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.027794869 seconds)
    (90/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.0349941 seconds)
    (91/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.028219803 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.127542327 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.029772782 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.027959697 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.029081055 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.027628812 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.124301437 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.033004068 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.041935298 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.257651207 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.102960813 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.278439652 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.281177027 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.033428 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.029302293 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.044930345 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.030451483 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.029896618 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.039888179 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.029606349 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.029078605 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.030127831 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.03084111 seconds)
    (114/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.029786167 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.029158591 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.032104918 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.043538058 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.029574212 seconds)
  done (took 438.056607725 seconds)
done (took 833.99733195 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.681526568 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.864836049 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.646641276 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.681913758 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.651250633 seconds)
  done (took 15.493017756 seconds)
done (took 17.458421326 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.051859626 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.046273052 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.035399227 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.053595983 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.051405556 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.049443316 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.082517957 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.073864071 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.069640143 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.049511051 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.05756827 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.0519352 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.055219828 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.071511754 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.063398896 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.057850982 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.052100611 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.043596565 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.058678676 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.054484412 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.051827688 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.047106485 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.051769312 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.058167713 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.066204651 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.05420537 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.046648363 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.054747515 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.053557797 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.055541841 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.090552327 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.059116896 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.083767356 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.061296265 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.060459901 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.064263336 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.04999085 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.076796339 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.053561134 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.090641482 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.060812545 seconds)
  done (took 86.389016667 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.028264194 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.176316916 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.250723398 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.07268863 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.040539928 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.252031898 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.097650066 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.16551635 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.173072116 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.281038234 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.266900848 seconds)
  done (took 25.774936095 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.040717524 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.176717794 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.252154838 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.076178114 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.062862971 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.256774058 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.103858016 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.185267508 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.193990249 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.253212987 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.264688627 seconds)
  done (took 25.844646618 seconds)
done (took 139.975302938 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.413380908 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.063668642 seconds)
  done (took 6.447053568 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.036280195 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.054499037 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.186941332 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.037484409 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.036447003 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.038335329 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.038707085 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.03658563 seconds)
  done (took 18.435670707 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.035997732 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.036675381 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.037120918 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.036088908 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.036190243 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.036424209 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.035767751 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.03640712 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.035850459 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.03592322 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.035893197 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.036971 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.036203202 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.03638918 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.03712443 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.037097211 seconds)
  done (took 34.553288721 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.03728702 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.037264348 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.036681876 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.037263233 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.023198787 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.037439094 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.039163009 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.035094935 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.037227037 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.037407802 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.037528172 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.037227616 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.02613584 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.038311393 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.038036988 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.037785775 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.038240327 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.037820625 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.038153446 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.038537275 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.037940122 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.038721481 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.04335273 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.03800468 seconds)
  done (took 50.855988931 seconds)
done (took 112.269518573 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.231870818 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.590707494 seconds)
  done (took 8.795043028 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.042339406 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.039014357 seconds)
  done (took 6.118194244 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.038005954 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.039003941 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.03831186 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.039145495 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.038656192 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.039312852 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.039287017 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.03905628 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.039687876 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.039861253 seconds)
  done (took 22.363873897 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.039993133 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.038782974 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.039208646 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.038541738 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.039933118 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.040105218 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.039930466 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.039799764 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.039126227 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.039541112 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.03980976 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.039797131 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.040728465 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.039479888 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.040558121 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.040336153 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.039764194 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.04020431 seconds)
  done (took 38.690102987 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.041186959 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.04009465 seconds)
  done (took 6.055748884 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.040835841 seconds)
    (2/7) benchmarking "second"...
    done (took 2.040129885 seconds)
    (3/7) benchmarking "month"...
    done (took 2.039985017 seconds)
    (4/7) benchmarking "year"...
    done (took 2.040759994 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.04032356 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.040021783 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.040648354 seconds)
  done (took 16.257726314 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.041201848 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.200301726 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.252862329 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.646528847 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.041441021 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.042785868 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.931578125 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.042934993 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.044686743 seconds)
  done (took 22.218830831 seconds)
done (took 122.471351946 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.887425152 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.047205775 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.329577597 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.18416015 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.071901349 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.343954415 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.060096324 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.58873338 seconds)
done (took 44.487385847 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.149376641 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.037879766 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.071870546 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.071504793 seconds)
  done (took 23.156400907 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.042148254 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.405869935 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.069503946 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.011039892 seconds)
  done (took 23.526299858 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.417768993 seconds)
    (2/2) benchmarking "read"...
    done (took 2.388580918 seconds)
  done (took 6.785766348 seconds)
done (took 62.592818407 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.040589774 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.041369822 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.041749052 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.042409836 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.041147954 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.04148043 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.041654571 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.04117316 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.041998043 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.04156497 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.04152399 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.041522307 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.040905675 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.040942461 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.041574513 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.041465531 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.041641438 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.041211323 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.042911197 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.042428169 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.042532356 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.042349514 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.042876089 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.041932734 seconds)
  done (took 50.977778721 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.042887697 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.042493836 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.04210557 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.042237346 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.043279486 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.043016972 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.042386093 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.043215653 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.043018176 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.042310919 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.042938976 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.042974543 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.043426863 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.043556258 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.04290442 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.04277475 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.041873015 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.04394569 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.04321374 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.04258874 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.042701687 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.042821625 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.043234787 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.043014848 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.043594806 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.043437693 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.042974088 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.042962547 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.04358957 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.043255155 seconds)
  done (took 63.26634878 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.043930138 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.045060577 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.04386634 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.043260935 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.044872088 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.032927639 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.043634884 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.045180716 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.045205421 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.045336036 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.044943829 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.045980614 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.045506485 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.044368234 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.04538864 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.044496214 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.045300077 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.043921194 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.045148165 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.044910231 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.045298834 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.04521295 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.044479873 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.045048302 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.045020267 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.045267657 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.043858434 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.044689627 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.045766199 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.044995365 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.045064203 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.04458773 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.045400833 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.045536154 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.045106139 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.044947519 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.045661952 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.049583527 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.053770425 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.045328124 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.04557155 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.045436444 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.046395879 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.046121501 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.045603562 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.0450037 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.045025848 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.045722843 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.046262095 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.045418677 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.045187108 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.046369443 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.045145172 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.045820516 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.045596696 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.045807466 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.045801235 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.045592973 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.046357565 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.046472267 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.045886122 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.045153151 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.046117633 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.045680336 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.046503714 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.046124463 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.047704596 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.046795584 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.046687113 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.049656915 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.045984824 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.04640322 seconds)
  done (took 149.250627973 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.046271803 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.046801609 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.046289653 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.047958546 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.046858552 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.047856351 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.047475058 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.046629079 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.048314806 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.046812563 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.045917028 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.048261974 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.048306584 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.047798192 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.048153701 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.048059726 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.048558842 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.039222648 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.02702319 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.047840828 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.048273672 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.044974285 seconds)
  done (took 46.994877594 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.04852934 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.049120254 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.048223766 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.047576068 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.048610287 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.048029308 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.04810803 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.048126966 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.048772357 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.048957683 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.047829989 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.04939136 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.049137475 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.048502608 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.048041935 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.048723219 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.049441002 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.049296059 seconds)
  done (took 38.856226012 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.049389168 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.023177522 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.047899975 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.048528493 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.048636579 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.049899685 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.048482456 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.0484836 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.049531141 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.050410994 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.048939971 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.050084871 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.049848565 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.049007994 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.051031706 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.050576438 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.05020197 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.049133427 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.050544804 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.050368615 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.051089172 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.049572139 seconds)
  done (took 47.049266052 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.050472433 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.05021952 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.050850394 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.049470224 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.050063889 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.050188591 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.050831093 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.049424249 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.047099365 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.050352407 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.050252565 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.050844272 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.050572667 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.050923663 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.050963921 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.050073097 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.050757177 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.050721728 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.050860824 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.051489061 seconds)
  done (took 42.990611188 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.050875032 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.052157221 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.051384558 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.052127091 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.051882307 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.052168594 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.052477531 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.051103694 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.051809974 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.052341542 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.052519464 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.051784205 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.051967897 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.051991772 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.052318427 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.052438432 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.05228364 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.052786891 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.053549468 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.052785155 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.05302293 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.052924851 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.052616614 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.053153921 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.05301831 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.052853929 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.053106948 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.05371239 seconds)
  done (took 59.453376433 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.052335536 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.052328553 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.051588176 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.052721363 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.051780538 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.052503432 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.052457835 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.051864046 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.052859174 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.051937296 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.053838823 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.052097954 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.052664096 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.052774346 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.052541094 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.053259459 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.044304552 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.053167843 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.053316886 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.053455198 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.053600617 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.053623128 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.05391027 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.053227372 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.053005737 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.053766228 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.0539722 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.053396442 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.054142026 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.054091479 seconds)
  done (took 63.567803245 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.072115481 seconds)
    (2/2) benchmarking "in"...
    done (took 2.072159185 seconds)
  done (took 6.131701344 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.054741803 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.055034068 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.053507252 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.05464616 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.054410684 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.054817647 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.053769331 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.054648113 seconds)
  done (took 18.42289118 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.055029847 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.057207101 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.055317678 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.055328255 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.054416487 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.06196527 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.056440279 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.055696662 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.056579993 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.056696938 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.05971994 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.060263478 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.064590477 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.060124568 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.054675804 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.055881699 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.056893169 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.056984269 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.056179737 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.056070145 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.057949141 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.057011205 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.055593121 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.055819412 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.056661699 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.057719528 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.066135399 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.057193307 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.057605268 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.056176837 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.062094242 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.055754685 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.056497927 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.058096965 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.056557711 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.05656411 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.062528924 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.056355202 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.056551061 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.056958043 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.058144729 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.05866367 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.06149477 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.064092031 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.05751871 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.057090487 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.056478175 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.057167716 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.056940394 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.061600534 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.065263769 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.058440936 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.057179588 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.057301572 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.059145199 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.057380697 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.058812735 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.059756143 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.064276566 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.064468644 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.061442346 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.079243246 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.067601715 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.058793582 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.056903731 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.068443514 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.082517587 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.06035842 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.059719583 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.058329016 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.066332731 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.058623536 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.05778786 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.058283073 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.071120835 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.067618613 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.058572998 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.058558968 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.058549642 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.05933057 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.060275334 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.060095016 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.059643854 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.05988307 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.069383156 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.084536496 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.059358819 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.059732329 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.060857187 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.059771498 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.06402966 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.061774793 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.060225395 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.059244764 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.060989669 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.062983286 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.059812962 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.059240854 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.059342715 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.06872803 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.059708219 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.059620336 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.063210362 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.068783966 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.059614721 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.060248207 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.061569099 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.060569106 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.06784555 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.060369101 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.060704993 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.059730807 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.061687869 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.066176213 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.059758401 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.064378669 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.06961422 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.067098689 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.06167548 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.064679347 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.064561339 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.063101221 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.070686252 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.087088478 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.061033012 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.06383775 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.066111695 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.073295244 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.064513159 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.061574201 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.063402105 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.061595522 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.061549537 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.063545843 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.061593966 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.062335754 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.062668477 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.062138515 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.062362709 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.06174767 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.064783822 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.06376343 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.064178457 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.063099107 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.066552911 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.061744259 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.064759131 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.067242168 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.033477956 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.062154911 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.062893797 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.06488911 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.064316179 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.062943817 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.061918103 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.062447923 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.062463767 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.064067056 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.065015431 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.063299391 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.062994956 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.064582614 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.067958347 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.063002612 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.062866139 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.063566749 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.050599006 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.063533893 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.063530924 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.063291119 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.065785117 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.064360144 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.068162248 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.062911075 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.062926694 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.063792024 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.063637971 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.06281988 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.068534382 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.075127164 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.068176818 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.074576477 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.064155786 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.069977469 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.06498141 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.065378556 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.065376627 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.063852649 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.063411136 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.06505046 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.063752574 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.0678358 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.085515949 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.075432645 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.066747773 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.06666071 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.070763114 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.068861703 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.071268596 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.065407867 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.066489503 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.067131125 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.064943558 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.065460003 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.065851764 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.068781236 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.06512347 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.066285742 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.06892486 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.065642121 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.065224085 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.066545416 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.065247685 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.066851623 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.066191929 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.065557897 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.066007403 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.06897813 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.073304132 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.067941713 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.06651779 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.066404479 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.068275412 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.065575843 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.064765583 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.067766551 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.069163839 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.065657221 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.066802419 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.074093693 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.067032596 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.067149129 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.067173953 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.066187563 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.069049966 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.067103206 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.070094277 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.075589243 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.069755507 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.066920198 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.072503231 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.066415367 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.068707788 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.068649665 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.067430596 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.067362024 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.068571528 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.067980005 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.067531618 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.07287225 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.067694988 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.06854614 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.067113519 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.070679231 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.069215701 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.069721488 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.068717624 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.071559557 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.076505499 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.073220407 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.068733706 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.071661157 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.070831788 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.068829898 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.071990533 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.069097979 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.08157185 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.078167741 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.067730332 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.068275847 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.067668037 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.071199868 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.069160897 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.068387852 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.075732537 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.069477645 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.070629141 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.073703369 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.069089989 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.068640623 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.074530908 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.070495671 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.071958282 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.070607077 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.069756302 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.069592671 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.068644284 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.071729323 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.069645888 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.071546823 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.073687154 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.069344434 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.070865145 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.069780744 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.077562943 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.069864534 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.071147407 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.075956306 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.070406044 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.070323543 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.071549591 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.069174165 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.071121368 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.072036165 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.069471742 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.071969759 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.070286265 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.073692271 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.080900827 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.074137314 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.080203141 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.072912525 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.081333886 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.070351319 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.07109107 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.071456211 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.074398288 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.078777923 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.07023468 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.070403589 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.077296369 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.071587391 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.070500655 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.075180971 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.069798604 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.070714686 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.071231107 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.071956247 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.077350489 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.074111461 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.071547404 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.071044444 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.071418619 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.070426271 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.07368975 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.073465259 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.072019421 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.071605394 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.07105518 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.072286543 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.07141371 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.071295854 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.071257674 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.071452718 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.070623803 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.079618161 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.07228036 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.072411738 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.076343712 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.071723402 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.081108324 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.072216495 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.071780241 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.072960482 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.072804164 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.075446286 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.072595348 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.07253623 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.072268886 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.072519075 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.074163048 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.083872725 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.079003902 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.076639786 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.075079816 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.072626782 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.073951737 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.083881128 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.097137803 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.072930403 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.075450712 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.077056517 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.078797079 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.075223602 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.07943498 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.076818238 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.081328039 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.074959853 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.073577324 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.076340728 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.085714924 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.073790653 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.073266981 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.073719364 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.078004666 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.074906764 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.074122603 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.074873362 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.076743216 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.075164131 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.085248708 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.073658012 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.061878024 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.074388127 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.074053095 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.040143048 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.074885646 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.075979168 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.075868291 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.073721882 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.074980318 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.076381777 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.080306938 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.073828424 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.078407973 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.084991722 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.075760471 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.074936279 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.076741737 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.075078837 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.077292864 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.074837631 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.074514889 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.0767693 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.07585115 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.077075731 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.07882907 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.085242348 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.077604048 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.075132784 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.075243091 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.079369224 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.074931123 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.075916414 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.077428246 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.083578656 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.078856878 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.087200008 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.08644945 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.077207297 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.077725924 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.084136963 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.085019293 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.075581753 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.075666401 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.077227243 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.0797048 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.078811739 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.077478322 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.07653265 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.077916906 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.082729703 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.07670516 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.076599676 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.076843366 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.046531175 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.077024438 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.079198732 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.082664731 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.077139857 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.076960457 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.075984548 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.078528681 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.07876877 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.080454708 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.07782978 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.076912902 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.080330458 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.079388846 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.081715742 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.077195695 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.077817972 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.079548052 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.077374615 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.077429708 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.077367351 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.078590563 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.077520751 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.082889383 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.086883271 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.077023667 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.079429013 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.079198614 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.082933071 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.079280464 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.078686828 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.078025395 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.077748744 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.085217293 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.078270537 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.077939266 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.079661059 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.078270481 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.08379968 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.080065733 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.08234397 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.07861533 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.07875917 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.06466153 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.082337571 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.088476972 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.083697063 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.08403536 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.088063018 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.083251384 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.08132363 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.079342147 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.078973539 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.079960599 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.079811522 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.082282892 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.081170153 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.082039011 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.080817289 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.081147021 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.080385079 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.082582424 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.079360335 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.078826989 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.083544596 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.089869594 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.087464801 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.080153416 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.082263105 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.080705049 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.084137963 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.091933001 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.080813227 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.080788044 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.080653958 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.081743497 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.082121321 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.089105696 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.089749166 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.084471955 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.080852022 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.086144407 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.099466266 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.08274826 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.091773969 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.112909164 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.082766375 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.081369355 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.080922454 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.081784923 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.082227699 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.084268608 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.081122576 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.087884684 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.081388432 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.081434497 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.089498052 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.081514958 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.081554846 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.081405179 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.082486441 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.088162808 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.083012119 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.088672133 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.082864933 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.081511719 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.082838058 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.084456267 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.081596781 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.082350293 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.081697989 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.085206709 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.081871064 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.083077935 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.091165354 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.083029656 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.084432839 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.096138001 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.095284644 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.083267088 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.082806128 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.083618901 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.087642724 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.085510029 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.08208923 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.086159176 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.078866762 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.087537458 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.091956502 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.085419409 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.084586745 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.084603336 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.083753214 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.083305904 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.095753197 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.095196925 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.083971316 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.086055223 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.09059077 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.082930427 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.090607322 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.089654996 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.087489285 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.085095275 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.083776292 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.083954627 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.083866194 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.084452789 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.088565528 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.092317916 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.084890888 seconds)
  done (took 1236.859275688 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.084814459 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.084720564 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.083961559 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.084472596 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.084705799 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.084357159 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.084217069 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.083439802 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.083904448 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.084991589 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.084118806 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.084661875 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.083508256 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.085460255 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.084952672 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.085065293 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.084986427 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.084932455 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.085087629 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.085072816 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.086014005 seconds)
  done (took 45.794306456 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.084559609 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.085376551 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.085405683 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.084932082 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.085171514 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.085572148 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.085544961 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.084877969 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.086581959 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.085498747 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.084533874 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.086129658 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.085199735 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.0857607 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.084980119 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.085922471 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.086683393 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.08621124 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.086366229 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.08662333 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.085245893 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.085847063 seconds)
  done (took 47.900764419 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.086125818 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.086986998 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.087641776 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.085829315 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.086330258 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.086823213 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.086851896 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.088660094 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.086170481 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.088212245 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.09528567 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.096068462 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.086258712 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.090219537 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.086825813 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.086783574 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.232721598 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.088098655 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.088679633 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.087447618 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.087822853 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.094394536 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.086907966 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.087026435 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.087955024 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.087934333 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.087546285 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.088599314 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.088016722 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.08967474 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.093949698 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.088691422 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.089055051 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.09131959 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.088292505 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.089603147 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.093643039 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.088616149 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.088715826 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.087459416 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.09882367 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.113080266 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.088827635 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.089666749 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.096621804 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.08847709 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.089816719 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.09198995 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.097440651 seconds)
  done (took 104.567894234 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.088393458 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.089518157 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.089155048 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.088589046 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.089343633 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.089076585 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.088876193 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.088373372 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.088415539 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.089907354 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.089718536 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.089030802 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.089204069 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.088677267 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.088612372 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.089963431 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.08919963 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.09009467 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.089078593 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.089500215 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.089621883 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.088812507 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.0927887 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.087915486 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.086622598 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.086531905 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.087476545 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.090151066 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.086167495 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.087196184 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.087034494 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.087069427 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.089089169 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.086168197 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.087038072 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.08606953 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.087021091 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.08813824 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.088173493 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.087227992 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.088615775 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.089566482 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.087481384 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.088136142 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.087739637 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.087839934 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.089858132 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.088001486 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.088073021 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.089002062 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.088562475 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.088701452 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.088387727 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.088132534 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.088284506 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.087499262 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.089596582 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.088436021 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.089043269 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.088802223 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.088973969 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.089935127 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.089212237 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.08863821 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.08911121 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.092166926 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.086888491 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.087745309 seconds)
  done (took 144.044771483 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.088410412 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.090993419 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.084926047 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.086513785 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.085798603 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.086157143 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.087133042 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.086701483 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.085381007 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.084989979 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.085702389 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.083130963 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.080589524 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.079682135 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.080830164 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.081236435 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.081631963 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.079731783 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.080185319 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.080898659 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.081843103 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.07938768 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.080091904 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.080116928 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.080563022 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.083418434 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.079943824 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.080410235 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.07987515 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.080184479 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.082109616 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.079871964 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.080809086 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.08011949 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.081289584 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.081908613 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.080641196 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.080797734 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.080014085 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.081428364 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.082967669 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.080158477 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.080856236 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.079795142 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.081432726 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.080012545 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.080552883 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.080788095 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.080746003 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.083275035 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.080908961 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.080528705 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.080924107 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.081235099 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.082164253 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.078754272 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.07953722 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.079856922 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.079381388 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.080791538 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.077083601 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.078019004 seconds)
  done (took 131.086825441 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.077179964 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.079294696 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.077479235 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.077237402 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.077634436 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.07771419 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.078122594 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.076524637 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.07747342 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.076836854 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.076982787 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.077368087 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.078733373 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.077304904 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.077230924 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.079533834 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.077052192 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.07813351 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.077212205 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.077369001 seconds)
  done (took 43.563638893 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.076687057 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.079610014 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.076585882 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.078146279 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.07670088 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.077590465 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.076688507 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.077744562 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.077934805 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.078022565 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.078079159 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.078279541 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.078707025 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.078429793 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.078092369 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.077921459 seconds)
  done (took 35.255289757 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.077608447 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.078616931 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.078161381 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.079074055 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.078018145 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.078595252 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.078607467 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.078194924 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.079249188 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.079493454 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.078856608 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.081311718 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.079199618 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.079012451 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.07833401 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.078188322 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.080518168 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.078709133 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.078953437 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.079905814 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.065636282 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.081785556 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.078108008 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.078233608 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.077992345 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.080023611 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.078374385 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.078540271 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.077858254 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.078007497 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.080209739 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.078050714 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.0776773 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.078958153 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.078658821 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.079249346 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.077949379 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.078328757 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.077751265 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.079372034 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.079968923 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.078585193 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.077458486 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.078350406 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.079503457 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.071354219 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.068362512 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.068068776 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.069579424 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.070073095 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.065477368 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.066341358 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.065650893 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.06685447 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.066315083 seconds)
  done (took 116.223145945 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.066304445 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.066062142 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.066058088 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.066696486 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.064023798 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.051216642 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.048576702 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.066149117 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.065526127 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.06497223 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.064722149 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.064443637 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.064210554 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.064743142 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.065616511 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.064674571 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.064909463 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.066689087 seconds)
  done (took 39.143951806 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.064539586 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.065281346 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.065098768 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.065529555 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.065796846 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.065348406 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.066320899 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.065937548 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.065645122 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.066059948 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.066171603 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.065103434 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.064683104 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.065431754 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.066050595 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.065970375 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.065844518 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.065950064 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.066897191 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.066113671 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.066092509 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.066649339 seconds)
  done (took 47.445207022 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.066963124 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.06575309 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.082242857 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.090078825 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.088103491 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.10528258 seconds)
  done (took 14.497405417 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.065624367 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.065954595 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.069127256 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.066522934 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.066992791 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.066246906 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.065903655 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.066919164 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.06727169 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.067525765 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.066377742 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.06718316 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.068002311 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.067729901 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.066637165 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.066918311 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.061271064 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.067938345 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.065875093 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.067941964 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.067115523 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.067807608 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.068255041 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.067828537 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.067684875 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.067642809 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.068671195 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.067705427 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.067800664 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.068174326 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.067988693 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.068018835 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.068092207 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.067841228 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.068128046 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.068584085 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.067277081 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.068915205 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.067979748 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.068945362 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.068342965 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.06849261 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.067662608 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.068474463 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.068347335 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068560237 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068915142 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.068734845 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.068332584 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.069672693 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.068356687 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.06824831 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.069523416 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.068214868 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.068618902 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.070090412 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.068820724 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.06941693 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.070149962 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.070119647 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.069370634 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.068848942 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.069200505 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.069697532 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.069961165 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068400212 seconds)
  done (took 138.487388385 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.069332634 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.069274077 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.071113734 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.070172468 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.070737768 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.069487404 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.07116729 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.069831528 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.069751609 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070731791 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.070915731 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.069690124 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.070710156 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.06997933 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.071114038 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.069761966 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.071517668 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.070410861 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.070511042 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070461482 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070183555 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070920984 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.070854228 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.070279833 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.072011359 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.071542263 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.071439514 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.071590544 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.070783779 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070788767 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.071968681 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.071257485 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.071503984 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.07135563 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.071715853 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.071467154 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.071307148 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.072879625 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.071404107 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.072524577 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.070806528 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.07198895 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.072181376 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.072171201 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.072038485 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.072046948 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.072378013 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.070528083 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.072630437 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.073139115 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.073076153 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.072700662 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.072325358 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.073347353 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.073196404 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.072413306 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.071741279 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.072872981 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.073301372 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.072420514 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.07306966 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.071943708 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.072295293 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.073035535 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.07274416 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.072801429 seconds)
  done (took 138.722576939 seconds)
done (took 2872.53482344 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.086204321 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.194456866 seconds)
  done (took 16.285539404 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.236771876 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.114078709 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.260083584 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.191399487 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.082225805 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.078632765 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.07452321 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.074426828 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.164772984 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.074614102 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.088652632 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.074517435 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.073768747 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.07471285 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.074617438 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.073425966 seconds)
  done (took 55.820797025 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.075261203 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.077168789 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.074597586 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.072959037 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.08573639 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.155607277 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.0953065 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.077079868 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.087737113 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.10817514 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.093648868 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.079752774 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.080884496 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.078192788 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.160179993 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.120372311 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.138032796 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.152368857 seconds)
  done (took 39.816492873 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.152660724 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.085185607 seconds)
  done (took 11.247516806 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.070245885 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.096618871 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.077560062 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.095319381 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.094258235 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.096770817 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.075167482 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.068792211 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.081872473 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.076303093 seconds)
  done (took 72.843794825 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.073773689 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.073533366 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.334551323 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.08596338 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.077889721 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.095336083 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.072259158 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.101664624 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.073523007 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.069225271 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.083274215 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.337660629 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.084035883 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.070083951 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.492775013 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.0844639 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.077389683 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.10018143 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.102190786 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.074385199 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.076109363 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.073708813 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.231758609 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.762117642 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.0771855 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.072569604 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.076547255 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.066892702 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.066949927 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.068403762 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.070707701 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.068371647 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.038009118 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.070453644 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.074424635 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.070439586 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.567184082 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.09031837 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.074151193 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.154937946 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.111009873 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.074610102 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.884020279 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.068483041 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.064377445 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.071860854 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.751433126 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.157936084 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.06870524 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.247371191 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.402832177 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.084026695 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.237093934 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.20680015 seconds)
  done (took 143.849527967 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.063540317 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.299236963 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.216126137 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.063838256 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.32137337 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.273431976 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.06473119 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.108146505 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.064062268 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.265399939 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.31462058 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.165522629 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.06482825 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.061112137 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.060454531 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.05917796 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.21017259 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.12790003 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.0624469 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.059302974 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.083180318 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.261323915 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.180701229 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.061503902 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.086032673 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.265817965 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.181374779 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.163527934 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.868756588 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.058454774 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.121335481 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.060465707 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.059586503 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.059022058 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.211248532 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.153797824 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.14343027 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.061690231 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.060069434 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.058488045 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.731814937 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.259387531 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.155328197 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.183921001 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.311140612 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.274924584 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.67361937 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.059128453 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.687853077 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.225814047 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.265652193 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.268185109 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.179924996 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.063224168 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.341689304 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.059117381 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.059299289 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.281982066 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.279189719 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.159786987 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.064295051 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.060493134 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.060040375 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.298511362 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.063347174 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.152918095 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.064869481 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.061040534 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.154129293 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.161619767 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.289297625 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.280733923 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.092564575 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.378983422 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.55132835 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.265195156 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.12724717 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.282370241 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.064501585 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.060632535 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.139643474 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.898262284 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.315691567 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.302359873 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.261395485 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.09228651 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.711910031 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.061356953 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.248924723 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.252036702 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.293759189 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.302358218 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.298544172 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.42699249 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.061404447 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.062081255 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.365361972 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.178749031 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.011451294 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.412882838 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.290809806 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.556152522 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.062864036 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.406339416 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.192057667 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.06625994 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.709315076 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.061959178 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.268228224 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.102749791 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.065158878 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.064247162 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.252354752 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.968517761 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.063817109 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.7746299 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.122103237 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.067878048 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.266673891 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.067762756 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.307810658 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.066997499 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.295384918 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.703114502 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.094504733 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.237771992 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.308068849 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.69963905 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.303910607 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.306519929 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.178554339 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.288866122 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.869998673 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.063662984 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.324615067 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.066451584 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.0632253 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.230859214 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.067043542 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.64396722 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.066847801 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.329134203 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.086110778 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.295397673 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.068558946 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.302728846 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.096893304 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.114064019 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.066763842 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.194439508 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.066346148 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.906122542 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.220581263 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.05596952 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.063308796 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.645707415 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.064235138 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.213051212 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.289008029 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.086004283 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.133421092 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.630975356 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.057085215 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.153012107 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.087246172 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.679974087 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.064768422 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.318637695 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.028480841 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.539034029 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.064446932 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.299253365 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.252508114 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.069792494 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.065997835 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.908841176 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.065299345 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.065464382 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.222044144 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.543194202 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.973934607 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.263696019 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.070865831 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.194272059 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.069100078 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.144807025 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.405688348 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.066117407 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.064697721 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.065546145 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.066790279 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.066552891 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.275888634 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.093073829 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.500056766 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.202873325 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.321961802 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.374149 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.25931579 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.106351723 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.068215818 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.28878855 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.069072372 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.128201949 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.068702592 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.086795741 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.293672916 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.072441051 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.272728656 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.301497845 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.118250368 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.114138729 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.070484349 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.070158963 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.978201949 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.212873054 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.153682033 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.070681497 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.068542145 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.179910794 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.190263907 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.245466499 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.88887433 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.217691219 seconds)
  done (took 944.728046358 seconds)
done (took 1286.597208849 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.068108016 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.074256795 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.073907821 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.070829484 seconds)
  done (took 30.288662905 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.069853865 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.068817213 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.070453243 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.039225259 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.069223485 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.069574391 seconds)
  done (took 14.387935471 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.068545525 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.074274491 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.075444172 seconds)
  done (took 23.22019094 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.499437138 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.484716555 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.145205812 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.213304017 seconds)
  done (took 11.343904715 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.074638695 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.070001267 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.071321897 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.071024918 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.07129088 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.071420234 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.071471409 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.071228408 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.070943976 seconds)
  done (took 20.652509212 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.246533929 seconds)
done (took 106.140148187 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.573978761 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.262438654 seconds)
    (3/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.095988697 seconds)
    (4/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.506021114 seconds)
    (5/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.513644771 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.598162746 seconds)
    (7/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.628585964 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.402113234 seconds)
    (9/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.464963353 seconds)
    (10/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.081315374 seconds)
    (11/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.401574955 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.955325708 seconds)
    (13/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.282828218 seconds)
    (14/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.292791369 seconds)
    (15/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.773585463 seconds)
    (16/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.778933989 seconds)
    (17/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.159057425 seconds)
    (18/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.398754098 seconds)
    (19/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.10668437 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.112017168 seconds)
    (21/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.346293589 seconds)
    (22/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.122248417 seconds)
    (23/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.678466478 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.211017431 seconds)
    (25/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.080103031 seconds)
    (26/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.101806891 seconds)
    (27/341) benchmarking ("sort", Int8, false)...
    done (took 4.99799127 seconds)
    (28/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.332095864 seconds)
    (29/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.102229898 seconds)
    (30/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.235475928 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.280182534 seconds)
    (32/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.088074308 seconds)
    (33/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.286034531 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.091479518 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.175804979 seconds)
    (36/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.49801929 seconds)
    (37/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.855753367 seconds)
    (38/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.371985365 seconds)
    (39/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.160780655 seconds)
    (40/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.173139316 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.172272926 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.315850588 seconds)
    (43/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.395640988 seconds)
    (44/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.480901175 seconds)
    (45/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.083372884 seconds)
    (46/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.940752583 seconds)
    (47/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.286322452 seconds)
    (48/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.493178219 seconds)
    (49/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.159083328 seconds)
    (50/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.101742913 seconds)
    (51/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.394240319 seconds)
    (52/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.084346291 seconds)
    (53/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.530667813 seconds)
    (54/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.208064649 seconds)
    (55/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.197322618 seconds)
    (56/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.216148202 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.787902447 seconds)
    (58/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.206988915 seconds)
    (59/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.148480069 seconds)
    (60/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.306811099 seconds)
    (61/341) benchmarking ("sort", Float32, false)...
    done (took 5.756158408 seconds)
    (62/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.087468416 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.272833038 seconds)
    (64/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.400881858 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.334685224 seconds)
    (66/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.09380024 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.215213964 seconds)
    (68/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.37534151 seconds)
    (69/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.164900663 seconds)
    (70/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.160224487 seconds)
    (71/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.081739073 seconds)
    (72/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 4.349825384 seconds)
    (73/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.220832133 seconds)
    (74/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.725421129 seconds)
    (75/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.180743318 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.826760051 seconds)
    (77/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.28049892 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.087190568 seconds)
    (79/341) benchmarking ("sort", Float64, false)...
    done (took 5.792625051 seconds)
    (80/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.293536017 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.11472529 seconds)
    (82/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.291514599 seconds)
    (83/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.19313955 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.093578578 seconds)
    (85/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.433901511 seconds)
    (86/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.106026125 seconds)
    (87/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.183355295 seconds)
    (88/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.086720807 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.212483353 seconds)
    (90/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.416230217 seconds)
    (91/341) benchmarking ("sort", BigInt, false)...
    done (took 7.087040376 seconds)
    (92/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.30901021 seconds)
    (93/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.315693468 seconds)
    (94/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.504331337 seconds)
    (95/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.470379914 seconds)
    (96/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.090814367 seconds)
    (97/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.217340759 seconds)
    (98/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.19278113 seconds)
    (99/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.0201191 seconds)
    (100/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.093546328 seconds)
    (101/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.442756309 seconds)
    (102/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.533820937 seconds)
    (103/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.265999185 seconds)
    (104/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.246390502 seconds)
    (105/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.494688706 seconds)
    (106/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.08599564 seconds)
    (107/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.308889923 seconds)
    (108/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.189132767 seconds)
    (109/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.095026558 seconds)
    (110/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.296246088 seconds)
    (111/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.356931679 seconds)
    (112/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.225090651 seconds)
    (113/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.985734303 seconds)
    (114/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.307727164 seconds)
    (115/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.348602945 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.099876371 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.793451981 seconds)
    (118/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.375616815 seconds)
    (119/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.086382106 seconds)
    (120/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.098627689 seconds)
    (121/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.0840461 seconds)
    (122/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 9.04055715 seconds)
    (123/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.189897596 seconds)
    (124/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.256236948 seconds)
    (125/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.181636037 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.980436012 seconds)
    (127/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.729925239 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.403721792 seconds)
    (129/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.954061105 seconds)
    (130/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.329631065 seconds)
    (131/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.180965362 seconds)
    (132/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.092701582 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.44860019 seconds)
    (134/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.358791101 seconds)
    (135/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.639898751 seconds)
    (136/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.477978056 seconds)
    (137/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.590540677 seconds)
    (138/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.447154291 seconds)
    (139/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.021295393 seconds)
    (140/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.368887915 seconds)
    (141/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.104499437 seconds)
    (142/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.095354665 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.152672979 seconds)
    (144/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.440878501 seconds)
    (145/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.577710422 seconds)
    (146/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.086299005 seconds)
    (147/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.208848253 seconds)
    (148/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.103431742 seconds)
    (149/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.498858145 seconds)
    (150/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.384169539 seconds)
    (151/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.108134776 seconds)
    (152/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.731155152 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.272070669 seconds)
    (154/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.922875802 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.321585275 seconds)
    (156/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.86366383 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.114464678 seconds)
    (158/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.996902421 seconds)
    (159/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.093334887 seconds)
    (160/341) benchmarking ("perf_countequals", "Bool")...
    done (took 4.076926305 seconds)
    (161/341) benchmarking ("sort", Bool, false)...
    done (took 2.304049501 seconds)
    (162/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.240304455 seconds)
    (163/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.17516655 seconds)
    (164/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.091263655 seconds)
    (165/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.220364966 seconds)
    (166/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.200026858 seconds)
    (167/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.415982704 seconds)
    (168/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.195146045 seconds)
    (169/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.687814582 seconds)
    (170/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.113876869 seconds)
    (171/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.101697971 seconds)
    (172/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.289689089 seconds)
    (173/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.109920525 seconds)
    (174/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.369475102 seconds)
    (175/341) benchmarking ("sort", Int64, false)...
    done (took 5.731482434 seconds)
    (176/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.358456046 seconds)
    (177/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.088076477 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 9.910699959 seconds)
    (179/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.412274788 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.098350211 seconds)
    (181/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.453134906 seconds)
    (182/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.084518971 seconds)
    (183/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.190732784 seconds)
    (184/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.971572585 seconds)
    (185/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.188728201 seconds)
    (186/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.157711158 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.432830685 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.304698073 seconds)
    (189/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.2210033 seconds)
    (190/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.820814171 seconds)
    (191/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.217776112 seconds)
    (192/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.318671813 seconds)
    (193/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.095970429 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.327200814 seconds)
    (195/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.110098909 seconds)
    (196/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.405578741 seconds)
    (197/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.245395356 seconds)
    (198/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.111995317 seconds)
    (199/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.225456563 seconds)
    (200/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.204365587 seconds)
    (201/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.158886569 seconds)
    (202/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.268215981 seconds)
    (203/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.198927939 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.093681248 seconds)
    (205/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.142101729 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.349365341 seconds)
    (207/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.106500969 seconds)
    (208/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.702989354 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.302861712 seconds)
    (210/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.100570518 seconds)
    (211/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.174793172 seconds)
    (212/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.226654219 seconds)
    (213/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.984934704 seconds)
    (214/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.8095509 seconds)
    (215/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.795340049 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.244195498 seconds)
    (217/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.169380323 seconds)
    (218/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.149712839 seconds)
    (219/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.998356016 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.232624811 seconds)
    (221/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.167786401 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.236247631 seconds)
    (223/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.101673052 seconds)
    (224/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.50136872 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.110989368 seconds)
    (226/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.28189195 seconds)
    (227/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.076756819 seconds)
    (228/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.253124231 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.43280364 seconds)
    (230/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.399910703 seconds)
    (231/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.094808494 seconds)
    (232/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.250139207 seconds)
    (233/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.479378367 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.222274542 seconds)
    (235/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.091013574 seconds)
    (236/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.086416951 seconds)
    (237/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.516471071 seconds)
    (238/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.108766026 seconds)
    (239/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.792222126 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.391807207 seconds)
    (241/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.091781808 seconds)
    (242/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 8.572374352 seconds)
    (243/341) benchmarking ("map", identity, Float64, true)...
    done (took 3.857431346 seconds)
    (244/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.093952575 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.390139734 seconds)
    (246/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.101130533 seconds)
    (247/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.171639056 seconds)
    (248/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.117775389 seconds)
    (249/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.4091465 seconds)
    (250/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.507643478 seconds)
    (251/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.352299001 seconds)
    (252/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.30718395 seconds)
    (253/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.199397196 seconds)
    (254/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.290887258 seconds)
    (255/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.113499351 seconds)
    (256/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.16821091 seconds)
    (257/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.093489265 seconds)
    (258/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.548625139 seconds)
    (259/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.095034182 seconds)
    (260/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.175051643 seconds)
    (261/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.102813308 seconds)
    (262/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.091622048 seconds)
    (263/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 4.305352889 seconds)
    (264/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.915161666 seconds)
    (265/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.045805119 seconds)
    (266/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.218115425 seconds)
    (267/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.09665675 seconds)
    (268/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.5560329 seconds)
    (269/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.33097737 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.862798594 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.225334917 seconds)
    (272/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.503640605 seconds)
    (273/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.504813767 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.192967063 seconds)
    (275/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.227470623 seconds)
    (276/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.58557705 seconds)
    (277/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.494157837 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.109610068 seconds)
    (279/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.093745465 seconds)
    (280/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.248671083 seconds)
    (281/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.214808219 seconds)
    (282/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.521621146 seconds)
    (283/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.173331454 seconds)
    (284/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.178239445 seconds)
    (285/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.095056092 seconds)
    (286/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.431517896 seconds)
    (287/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.099442797 seconds)
    (288/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.289281492 seconds)
    (289/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.869764724 seconds)
    (290/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.556019004 seconds)
    (291/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.194754047 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.093451548 seconds)
    (293/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.112418128 seconds)
    (294/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.105068086 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.092242108 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.492526906 seconds)
    (297/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.178014979 seconds)
    (298/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.242014334 seconds)
    (299/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.301569802 seconds)
    (300/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.102603779 seconds)
    (301/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.214807266 seconds)
    (302/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.467090099 seconds)
    (303/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.893921133 seconds)
    (304/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.326416261 seconds)
    (305/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.566252902 seconds)
    (306/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.23158921 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.118119986 seconds)
    (308/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.418954958 seconds)
    (309/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.420532426 seconds)
    (310/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.463548842 seconds)
    (311/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.35528423 seconds)
    (312/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.24584137 seconds)
    (313/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.097928418 seconds)
    (314/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.095237212 seconds)
    (315/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.540954724 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.2243153 seconds)
    (317/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.805298518 seconds)
    (318/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.193960614 seconds)
    (319/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.596577519 seconds)
    (320/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.099725107 seconds)
    (321/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.114136777 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.488814452 seconds)
    (323/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.765274606 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.013367067 seconds)
    (325/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.10259475 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.954157887 seconds)
    (327/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.860698172 seconds)
    (328/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.363409268 seconds)
    (329/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.866969698 seconds)
    (330/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.194468469 seconds)
    (331/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.120632356 seconds)
    (332/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.697449911 seconds)
    (333/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.209355384 seconds)
    (334/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.155987221 seconds)
    (335/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.156340835 seconds)
    (336/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.09607165 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.236441427 seconds)
    (338/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.43324643 seconds)
    (339/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.103665597 seconds)
    (340/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.414705546 seconds)
    (341/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.086184561 seconds)
  done (took 1168.446820194 seconds)
done (took 1170.769899497 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.12584463 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.105415674 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.594171368 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.115243715 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.104693666 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.110512205 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.602479495 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.134164104 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.122497065 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.601806308 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.115898702 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.1056175 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.120037252 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.139874095 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.116832783 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.119354301 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.111467174 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.130718409 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.141747118 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.111263633 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.152619201 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.110659391 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.105639203 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.157947607 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.106886011 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.120234175 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.120642132 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.152510324 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.153012382 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.107967328 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.112233623 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.453233182 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.152734474 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.111652414 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.117747073 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.121809703 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.111716323 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.121242719 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.119981498 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.1214651 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.107417334 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.117256553 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.111788938 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.109039403 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.107199324 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.106356024 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.108283313 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.231906575 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.121593658 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.435471901 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.157516811 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.119677527 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.155171758 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.109010445 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.109533815 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.109969316 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.154506227 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.113616385 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.111739179 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.435516814 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.192591683 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.122654452 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.435815436 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.167734614 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.117141558 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.116425518 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.107482028 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.120917554 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.440081735 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.638772944 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.140124276 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.128199235 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.108260427 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.109975658 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.122277104 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.600661308 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.123770096 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.669774776 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.134344646 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.123152815 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.114237716 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.110895349 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.110419312 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.125808651 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.122672885 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.107698122 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.1160344 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.115054248 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.123192453 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.456124841 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.149153079 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.5941443 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.116996117 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.122911641 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.122290624 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.672720557 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.137858332 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.121814013 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.111809107 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.456269707 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.146373169 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.124831608 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.11285217 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.121078638 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.224942576 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.123510487 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.124539828 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.108582494 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.13159173 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.115093434 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.110367075 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.124061273 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.130563559 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.145290067 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.127024107 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.109954397 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.119006226 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.115746 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.120670094 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.119564363 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.11813634 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.12178286 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.110804677 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.164453893 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.124065115 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.126643998 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.225851647 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.118208198 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.236444006 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.126070702 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.117567808 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.111251383 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.439584365 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.151463326 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.132795366 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.118176286 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.134511331 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.133930061 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.128073096 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.113681084 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.127970323 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.114381585 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.163700042 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.111566457 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.13645809 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.163900243 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.126319716 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.118925598 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.123461792 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.14679494 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.132046091 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.117177189 seconds)
done (took 331.838726164 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.152506911 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.10293839 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.181749546 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.106147695 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.173164599 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.158610402 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.105848682 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.103371127 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.095433968 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.493271719 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.104816768 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.110391502 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.107098175 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.105951811 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.15494917 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.105760546 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.106405784 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.342841887 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.106080301 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.166077223 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.106832658 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.1066469 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.106486429 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.534538322 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.105550963 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.105505166 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.16594853 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.106378307 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.34654825 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.105424123 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.103550165 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.376606042 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.165437321 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.12192429 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.113543204 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.115122606 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.173966372 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.115318955 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.154712252 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.153080425 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.183445903 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.140405664 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.10762469 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.10624209 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.109826755 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.108150823 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.107671029 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.140014005 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.10985076 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.112307511 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.342124839 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.114059618 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.11524338 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.107510465 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.107385659 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.121390134 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.107474097 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.109260497 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.166329576 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.10868239 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.156824518 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.501920116 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.500204912 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.10840874 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.108441418 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.108146727 seconds)
  done (took 199.612671432 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.176194134 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.194080276 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.176527015 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.113686571 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.159781903 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.176193502 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.11385986 seconds)
  done (took 17.149943115 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.115051853 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.110073875 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.132231577 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.133101814 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.109672217 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.247926859 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.120504339 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.114702074 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.134859585 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.109675351 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.446698171 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.132471018 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.117371878 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.108667271 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.120729028 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.138074935 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.111285203 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.110450094 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.207359731 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.18754984 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.114797536 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.117956851 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.138328967 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.122257771 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.097874934 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.110104624 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.110092462 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.11785669 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.109862264 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.109732443 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.11044964 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.123343665 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.110100108 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.110581086 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.110459148 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.111461251 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.110663608 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.111016392 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.110894663 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.109344443 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.110634988 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.110877716 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.11029217 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.110715462 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.111221735 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.135286596 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.110365419 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.112137381 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.110576658 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.11077716 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.139936883 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.111503216 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.11112141 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.116017449 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.152539316 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.119163868 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.112075874 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.11207395 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.111805598 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.111266901 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.111100505 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.191819215 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.13470425 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.111649288 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.133905984 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.149166383 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.111881622 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.111134031 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.112973494 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.138310855 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.110505892 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.137022027 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.113031681 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.185160749 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.10640205 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.253339788 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.135395877 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.115652738 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.115670991 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.11009218 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.120203398 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.113645382 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.114971723 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.11940381 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.119160972 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.112392812 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.112151644 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.114409478 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.120260547 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.113052206 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.156058768 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.113231331 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.112638871 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.211317901 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.113072261 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.210920646 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.138579136 seconds)
  done (took 228.552463212 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.118578987 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.114412202 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.126601508 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.115254126 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.11368596 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.118724431 seconds)
  done (took 14.751035611 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.116311047 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.117302307 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.113040768 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.113301731 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.113080875 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.113613624 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.114581592 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.11587068 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.11849042 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.11304464 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.115179658 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.080092805 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.11312993 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.113870178 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.114453298 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.085694929 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.114977054 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.115113874 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.114664658 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.114893622 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.364525034 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.114020561 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.114545017 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.1185035 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.119730213 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.11477175 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.123306677 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.115311531 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.114178576 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.121581685 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.119326812 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.115018482 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.118865178 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.121583528 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.120278573 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.118925111 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.119886779 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.117695033 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.115221164 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.115165793 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.116458354 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.115589847 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.1162092 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.116461404 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.111209194 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.123279731 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.120816598 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.124483114 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.117399432 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.116980847 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.116652275 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.115275825 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.116235085 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.117043617 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.120709141 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.122645131 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.120867518 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.116770962 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.115475825 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.120421116 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.120084715 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.106818537 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.103337616 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.121359618 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.122948095 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.122909796 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.123299381 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.123439011 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.119050821 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.118432412 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.119685292 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.119825124 seconds)
  done (took 155.661583284 seconds)
done (took 617.763158475 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.159125569 seconds)
  done (took 9.207919932 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.220708101 seconds)
  done (took 9.357520892 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.26699596 seconds)
  done (took 12.319432045 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.157998548 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.142741983 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.12518408 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.12157058 seconds)
  done (took 30.609977285 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.379609758 seconds)
  done (took 9.429118924 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.130967224 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.117752386 seconds)
  done (took 16.361046428 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.155267524 seconds)
  done (took 9.205665604 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.141190163 seconds)
  done (took 9.219459616 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.136960469 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.149656458 seconds)
  done (took 16.353922563 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.121589783 seconds)
  done (took 9.170830803 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.889812291 seconds)
  done (took 10.023007979 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.127948251 seconds)
  done (took 9.195654254 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.189937832 seconds)
  done (took 9.238728272 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.939229265 seconds)
  done (took 9.989407966 seconds)
done (took 171.730060004 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.126398722 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.126043697 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.12528376 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.126123097 seconds)
  done (took 30.553294634 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.156846522 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.156182069 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.165186227 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.155267975 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.147159361 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.146353872 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.156825834 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.155610498 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.147079532 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.153331829 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.156509072 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.152540154 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.155705107 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.163788069 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.166252377 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.153920156 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.155916753 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.155894035 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.147407296 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.164330288 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.153589049 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.156364873 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.122025429 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.12150153 seconds)
  done (took 53.716009061 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.312294348 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.189234707 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.276125786 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.167083705 seconds)
  done (took 10.995171217 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.12129163 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.186040027 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.173958628 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.167722529 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.173223943 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.226211978 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.174968022 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.258157074 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.250631812 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.24873358 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.129331156 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.143592519 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.142735082 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.16813375 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.225744206 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.122465234 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.122370629 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.236881801 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.185878127 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.38105166 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.123571531 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.177429075 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.175363351 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.17504569 seconds)
  done (took 54.541628809 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.122818285 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.131072901 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.132420434 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.123978015 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.124119724 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.124924109 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.130597689 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.125547632 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.145360969 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.126738912 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.123836849 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.124161358 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.130345391 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.125225734 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.124330971 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.137758615 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.139512122 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.126209227 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.12793122 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.132034209 seconds)
  done (took 44.631142236 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.122991624 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.969188327 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.470634969 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.375023557 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.122617362 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.129383657 seconds)
  done (took 33.242953261 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.137238201 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.139650863 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.129601231 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.148360719 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.170287805 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.134181051 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.184556324 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.286410482 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.13396486 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.181682347 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.145448576 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.130806198 seconds)
  done (took 27.9771438 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.123607348 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.128217273 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.12711275 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.139849119 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.135046468 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.132852336 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.132275956 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.122795832 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.140913933 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.143169446 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.132967583 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.137243938 seconds)
  done (took 47.650228623 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.337520183 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.350927216 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.331717642 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.633093982 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.44368682 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.104913214 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.410477791 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.338050939 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.794548077 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.818125994 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.415837221 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.102322915 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.073690877 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.051112735 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.023818909 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.368446804 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127356493 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.983436562 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.377377104 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.170871445 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129653998 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.126826101 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125658259 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.406887573 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.453343235 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.124063105 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.339036734 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.14164539 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.126458675 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.351989006 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.64371103 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.177772006 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.328851657 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.383057204 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.464224096 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.28699732 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.129598329 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.228696127 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.169012428 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.162402843 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137177915 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.137207315 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.673637113 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.138023912 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.399034981 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.128938916 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.242308379 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.121612371 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053104571 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.412535011 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.239492721 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.126930426 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.162340864 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.559739344 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.247358759 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.370446679 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.129525925 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.230095998 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183086704 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.350278178 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.369027861 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.131396395 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.340204677 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.054387841 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.492804744 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.250854027 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.131266921 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132281594 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.828163321 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.370860773 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.209056777 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.419283555 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.884950012 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.12935808 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.130714081 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.172416886 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.217694374 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.128623171 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.425265897 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.122630185 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.054433644 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.228168193 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.524746475 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134101063 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.128659265 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.137104937 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.973987615 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.054930518 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.225821396 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.344272959 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.45133141 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.131047652 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.130666428 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.151663489 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.132029936 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.077193742 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.604757654 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.192203124 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.056631183 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.693621415 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.665006621 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.093762581 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.520026492 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.170688795 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.398906779 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.282338568 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.536295854 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.339164682 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.375492438 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.661352202 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.134321714 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.689258661 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.210313648 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206885821 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130230476 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.685535545 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.231067937 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.39444013 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.243650308 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.129700606 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.057172324 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.141843962 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.333884878 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.644864643 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.18280967 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130776764 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.135140611 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.130867312 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.133571773 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.238705681 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146245755 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.431897012 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.202156945 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.13117774 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.067107385 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.136398161 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.412709826 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.639045793 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.190685082 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.383010273 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.398336464 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.830949586 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.728223228 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.176419909 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.402054481 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.201873263 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.205773428 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.695480496 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.260328551 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.229324489 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130639028 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.268085794 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.137999035 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.134508787 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.37601918 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.543860415 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.562694597 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.177138891 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.1322477 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.091405292 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.232933214 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.371621295 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.178697228 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.156584425 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.137362502 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.216365152 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.358361849 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.133882993 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.058418092 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.374131978 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.373232861 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.426876008 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.543623686 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.181018303 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.206786363 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143432224 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.347148735 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.215358334 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.793808707 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.688263402 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.343755494 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.622301597 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.095210848 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.774473742 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.359800719 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.513759174 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148804452 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.586625627 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.239213217 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.738165043 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.162750746 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.647679496 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.059337025 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139313161 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.465532114 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.090990225 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.449591193 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.217674955 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151430147 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.13696981 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.136150106 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.142275728 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.037914574 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.241531853 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204130785 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207450069 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062459209 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.689808126 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.171713567 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.137248703 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.135408256 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.447568319 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.917517139 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.090085225 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.135479819 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21188782 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.877712156 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.685556906 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.141748782 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.137870734 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.745745352 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.141660125 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.94588428 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.207574789 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.881591498 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.16316336 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.365411775 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.835422508 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.416487159 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.211018948 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21121803 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.136478515 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.143786852 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.839967814 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.144397446 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.837415489 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.420853091 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.410359037 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.574415632 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.197818154 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.346927946 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.1508306 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.13841047 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.644035727 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.163780631 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139036503 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.340338233 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.654959815 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.432372315 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.096770014 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.221812977 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.137301434 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.407421221 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.14445883 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.65642175 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.832240957 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.137268027 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.137520945 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.407007748 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.823181168 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.138423517 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.112402262 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144608599 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.350569549 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.340266534 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.407149489 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.432477794 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.585167033 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.065653504 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.142815517 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.171526374 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.381511199 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.138413619 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.173883985 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.583822558 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.192734996 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.568811616 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.423689048 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.497333978 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.774070964 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.400944622 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.201742406 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.150711171 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.801807348 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.264622022 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.071168176 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.256889591 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.065229721 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.885250442 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.432714421 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.15578868 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.409241 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.118912087 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.520741412 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.436168914 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.365145514 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.186217115 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.168406576 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.139701067 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.189810463 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.139593637 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.260336858 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.253065208 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.145729498 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.606271109 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177810282 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186934029 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.14417467 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.644038503 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.16302196 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.143479342 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.834821593 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.164922199 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.258025475 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212093276 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.869698638 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.684644299 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.180843771 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.018021002 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.7920454 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.408765141 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.196640645 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.588438765 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180181068 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.544977769 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.141630583 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.355177935 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.146807732 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.63888824 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184901091 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.404283695 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.098462305 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.354296732 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.336633419 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.167396281 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.146899284 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.067096466 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.245663009 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.02793371 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.123376348 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.144292384 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.824437095 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.540519422 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.268391387 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.560540495 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.963105925 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.145166039 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.465604528 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.539004267 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.682991199 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173797561 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144226912 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.440053769 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.275963971 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.41472988 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.414256507 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.151516333 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.16834963 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.356387921 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.270291153 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.062825882 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.624748466 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.696166106 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.844272135 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.155582747 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.346856516 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.441286891 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.353107521 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.176330676 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.216519316 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.547765701 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.412414695 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.211323243 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.06977981 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.143792297 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.539870335 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.543611015 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.241825986 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.385817933 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.450468045 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.626880775 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.67956623 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.497740855 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.550243651 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.555869151 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.5573418 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.351716898 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.504511966 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.470307323 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.737163469 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.556644832 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.357858065 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.238025893 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.418645292 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.017766124 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.854776518 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.388579317 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.1506295 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.072873714 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.352518031 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.150575932 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.495953205 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.673120118 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.392466525 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.379393987 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.618177816 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.684703868 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.262276793 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.169061987 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.111795323 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.168993459 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.166465275 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.14573731 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.626625626 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.434842266 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.15969578 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087345045 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.817504613 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.073397612 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.359116702 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.256616889 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.180894357 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.702673866 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.387594717 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.253282391 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.434560187 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.321785621 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.181071374 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.072656365 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.890054538 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.095025139 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.200892804 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.573914809 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.163976279 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.150449425 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.350541876 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.077478902 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193765668 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.152443674 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.340229044 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.736178311 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.420357877 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.271629001 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.385089917 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.449172489 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.990314566 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.178747092 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.420395309 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.077360009 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.677476916 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.82587332 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.188816023 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219632267 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.147867479 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.151132365 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.420394825 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.451549113 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.2506592 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.772299475 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.179186141 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.172888424 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.447951611 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.244559254 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.15039578 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.152370465 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.596863478 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.380159785 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.148892778 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.138846538 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.362834856 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222868606 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.345821273 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.224140122 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.663325933 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.154746754 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.003196126 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.254602919 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.101067617 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.149250685 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.882366896 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.211065944 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.150568638 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.422836323 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.768687845 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.352263133 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.544335958 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.037853713 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.270860564 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.190035982 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.152335936 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.157850305 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.570896237 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.45588597 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.150883853 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.420877583 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.19893123 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.155397568 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.8114904 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.119694157 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.150316218 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.889507151 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.074128683 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.881245461 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.54687034 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.164259268 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.154542144 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.15375168 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.076185021 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.151102736 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.327939629 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.155098253 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.153811835 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.514819309 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.428775784 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.243131423 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.156862938 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.152359958 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.15843425 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.364762841 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.66521608 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.168196742 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.852184004 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.35515892 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.15511329 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.63334552 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.601195703 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.337543564 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.18848719 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.270632304 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.384370115 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.687946951 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.271362107 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.130498537 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.379526056 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.153974013 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.424141077 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.426515174 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.152681597 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.36522111 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.673776835 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.43736025 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.511479813 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.465191094 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.218904699 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.277735847 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.084741767 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.157326442 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.155274697 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.416313942 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20562803 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.152727882 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.161789008 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.704370467 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.890135644 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.615519364 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.306555485 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.438769091 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.916636524 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.910750827 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.156778891 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.079177611 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.154249156 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.178470896 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.156136348 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.079733319 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.828193035 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.877254942 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.366100061 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.464832851 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.080113588 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.357912445 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.734699962 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.080366955 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.123501256 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.154572169 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.418696783 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.082318611 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.157304908 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.109036357 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.382670112 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.792648278 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.423031414 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.154695043 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.098877125 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.160115762 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.156420262 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.154692539 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.242177955 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.157014108 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.272275781 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.418087104 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.495395489 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.257501215 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.794851239 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.889992568 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.094682747 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200658507 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.715425142 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.727377134 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.387672964 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.280658923 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.889414188 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.101070382 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.160198074 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.172225749 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.41339448 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.158677553 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.159155705 seconds)
  done (took 2240.131970767 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.211003265 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.250790248 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.209106913 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.201214683 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.279350094 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.254066231 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.222429623 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.218450339 seconds)
  done (took 59.931127165 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.155782354 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.093563484 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.165904147 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.157796987 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.159385946 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.162130311 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.345339494 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.184716253 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.162041812 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.160733931 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.158258394 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.162519633 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.157567725 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.155783445 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.163058187 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.444442588 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.176437214 seconds)
  done (took 81.265764864 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.212160951 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.046326524 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.164993938 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.941214986 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.202326845 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.454675448 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.15788661 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.159411253 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.49803992 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.452921175 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.161316455 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.175764661 seconds)
  done (took 95.720017426 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.158290423 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.158081475 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.158483607 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.158545046 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.158137809 seconds)
  done (took 12.8784273 seconds)
done (took 2795.346233775 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.473269983 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.254119501 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.22939103 seconds)
  done (took 6.57012394 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.302143891 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.351343738 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.464417563 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.47031762 seconds)
  done (took 11.68027467 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.444104087 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.541806353 seconds)
  done (took 7.072761629 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.528351145 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.176543766 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.55362237 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.158619243 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.165128394 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.16539735 seconds)
  done (took 23.580196881 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.159744632 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.159085 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.160428984 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.159593832 seconds)
  done (took 10.726429606 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.157891266 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.929782364 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.164909037 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.172024625 seconds)
  done (took 22.512207519 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.349403672 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.22923636 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.923196768 seconds)
  done (took 10.589560351 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.77985629 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.605252161 seconds)
    (3/3) benchmarking "Float64"...
    done (took 3.026933129 seconds)
  done (took 10.500943818 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.987583987 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.171231772 seconds)
  done (took 8.247042608 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.303751591 seconds)
  done (took 4.391073527 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.967421144 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.474104392 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.631002819 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.664967316 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.754585836 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.36965803 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.472178543 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.418958109 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.55864441 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.552625411 seconds)
  done (took 27.952199801 seconds)
done (took 160.6420403 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.576864983 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.184147574 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.369209516 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.533269319 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.397873933 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.369766869 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.461524969 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.521759792 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.210895781 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.197574134 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.535891529 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.400623425 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.410745437 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.185650651 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.416102725 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.181417817 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.398561916 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.606643663 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.220738851 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.458649057 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.469713634 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.181342687 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.37547877 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.199208483 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.398523342 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.321411255 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.782705792 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.184767951 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.371595074 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.796552929 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.32268607 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.611220141 seconds)
  done (took 178.742884649 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.158801187 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.163587829 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.164908769 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.163347044 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.461625202 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.16478149 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.16342612 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.162361302 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.359795727 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.342159722 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.164180578 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.444985559 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.163728085 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.16498443 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.164816389 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.162753304 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.468821732 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.164496044 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.163719895 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.16435395 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.164726949 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.326063448 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.164264662 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.339933546 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.456046327 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.164594758 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.164317992 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.164265588 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.164256731 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.164452086 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.165244757 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.165679083 seconds)
  done (took 217.228471738 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.163953362 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.165724687 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.165301076 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.16484714 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.165916428 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.167076263 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.166461577 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.165290562 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.839997364 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.830414244 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.165354161 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.16621358 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.165888886 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.164542122 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.169030401 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.166073385 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.169795811 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.171143363 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.166285156 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.16862306 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.166800272 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.936225647 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.167576217 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.957401186 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.166445406 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.171287983 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.165859718 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.172157494 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.171622938 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.172087371 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.168270947 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.167758859 seconds)
  done (took 230.345773533 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.404676842 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.167052616 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.168663558 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.17831753 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.168044072 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.167043772 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.175744491 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.412877614 seconds)
  done (took 21.936676632 seconds)
done (took 650.351944319 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.546775909 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.883407935 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.296307606 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.189411237 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.441972827 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.230986581 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.186065803 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.247398082 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.828068157 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.258842652 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.600223431 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.19224103 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.927085978 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.20899805 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.305790897 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.244354488 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.541573482 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.842253678 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.317643495 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.845639249 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.383906752 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.127721941 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.264661309 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.866371094 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.615556001 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.149482607 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.18644053 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.560341872 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.189801054 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.414066936 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.834249504 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.411137736 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.199219969 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.18638264 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.241968633 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.227739777 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.368086137 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.195550432 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.294644388 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.923141529 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.835485382 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.715553252 seconds)
  done (took 112.422908607 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.17446869 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.173777752 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.173664039 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.173523633 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.182156194 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.173874613 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.174307889 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.17360043 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.173996501 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.174144264 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.17515023 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.181810752 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.174668261 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.181836791 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.173375162 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.174186463 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.172975542 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.181943686 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.174550751 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.173347274 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.175027736 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.173286781 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.171759076 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.174414116 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.17475783 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.174708981 seconds)
  done (took 58.65974604 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.17059643 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.329447589 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.457321307 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.200089864 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.171000646 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.17405164 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.199480035 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.176857967 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.174717323 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.173491086 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.284009509 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.175764965 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.183945039 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.456477644 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.196977227 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.172238175 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.172081167 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.172726935 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.335638257 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.185549533 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.201823955 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.177567799 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.20073947 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.186015136 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.174713108 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.173424281 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.175624474 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.574867683 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.182100188 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.286105877 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.215959632 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.205706924 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.514384684 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.467117777 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.235983245 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.179676209 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.172957767 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.328131816 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.182758076 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.17452185 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.199965079 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.18039057 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.464191562 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.681750854 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.185316736 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.172812396 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.571569478 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.34001724 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.218174015 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.185703829 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.467031013 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.200633603 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.172875642 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.174484604 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.211227878 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.184479206 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.174950785 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.414821582 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.187731856 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.20122422 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.181019944 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.174710785 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.344611519 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.182720974 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.332783895 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.181743083 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.180738511 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.176109127 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.467357995 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.200561511 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.684639392 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.186920521 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.175296385 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.287652089 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.337381837 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.596695472 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.18646949 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.345496582 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.532144571 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.209878639 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.18512085 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.560900096 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.213103855 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.183903718 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.175377309 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.174851897 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.174366036 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.220613216 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.200477557 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.603912276 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.686856558 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.430795175 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.21253805 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.187744151 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.176239515 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.415944007 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.185054741 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.175258994 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.457934278 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.707132386 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.188631337 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.183444079 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.666379005 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.189952229 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.204968621 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.186497904 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.473905265 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.202800617 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.220430403 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.17584728 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.182140344 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.178914996 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.192060338 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.186907537 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.175712795 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.659985283 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.345157129 seconds)
  done (took 268.17075474 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.179871963 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.176426383 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.176046573 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.176961283 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.175593061 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.17673525 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.176551464 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.175400531 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.17715686 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.175797119 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.175690169 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.176332076 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.177846833 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.184544785 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.214333105 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.178364023 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.663675059 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.175794581 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.176763807 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.178340313 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.748062427 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.181064759 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.178118618 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.179478958 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.17852651 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.178051297 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.185554027 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.212054412 seconds)
  done (took 176.219213125 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.179227659 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.224697751 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.18871745 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.223538325 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.189295879 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.177118145 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.19841392 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.192654395 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.182975624 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.17947776 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.179045457 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.205704293 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.185837287 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.252605621 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.206719411 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.206284679 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.256335819 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.18439446 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.179749266 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.178583005 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.225200712 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.190399664 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.20524965 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.23223181 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.189740324 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.227061679 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.191393855 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.179411318 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.179969149 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.266721219 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.18372717 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.205997699 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.211265533 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.196739165 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.270733642 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.269692895 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.259465828 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.206252585 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.182659214 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.179880786 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.179951135 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.181716486 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.227093614 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.191079971 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.181939898 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.270427646 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.194700158 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.180816292 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.202569344 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.179654262 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.191244489 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.194981196 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.211881992 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.278047082 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.222114165 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.204984277 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.202010208 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.198046423 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.181405394 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.255149564 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.185933678 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.269952331 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.187129043 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.180795897 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.182892589 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.186959574 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.228281809 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.214818538 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.25920335 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.188385033 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.254985209 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.23348017 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.192529133 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.181615764 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.182171089 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.229966025 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.267640499 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.234128992 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.23989302 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.21561501 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.189055187 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.181955014 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.184436218 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.209086723 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.18829716 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.269972735 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.271025771 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.187956804 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.181852338 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.182060347 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.182104793 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.205718733 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.236398204 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.220659215 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.264897961 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.215346786 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.216538219 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.18935057 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.194368131 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.187065533 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.21369942 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.189354223 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.194885648 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.543922882 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.217146852 seconds)
  done (took 234.297423195 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.564037896 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.231997352 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.250846162 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.44610181 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.569751543 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.264586546 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.219806218 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.24101271 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.240223474 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.345034779 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.288103606 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.299076345 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.217437376 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.204200973 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.231334023 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.238626458 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.255907072 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.524337071 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.328635986 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.896189647 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.217467912 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.509621446 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.517427851 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.587898954 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.269876344 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.640520504 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.867160617 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.317134994 seconds)
  done (took 70.898961544 seconds)
done (took 922.763638992 seconds)
SAVING RESULT...
DONE!
