cset: moving following pidspec: 16140
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.820456721 seconds)
loading group "shootout"... done (took 1.114959769 seconds)
loading group "string"... done (took 0.668273904 seconds)
loading group "linalg"... done (took 8.642531077 seconds)
loading group "parallel"... done (took 0.169162313 seconds)
loading group "find"... done (took 2.936790964 seconds)
loading group "tuple"... done (took 2.110051139 seconds)
loading group "union"... done (took 14.879396178 seconds)
loading group "dates"... done (took 1.456374043 seconds)
loading group "micro"... done (took 0.219855872 seconds)
loading group "simd"... done (took 4.821095503 seconds)
loading group "io"... done (took 1.091394128 seconds)
loading group "random"... done (took 9.555779548 seconds)
loading group "problem"... done (took 1.51623448 seconds)
loading group "array"... done (took 25.285670189 seconds)
loading group "misc"... done (took 1.890499172 seconds)
loading group "scalar"... done (took 43.439526069 seconds)
loading group "sort"... done (took 3.331325208 seconds)
loading group "sparse"... done (took 12.709724582 seconds)
loading group "collection"... done (took 18.289909734 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.422332373 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.121809896 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.126778186 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.112634797 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.184872037 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.119941014 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129429336 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.084085936 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.895471123 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.135045283 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113613192 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.424396621 seconds)
done (took 5.310005487 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169381297 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.091268699 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082417036 seconds)
  done (took 1.394931112 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071710186 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061446926 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065871699 seconds)
  done (took 1.419124544 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063901832 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135272957 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064669267 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065595523 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065073005 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06470874 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064801891 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.06492912 seconds)
  done (took 1.750363636 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072048968 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065967251 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063852396 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.066261193 seconds)
  done (took 1.492014283 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065100564 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119768442 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063382721 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063234921 seconds)
  done (took 1.530921843 seconds)
done (took 9.064239269 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.137527261 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.820464236 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.76903084 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.120949236 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.245016068 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.367071212 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122818937 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.181888643 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087416519 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074051396 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.120262391 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076923165 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.385780021 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.399169136 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069794764 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.167736276 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.651370275 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.0855008 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133228314 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.440604717 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.072143537 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.086447944 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08304735 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.06987893 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.331148817 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.15280686 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.660314131 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.091931681 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066706547 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.093490942 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069169912 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076773747 seconds)
  done (took 10.569865168 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093915612 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088918863 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.06724627 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122943359 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092479916 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068607927 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073671395 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066148145 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.08768624 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122681572 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088170056 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097037342 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.064755716 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067387959 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.07248158 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195257352 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078915031 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079843166 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066033657 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079792844 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.103919888 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076757526 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.077149796 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076622552 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.131042048 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.167623444 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094791084 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.0963955 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064799969 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077762252 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113711962 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.12401217 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065163683 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063941636 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118768925 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093557869 seconds)
  done (took 4.595577568 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.881329389 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095033483 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081791226 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072559844 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104770038 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.112889864 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.111232572 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.119113039 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.124148763 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.10333975 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067260902 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.149012677 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.666359396 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.153544193 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069924686 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118158284 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.354529144 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063896021 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.09866175 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068494482 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066720486 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069239189 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068266592 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111400708 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067542238 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.174504832 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.584201153 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068538687 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067551815 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094952761 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064013966 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138282367 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.090913145 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068513729 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.542888205 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064808187 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062073985 seconds)
    (37/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.175418695 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.08796866 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093201277 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065350353 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066917215 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077629778 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064980868 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106659226 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078219409 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.511812042 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068181201 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.579417109 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224125878 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.07109238 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070160228 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10031377 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063115329 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066254879 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.973861597 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.142096535 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065350719 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270316878 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066786759 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066796069 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067056262 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.100780826 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065543454 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067040087 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071269877 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094630112 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.790955735 seconds)
    (68/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064257296 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.085479551 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.095027527 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065346057 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.404201662 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073892318 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067103523 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067702234 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.081989203 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.10916298 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064887428 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064757209 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109498914 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093592392 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087266902 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068010997 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065940522 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064744294 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.319517193 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.165335541 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064968956 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065341081 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.475528609 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062319376 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064238267 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066186039 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.21039295 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066391863 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062957608 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063983759 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097939303 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069521272 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.333485385 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065568128 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.476197906 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067329437 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101210632 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118461366 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066391806 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099727273 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066571919 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06349779 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07209885 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064323518 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063183055 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067730776 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064254195 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065156964 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067746084 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066433343 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065611415 seconds)
  done (took 22.677167415 seconds)
done (took 39.949746101 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.333637533 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077551063 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077476531 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077811913 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077971682 seconds)
  done (took 1.910513177 seconds)
done (took 3.272286824 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.130748739 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073848736 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062732558 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.098458149 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.066792672 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.099854473 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.106822943 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.103069425 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.06703751 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.067134433 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.066964434 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.103171084 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.103088612 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.066883505 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.096314636 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.102420574 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.067197862 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.063097371 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.067243605 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.067523169 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.067519819 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062655221 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.067354981 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.06722179 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.097166911 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.067607217 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062896151 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09712997 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.066984328 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.097062688 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.067141794 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.067462653 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.067361454 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.09788164 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.067678818 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.097720354 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063160735 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.067315267 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.067157329 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.067238917 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.067457126 seconds)
  done (took 4.546576952 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070877264 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079929155 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081845134 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060341386 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06950909 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080621848 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060865236 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08021336 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090018439 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080825063 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.198680314 seconds)
  done (took 2.26748163 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07062975 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081577062 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082407177 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06049379 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071538764 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082173181 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060226807 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.0813499 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084176309 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082171299 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082404466 seconds)
  done (took 2.132539933 seconds)
done (took 10.235969894 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098120391 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063795945 seconds)
  done (took 1.437383555 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.221769416 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.495962885 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.929728051 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092150548 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070729561 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08419818 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.198105262 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065531626 seconds)
  done (took 7.622752694 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.098907795 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.066098195 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067849887 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.06718471 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070876312 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066467105 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.067032603 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.068075459 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.066165688 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066506784 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.06644588 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065854222 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.066088293 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.06625783 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067683178 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066700631 seconds)
  done (took 2.499178407 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101921674 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067365277 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097334458 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060144089 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070033 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060643077 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.06923547 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07097716 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068264597 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.068970107 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070287134 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.068952028 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069481672 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069731795 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071000525 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071086723 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.070882691 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068403964 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07069712 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071557069 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070966684 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071674509 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071787394 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.0695772 seconds)
  done (took 3.131259788 seconds)
done (took 15.983991874 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175267971 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072908189 seconds)
  done (took 1.533407434 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067901257 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.067094635 seconds)
  done (took 1.435591368 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073223551 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058943256 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.076138576 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068618514 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.060061367 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059259983 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.075236055 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059822946 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059758749 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.060033738 seconds)
  done (took 1.953032418 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063218448 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066704744 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.065230761 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062722603 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065450871 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060837798 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063583855 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061749346 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.068007606 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.060353081 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064294252 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081786817 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064580598 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081931905 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063908635 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064268549 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065682452 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063438727 seconds)
  done (took 2.492766361 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.060305944 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059484687 seconds)
  done (took 1.428305401 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063961703 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059743784 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062379779 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062556359 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059998289 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059983523 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060171085 seconds)
  done (took 1.729877003 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.419603419 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.120975493 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.339601255 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.066866101 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074378753 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.252106525 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.061684808 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066462042 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066367488 seconds)
  done (took 2.814039202 seconds)
done (took 14.703918144 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082114509 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.17882778 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085405807 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.37603273 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.089965312 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065467569 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.110676985 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.175973064 seconds)
done (took 2.496893328 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.279149705 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.224292293 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.398451601 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.123412495 seconds)
  done (took 3.058698556 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.332703272 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077193471 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075263449 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.06478496 seconds)
  done (took 1.875707568 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065042237 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069157474 seconds)
  done (took 1.451540845 seconds)
done (took 7.993874449 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071546025 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060434683 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.065814365 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062258006 seconds)
    (5/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.091304298 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.062055435 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061463527 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062544517 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059946555 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.062453945 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.062074862 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062585027 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061835556 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061951027 seconds)
    (15/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059959112 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062756602 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.061148985 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.062108789 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061906786 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062021856 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.060292296 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062472863 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061324958 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062160854 seconds)
  done (took 2.869326088 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079501217 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06345581 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064835328 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064761759 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065112488 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064786759 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.065741048 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.064023555 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.065156052 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063714288 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065355527 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065179079 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.06344644 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065403865 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063458401 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.06579138 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06537234 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063433347 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06376438 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065816186 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.065058678 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064065932 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065435368 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065451331 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065436549 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065703397 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063498996 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064127197 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065046977 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065828811 seconds)
  done (took 3.29618899 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066418031 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058218443 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058719259 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068204205 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.05838211 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058481906 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058698466 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058003425 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058900637 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059543807 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059152715 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.05849563 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059465197 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058019151 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058145928 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059108092 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.062821553 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077094392 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058396417 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058555338 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06238806 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058466819 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058191762 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058387716 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058753242 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058261109 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058080018 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058912044 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058475743 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059160156 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.05854512 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062688644 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.063637525 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058219403 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068354343 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063306149 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058449315 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.0624371 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.05959471 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058340527 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058202762 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058300149 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058372009 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058466379 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068435099 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058378721 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059526672 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.058752692 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058738987 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058742925 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058592235 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060018911 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067040033 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060219233 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058454636 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059340292 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058047761 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059067094 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058485423 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058396727 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058221527 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.061821888 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059780326 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.058842751 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.078146836 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059644016 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.06868182 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.0580272 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059370434 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062374466 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.05899701 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076086698 seconds)
  done (took 5.700538212 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072195341 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070263792 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077248883 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068596767 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062627586 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059528391 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063365801 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059531719 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068962869 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063517628 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059502809 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06305424 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068584526 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06360833 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06084108 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068868576 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063269983 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062725836 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059137817 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063515538 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060537745 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063166976 seconds)
  done (took 2.766854723 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.139120439 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064383155 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103088654 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068072384 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066615591 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068242998 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064515972 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064281699 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065206993 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064962879 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06482651 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064302133 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066680103 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064963929 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064777833 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064905896 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06480717 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064864283 seconds)
  done (took 2.623247528 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.075922398 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063750831 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087653882 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063908301 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.063887048 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063747809 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06773312 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068391813 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06402406 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06401621 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.068145996 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063811919 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.064539129 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064164949 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063573414 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064515521 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063737389 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064021149 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068374132 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06731181 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067310497 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068354242 seconds)
  done (took 2.807225637 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076632968 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063273641 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078437638 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064945781 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05873549 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058642397 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064564358 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063356394 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064229632 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062835411 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063634454 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058849239 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065413872 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063345245 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065228386 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063650614 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.062933154 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063156887 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063222471 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.05861671 seconds)
  done (took 2.619241694 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071449974 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061283636 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061579205 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066386667 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061414414 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061359405 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06686979 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.061243931 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061260774 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08245104 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061470471 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060958562 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.077293206 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064544774 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061003406 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066625859 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066197018 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066814602 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061276211 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061417849 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.082900499 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061484482 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066557937 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061188535 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061403216 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061286516 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061345464 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.06480533 seconds)
  done (took 3.161699397 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.063940857 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061283672 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061940302 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061655383 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062010212 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061679127 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061960379 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061922313 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061563881 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062353602 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061515716 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.062254822 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064456849 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061555239 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06197069 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061943007 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061548954 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062154657 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062091768 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06239918 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061673219 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06138255 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.06130743 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061889768 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061571593 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061213263 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06179087 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.061872697 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061633273 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062056627 seconds)
  done (took 3.202227445 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072788049 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069714138 seconds)
  done (took 1.485665503 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061876906 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075402672 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.058004744 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070250678 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066623348 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062263746 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067619734 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066825572 seconds)
  done (took 1.865403297 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066545209 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088469701 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060310994 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.061997319 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063391294 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125235971 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.072582042 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071876248 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074037765 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06244385 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060606064 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072139444 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.05963087 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073525567 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06166397 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069126449 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06762562 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078002089 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073083435 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058756894 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07298312 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060977903 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059097368 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061046683 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060235326 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.066905187 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076050299 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072600747 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068455657 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058048366 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078863657 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058761273 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060011882 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068709331 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.062932081 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.058832878 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.095600073 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.060194269 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064353353 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058760277 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071177152 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080013405 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073566589 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077286483 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060616278 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06100679 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058655021 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061116558 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06295724 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068626447 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058801352 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066964622 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058027619 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060670238 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.069953235 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059339256 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064717738 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068562503 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07307503 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.069696911 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.068081189 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.074742504 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068002534 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.066745743 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.059952508 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.078926577 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.060657033 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.072249604 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074047979 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060161677 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072067218 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058705516 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.05798331 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.058620332 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.092374802 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060620931 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060331677 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059081515 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.058868256 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060844397 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.06925879 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064613141 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066777851 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062679988 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075170638 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068803306 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059266144 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065664489 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.0774016 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062279437 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059579023 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075680991 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062758822 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058493632 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076856002 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.06939288 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060867165 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.060055095 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062441822 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07257519 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060023264 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058092859 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067714724 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060608324 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061102307 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063751643 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066744163 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058809866 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069288672 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063865682 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06038266 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058135489 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063234012 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059718599 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057338133 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067859294 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058608904 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072794539 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.06480931 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072486523 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073394218 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068655816 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07375431 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058046464 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.056958349 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075847671 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067678634 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059370082 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075199123 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057449663 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071202957 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057667967 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.197489972 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070529704 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059780164 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062182219 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.0599388 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065031517 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061177755 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061729086 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06544236 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068360682 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071637021 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060444808 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068314699 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059598007 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075308134 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069445449 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063941594 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062684765 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060101906 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071482326 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.065888401 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068350541 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058419093 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.059783329 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.05928437 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.069703566 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068685605 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.060918296 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.06664058 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063771876 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059707285 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.05937855 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060093881 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.062895092 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062597672 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060205838 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067106416 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068400757 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073207055 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066392746 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068289487 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058409618 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058383097 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060707236 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058377753 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063576142 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068279885 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074603039 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070870542 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.079951717 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.058938309 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069242833 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060788615 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076032115 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072685993 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060242238 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063651606 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058145351 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060631172 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068825395 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070858042 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072818078 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074035823 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06388246 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064037219 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.058919386 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074331509 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059285678 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067598505 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068313653 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063623523 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059340872 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.060692156 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068181564 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063451015 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059195317 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074923335 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065442255 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058536853 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073562199 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.05940485 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.069729874 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058684783 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.062731118 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064165028 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06112005 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068610042 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074666802 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058160157 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.060013587 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075119067 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061386277 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061055389 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067673195 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074270921 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064230675 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067175977 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069850443 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069288372 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063553184 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068937321 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060060967 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068825541 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061887122 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070774667 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059048206 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076759826 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057745203 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074000375 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059313981 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.0700888 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.05943415 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.06824771 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059924734 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075817911 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060753119 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059842225 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070948423 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057723458 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068008409 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058421288 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063638549 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.064780658 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067478873 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059837628 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067917071 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059749963 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067353693 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063143382 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066445481 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.0676379 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.062761016 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057438761 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066491127 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069250199 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066259833 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.058912671 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059092789 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.200985229 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070150436 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062028046 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061324173 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068630581 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064252488 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065288365 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060930325 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061474012 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.060978708 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067894529 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.06878456 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07719322 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068264481 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067185019 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068446221 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058519871 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074694672 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059072332 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069731082 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.05820384 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.065173586 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069071343 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059237217 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078304278 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060769171 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067150078 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071617605 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067843216 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.0632792 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.077075814 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064094491 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.067875477 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067223652 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.063757249 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.065880093 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.060771668 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.067701107 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069177528 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.06992882 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06011265 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067258678 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068482999 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060854845 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.066619591 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.061031265 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.068039576 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.060745105 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.05816513 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063601772 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070884397 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063807743 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064092248 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059439335 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.058463945 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059907012 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.066303838 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063863833 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068197072 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074741479 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058299141 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060393995 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058947005 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062705884 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077231749 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069013406 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.06723774 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.063956038 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058070874 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061076378 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061071341 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059563254 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.062707409 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058276387 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.05848348 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070102967 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.061089056 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063588485 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059435107 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.060471422 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.069246006 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064019159 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.05967044 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066010797 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.059258127 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064581417 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058371788 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060906342 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063746045 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058567796 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062780491 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.070232893 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075864142 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.066402608 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068588049 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060662866 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067473526 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074897798 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066641433 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060613119 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068670733 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058426239 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077897203 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068776929 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.06781752 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069152097 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059933051 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076031848 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063539413 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068961083 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074488719 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060337621 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065549092 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058765701 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074749919 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06380484 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058362114 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066700635 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066839735 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064845618 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070634582 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059356422 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066733816 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063656659 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.061886794 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.059958542 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059863566 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067114089 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074829643 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.059091962 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.0622512 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066541161 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066629726 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062660222 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070138046 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066195234 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059228117 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.05979761 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.208391917 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.061397501 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072323945 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060429185 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064528537 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06428106 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059065403 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066186262 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076050541 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069037474 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069183365 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058709345 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058738843 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.077236561 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062846938 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062858795 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067618741 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.06938344 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071873483 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068667847 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.076155655 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060105343 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.065066884 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071708496 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.059883997 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.059202678 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.062954737 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06061506 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.068463802 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068910651 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.06679103 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061134715 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066437718 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.073159561 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060507456 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.064071892 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.064180791 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.060228926 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.069825039 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067795041 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070736307 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06028535 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059137914 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062522501 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068258716 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066880382 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068022123 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060158021 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065693569 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072682174 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066954749 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062130829 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058704934 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062548838 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068327267 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063563912 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058782779 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.064023657 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062701106 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066039914 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068801053 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064028424 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058889023 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.076219795 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.067474398 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068522611 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.061072591 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061416436 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059624515 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058791386 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070584436 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.05859808 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.061087022 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063996991 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060875252 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076979733 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067808535 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075692668 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060419744 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063978943 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058792812 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069265825 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064168806 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059477618 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069993338 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.05864852 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074624109 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071699493 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.064596768 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058705342 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.064335944 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067014015 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074046815 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.06943744 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068498524 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062885028 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068789557 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061116776 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070346676 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059144166 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058038339 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.06986115 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068268438 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07207824 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058669212 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069430157 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.060940263 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067349943 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.06721488 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06074843 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060699383 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.060941479 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068713311 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064099935 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068941298 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064024665 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076034141 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060251825 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070082489 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068506034 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070007527 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073055751 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07136515 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.066791344 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.059155114 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066529676 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.066502684 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059863045 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063498621 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.061315987 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079178181 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059800088 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059449061 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072389224 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.064355436 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.05824806 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.064112036 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.207190274 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070744861 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061579901 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070742648 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06374874 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060807635 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.063995306 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.063952006 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058188953 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.058805348 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059012062 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069235296 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063664265 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059699255 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07792788 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060707349 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068283165 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070257676 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.065864642 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060846657 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.057775742 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060378184 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072662652 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075119398 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063020203 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067949143 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060614839 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068844666 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059003249 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068376874 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067841615 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067984409 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058677312 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059567282 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074249306 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075067241 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063803233 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.068945772 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068510661 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.06069581 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080581095 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068472113 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060380497 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070263292 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061705943 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058432639 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058162973 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060662308 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070645668 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058611294 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061515351 seconds)
  done (took 40.951818429 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098236557 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059653775 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058546851 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058825366 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067126768 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059840845 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058864289 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059762818 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059918279 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061672467 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059010861 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061604941 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065390832 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071843874 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06735178 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062623808 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058539239 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.05978124 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058771173 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060130186 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065516315 seconds)
  done (took 2.786604764 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.063925946 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.063118601 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062692816 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063608447 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062433272 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059271508 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062888969 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058989882 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064438671 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059305693 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064035245 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059435759 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059353807 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059774522 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059812193 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060940126 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063411669 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062816345 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058908192 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063045159 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060732112 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063381992 seconds)
  done (took 2.785541839 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06246698 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059369971 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067803607 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.05869543 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058298938 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062032443 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058258729 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063203771 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.06309312 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063178806 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067700078 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059481519 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058261352 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064473905 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059138898 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059555257 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.101602651 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059862029 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059845964 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058297293 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061606087 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067696297 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058708024 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058478644 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.062964794 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061822317 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058429887 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.06134476 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059035933 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.06339512 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060046578 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058362442 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.067944763 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067402062 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.062757776 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063292996 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060412649 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059611072 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058496267 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058558624 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067163011 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060086595 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058814549 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06001368 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067782738 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.05878333 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058351389 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.06796929 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058438523 seconds)
  done (took 4.492054523 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.070682325 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110810732 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.06481166 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092395817 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.0715067 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.065168252 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064596143 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.093044141 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059722363 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060684336 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072842641 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072437577 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061906286 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063736994 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.064317294 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061775379 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062396389 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060893636 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064265723 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061175932 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064237371 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065910395 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071270452 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071668729 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062349506 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060864188 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061188643 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063079878 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071599124 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064650383 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063337692 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063640599 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071975234 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066404137 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061202825 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.060935691 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072401538 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061872649 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061560477 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060208011 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061398883 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063299445 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066114808 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072808374 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061798776 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066600277 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061958516 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059829709 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072580049 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061629131 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065804812 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073356411 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062656302 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.061741607 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063078586 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.07190218 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.0617547 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060434774 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061884561 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.07231068 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.059777227 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062341469 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075402012 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061332637 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065026379 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072862127 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066959777 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062351802 seconds)
  done (took 6.105082804 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069852269 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.092769752 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074435463 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074192906 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069280925 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069685656 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069750538 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069509944 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.069232456 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07230655 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069617783 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.10402339 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065869017 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071013825 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069607813 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070063693 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069490931 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069235565 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069041161 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069150857 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069500724 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074536399 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069289285 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074273687 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071853213 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065646426 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069316352 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.068941686 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07419441 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069161161 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.072003244 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069168004 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.06919744 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074882238 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.071863941 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069491212 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059845767 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069235846 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.068987126 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.068961044 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065676391 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074256463 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069321065 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06556301 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069639271 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069570966 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074714075 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071994537 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071288864 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072594433 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069460636 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074970075 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069508204 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069506241 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074559564 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076929274 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074680523 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074938845 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069316808 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075023624 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074621186 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077003895 seconds)
  done (took 5.917794155 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074303536 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065186354 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077837985 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058352239 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058678246 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068234763 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059111508 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058854737 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065542958 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065506701 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067307378 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068243273 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070465204 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06737941 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067879589 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070561272 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068280493 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068005159 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065479413 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068275279 seconds)
  done (took 2.800340842 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.075529496 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.077322743 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064660555 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067960371 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.06403057 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06784482 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.063914756 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06486666 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064897647 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064785827 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069749047 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068920786 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064966454 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068175253 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.069215933 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067904677 seconds)
  done (took 2.53755648 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.063696119 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066870216 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.066004895 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060364398 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061844644 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059908064 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060321936 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058660603 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061598716 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073084848 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060122987 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062754521 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060262366 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059349605 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059417261 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062844767 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061475759 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059735656 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060279015 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.063995555 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068119044 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060759474 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062595081 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.05974119 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062281113 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068266546 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.060905849 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061956759 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.05979867 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062450295 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062034988 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.066394198 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062144779 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060618978 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059062002 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059789622 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060302952 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062674972 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062681188 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.059997029 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058437545 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065419701 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.059955675 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061133325 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061331984 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062713715 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061554243 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065638768 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060176282 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062379432 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060035331 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062070055 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060090771 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067022765 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062349475 seconds)
  done (took 4.869199391 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.0771837 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064383312 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058639721 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058264565 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063647245 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064178361 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064005689 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064050099 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064167952 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058427045 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064469515 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063322876 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064657887 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06402562 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064204457 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063801342 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059035316 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064214458 seconds)
  done (took 2.611801881 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.066909228 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064691634 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063547623 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060292765 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060665339 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065616777 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058925041 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.06029366 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060324125 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060676796 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061094717 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060178666 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060444792 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060414317 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064832243 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06088592 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060209089 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.05900852 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06083411 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058709172 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065363371 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059077567 seconds)
  done (took 2.812940496 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.087889575 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082320548 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.126014175 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078046448 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.086521599 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070022035 seconds)
  done (took 1.992707087 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093046261 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096003412 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063996579 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064620953 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068304347 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06654943 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06688898 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066942626 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070359162 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070589513 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067044557 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07066072 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070100532 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072282535 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068741476 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068453243 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067094901 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066865016 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063807162 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074608119 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067226978 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070396715 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066661465 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066903401 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066571049 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072383199 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070484091 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070844459 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066827084 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070390957 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068928716 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067047366 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070755078 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070554175 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0638236 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070192404 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066942917 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074367062 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068528846 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072308779 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06380461 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069072037 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070225393 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070178529 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070573785 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067476981 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070556282 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067124495 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06738505 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076212352 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06918842 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072349082 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069240998 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071360549 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070727934 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076017433 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071055597 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072216886 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069357267 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070829238 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072404608 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068726074 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072378316 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071404871 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0692356 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072407314 seconds)
  done (took 6.098214838 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103491585 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064601173 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067569233 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070834764 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07232398 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067394652 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067265942 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067481876 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067286591 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064510575 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102408783 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06774913 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072977694 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075548374 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067181031 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067089278 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067123149 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07240308 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064305998 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075529448 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066518195 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072063447 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072005051 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072248411 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071029809 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06849539 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06685889 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067004741 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066704545 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066638153 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070021426 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067119452 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072041521 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063759962 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07196552 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067101234 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066917208 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069883694 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066763919 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069271502 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072461582 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074712669 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067086794 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067132468 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071261985 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066907603 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067369489 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064442509 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066958212 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06450116 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070747989 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071068684 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071113325 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072493028 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067527652 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067321885 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067490566 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067484988 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067500795 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068949 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07238387 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067186507 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076294691 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067408279 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067324764 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072821839 seconds)
  done (took 6.108074049 seconds)
done (took 126.588285356 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.217515519 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187955318 seconds)
  done (took 1.853830493 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.073632839 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.163479728 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072510743 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072565506 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106157786 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105329288 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073728919 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069780286 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072791757 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070025716 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.137162751 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073898621 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070012515 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070320098 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070295762 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.070136623 seconds)
  done (took 2.842600365 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.107253992 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.181210825 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.099803426 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067919553 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.149595177 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074479074 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.070021185 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074141464 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.07492149 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.067926776 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.105016467 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081513344 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073440792 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.0743248 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.069833476 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073489902 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074081117 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074238374 seconds)
  done (took 3.069850486 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.102702539 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.08958829 seconds)
  done (took 1.67308061 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156014948 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102662363 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.142612812 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.342198497 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.134069997 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.136420498 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.139028257 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.135043485 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.109349578 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.132380023 seconds)
  done (took 2.999809855 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.105450798 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102605346 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.306073406 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100261581 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080117909 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075271557 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.07275865 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077816308 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07268281 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.07404346 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119777033 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072853514 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070294068 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121794138 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097243432 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104391166 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.06864751 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.07595737 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077041081 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068313819 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073617642 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077256361 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.176244429 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.075896102 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.097574518 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07318711 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075295364 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072129055 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.071952147 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.075686325 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.07642734 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.097315677 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076106467 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.080014284 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074169783 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094993582 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069107134 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.097042573 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.071904466 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.07008729 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07284492 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076452172 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.069995668 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076407047 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.072642138 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075309898 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077393463 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.068625655 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.072582453 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072003013 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070176072 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074407383 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073887948 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.074886139 seconds)
  done (took 6.139999399 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.10742948 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105752889 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06835509 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.110600198 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102499023 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068394786 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.102759776 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097797382 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.105670541 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067720437 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06713351 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067257795 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073874442 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.077060522 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113909764 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105838471 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069474086 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067676972 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.104815479 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.104366268 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066652026 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099243286 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097844095 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.103970926 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066426452 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067783547 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066327601 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.066881302 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071782733 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.073131434 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.066924512 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074049279 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078688063 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073358484 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065694532 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066273577 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066261392 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.0736481 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074302539 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.073980896 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07272631 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066286223 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066186667 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066872674 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06761209 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066021829 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.0731299 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073597638 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072612448 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066633167 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066778422 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066526175 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06720267 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073094451 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072195173 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073933892 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073961167 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066403914 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066330143 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067814923 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074936171 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074734642 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073698341 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068115809 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07459438 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066773754 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075602615 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078927219 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066674683 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067383041 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066973846 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066545265 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.066822163 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072625638 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.073150773 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067225599 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066609947 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066537463 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07507508 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072748819 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066643148 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072522607 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066175893 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067251927 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067182651 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067284888 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.072089456 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.073934705 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067733406 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066578973 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066820237 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066580476 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.066009884 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.071956225 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073169767 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073894556 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072388926 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067236838 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072728835 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072986176 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066775179 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072664756 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066153416 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066441448 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06665901 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072134417 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07078178 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07319244 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065836778 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065475707 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.071021001 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073443261 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065624306 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070881216 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073231115 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.21069094 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067575637 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076323207 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067395423 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075052843 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067421167 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075374428 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067508763 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073196727 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067066926 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066260996 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066778648 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.073180764 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067317377 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067084077 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067486346 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067003651 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072921618 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075761123 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067514342 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073012756 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.072785005 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067305694 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072443917 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.0670393 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073504159 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066940194 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066784382 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066029661 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074993532 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066915524 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066755411 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066268067 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074368495 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066870866 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074984575 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.071787435 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066195496 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076358331 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074780915 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07205951 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075355628 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067650604 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066823649 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066747912 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069134786 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071853162 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073081224 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067049751 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066674997 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071975966 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074890987 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066268022 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072569267 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072630315 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072740511 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066895419 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066829745 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075983539 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075239171 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.073049558 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072620328 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073190272 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066625799 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072149871 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072436314 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066776552 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078969351 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066348166 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077042274 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073058779 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071983844 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073147471 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074356456 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075294517 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074878053 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076982716 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06624931 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066335622 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072488689 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066525431 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066407902 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072281269 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067163048 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067161581 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077338541 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066914915 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075047285 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066188204 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073311357 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066056303 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067370134 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077630664 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06684434 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067321704 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072329093 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06642864 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072368848 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075172378 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072867981 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066284615 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067086343 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073122983 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073885049 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066647825 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066206485 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067025657 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071281365 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07106411 seconds)
  done (took 17.849517363 seconds)
done (took 37.92016019 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.16713489 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112544163 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207377163 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.194805398 seconds)
  done (took 2.266625012 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.10069306 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063043618 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.078158363 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087921571 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063154079 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073666713 seconds)
  done (took 1.991497597 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202245567 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.172561092 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.24065566 seconds)
  done (took 2.133318363 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.364162007 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.147886916 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.211994583 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.497006464 seconds)
  done (took 2.846495425 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107805183 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097916595 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075245628 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108801638 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082793909 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060955068 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.13084373 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067341249 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.098562323 seconds)
  done (took 2.419122426 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.13632371 seconds)
done (took 13.340113634 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.270709628 seconds)
    (2/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.10996362 seconds)
    (3/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.184406401 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.235055757 seconds)
    (5/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.170569192 seconds)
    (6/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.185305026 seconds)
    (7/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.40869507 seconds)
    (8/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.244459639 seconds)
    (9/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.274957224 seconds)
    (10/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.22119025 seconds)
    (11/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.122366448 seconds)
    (12/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.202601384 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.089646874 seconds)
    (14/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.178263791 seconds)
    (15/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.13710141 seconds)
    (16/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.185838178 seconds)
    (17/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.075916634 seconds)
    (18/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.143063402 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.073915098 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.075168565 seconds)
    (21/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.194443319 seconds)
    (22/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.180610397 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076034633 seconds)
    (24/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.062441296 seconds)
    (25/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.180440779 seconds)
    (26/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.075934193 seconds)
    (27/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.218615136 seconds)
    (28/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.065594041 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.118098091 seconds)
    (30/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.0722976 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.07254487 seconds)
    (32/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.198760764 seconds)
    (33/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.071670453 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.178176592 seconds)
    (35/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.216019484 seconds)
    (36/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.184446379 seconds)
    (37/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.169128106 seconds)
    (38/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064421505 seconds)
    (39/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.10614168 seconds)
    (40/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.089787703 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.071534589 seconds)
    (42/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.071489528 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074447864 seconds)
    (44/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.091258762 seconds)
    (45/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07242336 seconds)
    (46/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.204813032 seconds)
    (47/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.138508425 seconds)
    (48/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.198263962 seconds)
    (49/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.173189176 seconds)
    (50/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072243396 seconds)
    (51/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130970654 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.083747431 seconds)
    (53/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074029067 seconds)
    (54/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.192783237 seconds)
    (55/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.066779935 seconds)
    (56/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.085302087 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.082651488 seconds)
    (58/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.144317533 seconds)
    (59/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.079824846 seconds)
    (60/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.074900161 seconds)
    (61/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.066783386 seconds)
    (62/341) benchmarking ("sort", Float32, false)...
    done (took 0.13455367 seconds)
    (63/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.071969268 seconds)
    (64/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.063322369 seconds)
    (65/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.064415116 seconds)
    (66/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.07248443 seconds)
    (67/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06493432 seconds)
    (68/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.162937183 seconds)
    (69/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.230569682 seconds)
    (70/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.178836989 seconds)
    (71/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071396793 seconds)
    (72/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.063335007 seconds)
    (73/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.064914029 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.132260189 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.080733251 seconds)
    (76/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.072921035 seconds)
    (77/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.070782749 seconds)
    (78/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.153164292 seconds)
    (79/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.359007159 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.092152088 seconds)
    (81/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.065757269 seconds)
    (82/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.163628718 seconds)
    (83/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.197436472 seconds)
    (84/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.063600479 seconds)
    (85/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.067157406 seconds)
    (86/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.198969138 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123470298 seconds)
    (88/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064808082 seconds)
    (89/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.081663653 seconds)
    (90/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.064919032 seconds)
    (91/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.067411005 seconds)
    (92/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.194415229 seconds)
    (93/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.142562869 seconds)
    (94/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064097433 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.090408599 seconds)
    (96/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.19931315 seconds)
    (97/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093423309 seconds)
    (98/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.064232104 seconds)
    (99/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.064281011 seconds)
    (100/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.16050648 seconds)
    (101/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.08040343 seconds)
    (102/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.071161059 seconds)
    (103/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.064651126 seconds)
    (104/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.216702435 seconds)
    (105/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.067048185 seconds)
    (106/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.154088742 seconds)
    (107/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.074976094 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.0861679 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.07153606 seconds)
    (110/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.187535024 seconds)
    (111/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.082629828 seconds)
    (112/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.074517291 seconds)
    (113/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084238951 seconds)
    (114/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.141222186 seconds)
    (115/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.063484524 seconds)
    (116/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064698656 seconds)
    (117/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.063331034 seconds)
    (118/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.070578456 seconds)
    (119/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.071117363 seconds)
    (120/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.072570972 seconds)
    (121/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.177244603 seconds)
    (122/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.188482839 seconds)
    (123/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071359986 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083663327 seconds)
    (125/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.087020917 seconds)
    (126/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.073896236 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.066889719 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063512702 seconds)
    (129/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.062477055 seconds)
    (130/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.188976064 seconds)
    (131/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.143537469 seconds)
    (132/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067644911 seconds)
    (133/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.07054473 seconds)
    (134/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.06311631 seconds)
    (135/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.064246693 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072298983 seconds)
    (137/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.158404049 seconds)
    (138/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.064174295 seconds)
    (139/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.166681133 seconds)
    (140/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.120516809 seconds)
    (141/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.148445268 seconds)
    (142/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.176737072 seconds)
    (143/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071393586 seconds)
    (144/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.075619222 seconds)
    (145/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070482026 seconds)
    (146/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.063622084 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073211004 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.140889949 seconds)
    (149/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.085804916 seconds)
    (150/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.08211502 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07295852 seconds)
    (152/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.063688803 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 0.144232528 seconds)
    (154/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.076823308 seconds)
    (155/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064477395 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.084437476 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.119275439 seconds)
    (158/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.135063553 seconds)
    (159/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070630604 seconds)
    (160/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.070948078 seconds)
    (161/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.082742504 seconds)
    (162/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090517135 seconds)
    (163/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.078882263 seconds)
    (164/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070934735 seconds)
    (165/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073454758 seconds)
    (166/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.161886236 seconds)
    (167/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.076826926 seconds)
    (168/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.06378388 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 0.064680214 seconds)
    (170/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.065549396 seconds)
    (171/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.07917595 seconds)
    (172/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.14263631 seconds)
    (173/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.153061245 seconds)
    (174/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.063264874 seconds)
    (175/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.064096185 seconds)
    (176/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.062889379 seconds)
    (177/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.066614258 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.062752402 seconds)
    (179/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.063282731 seconds)
    (180/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.064745517 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.080213245 seconds)
    (182/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.063184861 seconds)
    (183/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.064093124 seconds)
    (184/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.071823219 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.083462518 seconds)
    (186/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.062756873 seconds)
    (187/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.065555982 seconds)
    (188/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.060956479 seconds)
    (189/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.33978858 seconds)
    (190/341) benchmarking ("sort", Float64, false)...
    done (took 0.138759655 seconds)
    (191/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.073899207 seconds)
    (192/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.065572918 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.065164588 seconds)
    (194/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.063266506 seconds)
    (195/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074834393 seconds)
    (196/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.06583345 seconds)
    (197/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.138381041 seconds)
    (198/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064064571 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.146492539 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.145368489 seconds)
    (201/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064553895 seconds)
    (202/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.071828629 seconds)
    (203/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.064054 seconds)
    (204/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.067289748 seconds)
    (205/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.080849265 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.08892664 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.146756449 seconds)
    (208/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.064104304 seconds)
    (209/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064343111 seconds)
    (210/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.063865154 seconds)
    (211/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.081161695 seconds)
    (212/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062143703 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.110133636 seconds)
    (214/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.236332882 seconds)
    (215/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.086669474 seconds)
    (216/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.137065579 seconds)
    (217/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.064287924 seconds)
    (218/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064112284 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071537942 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.089313059 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.070859025 seconds)
    (222/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064219551 seconds)
    (223/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071782395 seconds)
    (224/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.070929316 seconds)
    (225/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.064276292 seconds)
    (226/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.064630394 seconds)
    (227/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067278572 seconds)
    (228/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.064052722 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066217777 seconds)
    (230/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065289325 seconds)
    (231/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.062867047 seconds)
    (232/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.167032246 seconds)
    (233/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.084242248 seconds)
    (234/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.063616091 seconds)
    (235/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.063929755 seconds)
    (236/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068491999 seconds)
    (237/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.064252155 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075167803 seconds)
    (239/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074099034 seconds)
    (240/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.064429313 seconds)
    (241/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.06410905 seconds)
    (242/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071886988 seconds)
    (243/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.081407155 seconds)
    (244/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.225474734 seconds)
    (245/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072379053 seconds)
    (246/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.066358843 seconds)
    (247/341) benchmarking ("sort", BigInt, false)...
    done (took 0.260326885 seconds)
    (248/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.07081399 seconds)
    (249/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.083621852 seconds)
    (250/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.065050628 seconds)
    (251/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065630898 seconds)
    (252/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.067531426 seconds)
    (253/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070797227 seconds)
    (254/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.06709594 seconds)
    (255/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.161785561 seconds)
    (256/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.062728711 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.127700075 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.06203233 seconds)
    (259/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.145112369 seconds)
    (260/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.150529819 seconds)
    (261/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.063524715 seconds)
    (262/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.064547773 seconds)
    (263/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089179892 seconds)
    (264/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.070936664 seconds)
    (265/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.140711309 seconds)
    (266/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.077914013 seconds)
    (267/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.063805286 seconds)
    (268/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.064250895 seconds)
    (269/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.064649215 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.06366196 seconds)
    (271/341) benchmarking ("sort", Int8, false)...
    done (took 0.147780206 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063355664 seconds)
    (273/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.084929606 seconds)
    (274/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.086517243 seconds)
    (275/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.064097312 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.062034341 seconds)
    (277/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063421488 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.063774645 seconds)
    (279/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.140528146 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.123364978 seconds)
    (281/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.063891572 seconds)
    (282/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072498382 seconds)
    (283/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072858961 seconds)
    (284/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.070577299 seconds)
    (285/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.07448123 seconds)
    (286/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.070837369 seconds)
    (287/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.063268666 seconds)
    (288/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.065551717 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.091071414 seconds)
    (290/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.065227576 seconds)
    (291/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.064204514 seconds)
    (292/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.123541472 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.146365241 seconds)
    (294/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063422535 seconds)
    (295/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.065931018 seconds)
    (296/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.063638204 seconds)
    (297/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.063460629 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.087373285 seconds)
    (299/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.075301723 seconds)
    (300/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.147080764 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.063290965 seconds)
    (302/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.062517157 seconds)
    (303/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.063505744 seconds)
    (304/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.070926691 seconds)
    (305/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.063222739 seconds)
    (306/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.062415166 seconds)
    (307/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.062900811 seconds)
    (308/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.062772738 seconds)
    (309/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.063532227 seconds)
    (310/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067205915 seconds)
    (311/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.128455324 seconds)
    (312/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.063476783 seconds)
    (313/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.067479746 seconds)
    (314/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.064082974 seconds)
    (315/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.0627375 seconds)
    (316/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.063192393 seconds)
    (317/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.063370546 seconds)
    (318/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.064659188 seconds)
    (319/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.110784337 seconds)
    (320/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.243944292 seconds)
    (321/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093545392 seconds)
    (322/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072706995 seconds)
    (323/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069386747 seconds)
    (324/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.069809925 seconds)
    (325/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081071509 seconds)
    (326/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068087592 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077007105 seconds)
    (328/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068037334 seconds)
    (329/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.064760276 seconds)
    (330/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067328979 seconds)
    (331/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.06436177 seconds)
    (332/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064729434 seconds)
    (333/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.065251375 seconds)
    (334/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.064819297 seconds)
    (335/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.071067551 seconds)
    (336/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065686953 seconds)
    (337/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.064843757 seconds)
    (338/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067000643 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.130252173 seconds)
    (340/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064312175 seconds)
    (341/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.170841623 seconds)
  done (took 36.218097808 seconds)
done (took 37.746579647 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090647734 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077035698 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075799651 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072203466 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075867874 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.074448393 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.07603827 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074040022 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.075277552 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.07451262 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.074189642 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.062707776 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071184226 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078111599 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072082063 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078698681 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.075600074 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078765858 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.063978119 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078095831 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.090699008 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.074752019 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.071640544 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.077022614 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.063722034 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072462528 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.087019024 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084744731 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069756783 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.072745497 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.070862525 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082034996 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071749218 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070062276 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073229208 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.06953265 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.072619891 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070294732 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.086828224 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069149832 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.063745763 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.075512012 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070684141 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071800227 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.071942346 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075320348 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069136865 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077165224 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063673572 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075180749 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086742296 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068508422 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070592458 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.071998532 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.068770898 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073537253 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070862349 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075027688 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069012355 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075132023 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074776519 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071987816 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063292408 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072207814 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070644992 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.07098281 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062144395 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068829044 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063354066 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063447915 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.062430941 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.071900288 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070152503 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068135823 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062322445 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063144544 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.062472304 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075581945 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.069247017 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072854542 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.063638556 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.068887546 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068302759 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063633362 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068288241 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.074763449 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.062474716 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.063623308 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.062450081 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078146084 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.069852242 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063219959 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.074718487 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068324957 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068323726 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.063275999 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.06298125 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068239783 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.071334564 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.063275155 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.06229247 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068445627 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.068159202 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.072781207 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.063911818 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068111673 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068077023 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062359769 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.072475621 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070703299 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.072198009 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.075987091 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07189197 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.075047549 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.063714939 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062170082 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.072774568 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063482887 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068103007 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.070901276 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068525368 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071749842 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063658624 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.06251904 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067886446 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069620751 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.06373355 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063928111 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063598267 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072975517 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070196836 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061934694 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.06321275 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.07176372 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071933427 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062300218 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062023147 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071637866 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063121084 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068847244 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068226379 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071304593 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062041938 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063257823 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.061308026 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062330331 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.061916363 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.067400134 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.06760687 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.062830605 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071057547 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.218096785 seconds)
done (took 12.445611819 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067044402 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106740904 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.078271204 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080327385 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077089733 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06494896 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068213775 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083044529 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067454547 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088254446 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.091192273 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085146357 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094814873 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062654983 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06378287 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064665348 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.06218781 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075507046 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.08058799 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.08690637 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.100040431 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064040827 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079803279 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083628899 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077939875 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.081881326 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065721061 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065133222 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067011689 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082394233 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.089173571 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.063894994 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065114832 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.08166806 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.078925088 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.071711305 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.064634858 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070254765 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068041876 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.063863277 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.06566421 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081406772 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070653998 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071070452 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065162333 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.06547838 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.06441285 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071157517 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081762563 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069909179 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075886091 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.083002837 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066069959 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064458918 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062445946 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071498971 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064385208 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065672635 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.064537089 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.063852293 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06439527 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.06710563 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069379111 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070547915 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.067617202 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.07049078 seconds)
  done (took 6.430094707 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082237571 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.089859423 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078956304 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.079614543 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063720913 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064586083 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064925708 seconds)
  done (took 2.179015808 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06691817 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.072173716 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076556842 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076651438 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.085753022 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.074006612 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.064939598 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.095828812 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063818715 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072696163 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.080267422 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.077552474 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.06765894 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076401746 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064811903 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.076522511 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065127254 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071752807 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072409413 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077795426 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068711362 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.0945634 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.077777503 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065114467 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.07785605 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.071824871 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066642743 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064842695 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064852877 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.063965043 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063916088 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.086337641 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.070477884 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.07665975 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065016573 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.063512979 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.068574794 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064859402 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068622081 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073665068 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.067929839 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.064031211 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.065129552 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064337252 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065348905 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068854258 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065069901 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064426478 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.063804324 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07164422 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.063821832 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.070773086 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.066607875 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.06949552 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.069065683 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068902597 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071483722 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.064731489 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071718835 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070460719 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064381042 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076577121 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076097857 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.068213979 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076153376 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.072903952 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.070680916 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.068163706 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.063866905 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063896082 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064573861 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076227247 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067417806 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.06669964 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.06517147 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.068881029 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.068334672 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.079497174 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079274577 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.077804424 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.067016795 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064513283 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.068467928 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.079113924 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069413893 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064144801 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.064765502 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063841178 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069473859 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064338653 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.068972983 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064508486 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.071557116 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.06678107 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066578027 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072549011 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064732022 seconds)
  done (took 8.446301439 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068315579 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066419456 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065565258 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.06552876 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.066067109 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065625072 seconds)
  done (took 2.08192274 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.089544522 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064849025 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076479688 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065034408 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086490902 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.071183407 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071401133 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066737659 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081067722 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075372454 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.070903009 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073797969 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073476574 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066511448 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.070884492 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065804746 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.071322482 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067855742 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074384343 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066898302 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081397266 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066553561 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066778539 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076574112 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067803309 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065743844 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065841656 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.074887641 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074359389 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066146565 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066397089 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.06787272 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.073858849 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066410826 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.071059686 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.073426441 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064599404 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070447966 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067139207 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067738986 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.073541925 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066948926 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066950696 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070173222 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066298271 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073203642 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070456399 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068450203 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.071114501 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070080887 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070166552 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065550191 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.06797667 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.0700055 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073210349 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066692668 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070369582 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070942706 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.066420251 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073235125 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.064637201 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.067531438 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066677362 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067242025 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.069143018 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070012239 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073093515 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066494459 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066616558 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.064744041 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.069918982 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.064991721 seconds)
  done (took 6.69625811 seconds)
done (took 27.46618855 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.544259073 seconds)
  done (took 2.170720114 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.6050015 seconds)
  done (took 2.275423568 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.121696547 seconds)
  done (took 9.792984399 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.346977357 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.407146981 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.728934656 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.130822818 seconds)
  done (took 3.330553991 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.7518335 seconds)
  done (took 2.433050742 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230290848 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.218040981 seconds)
  done (took 2.137471801 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.335751866 seconds)
  done (took 2.005452683 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.141030262 seconds)
  done (took 2.80725242 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.235255691 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160451421 seconds)
  done (took 2.077820048 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.535237449 seconds)
  done (took 2.21214247 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.272572508 seconds)
  done (took 5.95422466 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.231941746 seconds)
  done (took 1.951868115 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.229070622 seconds)
  done (took 1.907483968 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.018002008 seconds)
  done (took 3.690822016 seconds)
done (took 46.426886612 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.083704465 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084383136 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084461415 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079598362 seconds)
  done (took 1.962805167 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.073846788 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068404382 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071763601 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071962312 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069312123 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070380982 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071233663 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067844169 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069859376 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068422958 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066645165 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068149919 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07083407 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067934336 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.07079148 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.07181121 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068387704 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068131468 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.07092255 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.068136601 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.071091383 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068393542 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066576938 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067807768 seconds)
  done (took 3.334813675 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078464006 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070462 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073489855 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069221329 seconds)
  done (took 1.975580081 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.075365769 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074790439 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083760213 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.08832101 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.07427075 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074977422 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081708569 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.08194862 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063472719 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.085012659 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066310874 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064987213 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.065437835 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083479293 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081010363 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.06036074 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061783305 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075125541 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.07428539 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076705004 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066514926 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063895599 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074241585 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075074404 seconds)
  done (took 3.453555652 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.081329451 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063269619 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079805255 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088947044 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090086273 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.06350196 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.077123439 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.09116251 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125650382 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063808772 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069971086 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063402755 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102562216 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063704055 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078942423 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106195867 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109140658 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067755718 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096519785 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063921036 seconds)
  done (took 3.342663846 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.075872352 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067794163 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068592706 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063593287 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075193327 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071272553 seconds)
  done (took 2.113810353 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068235425 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066054873 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068306843 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070710689 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.066212594 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065998083 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065420067 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064072501 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064074783 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065025012 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065213084 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065405562 seconds)
  done (took 2.475688947 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.153386275 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067545269 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068208157 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063929405 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.069153037 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065099914 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.07944981 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067031354 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082320381 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064578375 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064639907 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067342986 seconds)
  done (took 2.596820285 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104289017 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109380469 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142989346 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115472434 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114232135 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094721502 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123608325 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.093334836 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.157126165 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134441524 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114028837 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090771266 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085150682 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067151633 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097524518 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1161862 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13399878 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070607154 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111690268 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.162743323 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129730976 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.133437338 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146834563 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114911771 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088440888 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146544279 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095106863 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100906894 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122488365 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124018862 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117693354 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.096036922 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069689296 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.068649883 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146569773 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101550009 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118733461 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.091214394 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103224743 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086334802 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105295405 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067421121 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.084428263 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.111046 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082748669 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129346114 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.086182019 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113827803 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079097236 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134428501 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120162872 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095706156 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082656301 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100787195 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.291788827 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110828526 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133105801 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105932082 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080981227 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116758305 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.10070746 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098517329 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105384161 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078246666 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.174710489 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087165866 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109195353 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110347083 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.091791708 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092407059 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104982246 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133171328 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123311346 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.123765282 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135618594 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093324073 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120313334 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.098092709 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126927315 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103263706 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071255427 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.119469159 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.1271528 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096841687 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098955427 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128574658 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090022949 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075317875 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.097331446 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.116191067 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078345341 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.11048733 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078591046 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.107004776 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132361873 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094900393 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109736925 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115123369 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076191198 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152915162 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106681817 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070843946 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114369313 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110266913 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15206293 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091714958 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073485785 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.256501737 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102505271 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146692064 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105518391 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078616026 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109044473 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137712189 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092878714 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166495654 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093421572 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138171342 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111179153 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08516951 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073487829 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088866714 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110017144 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105356081 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110081346 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088267201 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081835578 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084955873 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109975291 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090543381 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078288503 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111532145 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099111357 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072834249 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086838985 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.07767103 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139896077 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076078347 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13593558 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123002465 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077017732 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103777138 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096343271 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105877503 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095480139 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11461797 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13827916 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.114016316 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088005128 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091820656 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106283144 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141518985 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124779526 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090226029 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074294806 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097994298 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109482833 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095104272 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124018327 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097630481 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106719561 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100568362 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137570586 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14054679 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097528983 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097216754 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102653895 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.283199438 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075114481 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153961634 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102467787 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116007944 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082820258 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138274596 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.11181117 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087214186 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085439833 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098352979 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101325549 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10351447 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140191245 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.093074495 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070299227 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090534036 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140806423 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074008541 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107821915 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088395003 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090764127 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1156675 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090655243 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079291074 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.065703699 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126067368 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.156524802 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068110708 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112583456 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.109117934 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100818996 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.11954645 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067384167 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117133348 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136187532 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11643798 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139005512 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145232328 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114449425 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116376384 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111642732 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103137363 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077488779 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123454751 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.132678044 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094220836 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090481307 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132769015 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114261174 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.131336418 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.112495066 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11052217 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.100902626 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.265759437 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101284324 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100169426 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14240832 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118737223 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.12217596 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083834218 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104109806 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115215614 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132390653 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079464719 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139489823 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081749847 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115284329 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.074821493 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1205086 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.07720579 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108872365 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077655406 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097189562 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067578137 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.071947515 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138289557 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.110647009 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103934136 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098032147 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.1354555 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133956966 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078484691 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10587062 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113633761 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099227732 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114184123 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107121206 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086862395 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093848627 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107043209 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083494889 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079946141 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113357883 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092592304 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124606253 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08194403 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072956451 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13909381 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10248726 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093660298 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076138501 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106763698 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119336865 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090454579 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085023098 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113267056 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103228268 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13857454 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.087999932 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095298414 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121463225 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077618252 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.088939433 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.066875744 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.082151385 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.234823888 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.126863456 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074492228 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114834866 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067021579 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.128055407 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084730837 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09095928 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100150628 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109552187 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125132326 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092813455 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137611904 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087295312 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115789696 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105019167 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092061048 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086112513 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100972203 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098201868 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.119886352 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.094099194 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120716842 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141868932 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102934486 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139455229 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089309801 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119473183 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105078666 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122604813 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110488358 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145703326 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136526826 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110490465 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109902284 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073014985 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092548181 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103240713 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109621874 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173372603 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123981323 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070261907 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104911723 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091699789 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106273531 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103280687 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080698651 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144931867 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099888551 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085068313 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109973413 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.087735216 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100673557 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073717231 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091687043 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.255994994 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092696919 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096408729 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113139013 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125621764 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111328117 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140808821 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.096986629 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.090875167 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.116208919 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108003059 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10854964 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083749584 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084524666 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135042419 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116141941 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125668287 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.098182585 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106850461 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108726992 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097834844 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122798634 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105533793 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.124164003 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078189342 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.073890197 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066261651 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.069875622 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121180216 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107143293 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110311883 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096227928 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070077225 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101300784 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10410443 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070003627 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086857269 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092428853 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097300416 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089530537 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104979839 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111721374 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089143458 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102236373 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097403055 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145346979 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.097737824 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086827019 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141742994 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148864212 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086275153 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091087501 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069480359 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077316951 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111764838 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147466619 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148149929 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.074869229 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083477647 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.082000471 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08319933 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.230061205 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.085088835 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.08778185 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103165683 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097486735 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110686086 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102698881 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073863483 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10108807 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096991945 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090145063 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101655991 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115791626 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122071953 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.138147005 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107854239 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104611629 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074214822 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.078088271 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073598414 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07748637 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099992523 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.077030651 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074510422 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140531046 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089716284 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102306652 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106442075 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086516148 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073825587 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132030041 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067376613 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133068768 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069273578 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080391132 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080586406 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07755961 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091806568 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138310435 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108415094 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111685809 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104622137 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102847169 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139209231 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154522821 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078125829 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1408673 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073921263 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073590068 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073898535 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111635853 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087952782 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113001878 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139431346 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089071644 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101967519 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075282691 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140864703 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096037374 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101059937 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08345487 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.075743192 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.30248585 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077932573 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078612215 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088693412 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109380146 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.070430011 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101576011 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083092815 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078191119 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140231654 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.627727934 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088034756 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.073705914 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093826388 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.138868643 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124610791 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092343862 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105890912 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.11557933 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097733623 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092942446 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105382034 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.180111681 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071814099 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092324798 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.10100559 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095983515 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099853114 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096567511 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.083516685 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090216687 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084805072 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078489324 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105681419 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087604865 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094984326 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105052722 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08102716 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085298707 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.129181523 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.1019071 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080576423 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086634454 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103956931 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086934 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099611307 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.066839351 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111624552 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088774468 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115509935 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092762753 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105642678 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124920442 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088314645 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136767177 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.105996485 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121459251 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085708101 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076271839 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123885815 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.085077928 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074823792 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140200022 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.089929073 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.089139651 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099315905 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.092818839 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107924528 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111756686 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107015391 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092939503 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075402098 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09525315 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.097553934 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079449818 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073371567 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.070178204 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.072728452 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099605095 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07886383 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079054182 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107954241 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083028508 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096921793 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.092439789 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113257713 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078247385 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094717059 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102706379 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085673182 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102327862 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094468178 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.119193664 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160206189 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11443848 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11980277 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12392517 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.072075081 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.070323328 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.06537736 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109307692 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07459438 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.083209714 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076844266 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123861285 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.07702055 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102992308 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.223611664 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075818669 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.087230033 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088890781 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.066008269 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078683453 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10096903 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082028663 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075407102 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108875567 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079911867 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117795107 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102466543 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092507399 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08832417 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075858291 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10451103 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10038404 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.121364714 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088935301 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.345159439 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114409468 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104816368 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140091362 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073926542 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081581018 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130299126 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104001022 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133085942 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080477269 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149941337 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143484701 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099710702 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134066163 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070614768 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082886666 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088442625 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.125329688 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083844798 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110793828 seconds)
  done (took 66.353351324 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.149383847 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.140966301 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.0809584 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.102513618 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.186439813 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.196060239 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.118750869 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.095068856 seconds)
  done (took 2.952113075 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.067862439 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081643965 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079267535 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.203895444 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.094227211 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065599402 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071255907 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.0801208 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.06553686 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065275702 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100127265 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065866349 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066318313 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.366884069 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064825651 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.070060431 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065581628 seconds)
  done (took 3.531367394 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.331972258 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.384058332 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.238581554 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.589200618 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.136152769 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.48309221 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.07468691 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.080355599 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.562999645 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368839927 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.129801083 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.085881837 seconds)
  done (took 18.338829143 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076766441 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.077753536 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.077408102 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07460359 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.073801662 seconds)
  done (took 2.310087303 seconds)
done (took 116.44062482 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083962482 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.17141611 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066933274 seconds)
  done (took 2.146718321 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.082480087 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.0797405 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079967902 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.077927079 seconds)
  done (took 2.197384217 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.074790839 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075808525 seconds)
  done (took 2.018353119 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.221607318 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176955473 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089816313 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082272747 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078495006 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079001931 seconds)
  done (took 2.122464597 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.071311734 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.070063201 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.070859386 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071361053 seconds)
  done (took 2.151498907 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068023369 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065304779 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067871768 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070113846 seconds)
  done (took 2.141534788 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.085042994 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084968501 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115515525 seconds)
  done (took 2.154807205 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083135775 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081584297 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076706364 seconds)
  done (took 2.116159715 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109258786 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.096113986 seconds)
  done (took 2.076513917 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080264916 seconds)
  done (took 1.957809625 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.089869108 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096900436 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.138302646 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.106384973 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.139718176 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.126061284 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076160383 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.077332432 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072832053 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071767263 seconds)
  done (took 2.866654685 seconds)
done (took 26.390422649 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07934943 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.373732525 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.35866866 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086100182 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.671249533 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.355909068 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.007352162 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090384598 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100686961 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067353977 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084916306 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.64959858 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.994567521 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.329381169 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.982786371 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.327440116 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.652697981 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06802781 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066977064 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068412852 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.98892099 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06701956 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067588521 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068220466 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.649790519 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.373508787 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068507001 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.328592868 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066977588 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071095889 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356949399 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068165608 seconds)
  done (took 16.435837675 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.069953657 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.122198072 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071252385 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082948474 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068854177 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068133993 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069983481 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067327277 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112314409 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067600353 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084940771 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066515268 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.070833684 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068744634 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087474727 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066931281 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069230693 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071132284 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067148179 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068057404 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085753371 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066669258 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068181253 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068168057 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067510007 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080566929 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068223976 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066920067 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067239933 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071389516 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072209078 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068402541 seconds)
  done (took 4.263942772 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.121628063 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125390527 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071812728 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.108081663 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.117402433 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068797351 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150167024 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090958701 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114800512 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067056964 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08483156 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.0674768 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.10372256 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068353061 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087256922 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066938865 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069651123 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067846697 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067027128 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067929239 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086200966 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067066286 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067644245 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06823694 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067618739 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082062134 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068318382 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067179341 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067241809 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07123725 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072381402 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06868802 seconds)
  done (took 4.532657794 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.069728855 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070073585 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.07864249 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.079512416 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.065670633 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067727887 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.068778304 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.06545708 seconds)
  done (took 2.460478336 seconds)
done (took 29.582445818 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.07891045 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066357115 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.069688568 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.086497233 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072840195 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.069280918 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063525583 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073781728 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070412136 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07042049 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.072061078 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066191473 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069017232 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063559273 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071029521 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065025184 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.071775974 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.06924441 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.070167381 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071635394 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067681068 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071005102 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.074578398 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.06994468 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070285741 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.069879529 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074439489 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071509742 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06575786 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068392373 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.066939075 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.079641609 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.071300599 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.071628506 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064938429 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064810193 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069509244 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067197652 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.071498869 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074117024 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066895481 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073659361 seconds)
  done (took 4.810075296 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.088543664 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.093195457 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.08577537 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080883698 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.106333532 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081049233 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.090128789 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078263634 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076592801 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.089514551 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072774071 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077900202 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079868559 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.074090809 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076824296 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073281353 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078557189 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07230995 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077225821 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076863367 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.090110703 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.070505905 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.077495194 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.078221043 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072243677 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078997896 seconds)
  done (took 4.000845731 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.072870895 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087047584 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.09163756 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.140695962 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108289093 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08191488 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081154666 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.096396644 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100499921 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.067478307 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071325591 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.093306549 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095732984 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073761571 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106421875 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085407393 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.079775396 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068859887 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073678609 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102679789 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090310838 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.085755301 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099609513 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.087038444 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066203278 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076116155 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07377633 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083005154 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074329531 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079575436 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071057849 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070553696 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067987379 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080108066 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.07450523 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.06531456 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089285381 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080309403 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082626377 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.105143126 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.07683991 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068440297 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.097569277 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13329382 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066190992 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069581816 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070768768 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079811014 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068720387 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097013577 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.085012771 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066737281 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085659631 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068196166 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068252373 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083866189 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068334658 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068907834 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.07943516 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.116511419 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087627742 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072382247 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088738095 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066617598 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.07862843 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068313437 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068701171 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065322986 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103113729 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074015806 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.119423103 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.067977458 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064779205 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079513016 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078492956 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073253841 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066845208 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086627012 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078986397 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070664007 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078632934 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069986906 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070350335 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.102652309 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065491387 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064610475 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06467774 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068827038 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.06980825 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066760202 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079726874 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065712978 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.069712903 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081789755 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.066377929 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066918216 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068633676 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06750224 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.065790493 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.07721941 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070653124 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.068135524 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079350504 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067553053 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069759566 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082087145 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076235446 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.065986301 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.067269331 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.06880979 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.06847065 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07094003 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069932324 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.06858298 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073585662 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074027596 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.072697872 seconds)
  done (took 11.115105618 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.163917878 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.151865423 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.067848333 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.146682924 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075264476 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.071377928 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.149016401 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.08694291 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067205874 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068461771 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066657204 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.095334997 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.090839493 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.101961195 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.071471918 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067555724 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093523663 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.100828476 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.150528078 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.14578484 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090842257 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075328783 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070001691 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068987768 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068296175 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.075967027 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.084176441 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075372568 seconds)
  done (took 4.5834513 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.07521091 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082355377 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070853048 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090695178 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.085375735 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067462329 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069042648 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068571832 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084048077 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.073809583 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067001107 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071998862 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070814601 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067835525 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068370406 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073425338 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074292198 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066267115 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07070421 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071724146 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078024237 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.09369869 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071563987 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067518928 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070085356 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067524712 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.074087575 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076723059 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066616786 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.097532357 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063961111 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071689847 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081434615 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068508067 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067102762 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067691858 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067307386 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067502296 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067807581 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065045727 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065342559 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.07257806 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066246223 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073323893 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081537105 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075161367 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068341103 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072576646 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069679655 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063920076 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070563991 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070555242 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.06975042 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075970446 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070686228 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069880684 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.06837079 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098430477 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073247359 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066766285 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066824754 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06554607 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068646329 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.07514234 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084016683 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069132237 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065408876 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067317046 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.071955719 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081350507 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.06666282 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072315772 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063956256 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067474046 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.0695739 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.07039067 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068271318 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065482328 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066748556 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067279811 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067787463 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066896734 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066821575 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069413915 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065170052 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065661734 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067574535 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.06835249 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073488192 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065966386 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069701408 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069056882 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065974386 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.069899643 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.072706839 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070458772 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.086949183 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075839098 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067914675 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065400096 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.081815169 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069261735 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066275067 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072495289 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071502705 seconds)
  done (took 9.427494721 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.091173285 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068377905 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086988224 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.093425029 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077671844 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07234029 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081242982 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067529907 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.083656763 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066349671 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07572775 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.06517401 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080303518 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076126384 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068845518 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077860875 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069492539 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087708984 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081973049 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.065368213 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076197452 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079517192 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080143807 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085350165 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084650584 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.086049406 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079730786 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069722546 seconds)
  done (took 4.133603189 seconds)
done (took 39.955124925 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.97984791 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.140195186 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.962352265 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.246138613 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.017396358 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.12230489 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.080664208 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.956561036 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.986604319 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.011168652 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.295783034 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.339789018 seconds)
done (took 68.104798172 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.031367357 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.116859588 seconds)
    (2/2) benchmarking "String"...
    done (took 2.212862555 seconds)
  done (took 6.226820128 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.556370772 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.962510428 seconds)
    (3/3) benchmarking "different"...
    done (took 2.013804017 seconds)
  done (took 8.424529496 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.080568471 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.587454464 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.219394012 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.963577003 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.956742331 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.374077754 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.767244655 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.438834053 seconds)
  done (took 33.201487004 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.164586409 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.166357948 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.701793159 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.743529373 seconds)
  done (took 16.727463623 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.566374569 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.222489745 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.222984617 seconds)
    (4/4) benchmarking "different"...
    done (took 2.213575246 seconds)
  done (took 11.18531909 seconds)
done (took 87.868000097 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.964778597 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.31621144 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.967712345 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.116100399 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.980161971 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.010833482 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.971361653 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.944835778 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.963762946 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.95280551 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.379869143 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.962663769 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.962782051 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.000991586 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.972632904 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.014695156 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.28936903 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.110811512 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.960650499 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.532635248 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.494213845 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.959524091 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.969421069 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.015626888 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.04355941 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.013870034 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.41518757 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.957985781 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.569928967 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.966545549 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.967597517 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.965446338 seconds)
  done (took 210.612211045 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.963016225 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.080921766 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.13567799 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.984481292 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.364613368 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.165275108 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.125121655 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.503386742 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.967920714 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.980305244 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.168788875 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.965631065 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.200871244 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.978686166 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.958213261 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.965174481 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.215292671 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.225111925 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.96273447 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.141094729 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.988765505 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.056750193 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.988709954 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.164678571 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.978581084 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.971980875 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.989831834 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.970608165 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.152731652 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.171265843 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.956563892 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.982785408 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.136967387 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.822649186 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.965082422 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.963505292 seconds)
  done (took 177.214264677 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.131109092 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.965093216 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.019644089 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.092112373 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.710064307 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.95523528 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.660127724 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.956663289 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.953679593 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.95652693 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.964154036 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.959232165 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.025807589 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.596551263 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.974991218 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.956523974 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.95723422 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.957126243 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.343866083 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.960798837 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.959256697 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.958760926 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.024169474 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.33884303 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.094764422 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.959104467 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.970375707 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.095786763 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.966741073 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.958824232 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.096285965 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.961004642 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.038885621 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.093628121 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.967991603 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.040420109 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.966404029 seconds)
    (37/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.957959473 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.436799188 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.960211467 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.95979838 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.962332382 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.022872522 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.958397432 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.062230602 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.051105074 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.959342866 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.973389477 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.029173868 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.603708809 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.961947119 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.961619171 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.959340696 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.960325439 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.96105677 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.48840017 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.962122473 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.98484836 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.561631521 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.960983725 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.960124309 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.961758883 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.961045723 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.960749556 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.96820042 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.99887486 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.762247112 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.171378131 seconds)
    (68/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.961092395 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.346962482 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.753781831 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.961931302 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.288213378 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.019230885 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.962758475 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.042625161 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.959558073 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.961618183 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.961553321 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.961675152 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.047880687 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.041712562 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.961725103 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.096708002 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.963065203 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.962040094 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.180690035 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.700079634 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.157260432 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.975406567 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.024057731 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.962176969 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.96238131 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.980479207 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.122638311 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.963045373 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.9627115 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.963028546 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.13033723 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.96261223 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.173632139 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.187339224 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.036896938 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.215990433 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.18681539 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.96415049 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.962788317 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.978408961 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.96448262 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.962966402 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.97522204 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.965013442 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.961877413 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.965042756 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.965052195 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.964481657 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.964995701 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.975757515 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.961952246 seconds)
  done (took 431.412970925 seconds)
done (took 823.318255562 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.680868556 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.756626296 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.590302677 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.604173587 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.592915043 seconds)
  done (took 15.123462728 seconds)
done (took 17.017970468 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.995849082 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.978102721 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.97020978 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.032738823 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.990099356 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.975480369 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.010801906 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.012072264 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.995459335 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.977265673 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.027224076 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.979311875 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.966789872 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.999973729 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.052725271 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.006155456 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.980570125 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.973201389 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.034663944 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.981261828 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.980184706 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.979309914 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.977782277 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.028413977 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.06238411 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.98834222 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.977020992 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.026504185 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.987585139 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.021771179 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.037508526 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.001361296 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.010968794 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.054116284 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.037618619 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.059315013 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.986451293 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.053114766 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.984495954 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.069501062 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.037539733 seconds)
  done (took 84.199306343 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.975535868 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.109715283 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.185193006 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.007362084 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.97440177 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.187260276 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.030518903 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.12122137 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.109212835 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.19164347 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.21311218 seconds)
  done (took 25.012533367 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.974027881 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.121185863 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.185893402 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.009855911 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.996599448 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.188117391 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.03749446 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.107715273 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.111563959 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.193407736 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.203365601 seconds)
  done (took 25.038951188 seconds)
done (took 136.149447121 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.3444962 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.000567361 seconds)
  done (took 6.245169155 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.970398786 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.993127862 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.121411116 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.968935386 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.972985237 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.970096436 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.971226441 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.973262888 seconds)
  done (took 17.840737819 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.970579196 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.96939214 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.970195293 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.970112975 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.969736357 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.969302624 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.968612167 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.970230028 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.967292806 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.97020072 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.969979482 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.969592653 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.969575545 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.970021645 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.969409241 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.970060782 seconds)
  done (took 33.416246425 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.97177269 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.970572881 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.970402045 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.971258936 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.970328182 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.970142113 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.972123852 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.972315633 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.969949146 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.970968504 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.970449999 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.972567438 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.971328678 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.971978173 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.972957622 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.97125506 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.97259989 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.972928554 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.972576415 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.971775445 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.972154716 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.972545518 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.976648398 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.972152397 seconds)
  done (took 49.227067322 seconds)
done (took 108.638481142 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.204576578 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.569992765 seconds)
  done (took 8.676287175 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.976662611 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.970391013 seconds)
  done (took 5.919172514 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.970932178 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.971961502 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.9726207 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.972105005 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.971076873 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.972471179 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.97316878 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.972245576 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.97360959 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.972170413 seconds)
  done (took 21.625542513 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.971957722 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.971441884 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.970051593 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.972955372 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.972442811 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.972340156 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.973408701 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.9737876 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.97322823 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.973644404 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.959521782 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.972901101 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.972832194 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.954725161 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.961055967 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.971096709 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.973723584 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.97294295 seconds)
  done (took 37.366892688 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.974226296 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.973765744 seconds)
  done (took 5.851851533 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.97263424 seconds)
    (2/7) benchmarking "second"...
    done (took 1.972760802 seconds)
    (3/7) benchmarking "month"...
    done (took 1.975181649 seconds)
    (4/7) benchmarking "year"...
    done (took 1.973396162 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.974153255 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.972770461 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.974022142 seconds)
  done (took 15.720858683 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.974878996 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.129302905 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.181973578 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.579544444 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.974413759 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.976731387 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.854915525 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.976799746 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.976750042 seconds)
  done (took 21.528837102 seconds)
done (took 118.59139208 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.808042361 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.971869426 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.240954462 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.087152099 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.991251759 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.265969716 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.971142022 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.517156786 seconds)
done (took 43.756957583 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.083787457 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.971229284 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.002567278 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.0023642 seconds)
  done (took 22.880874358 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.974415634 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.28685583 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.998225644 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.918760671 seconds)
  done (took 23.095568737 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.345990146 seconds)
    (2/2) benchmarking "read"...
    done (took 2.327162971 seconds)
  done (took 6.58332166 seconds)
done (took 61.552298457 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.975460595 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.974370255 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.974478997 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.972226814 seconds)
    (5/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.975200294 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.976051648 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.975295914 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.975805494 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.975335997 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.975817831 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.976055807 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.975110713 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.975941418 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.975717562 seconds)
    (15/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.975739057 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.977238297 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.977073413 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.976895119 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976546806 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.975602998 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.975592857 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.976094366 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.975955103 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.977022563 seconds)
  done (took 49.32355319 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.97697084 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.975645531 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.976942002 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.9761495 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.976012327 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.977216305 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.976935436 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.975707553 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.975342525 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.976802169 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.977238002 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.977048237 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.976901812 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.976898946 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.977095749 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.976063806 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.977319976 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.978310834 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.975633601 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.977139672 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.977620201 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.977648735 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.977806754 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.977128683 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.978377886 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.977718873 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.978233754 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.977758116 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.977496354 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.978519609 seconds)
  done (took 61.219473539 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.977383839 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.977931889 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.978020557 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.977940967 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.978820214 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.977021319 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.978388188 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.978117849 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.977564831 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.978455313 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.978436644 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.978124428 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.978064816 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.978045478 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.979184348 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.978456472 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.978892155 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.97883953 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.978867442 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.979714481 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.978058035 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.979297748 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.979370675 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.979013377 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.979246923 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.979244491 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.979425043 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.979614231 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.979250787 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.979150735 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.97852029 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.979387107 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.978671307 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.979739836 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.980139543 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.979623627 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.980445263 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.97809528 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.979980137 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.979988879 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.979887467 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.979931406 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.980377506 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.980016867 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.979529071 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.972242155 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.977581094 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.981070867 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.982014062 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.978354159 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.980941502 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.977375589 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.979299184 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.981113815 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.980858627 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.980398472 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.981227825 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.980295484 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.980300825 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.981303078 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.979395688 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.980368571 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.982160248 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.980895954 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.979997171 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.980324907 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.981945081 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.981794039 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.981853994 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.983947648 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.981821587 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.981715779 seconds)
  done (took 144.434356112 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.98179923 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.981500984 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.98016736 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.980230201 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.981655475 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.980822959 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.981213326 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981305774 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982086805 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.981904569 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982302505 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.982387192 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982459152 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.983654788 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.982326088 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.98212721 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.981737269 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.982829765 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.982716653 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.983038027 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.982881626 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.981786407 seconds)
  done (took 45.515962956 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.982417593 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.982740723 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.981976578 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.982857354 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.983438282 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.983302637 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.980651062 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.982961046 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.982878032 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.983706858 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982322994 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982411605 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.983383878 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982893442 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.983151954 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.983278213 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.982912768 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.984176532 seconds)
  done (took 37.60440704 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.984108661 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.984404078 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.98390247 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.984082639 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.98314751 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.984559518 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.983683285 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.98521549 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.983515537 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.984081506 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.982616083 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.984871614 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.985478279 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.983151569 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982356803 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.98458585 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.984431796 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.984629885 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.984503704 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.985069842 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.98596904 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.983813176 seconds)
  done (took 45.566871996 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.983394523 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.984241391 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.985610461 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.983971302 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.985379599 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.985295198 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.984302139 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.983991527 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.985744201 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.985359421 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.986099287 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.986069403 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.984423633 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.984947868 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.979786944 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.979915748 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.985139681 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.98586189 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.98541285 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.986125983 seconds)
  done (took 41.606075943 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.988166976 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.986160711 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.986278169 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.985961355 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.987033112 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.986241039 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.985965939 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.98669456 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.986499265 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.987507077 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.986729924 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.987133398 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986059054 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.985669207 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.987286058 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.988421936 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.988278987 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.988499994 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.98674054 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.987474541 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.988725661 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.98820219 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.98787858 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.988159769 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.988775167 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.987728933 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.98715486 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.989031331 seconds)
  done (took 57.56199313 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.988016701 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.987879283 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.986804788 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.985942002 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.987246734 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.988680029 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.987376684 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.987931247 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.987798733 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.987881608 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.987466841 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.988198501 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.987994028 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.987603476 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.988547039 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.987737735 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987219997 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.989145939 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.989203134 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.986469165 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.989517651 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.988114521 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.988042778 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.98833223 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987379547 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.987759235 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.987750675 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.988275715 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.987896257 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.987530526 seconds)
  done (took 61.553047616 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.00886513 seconds)
    (2/2) benchmarking "in"...
    done (took 2.006183856 seconds)
  done (took 5.932206293 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.988956244 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.989619107 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.990206489 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.988355429 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.98910778 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.988823987 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.988347946 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.990129201 seconds)
  done (took 17.83230813 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.990120193 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.991498276 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.98957274 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.989131948 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.988497784 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.996052196 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.991074324 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.989160632 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.992995766 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.991869185 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.994973221 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.994141091 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.000289288 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.99479282 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.990390993 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.990922942 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.99150776 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.992586732 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.991457547 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.988509884 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.992891134 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.990733954 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.989502402 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.990747338 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.989757138 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.993032923 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.000328086 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.991591676 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.992563614 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.990466942 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.996608207 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.990473788 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.988126118 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.991129456 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.991367607 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.990553321 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.997453611 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.977817835 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.973422466 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.991016047 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.993002973 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.993038522 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.992752082 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.999545411 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.992503286 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.991882827 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.99190337 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.98056533 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.974267753 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.99497738 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.002278732 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.991545438 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.980281102 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.991213218 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.994656933 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.992577659 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.992911826 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.994580965 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.99996888 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.999328171 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.996069025 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.014342036 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.003755368 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.993658147 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.993513983 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.003007859 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.019233833 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.99378661 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.994486719 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.992981954 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.999558235 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.993316781 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.992896305 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.992818704 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.006015858 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.003090592 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.992210811 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.992983951 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.993780823 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.994283475 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.9947094 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.993813832 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.993573937 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.993763086 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.003173921 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.022348521 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.994360593 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.994374912 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.994957404 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.986359875 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.979998354 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.996686166 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.994545592 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.994018456 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.9958769 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.989538332 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.973264414 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.994622194 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.987640117 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.99788171 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.99371598 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.993860982 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.997395083 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.003816334 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.994509802 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.995118799 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.995810708 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.988915668 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.980383804 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.994462602 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.994474113 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.993629034 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.992465116 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.00006675 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.994954634 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.997947539 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.004551003 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.002328687 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.996315511 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.999709098 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.999171121 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.998459665 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.00629911 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.022214196 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.995479855 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.999742427 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.001634346 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.009818043 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.999893885 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.995429475 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.998199007 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.996397937 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.994630837 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.998024113 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.995879257 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.990191134 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.971469703 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.991047552 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.995120181 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.995935516 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.999046358 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.997474644 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.999988005 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.996414888 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.000522749 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.997197094 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.999093072 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.002828164 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.997321343 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.996672008 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.997226172 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.999191107 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.998752054 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.998037356 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.99740843 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.99805924 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.998077629 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.997413797 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.999452658 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.998284689 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.997814353 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.998030538 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.000523258 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.997953032 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.998010106 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.998247374 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.997890712 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.99851918 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.999642904 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.998554151 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.000047246 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.998854488 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.002400439 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.997199686 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.997568325 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.997746848 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.998058515 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.996997819 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.002246705 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.009986016 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.002334849 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.010295793 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.998425506 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.005349192 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.998762285 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.000365943 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.000140202 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.999556114 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.998456406 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.998996069 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.999096367 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.003279748 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.021513327 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.012134771 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.002125355 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.000828737 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.005158991 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.004613793 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.005235114 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.999620673 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.000138337 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.000027816 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.998894686 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.998624892 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.999191278 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.002789336 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.998758455 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.998945234 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.002254522 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.000836167 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.998874163 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.00024189 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.999191178 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.001691542 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.998953291 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.000241356 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.000192506 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.002313132 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.006772059 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.002137521 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.000903126 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.002135563 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.003472537 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.00082464 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.001531075 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.001760915 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.004142344 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.001921116 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.002056651 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.009136656 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.002269882 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.001424295 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.001935985 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.0018723 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.003552384 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.001064116 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.004115281 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.012081369 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.004189892 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.001569928 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.006017121 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.001899344 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.004565207 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.000854945 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.002963337 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.00181756 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.003693644 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.002260868 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.002471597 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.009028529 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.002765458 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.003252849 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.00268509 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.005094111 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.002748438 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.00483869 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.002942962 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.005292923 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.012205938 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.0083943 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.004200336 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.006966904 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.004624022 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.00597113 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.006933934 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.003363941 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.015601035 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.01279821 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.00330689 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.002137217 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.002967708 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.004975717 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.001818977 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.002142083 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.010494806 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.004682005 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.005177338 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.008062928 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.007197437 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.002761644 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.010035259 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.004942177 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.006752073 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.006565797 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.005238264 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.0043613 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.003617802 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.006284141 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.004383957 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.005565866 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.009796922 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.003830781 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.00520203 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.005170237 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.012783364 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.003839412 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.004700463 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.01080108 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.00569287 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.004451174 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.005441819 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.00463512 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.004598627 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.005749701 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.005392555 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.005769024 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.004218532 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.010476631 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.016220827 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.00836241 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.015373586 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.008346619 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.01630895 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.005748045 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.005162088 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.005723942 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.010131668 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.014753045 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.005784767 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.004673105 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.01246611 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.006703162 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.007049581 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.010442923 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.005745289 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.006720425 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.005694513 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.007434817 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.012278393 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.00857319 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.006542707 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.005139498 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.006311461 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.007326579 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.008581777 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.007108272 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.006962915 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.006679647 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.006426859 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.005568288 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.007241923 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.006870591 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.0062035 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.006650023 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.007299996 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.01328243 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.007543916 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.007943939 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.012795402 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.007605124 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.016782909 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.007301032 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.007898021 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.008767855 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.008444862 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.010738083 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.00717366 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.008597399 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.00800376 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.006748011 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.009531656 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.019420413 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.016117636 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.011982961 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.009568084 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.007180554 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.009555977 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.018494399 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.036809973 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.008039815 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.010868187 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.011926042 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.01429786 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.011931279 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.003588752 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.011772549 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.017684991 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.010171153 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.008850823 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.011459693 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.022700992 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.009602299 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.010532778 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.009282434 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.01302072 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.012455316 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.009094782 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.010915801 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.011802396 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.011207422 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.021443252 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.010769654 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.011860297 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.010732383 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.010096921 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.009682848 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.009756147 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.010735112 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.011941706 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.010302616 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.011684258 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.012093237 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.01557396 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.010356768 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.014881752 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.022177534 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.0104825 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.009857489 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.013549825 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.010238767 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.012878159 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.008968337 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.009669301 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.013170274 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.011958714 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.012263056 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.015443469 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.020545032 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.999826697 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.011460956 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.0117179 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.983376569 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.011807397 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.01078862 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.013070132 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.019181982 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.014396093 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.02359227 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.022052836 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.011461337 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.014131867 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.02072177 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.021158774 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.011997694 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.013305314 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.010867333 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.015038386 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.013745734 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.012639863 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.011874178 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.013079399 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.018354946 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.011569238 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.012816202 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.012349761 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.012184529 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.01437444 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.013642776 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.017838339 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.013216716 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.012582293 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.012506801 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.012937461 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.01399268 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.014007752 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.012917978 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.012483806 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.014413824 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.006346469 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.995460407 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.013823268 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.012371291 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.013547477 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.013659152 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.01280886 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.013347575 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.014466108 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.013902161 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.016526714 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.023241875 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.013707916 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.012970462 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.016193753 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.017283535 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.002987629 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.01425972 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.013425104 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.014096278 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.021043641 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.014564774 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.013012546 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.014566081 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.012818579 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.018846668 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.015158176 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.017318573 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.014476677 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.016316846 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.013853211 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.017563838 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.024424631 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.020189958 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.018805305 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.024525606 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.019382687 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.016269473 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.015013914 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.014519936 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.016397551 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.015364342 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.017664277 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.016312535 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.01789693 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.015550765 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.018050479 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.014960268 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.01723568 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.015442446 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.014783874 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.01917813 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.025550467 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.022829039 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.015756141 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.016472566 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.015936633 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.019863924 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.028926117 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.014878818 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.015475242 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.016117122 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.017313355 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.018414471 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.024389044 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.02576426 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.019405969 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.01570684 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.989935056 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.035232671 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.017810977 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.026048674 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.051158907 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.017981585 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.015706025 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.016985601 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.019213434 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.013678681 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.019059566 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.013707658 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.019650774 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.017491157 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.013062213 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.019885988 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.014401937 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.013524291 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.01568328 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.014091759 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.019831042 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.013539654 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.020018217 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.017420241 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.012551111 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.014068958 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.016036551 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.012411638 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.016874285 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.012047869 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.016055079 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.013359004 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.01375909 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.020278128 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.014331383 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.015666803 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.024993804 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.025685726 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.014431167 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.011345435 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.012345722 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.017268838 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.015398647 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.015608016 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.016548593 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.022108956 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.017557041 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.022765725 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.021313268 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.014398583 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.013894666 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.014155624 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.013964669 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.029987285 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.025421126 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.014838382 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.014397478 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.020550171 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.013729479 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.01756642 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.01541411 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.013472871 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.012555197 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.013136088 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.007299414 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.009750973 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.009058216 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.014962021 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.019736355 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.009116669 seconds)
  done (took 1197.582126436 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.008600634 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.009868569 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.009425688 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.007450031 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.009058871 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.007895493 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.007868467 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.010563609 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.009043295 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.007051415 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.008879669 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.009138316 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.009412504 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.009495155 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.009702333 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.008470067 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.009250957 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.012440182 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.006154645 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.009380844 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.007505581 seconds)
  done (took 44.127166588 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.009695437 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.007113152 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.00876724 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.008438928 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.006356361 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.012840981 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.008648409 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.006815476 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.009431248 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.00741219 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.013539596 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.008002881 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.007030593 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.008919082 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.007442427 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.01141793 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.006758701 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.007446364 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.006057561 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.006051344 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.009860951 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.006794892 seconds)
  done (took 46.122770956 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.006933133 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.005873545 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.01265644 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.006109034 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.007571738 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.006530271 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.006027895 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.010288462 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.005110389 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.007870612 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.017024291 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.013754984 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.005159948 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.009305962 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.006431843 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.00452437 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.151074739 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.007107013 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.005508359 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.006255191 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.007424688 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.012122894 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.007083263 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.006889267 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.006902567 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.00812575 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.008005577 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.005535432 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.00600067 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.007216891 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.011861849 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.007485353 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.007165892 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.009168185 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.009494373 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.007611302 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.012404917 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.007611901 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.005265347 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.007761472 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.017978978 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.032276427 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.006960642 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.007723966 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.015625782 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.008030325 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.012851995 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.009582149 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.016395937 seconds)
  done (took 100.527588953 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.007654991 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.01091048 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.004389427 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.00775035 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.005904288 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.006770488 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.014350846 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.005895846 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.007435416 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.00855785 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.006825782 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.015175258 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.007375406 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.007571192 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.007876018 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.005865486 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.012837514 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.00723735 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.008086342 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.006785919 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.008229038 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.012480364 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.008073676 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.008958204 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.008518165 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.007559624 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.010382214 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.008345497 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.008531666 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.008431403 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.009114916 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.007797921 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.00337791 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.002574371 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.002798619 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.002694138 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.006065104 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.010337027 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.010979826 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.008878603 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.008304338 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.013989122 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.007584389 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.008762831 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.012382661 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.011644655 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.015625739 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.008756847 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.009657555 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.008969572 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.011451663 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.014374368 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.009138121 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.011207891 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.010436852 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.009278125 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.012715936 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.008232995 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.011336135 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.008618838 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.011053604 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.012959439 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.009335176 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.006875668 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.007639757 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.00599935 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.009428786 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.008327877 seconds)
  done (took 138.542456834 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.005528675 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.008834405 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.012478432 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.00757512 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.009321479 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.008743513 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.007695696 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.009661057 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.007586459 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.009637489 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.008135986 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.008577106 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.007023556 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.004941614 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.009006299 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.007449647 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.008948794 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.009159331 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.005427336 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.007925547 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.005972669 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.006946894 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.007112345 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.002409152 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.004075955 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.008473565 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.008446938 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.005394074 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.005620126 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.007732246 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.005928288 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.005393927 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.003611931 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.00559896 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.008124483 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.006473193 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.002582269 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.007890606 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.00674638 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.004726268 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.007465759 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.003234077 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.005586102 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.007473088 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.003790172 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.004809571 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.008867368 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.004370168 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.006854868 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.00400074 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.006743211 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.003555111 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.006966871 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.006453111 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.00735983 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.004540639 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.005772306 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.006470636 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.004071142 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.006152726 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.005717575 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.005905631 seconds)
  done (took 126.349360101 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.004480929 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.003310281 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.004828252 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.005140425 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.007465531 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.003866079 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.003523598 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.999580704 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.003945927 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.005568231 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.003392105 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.003425565 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.006884671 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.00284938 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.005971839 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.00318489 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.003289397 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.003043643 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.002941914 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.002696435 seconds)
  done (took 42.014397999 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.002723846 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.002504954 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.003099469 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.007250751 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.996594037 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.997903495 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.002839333 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99628254 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.98214816 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.002726958 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.003434912 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.001540864 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.001990309 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.003504832 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.993262823 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.997410625 seconds)
  done (took 33.930514894 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.003224487 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.00184977 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.003613496 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.001924575 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.000885999 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.001892729 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.003128585 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.002697431 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.000854737 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.002351057 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.000089691 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.003143051 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.001779269 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.001165044 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.001513919 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.001585041 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.003037136 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.001552828 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.0023845 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.001918572 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.001883859 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.003529831 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.001852309 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.002366067 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.00123341 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.003613124 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.004267611 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.002055413 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.002202831 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.00112039 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.003258037 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.004753807 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.002374474 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.001137324 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.001767674 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.998489357 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.007257715 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.999571474 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.001317849 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.002498425 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.001764535 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.005460417 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.001341167 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.00141507 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.00030547 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.001818615 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.006028909 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.999914684 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.001172094 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.999544716 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.999563402 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.00415576 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.000980014 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.0013634 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.999129836 seconds)
  done (took 112.044688754 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.001623558 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.99894592 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.001991484 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.999817615 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.00002925 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.00138586 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.001360535 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.001125942 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.001063828 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.001151145 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.000736622 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.003254446 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.999173184 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.00193835 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.000307068 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.000195974 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.002207221 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.001500997 seconds)
  done (took 37.950685604 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.001057497 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.002287502 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.001795482 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.003589462 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.002895324 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.002273246 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.004572335 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.003693564 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.001682072 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.001477995 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.005425749 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.002283073 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.00228181 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.004908168 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.002885062 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.004255247 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.00208744 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.003211753 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.004114322 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.005229113 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.003238947 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.004853945 seconds)
  done (took 46.002893713 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.004263707 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.001030246 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.01757739 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.023785638 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.022569286 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.035071257 seconds)
  done (took 14.037401754 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.00442753 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.002857017 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.003108585 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.005104535 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.003740059 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.002836209 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.001984389 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.003845008 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.00278016 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.001172491 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.004624707 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.007530177 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.003591761 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.002558407 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.004980588 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.005472863 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.00285972 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.005737037 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.002443155 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.002529462 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.001920175 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009477559 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.003159136 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.003763169 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.00284867 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.004782989 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.007349822 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.006641979 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.004692179 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.004974055 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.004195732 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.008277055 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.00381373 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.003806774 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.003318712 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.004083607 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.004580729 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.005483551 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.006344941 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.00331787 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.00574866 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.004107959 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.004855535 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.004523094 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.005952726 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.003638287 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.005533508 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.003476658 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.004389502 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.00726102 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.003515855 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.005115267 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.004233132 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.006307114 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.006969359 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.005381835 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.00741055 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.006442494 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.005802954 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.008885656 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.005289249 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.006418271 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.008930964 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.006744429 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.003483115 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.007165084 seconds)
  done (took 134.256504265 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.006593017 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.004717148 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.005851319 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.005312979 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.005920495 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.006080869 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.007430482 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.005045148 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.006080941 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.00739232 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.005109627 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.006627201 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.004555367 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.004752192 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.007456025 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.006108822 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.005069988 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.008333669 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.007219939 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.00621207 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.006571646 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.007213996 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0076595 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.007103119 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.007835973 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.005703573 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007222386 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.007051223 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.008080789 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.00661692 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.00574402 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009539111 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007697456 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.006725103 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.006880563 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.006862399 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.007645738 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.007015765 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.008345243 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.006079738 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.009954938 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009166992 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007024138 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.007856754 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.009001989 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.004864552 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.007454962 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.009138932 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009354512 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.008292158 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009995568 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.010697312 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009393351 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.008594197 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.006758062 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.004118898 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.008981171 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007031008 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.010537849 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.009241015 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008090696 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.007404628 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.006998317 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.010602814 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.010970998 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.0070465 seconds)
  done (took 134.421355048 seconds)
done (took 2777.972532693 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.072138645 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.129645166 seconds)
  done (took 16.138621267 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.17550575 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.059980811 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.197150245 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.129017308 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.015471225 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.016702065 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.013749114 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.013177982 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.10608529 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.014128584 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.034664493 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.014324862 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.014238045 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.013071446 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.014824197 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.013202756 seconds)
  done (took 54.802203602 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.016120197 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.017215042 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.014146221 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.014151863 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.025944385 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.091919192 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.035387303 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.018651413 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.027377938 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.047991306 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.032061628 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.018818017 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.022062362 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.02016988 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.099685191 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.060648336 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.072409965 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.088868534 seconds)
  done (took 38.667695706 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.093480995 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.0268873 seconds)
  done (took 11.07177768 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.018948269 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.014925837 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.048151753 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.031430283 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.038840522 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.037565449 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.038359443 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.026689792 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.015224804 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.013950936 seconds)
  done (took 72.232018022 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.016325495 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.016823498 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.316284551 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.023209204 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.022955773 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.039343707 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.01571124 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.046317612 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.018433686 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.013559603 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.025855655 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.320078142 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.026850887 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.01629229 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.431588735 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.027756296 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.02210065 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.046452608 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.046338067 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.019488306 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.022122538 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.020893482 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.178914745 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.698573706 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.017040514 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.01988801 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.022829663 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.013809724 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.014713259 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.017113297 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.018444103 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.015562722 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.019816037 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.02017413 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.023296983 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.020876794 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.511705048 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.035063433 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.025877469 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.109089133 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.058556764 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.022037859 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.839090403 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.018878502 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.014917558 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.026341221 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.694845297 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.079495584 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.017582495 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.174144897 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.353707798 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.031215721 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.170397712 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.185550186 seconds)
  done (took 140.972883445 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.014839419 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.251960835 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.167254938 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.015554165 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.272560024 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.22487554 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.01745516 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.060964299 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.016607256 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.217172515 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.267406982 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.118868329 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.019413434 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.015483096 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.019703322 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.01811635 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.163579071 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.087081529 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.017408693 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.014220161 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.040962775 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.215678479 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.13814193 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.017484842 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.040936332 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.224124807 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.136537173 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.116520347 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.830811065 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.015743503 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.078156577 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.017123115 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.014962284 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.016388658 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.167737708 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.108031598 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.100468739 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.018701786 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.015709563 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.015102937 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.690481938 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.21827355 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.110873723 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.138737428 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.261185685 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.229581969 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.627830327 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.015099792 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.639641216 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.180891226 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.221719572 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.223637538 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.134371381 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.018391301 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.566894728 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.015593353 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.01614926 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.238476441 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.223710587 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.10576047 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.019111625 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.016910411 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.016042481 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.258579298 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.017912285 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.108406634 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.021129704 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.016914965 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.107832678 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.116598201 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.243443124 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.23747656 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.046348221 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.340627153 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.51003919 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.218523221 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.081722185 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.23710128 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.018936671 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.017298296 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.096287052 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.859643451 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.27162084 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.25690556 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.21383004 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.04711942 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.668722614 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.016592028 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.205020829 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.207512308 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.251568779 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.256907061 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.253206548 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.381146102 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.017868591 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.017220661 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.338719369 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.134205197 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.970465928 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.368645659 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.246312794 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.539523742 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.04297157 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.346712879 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.146621507 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.024071652 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.665395732 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.019609909 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.223001474 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.056764448 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.020149118 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.017069811 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.208935602 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.923676052 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.018830864 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.718311315 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.078576295 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.022826173 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.2218391 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.02238846 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.261761083 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.021798058 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.250368256 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.640529605 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.049498303 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.244706176 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.25850685 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.654863246 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.310869212 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.260323321 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.131759786 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.241944509 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.832882273 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.020417286 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.279471362 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.022155755 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.018462309 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.187752816 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.022909753 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.161306123 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.022324808 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.284471002 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.040244414 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.246681251 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.022599868 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.256594673 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.052093839 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.069437537 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.024490687 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.146147643 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.021172327 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.96860929 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.177299557 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.023103949 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.02227067 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.79307369 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.022073275 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.174650499 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.243616511 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.040122762 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.087311759 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.586992798 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.016707288 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.101772299 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.042917088 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.302928837 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.021590589 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.26853288 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.981425159 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.490556365 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.019862376 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.683248359 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.205376876 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.023136994 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.021638415 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.862215699 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.012451028 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.021207274 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.177451828 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.462552249 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.927459001 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.220405804 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.023707395 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.148877085 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.02526568 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.103966742 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.366406662 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.022633777 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.021494386 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.020250476 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.024023774 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.02166719 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.281535146 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.047042567 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.458547269 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.158520482 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.277022465 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.308698405 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.217007383 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.061754272 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.026746433 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.243611286 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.023380656 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.085694163 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.025041717 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.040586335 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.251858992 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.025352211 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.227915834 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.255792609 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.912081343 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.069601829 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.025953311 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.023215003 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.0143714 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.167316158 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.108950902 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.025331057 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.022471209 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.136449765 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.142494057 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.203311235 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.845460894 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.179896248 seconds)
  done (took 934.946613703 seconds)
done (took 1270.770731561 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.022867089 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.025945925 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.025405462 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.02804899 seconds)
  done (took 30.058191785 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.025433204 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.024829628 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.025691794 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.025606865 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.023634679 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.02422209 seconds)
  done (took 14.106258803 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.022896939 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.026012405 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.024412449 seconds)
  done (took 23.029683411 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.450643645 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.430152569 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.098027991 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.166555177 seconds)
  done (took 11.101807077 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.029270151 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.025177598 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.02606503 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.025770728 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.024717501 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.026499435 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.02656879 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.02730685 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.026980648 seconds)
  done (took 20.201361827 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.245954143 seconds)
done (took 104.697606675 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.033930232 seconds)
    (2/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 3.678082856 seconds)
    (3/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.303217692 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.124438799 seconds)
    (5/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.514851544 seconds)
    (6/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.739630818 seconds)
    (7/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.911221723 seconds)
    (8/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.030204652 seconds)
    (9/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 4.143204932 seconds)
    (10/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.410029809 seconds)
    (11/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.669952082 seconds)
    (12/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.420709035 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.356307011 seconds)
    (14/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.227429816 seconds)
    (15/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.102175519 seconds)
    (16/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.054036732 seconds)
    (17/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.021837023 seconds)
    (18/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.15297563 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.0441296 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.039462572 seconds)
    (21/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.415990127 seconds)
    (22/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.114328438 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.044888722 seconds)
    (24/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.028693844 seconds)
    (25/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.217396707 seconds)
    (26/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.031472214 seconds)
    (27/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.068334309 seconds)
    (28/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.90666432 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.94575921 seconds)
    (30/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.11546644 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.038032663 seconds)
    (32/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.332261102 seconds)
    (33/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.110400536 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.121785061 seconds)
    (35/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.371245192 seconds)
    (36/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.030201234 seconds)
    (37/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.960103918 seconds)
    (38/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.349438202 seconds)
    (39/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.814883008 seconds)
    (40/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.032023461 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.261434307 seconds)
    (42/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.108332834 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.1107112 seconds)
    (44/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.029703406 seconds)
    (45/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 3.769926803 seconds)
    (46/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.787482792 seconds)
    (47/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.227752674 seconds)
    (48/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.351230614 seconds)
    (49/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.130221828 seconds)
    (50/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.040833876 seconds)
    (51/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.157709107 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.443682683 seconds)
    (53/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.045827329 seconds)
    (54/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.215573727 seconds)
    (55/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.165050674 seconds)
    (56/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.726379148 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.911021457 seconds)
    (58/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.431675446 seconds)
    (59/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.27883583 seconds)
    (60/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.158243268 seconds)
    (61/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.481793826 seconds)
    (62/341) benchmarking ("sort", Float32, false)...
    done (took 5.675423453 seconds)
    (63/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.034397733 seconds)
    (64/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.221127901 seconds)
    (65/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.029621812 seconds)
    (66/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 9.640373663 seconds)
    (67/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.829859333 seconds)
    (68/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.451720204 seconds)
    (69/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.028671761 seconds)
    (70/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.18331415 seconds)
    (71/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.042886703 seconds)
    (72/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.334906275 seconds)
    (73/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.130836356 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.166197778 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.34491717 seconds)
    (76/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.908606171 seconds)
    (77/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.131314287 seconds)
    (78/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.218017558 seconds)
    (79/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.441016153 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.321112495 seconds)
    (81/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.0329474 seconds)
    (82/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.196768695 seconds)
    (83/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.425021573 seconds)
    (84/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.163954274 seconds)
    (85/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.111010901 seconds)
    (86/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.421980633 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.824236084 seconds)
    (88/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.350204849 seconds)
    (89/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.303256451 seconds)
    (90/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.030926061 seconds)
    (91/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.095029917 seconds)
    (92/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.372717721 seconds)
    (93/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.40782751 seconds)
    (94/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.032732414 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.851133845 seconds)
    (96/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.259956377 seconds)
    (97/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.030511356 seconds)
    (98/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.2848107 seconds)
    (99/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.032536555 seconds)
    (100/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.309699275 seconds)
    (101/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.62821534 seconds)
    (102/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.284851819 seconds)
    (103/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.010764293 seconds)
    (104/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.457262582 seconds)
    (105/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.163954513 seconds)
    (106/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.034911756 seconds)
    (107/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.16424682 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.331520473 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.046782651 seconds)
    (110/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.029445099 seconds)
    (111/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.502027589 seconds)
    (112/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.033554155 seconds)
    (113/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.960985484 seconds)
    (114/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.157442885 seconds)
    (115/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.151336652 seconds)
    (116/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.428930604 seconds)
    (117/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.441275388 seconds)
    (118/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.424121054 seconds)
    (119/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.144298498 seconds)
    (120/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.91372959 seconds)
    (121/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.337709071 seconds)
    (122/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.03394845 seconds)
    (123/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.05181653 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.025656558 seconds)
    (125/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.957754298 seconds)
    (126/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.332035494 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.302534166 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.291588054 seconds)
    (129/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.141017901 seconds)
    (130/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.031541186 seconds)
    (131/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.329541161 seconds)
    (132/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.214192134 seconds)
    (133/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.11990752 seconds)
    (134/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.114926924 seconds)
    (135/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.417515947 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.050206485 seconds)
    (137/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.188705131 seconds)
    (138/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.118081829 seconds)
    (139/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.251803781 seconds)
    (140/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.034278775 seconds)
    (141/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.954403979 seconds)
    (142/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.037492662 seconds)
    (143/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.129328279 seconds)
    (144/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.795555378 seconds)
    (145/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.171726143 seconds)
    (146/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.730739733 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.280412938 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.166121813 seconds)
    (149/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.421087517 seconds)
    (150/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.020057529 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.283873581 seconds)
    (152/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.145924577 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 2.253550613 seconds)
    (154/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.036496569 seconds)
    (155/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.434259764 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.136334639 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.169044496 seconds)
    (158/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.107925386 seconds)
    (159/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.050121264 seconds)
    (160/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.112104818 seconds)
    (161/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.43349887 seconds)
    (162/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.947949908 seconds)
    (163/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.849665315 seconds)
    (164/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.060772034 seconds)
    (165/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.047900293 seconds)
    (166/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.227581445 seconds)
    (167/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.641754695 seconds)
    (168/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.439082856 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 5.68424038 seconds)
    (170/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.978248928 seconds)
    (171/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.319866044 seconds)
    (172/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.035439031 seconds)
    (173/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.920756479 seconds)
    (174/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.161476956 seconds)
    (175/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.255196446 seconds)
    (176/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.195831451 seconds)
    (177/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.308502858 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.245753317 seconds)
    (179/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.452312602 seconds)
    (180/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.059651689 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.173668398 seconds)
    (182/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.808823139 seconds)
    (183/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.034831898 seconds)
    (184/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.062930083 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.234812981 seconds)
    (186/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.294627489 seconds)
    (187/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.046769354 seconds)
    (188/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.198060989 seconds)
    (189/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.035171554 seconds)
    (190/341) benchmarking ("sort", Float64, false)...
    done (took 5.766508117 seconds)
    (191/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.176288192 seconds)
    (192/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.483731272 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.352769771 seconds)
    (194/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.138482425 seconds)
    (195/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.045003651 seconds)
    (196/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.035033227 seconds)
    (197/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 5.265065598 seconds)
    (198/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.301940857 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.059743368 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.033153307 seconds)
    (201/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.040113712 seconds)
    (202/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.158404409 seconds)
    (203/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.329985057 seconds)
    (204/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.272919225 seconds)
    (205/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.168487491 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.753880477 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.067507855 seconds)
    (208/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.183880948 seconds)
    (209/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.352062695 seconds)
    (210/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.201283725 seconds)
    (211/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.241098033 seconds)
    (212/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.063643269 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.158196135 seconds)
    (214/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.079858245 seconds)
    (215/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.144110838 seconds)
    (216/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.184805322 seconds)
    (217/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.245195598 seconds)
    (218/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.358079652 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.187946764 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.746577174 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.062617778 seconds)
    (222/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.239251629 seconds)
    (223/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.051603692 seconds)
    (224/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.245201634 seconds)
    (225/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.04046012 seconds)
    (226/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.319660282 seconds)
    (227/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.102631579 seconds)
    (228/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.117099705 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.357555697 seconds)
    (230/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.041978899 seconds)
    (231/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 3.813503054 seconds)
    (232/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.037369041 seconds)
    (233/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.038037844 seconds)
    (234/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.447728223 seconds)
    (235/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.376489862 seconds)
    (236/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.054366963 seconds)
    (237/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.291810916 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.680241212 seconds)
    (239/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.352429481 seconds)
    (240/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.323730787 seconds)
    (241/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.197944318 seconds)
    (242/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.054700945 seconds)
    (243/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.406413716 seconds)
    (244/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.325677634 seconds)
    (245/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.052704866 seconds)
    (246/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.012299063 seconds)
    (247/341) benchmarking ("sort", BigInt, false)...
    done (took 7.042505756 seconds)
    (248/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.057407662 seconds)
    (249/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.239861371 seconds)
    (250/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.120772095 seconds)
    (251/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.041082252 seconds)
    (252/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.132197329 seconds)
    (253/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.062344549 seconds)
    (254/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.125227955 seconds)
    (255/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.2395458 seconds)
    (256/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.128881683 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.163050369 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.118241036 seconds)
    (259/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.039389235 seconds)
    (260/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.053316501 seconds)
    (261/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.423261232 seconds)
    (262/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.073190224 seconds)
    (263/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.150649765 seconds)
    (264/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.173450901 seconds)
    (265/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.169677781 seconds)
    (266/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.892262562 seconds)
    (267/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.397875709 seconds)
    (268/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.307388013 seconds)
    (269/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.043141785 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.48452237 seconds)
    (271/341) benchmarking ("sort", Int8, false)...
    done (took 4.994375631 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.155457311 seconds)
    (273/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.471392582 seconds)
    (274/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.054164663 seconds)
    (275/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.130910217 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.064407369 seconds)
    (277/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.272995636 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.437151643 seconds)
    (279/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.149619099 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.046714528 seconds)
    (281/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.196010713 seconds)
    (282/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.056494451 seconds)
    (283/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.042696021 seconds)
    (284/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.050583362 seconds)
    (285/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.039761004 seconds)
    (286/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 5.419889721 seconds)
    (287/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.364214283 seconds)
    (288/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.884037805 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.269926875 seconds)
    (290/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.144355298 seconds)
    (291/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.323621748 seconds)
    (292/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.838954209 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.140453101 seconds)
    (294/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.410667531 seconds)
    (295/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.074735623 seconds)
    (296/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.835374133 seconds)
    (297/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.044864197 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.010119215 seconds)
    (299/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.740498399 seconds)
    (300/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.058223392 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.357256091 seconds)
    (302/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.233737886 seconds)
    (303/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.362644571 seconds)
    (304/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.068166902 seconds)
    (305/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.818356871 seconds)
    (306/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.343045546 seconds)
    (307/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.162891582 seconds)
    (308/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.184048948 seconds)
    (309/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.147323648 seconds)
    (310/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.127951049 seconds)
    (311/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.04440505 seconds)
    (312/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.179524488 seconds)
    (313/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.205462042 seconds)
    (314/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.791327817 seconds)
    (315/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.363518301 seconds)
    (316/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.233684263 seconds)
    (317/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.051692045 seconds)
    (318/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.167926675 seconds)
    (319/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.259885953 seconds)
    (320/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.444825738 seconds)
    (321/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.198584946 seconds)
    (322/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.048645874 seconds)
    (323/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.301067723 seconds)
    (324/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.128968332 seconds)
    (325/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.52615413 seconds)
    (326/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.109248763 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.893070262 seconds)
    (328/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.105770384 seconds)
    (329/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.578512815 seconds)
    (330/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.145212008 seconds)
    (331/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.440201042 seconds)
    (332/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.341867013 seconds)
    (333/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.241768508 seconds)
    (334/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.159288692 seconds)
    (335/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.055924445 seconds)
    (336/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.046118173 seconds)
    (337/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 4.327979115 seconds)
    (338/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.291677693 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.18165742 seconds)
    (340/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.118031315 seconds)
    (341/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.155938681 seconds)
  done (took 1152.89956168 seconds)
done (took 1154.96168063 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.065780803 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.045306587 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.538574684 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.057076104 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.044580281 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.049560372 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.549014048 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.078581566 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.063389482 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.549247951 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.057913202 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.046936139 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.05988539 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.078932844 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.056584346 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.060021026 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.053640621 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.071718718 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.082013281 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.051678498 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.099423761 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.050144526 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.045681798 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.096541441 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.046573791 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.061543166 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.064832185 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.098434329 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.097361191 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.049455458 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.053399355 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.391651589 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.09642682 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.052229572 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.057928996 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.061003707 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.051976124 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.061278192 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.065017563 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.06231035 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.046991382 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.057945798 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.051735725 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.050295048 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.047428687 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.046080147 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.04849001 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.17202136 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.061992914 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.382714429 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.105502086 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.066745069 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.100345465 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.050526956 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.049382572 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.050917602 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.098357439 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.054899223 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.051227804 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.381022669 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.139646102 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.063144179 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.381689465 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.109363266 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.058958929 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.057101289 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.047985914 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.065575241 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.399030663 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.587556754 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.080618682 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.068257313 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.050690363 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.050255828 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.063810179 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.546925419 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.064675704 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.617149427 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.076367112 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.063324588 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.053988185 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.050921814 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.051816951 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.050872408 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.05772415 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.049342039 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.057044433 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.055361398 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.063075665 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.400642284 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.089907195 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.53973073 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.057278361 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.07045789 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.068624026 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.619000038 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.080105597 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.056713232 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.052740692 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.399605906 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.089039077 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.068266232 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.051876673 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.061874216 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.166061864 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.070460278 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.070073587 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.049886728 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.071917818 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.058157095 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.051100172 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.064549302 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.070569927 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.085181045 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.067789966 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.051372061 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.060478001 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.057813651 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.068530864 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.060838732 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.057844634 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.062308376 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.051385514 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.102250065 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.068667463 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.066275541 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.167052863 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.058256566 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.177298187 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.067322119 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.056989668 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.052290536 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.384905997 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.093152129 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.072521473 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.058301946 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.075736855 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.074174104 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.069415621 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.055748947 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.068320326 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.05557863 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.10367453 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.053583169 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.076324755 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.103812641 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.06422729 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.058019155 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.069500776 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.087770419 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.073300117 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.056770266 seconds)
done (took 322.939270091 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.104017575 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.053873521 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.130933946 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.056415007 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.121522803 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.113422656 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.055430571 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.05477349 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.054407144 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.44197882 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.05386733 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.059804191 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.052070194 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.056509404 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.104361145 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.055939223 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.055501914 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.291352919 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.056490753 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.10518909 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.033073382 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.05639081 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.045058564 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.448669218 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.053370692 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.054079381 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.111373027 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.04386483 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.276698325 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.045961744 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.0545465 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.296235742 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.114890845 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.071289875 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.063458226 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.063467349 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.106447164 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.06765327 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.084686135 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.095674497 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.132736345 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.089982317 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.054965143 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.055786466 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.060867004 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.056622241 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.055552429 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.090805891 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.055435837 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.060904971 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.292244094 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.064912301 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.062517132 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.056853716 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.057868749 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.072076425 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.056929478 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.056435973 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.114844679 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.058543776 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.106821286 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.452497362 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.446125257 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.058329894 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.057671285 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.056843856 seconds)
  done (took 196.037415304 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.123023521 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.143709231 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.126067697 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.06258694 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.109969184 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.111236913 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.056889842 seconds)
  done (took 16.719944612 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.064166791 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.057531477 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.079831121 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.049729597 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.060985508 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.196650474 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.071342772 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.064200266 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.084595809 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.060808191 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.394207945 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.082647468 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.065585512 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.05733191 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.071020054 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.087700946 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.062273781 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.060554523 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.155870418 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.136772202 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.063698946 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.066561436 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.087734679 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.069995136 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.05924772 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.062316181 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.062096107 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.066064889 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.058065795 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.0606861 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.060205934 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.070972679 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.058816111 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.057400763 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.059022698 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.060035929 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.062470936 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.060134859 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.059953912 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.059163021 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.058790652 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.046616485 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.06008742 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.059821009 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.06073277 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.083258845 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.061023499 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.056472057 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.060438183 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.059874157 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.088391274 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.059110955 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.058427885 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.066138261 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.101097427 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.067268362 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.063532425 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.060901765 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.061778614 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.061110193 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.059075102 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.140004598 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.082562919 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.061421445 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.08429206 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.098713955 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.061527028 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.061140615 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.062942029 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.09056293 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.062959364 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.087096144 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.061694226 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.161964707 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.062851473 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.205972989 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.086670687 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.068336665 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.067882087 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.064832755 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.072460635 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.0639408 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.065270409 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.06973591 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.070597786 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.063765648 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.064781515 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.066609914 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.071690887 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.064852235 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.107757349 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.064322294 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.066530703 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.162620373 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.06366899 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.162483178 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.091329436 seconds)
  done (took 223.638946263 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.070553152 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.067568192 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.079240196 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.065369227 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.065237187 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.069680183 seconds)
  done (took 14.411994592 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.066492892 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.068279365 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.06598137 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.065778969 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.06641822 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.066584098 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.066114137 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.067824626 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.068088757 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.064440616 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.065549849 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.06599376 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.066029407 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.065534333 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.066040189 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.064491362 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.066730875 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.066069545 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.065840066 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.065864423 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.313556164 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.064759542 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.065982095 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.070160896 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.070581721 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.066619529 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.075001872 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.066560253 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.066024309 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.072369103 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.070207621 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.066371455 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.055567365 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.059389902 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.071170587 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.070736929 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.070070539 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.067925316 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.067750198 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.06750198 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.067387862 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.067092593 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.06681449 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.06840829 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.068270494 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.073882834 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.071425874 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.075611614 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.067816015 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.069111045 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.069229747 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.066565312 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.068945211 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.067344697 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.07143501 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.072528701 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.07114044 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.068448306 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.067330511 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.071729387 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.070396919 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.068720933 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.06995447 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.071325622 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.074779254 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.068869535 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.0710808 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.070498128 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.068761599 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.068110301 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.070295611 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.068763905 seconds)
  done (took 152.14978519 seconds)
done (took 604.942637072 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.165855944 seconds)
  done (took 9.163634228 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.089515217 seconds)
  done (took 9.189633394 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.203039024 seconds)
  done (took 12.202328934 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.102905766 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.110940163 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.072708348 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.07276783 seconds)
  done (took 30.370387093 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.309594968 seconds)
  done (took 9.307481555 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.077657037 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.066482586 seconds)
  done (took 16.210751093 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.199323932 seconds)
  done (took 9.197840595 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.093496227 seconds)
  done (took 9.118835238 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.083561641 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.108055786 seconds)
  done (took 16.20549775 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.070433859 seconds)
  done (took 9.067491887 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.869990132 seconds)
  done (took 9.955290352 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.074518706 seconds)
  done (took 9.091173529 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.074919003 seconds)
  done (took 9.059328164 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.872916115 seconds)
  done (took 9.871227487 seconds)
done (took 170.008537891 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.076253097 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.069481788 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.069141963 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.067229704 seconds)
  done (took 30.280782782 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.105155048 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.106145661 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.113502276 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.104375049 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.094604726 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.094929335 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.106282795 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.105316774 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.096545131 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.103454019 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.10730064 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.10383236 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.10716308 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.116083591 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.115538903 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.103564948 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.104513711 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.105892743 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.091004818 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.11680712 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.104070603 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.105825043 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.072466903 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.072167602 seconds)
  done (took 52.457159178 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.262391515 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.136974548 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.224726818 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.116421019 seconds)
  done (took 10.740098415 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.07112881 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.135892957 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.123310179 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.118333189 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.124035339 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.172958197 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.124866065 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.207220471 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.200129526 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.20510777 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.079435499 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.095513552 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.097071718 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.11835573 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.175347138 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.072976805 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.071925283 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.18902447 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.133296927 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.316685816 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.071633155 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.127648571 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.124179401 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.12605812 seconds)
  done (took 53.281866796 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.073358936 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.080791405 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.080112638 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.074236164 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.0737927 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.073418005 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.079521703 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.075946635 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.096223083 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.077192674 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.073405784 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.074336962 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.080730456 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.073816379 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.07440071 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.086588995 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.087217439 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.073881806 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.07874161 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.081271467 seconds)
  done (took 43.571151655 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.07252841 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.909845692 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.419332626 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.323855767 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.072025634 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.073220499 seconds)
  done (took 32.872351892 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.08690694 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.089533902 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.078957835 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.098551624 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.121767226 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.083402511 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.136408784 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.237652272 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.083697763 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.131911798 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.094526517 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.079160055 seconds)
  done (took 27.323961268 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.071941825 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.075386554 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.074375511 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.08539564 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.084889158 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.082803401 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.082115087 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.07334479 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.086704905 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.093906006 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.083319987 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.086409367 seconds)
  done (took 46.982163281 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.287518591 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.300803825 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.288055683 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.58926506 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.403114153 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.054866782 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.361827265 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.286620355 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.806948338 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.848825257 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.365007642 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.053982062 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.026448262 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.000553725 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.973390582 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.3184565 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.077937376 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.932850477 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.327425545 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.123271775 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.077857996 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.077434164 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.083338207 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.3539986 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.398991353 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.082874088 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.288668008 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.091689931 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.075602915 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.301098825 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.605293338 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.12996059 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.27910641 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.332492796 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.414812364 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.214763625 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.078710147 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.169458216 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.122313213 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.110861307 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.085793403 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.08795682 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.619287088 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.086898447 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.348751334 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.0772627 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.160929942 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.074349093 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.004141996 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.38352662 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190611293 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.074625388 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.11266647 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.509870438 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.198154809 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.321180149 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.082765878 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.168596298 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134592414 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.326304449 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.283304375 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.081573954 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.28848849 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.002639037 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.439984334 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.202724681 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.081091058 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.081924071 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.778355046 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.32022877 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.158452694 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.398676683 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.839305759 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.079206932 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.08095005 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.120892597 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.166442353 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.076549938 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.373603738 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.100931524 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.006240665 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.176198726 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.487751513 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.083389949 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.077575259 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.087090966 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.925326981 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.004654441 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.174433534 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.335611763 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.402676311 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.080662198 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.079634462 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.102083214 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.081835457 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.026275642 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.551431668 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.144789416 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.005537265 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.644229515 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.621486327 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.050355155 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.491419189 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.123706485 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.354793297 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.23652108 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.489641629 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.288067927 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.324938543 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.61116878 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.083403391 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.63974893 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.160537962 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.156268812 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.07948343 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.637485494 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.174508969 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.376696124 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.195113126 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.080202971 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.005548688 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.09001397 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.283918103 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.616339856 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.136133413 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.08004384 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.083750485 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.078852577 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.083396404 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.1866889 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096059558 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.367419311 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.150188665 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.080100435 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.016440123 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.086127011 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.378961908 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.598336442 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14314793 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.332367379 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.343879857 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.779594694 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.679064741 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.03594307 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.346819619 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.151894255 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.155038808 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.65501703 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.214669464 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.179204283 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.080701907 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.218513887 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.090562682 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.084433603 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.325219071 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.500402314 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.508559718 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.124566593 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.081043869 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.035088869 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.178851172 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.323721653 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.138813859 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.108507701 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.087569333 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.165679095 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.308325411 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.082210272 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.007647484 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.333552 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.324495858 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.370571963 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.489005763 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.135662472 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.156212527 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.095213507 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.29714768 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.163766072 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.727529175 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.628986553 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.31018206 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.585808584 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.044275008 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.723684005 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.342263554 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.465091599 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.099028835 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.537197897 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.180279256 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.705273541 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.111563242 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.611252136 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.010292753 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.087750704 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.417137665 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.040043348 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.401574148 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.160900932 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.101476383 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.085508277 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.084810863 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09118567 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.989111702 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.190753358 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152945607 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.156311937 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010799317 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.652727185 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.121926562 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.085799537 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.084325918 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.385359199 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.869526344 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.038742087 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.066339695 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.161205973 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.835888953 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.635750047 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.089868226 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.088619272 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.680684948 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.090576726 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.673623279 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.188301223 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.829428236 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.113475647 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.345853983 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.784976671 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.363435806 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.15719022 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.160931058 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.087619706 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.09381913 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.786547082 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.095049506 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.787246116 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.383095001 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.358023963 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.530790178 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.148369019 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.295150559 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.100865248 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.087709578 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.561419889 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.112865682 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088827895 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.289198255 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.607149629 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.418285686 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.720603303 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.171840307 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.08646661 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.350044365 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.093853714 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.625244009 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.774077178 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.093255395 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.087256649 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.355782334 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.772532652 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.088741913 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.99946809 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095126023 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.298732857 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.289348745 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.358155814 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.379654584 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.534305871 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.015781268 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.093513356 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.124485786 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.330672352 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.086190987 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.123250112 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.534820454 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.141189133 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.518287048 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.366060743 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.480014512 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.722062683 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.349384633 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.151054712 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.101211762 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.740403489 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.222925927 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.021635774 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.205417624 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.01332041 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.83164989 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.382728938 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.10681482 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.352959821 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068329041 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.426315457 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.383570171 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.346451619 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.138370665 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.117759697 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.089385286 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.140000181 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.07531583 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.203733238 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.205765455 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.095883075 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.567932452 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127712255 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134217856 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.094649398 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.589669371 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.112115235 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.091931143 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.782613635 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.113290958 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.209303281 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.161622051 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.837240968 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.647283175 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.151016552 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.964596691 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.739035624 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.35445082 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.145634956 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.53845762 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.128644105 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.494175127 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.089326282 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.303683663 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.095103202 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.58129412 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136758723 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.357242914 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.045743425 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.301631509 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.29166789 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.119096065 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.099217722 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.017973353 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.253645891 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.966785093 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.071608627 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.092920678 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.773957696 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.510623582 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.214615392 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.544368344 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.911169513 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.09299239 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.398959793 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.480675114 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.620620608 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126412934 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.093269637 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.428673099 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.221775096 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.399534714 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.382924454 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.099953664 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.118694873 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.305555914 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219170111 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.011429437 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.584181793 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.677473212 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.792580042 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.10351994 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.296364945 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.424401455 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.294754035 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.126782817 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.16519923 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.497224781 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.354380171 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.1585063 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.008341935 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.093021212 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.486388929 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.492910485 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.190765871 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.335591682 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.401201997 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.584639546 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.655713896 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.467212426 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.482473046 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.539076463 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.489709663 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.316402927 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.455361774 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.421155855 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.684816843 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.506299675 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.306802431 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.18296997 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.368575601 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.962832618 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.803092086 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.337847778 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.100133379 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.022432668 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.301941314 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.104202201 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.442616021 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.623458493 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.342509243 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.355503154 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.560661969 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.63249805 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.200370277 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.121347323 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.060165928 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.118371979 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.114366753 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.093940017 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.587482971 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.386889488 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.108367675 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.037402091 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.765375777 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.020812019 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.306870312 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.197801757 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.132734477 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.653133286 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.364050526 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.20015945 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.381449878 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.251227255 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.132739113 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.021089698 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.836429966 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.043792674 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.147565634 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.520598611 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.111724217 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.099490553 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.299922605 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.024848499 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.142663654 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.093055663 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.294220121 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.673780241 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.363925116 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.218637866 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.348342143 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.398706368 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.940394303 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.128360962 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.368498615 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.022621467 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.662048817 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.780675342 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.138534828 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.169267828 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.096852191 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.099822107 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.368844588 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.428890165 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.198648345 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.753214492 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.13037611 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.120506793 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.43586524 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.192678209 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.099564765 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.101824318 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.501934587 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.332384373 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.098152153 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.088316773 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.310574948 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17159902 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.294112051 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.172714749 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.613313787 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.103675533 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.953068174 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.202375231 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.052798998 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.098101392 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.797283586 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.158992732 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.099521112 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.365862893 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.751952441 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.301664664 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.493774637 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.990346755 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.211353011 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.14040079 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.10056358 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.102352057 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.487950166 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.401263652 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.079218306 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.366476685 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.14544553 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.104937376 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.760101061 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.069030826 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.099924182 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.837509518 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.981330697 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.829964841 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.495768516 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.187264959 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.103657379 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.102337495 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.026642743 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.100246134 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.278250784 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.073545436 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.107448272 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.473873337 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.423069845 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.185933923 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.10506288 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.101639416 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.108077144 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.3130301 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.614304669 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116314557 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.800953442 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.288449939 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.103661209 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.592149841 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.554564915 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.28012314 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.140524343 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.213994052 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.343715005 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.644872587 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.216511099 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.084019604 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327328975 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.102350582 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.373521922 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.375450876 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.102349559 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.313803175 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.658451447 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.387807081 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.45504812 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.420475022 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.164923776 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.223209705 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.000878068 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.106131945 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.091354748 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.365771523 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.155242303 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.101157199 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.11079816 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.65568661 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.837325529 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.568396862 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.255426237 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.432362327 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.870387096 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.857953282 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.10303764 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.027502605 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.102842474 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.128536605 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.105924311 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.026727891 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.771463677 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.825692832 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.316118446 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.41201678 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.030568198 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.30725974 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.684158188 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.028569713 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.07070729 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.102448992 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.363667294 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.033591984 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.105993604 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.056383663 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.378400334 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.764513625 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.374535831 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.104761501 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.046614739 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.107668249 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.106036445 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.10373454 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.187219767 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.103410821 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219507485 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.367100337 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.480845479 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.209569242 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.743753915 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.838280197 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.041136256 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.147632219 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.661451564 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.673795852 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.387030322 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.23178991 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.836296097 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.030553144 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.107160327 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121103092 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.367096876 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.09258441 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.105852923 seconds)
  done (took 2209.638621314 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.147983959 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.136100761 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.163906783 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.152058415 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.230812506 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.198476765 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.171401523 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.199605966 seconds)
  done (took 59.432954685 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.105786831 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.129233387 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.113560977 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.07452353 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.094034176 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.108123035 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.288996186 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.132339759 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.124766989 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.108982667 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.104948848 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.1109184 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.105720656 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.107279084 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.108596132 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.393418939 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.125904423 seconds)
  done (took 80.378379368 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.160393082 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.899779665 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.110072595 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.776810876 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.140285387 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.463286609 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.107706309 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.105570557 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.224704673 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.402071358 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.129224668 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.112975857 seconds)
  done (took 92.667400693 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.097633325 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.106525588 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.105768921 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.106027105 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.106071276 seconds)
  done (took 12.556422373 seconds)
done (took 2754.242071753 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.428778795 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.20276355 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.176070573 seconds)
  done (took 6.413487134 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.25303946 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.299236591 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.411080133 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.433982336 seconds)
  done (took 11.435675527 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.399096445 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.487842499 seconds)
  done (took 6.920203816 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.464722026 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.122620701 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.493297266 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.106737372 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.108165752 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.107921954 seconds)
  done (took 23.361693345 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.109759205 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.109090511 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.111181545 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.110521617 seconds)
  done (took 10.474030663 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.106625356 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.896494485 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.106414313 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.119315403 seconds)
  done (took 22.263069223 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.289419568 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.21074157 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.872017258 seconds)
  done (took 10.407547988 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.726931022 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.561059936 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.712966621 seconds)
  done (took 10.035539025 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.96368107 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.093020675 seconds)
  done (took 8.09239482 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.250459807 seconds)
  done (took 4.286502025 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.939759175 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.420723986 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.57653544 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.626323253 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.680706622 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.315020981 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.41978194 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.368592908 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.505530496 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.530563146 seconds)
  done (took 27.419396414 seconds)
done (took 157.651714619 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.529364105 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.140932075 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.326885129 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.475365749 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.353339482 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.326829073 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.376157112 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.463631424 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.15301734 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.137575002 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.475384201 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.36045396 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.349620762 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.133457077 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.355722139 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.12596805 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.359066412 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.558986567 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.161931771 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.403892679 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.396208803 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.124737057 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.315745477 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.142509085 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.36089439 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.275332829 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.728177347 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.130240957 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.309627022 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.742127996 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.278064899 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.546782489 seconds)
  done (took 176.954753453 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.981520621 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.110542667 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.113096836 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.110451876 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.418659276 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.111614813 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.112385638 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.109577596 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.31103072 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.288170822 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.110167981 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.404391291 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.112938865 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.110762393 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.111696886 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.111649144 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.416491185 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.023445633 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.110277988 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.111904556 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.112762767 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.281014529 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.112014175 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.297723638 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.400122718 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.112022661 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.112160686 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.11233501 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.110472715 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.11330393 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.112176138 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.109734284 seconds)
  done (took 215.316659112 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.11160175 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.113408278 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.111783303 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.111613037 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.113465623 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.113075185 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.111497186 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.113955791 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.767378683 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.754399125 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.112998916 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.113926078 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.113534304 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.112336493 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.115744706 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.112286912 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.111292489 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.114353643 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.112617945 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.111966599 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.113151241 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.952119224 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.113600533 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.977489747 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.115123116 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.117602355 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.113800372 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.116336859 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.118149107 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.118448288 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.113180508 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.112405278 seconds)
  done (took 228.675259092 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.35122311 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.114721237 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.114293763 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.124344274 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.115671593 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.114692008 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.121567684 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.362712668 seconds)
  done (took 21.460448874 seconds)
done (took 644.453933749 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.480420301 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.845834535 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.243531336 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.13856654 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.396505475 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.180134807 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.132233737 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.196814592 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.777273613 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.209644009 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.548778456 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.141847834 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.846508986 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.149786109 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.248553732 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.186086549 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.496015738 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.757647528 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.270188534 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.805820561 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.33788298 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.064221574 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.212948919 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.815032764 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.550720214 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.084250349 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.145418954 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.512220074 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.140381748 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.373399365 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.7996674 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.383954553 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.147289852 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.136006621 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.189913553 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.177273759 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.329457263 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.145312147 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.246156821 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.861287665 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.778470812 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.662556589 seconds)
  done (took 110.188504927 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.121597017 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.12037268 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.121653615 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.121754012 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.130084599 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.123336478 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.122092817 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.121710032 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.121516971 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.121006622 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.121584584 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.129319109 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.120969061 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.130021857 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.121551769 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.12208374 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.122505394 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.129745485 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.122003848 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.121781451 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.120767662 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.12106135 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.118173951 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.120994452 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.12249512 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.12233641 seconds)
  done (took 57.245165827 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.117996616 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.299130614 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.404250057 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.148690331 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.118071493 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.121602432 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.147087911 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.124101615 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.121332314 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.121003297 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.231664196 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.123748651 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.132175658 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.400671119 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.145161784 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.118441249 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.117483204 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.118791266 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.306109838 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.134936345 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.149564987 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.124887763 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.148477391 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.134146546 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.121994919 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.119874144 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.121657458 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.540245637 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.130522986 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.230758814 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.164324725 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.154210919 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.459137505 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.412633978 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.184707026 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.125327776 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.120112772 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.280184921 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.131544709 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.120007603 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.14954571 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.128007886 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.408571247 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.631090282 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.134226581 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.120840191 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.538452203 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.290716192 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.167221995 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.132817621 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.413461923 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.148155262 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.120466422 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.122135551 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.157827027 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.132625257 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.121492176 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.367929463 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.134850164 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.148783055 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.12813028 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.123563026 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.316083058 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.130678628 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.302156792 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.130606832 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.127378784 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.122227794 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.408335598 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.148118692 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.633905975 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.135306973 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.12235142 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.234683405 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.305940066 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.564828056 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.133642498 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.315310011 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.474885929 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.157133173 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.132571721 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.528492211 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.161838966 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.132538281 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.121861758 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.122019676 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.122087774 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.166252391 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.148571895 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.545970011 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.631107612 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.382570767 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.161580458 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.136199459 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.123465204 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.367414053 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.133270007 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.121515794 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.40084399 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.65385036 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.136991041 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.132179865 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.618357592 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.138388483 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.153373439 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.13482827 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.419307493 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.149767886 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.164615494 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.121907413 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.129203355 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.125764132 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.152013347 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.134450746 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.123533541 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.606703662 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.294576631 seconds)
  done (took 262.189567084 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.12670061 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.122872648 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.124236315 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.123713286 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.12313452 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.124540285 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.122551867 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.122859104 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.123999584 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.121642646 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.12345934 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.12556617 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.125547215 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.132267582 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.148562545 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.125236859 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.614716633 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.122657658 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.124568671 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.12492715 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.694638126 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.13221005 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.1242225 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.125158102 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.12432949 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.123290819 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.128792196 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.158737812 seconds)
  done (took 174.672006149 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.125399757 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.172099346 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.138236979 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.172342633 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.136257302 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.124805573 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.141301739 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.139297596 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.130479148 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.125571242 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.124404589 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.153483232 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.133796373 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.200228185 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.152712582 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.154265604 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.202863717 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.129075214 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.125171964 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.12545726 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.17147562 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.140067872 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.15287221 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.180651903 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.138654749 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.173376533 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.139256504 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.125531431 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.125895232 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.215240561 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.140741496 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.154716702 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.161150539 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.144072357 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.218931003 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.214868485 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.204665559 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.15186472 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.129476692 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.125679809 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.125522519 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.128763477 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.173083034 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.139537539 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.128013705 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.217485425 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.141528478 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.127531571 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.146969027 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.12601547 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.137983928 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.142457282 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.159470611 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.226228933 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.169227426 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.152877406 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.147705048 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.145401608 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.126417209 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.201026702 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.133094761 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.21544251 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.144559281 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.129947855 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.128666157 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.132097461 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.173934993 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.161540975 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.205761353 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.133873313 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.200618873 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.178668189 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.139493761 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.128497464 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.129169778 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.176766691 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.215228579 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.180484774 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.187212192 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.162872071 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.136860103 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.127251161 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.129990669 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.15519017 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.135998869 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.217533233 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.21651187 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.133555474 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.128772039 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.128541057 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.128924461 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.151450244 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.18441233 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.167098908 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.21158634 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.1615547 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.163015642 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.13699757 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.142164602 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.134490316 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.159161002 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.13640172 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.139246556 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.465289316 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.163366701 seconds)
  done (took 228.648464468 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.480737743 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.175666693 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.197578792 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.395714394 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.503330085 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.228136429 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.165907014 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.180929228 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.187805438 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.294361706 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.238600527 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.218958322 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.165028093 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.14811872 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.176948791 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.189051685 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.213842201 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.499173365 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.275222089 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.866869887 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.164091566 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.41625123 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.496870134 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.534070106 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.21605913 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.561792293 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.787655958 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.268278953 seconds)
  done (took 69.307734399 seconds)
done (took 904.292684398 seconds)
SAVING RESULT...
DONE!
