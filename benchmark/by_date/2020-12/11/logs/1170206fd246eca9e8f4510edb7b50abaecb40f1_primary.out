cset: moving following pidspec: 29465
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.820472245 seconds)
loading group "shootout"... done (took 1.118551734 seconds)
loading group "string"... done (took 0.666693984 seconds)
loading group "linalg"... done (took 8.637151924 seconds)
loading group "parallel"... done (took 0.169626246 seconds)
loading group "find"... done (took 2.861729962 seconds)
loading group "tuple"... done (took 2.24256314 seconds)
loading group "union"... done (took 14.856005947 seconds)
loading group "dates"... done (took 1.478349571 seconds)
loading group "micro"... done (took 0.219723991 seconds)
loading group "simd"... done (took 4.794532197 seconds)
loading group "io"... done (took 1.06660747 seconds)
loading group "random"... done (took 9.537683 seconds)
loading group "problem"... done (took 1.519179321 seconds)
loading group "array"... done (took 25.199410275 seconds)
loading group "misc"... done (took 1.886986122 seconds)
loading group "scalar"... done (took 43.194164436 seconds)
loading group "sort"... done (took 3.290181438 seconds)
loading group "sparse"... done (took 12.916889489 seconds)
loading group "collection"... done (took 18.505007597 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.424869729 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.123589205 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129551704 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114203657 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.186552834 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121836702 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131338792 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085754115 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.87247933 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138810816 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115888471 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.429443707 seconds)
done (took 5.367006434 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.174801302 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.090412157 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083182186 seconds)
  done (took 1.445524223 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072515199 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063400676 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067692759 seconds)
  done (took 1.472599699 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065428972 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.13542244 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066285367 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067035399 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067044468 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066630634 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066613592 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.06697564 seconds)
  done (took 1.80686555 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072956403 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068170896 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065769561 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.06780751 seconds)
  done (took 1.539788737 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.06690049 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122023348 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065299927 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065444918 seconds)
  done (took 1.58333665 seconds)
done (took 9.38893385 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.13992891 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.825450447 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.770097082 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.122843294 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.247931542 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450172183 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124581756 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.182611167 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089196003 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074998485 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121674093 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078315412 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.398453103 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.39793291 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071396904 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.171356821 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.650176945 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088903981 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135437895 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.436615198 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074233146 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088186355 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085137878 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071593013 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.350595604 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.156191701 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.667394983 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.100631135 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068882588 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095125963 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070887376 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078538645 seconds)
  done (took 10.778919172 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.092882291 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090412753 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069161515 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124021802 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094185518 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.07000385 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075618495 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.06836071 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089373655 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.12429068 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.09033228 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.103818297 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066658081 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069363486 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074662355 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.196834215 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.08029795 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.08144044 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06758466 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081646096 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105489262 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078469194 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078782686 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078300724 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132271059 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169214043 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09688763 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098422099 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066455424 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079307585 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115205179 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125281713 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067056186 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065723473 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120676956 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096299921 seconds)
  done (took 4.709817799 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.892083553 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096652094 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082967792 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074839949 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.105968234 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113540289 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.124401773 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122424823 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.099907058 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069251195 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152670893 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.667713943 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.171968988 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071693959 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120017995 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.357528814 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.064605265 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.096316621 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.069989389 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068354089 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071103319 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069837339 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112024176 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066316293 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.177221127 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.584849361 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070992664 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069645093 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097122556 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066305409 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141152558 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093904709 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070582829 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.547884415 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066089559 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063828469 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.200534227 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094502849 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067077 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068099446 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079167817 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066762572 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108623072 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080136554 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.515148321 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069780437 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.583229772 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224451657 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073020694 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072124623 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101682019 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064615959 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067589083 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.845213452 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.148779405 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.06811135 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272774749 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070281776 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068943169 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069531947 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099316143 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067352108 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071623855 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073043026 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096814335 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.88084844 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090396749 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098101939 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068785201 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.39871876 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076382847 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069178192 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069840098 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.083655792 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111202984 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067268582 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066211446 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110884791 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.0950422 seconds)
    (79/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.084356425 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088419252 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069985526 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067401412 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066401137 seconds)
    (84/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063997841 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.321654681 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.161800133 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066802209 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067718 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.473851742 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.183261016 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067543623 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069564375 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.09323671 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067449268 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064375637 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065168622 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.0996124 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068429555 seconds)
    (99/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.068098344 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.332480971 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.06707294 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.491405665 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068819335 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102735117 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119933351 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067855681 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.101812545 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068106956 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065087658 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073854472 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066180282 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064975795 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070265887 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066222184 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066668933 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069788864 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068644681 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067393917 seconds)
  done (took 22.884351815 seconds)
done (took 40.538589966 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.334323624 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079149493 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078842027 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079399151 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078809249 seconds)
  done (took 1.957714166 seconds)
done (took 3.384563568 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132350971 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075285498 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064569081 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100554407 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068794543 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101783894 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108433758 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104074848 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068682498 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068917081 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068932187 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105019701 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.104857234 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069296107 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098246726 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103829975 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069026449 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064747891 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069320215 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.068810493 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068688346 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064591853 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069083217 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069171299 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099116384 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.068949349 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.06450525 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09879168 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069125551 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098625846 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069281044 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.068989427 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069015154 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100115425 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.068844363 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099108769 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064492098 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.06885657 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.188612605 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.06907802 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069339321 seconds)
  done (took 4.786504055 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072063111 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081857359 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083141561 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062139962 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071624457 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08221496 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062097866 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081939293 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091221154 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082870852 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082183064 seconds)
  done (took 2.220787982 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071162666 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083093971 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084271157 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062371043 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073548793 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083411161 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062569683 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083561203 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085866725 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083796403 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083293836 seconds)
  done (took 2.193138166 seconds)
done (took 10.549473035 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.0980052 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06575433 seconds)
  done (took 1.486949419 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.22277662 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.503532719 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.295629414 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.09321446 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.07239843 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085902057 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.20276855 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067603967 seconds)
  done (took 8.068194298 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.10210736 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.06808226 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069945075 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067886679 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.06846527 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069510475 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.06762183 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067637309 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069577258 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068931973 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069480207 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068095439 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068554693 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06816298 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068326566 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069335549 seconds)
  done (took 2.585361723 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104028101 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069462106 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099563811 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062268894 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072229342 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062829061 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071007157 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073266404 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070072961 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071259872 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072652129 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071155146 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071388636 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071559065 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072713344 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073064205 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073262042 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071072227 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07347523 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074094459 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072881739 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073711982 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074276871 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071911466 seconds)
  done (took 3.243274004 seconds)
done (took 16.743767521 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176219746 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075270023 seconds)
  done (took 1.585307731 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.069731267 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068675641 seconds)
  done (took 1.496344589 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.07433068 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060770063 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079047671 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070537623 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062155718 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.06143994 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077513853 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061781853 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061583698 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062113878 seconds)
  done (took 2.026130106 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063988626 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068864514 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066588491 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065335019 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067554687 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063290287 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065558363 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063385882 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06959329 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062416456 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066047442 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.082972221 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065618155 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083556284 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.064939644 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065990326 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067746163 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064840555 seconds)
  done (took 2.582862504 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061944264 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061979987 seconds)
  done (took 1.49065568 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065933849 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061865407 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064768384 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064115802 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062142717 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061596146 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062080313 seconds)
  done (took 1.804182509 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421411881 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122673903 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341653591 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069067713 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076879966 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254871754 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064661616 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068440583 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068786337 seconds)
  done (took 2.894594902 seconds)
done (took 15.268283598 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082861685 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180528736 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087911226 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.403092498 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091454824 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067157994 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11259758 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.181560875 seconds)
done (took 2.604290852 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.278318143 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.248515448 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.402118094 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124861774 seconds)
  done (took 3.147599994 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337405057 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078547559 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077011882 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066794105 seconds)
  done (took 1.943340765 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065905475 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071796781 seconds)
  done (took 1.50178556 seconds)
done (took 8.26369993 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.097158802 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071578229 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063331263 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062253826 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.064495132 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.074924753 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.063903468 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.064825651 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064458563 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062107021 seconds)
    (11/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062204112 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.064320503 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.064305811 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064812587 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064462216 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064058704 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06450766 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061989058 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063979308 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064489366 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064085944 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064491324 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.06331717 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063840797 seconds)
  done (took 2.986064273 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079659143 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065478031 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066698067 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066755012 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067542911 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066957819 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.06679782 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065848165 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066745351 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065600351 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067082363 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067581339 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065167257 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067425061 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065360143 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067412787 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067031781 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066019814 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06604004 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067464659 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066906056 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066683896 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067233408 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067040241 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067434699 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067282943 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065776702 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06603496 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066910984 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067542396 seconds)
  done (took 3.406725006 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067155778 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059955834 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060736891 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069857682 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060035988 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060997363 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061115124 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060060974 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060579442 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061790354 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061196073 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060304615 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061007783 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060462548 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060032736 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061122608 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065045671 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079723848 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060368336 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060488056 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064853848 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060472768 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060341418 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060152613 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061078269 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060587296 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060637659 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061019361 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060265392 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060882847 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.06018903 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064625703 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065629776 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060364416 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.07022084 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065253197 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060066899 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.06440677 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061380157 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.05986365 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059756672 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.059955212 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060347845 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060318319 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070350956 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060536446 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061291198 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.06087843 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060607167 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060149475 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060594555 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062499306 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069044882 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061588979 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060286613 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061425348 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060008892 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061265369 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060500142 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060270466 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060500016 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.0645486 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062098857 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061024417 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079876813 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061954435 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070422888 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060451852 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061134932 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063988841 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060756718 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07801806 seconds)
  done (took 5.901652429 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071439839 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072173992 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079105805 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070201949 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06453268 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061647242 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065172168 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061272689 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070666382 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065439467 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061653206 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064894357 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07060177 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065797164 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062780423 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070575258 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065487046 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064337423 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061786721 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06548078 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062730529 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065225817 seconds)
  done (took 2.872042196 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.139327358 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066245148 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105425035 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070194054 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068525891 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070352308 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066129551 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066721395 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06635739 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067291522 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066885633 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066548204 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068740854 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06732983 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066626236 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066765284 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066558199 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066766861 seconds)
  done (took 2.718770254 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076523264 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066082911 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089053267 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066151875 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066215551 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065987251 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069994765 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070011052 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065682689 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066111189 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069961783 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065863795 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065886924 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066307302 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065816799 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066216727 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065554158 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066179876 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070387673 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069176031 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069642248 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069774768 seconds)
  done (took 2.907709403 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077591172 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064888351 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080267365 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066827198 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060887538 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060591427 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066830234 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065567749 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066573826 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064907029 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065681728 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060782435 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067943471 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065564531 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.066952881 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065601173 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06482488 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065794693 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064929176 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060953859 seconds)
  done (took 2.718720146 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07212906 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063709728 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06336163 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068842602 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063401737 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063521409 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068786684 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063641479 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06350874 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084683635 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063789537 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063478026 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068874162 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067033306 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063505971 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068261823 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06857863 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068484258 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063237763 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063324971 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084741383 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06314255 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068185983 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063830595 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063392216 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064014233 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063293317 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066624615 seconds)
  done (took 3.266843962 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064515868 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063736285 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063807794 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064026357 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064079778 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064339732 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064310276 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064237822 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063681416 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064545146 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063637405 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063634889 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066488161 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063491584 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063784753 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063804076 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063789217 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064172279 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06430676 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063942472 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.06365886 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063736461 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063719365 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064181531 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064157993 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063481806 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063973498 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064295567 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063374218 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064126242 seconds)
  done (took 3.324186677 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073449859 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071741275 seconds)
  done (took 1.547619141 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062128784 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077189113 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060068033 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072374903 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068810488 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064054852 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069775429 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068733183 seconds)
  done (took 1.940691994 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067312471 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090417963 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063156885 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062785405 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065408095 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.127042288 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074463341 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073640596 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075854371 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064622191 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062918871 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074924246 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061613511 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075675017 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063436138 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071044177 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069456456 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079703897 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074916905 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060846881 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075335617 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063306788 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061513343 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063395846 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062269199 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06909925 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077915028 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074525464 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07046057 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060068333 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080910415 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061347936 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061916557 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070377971 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.06546856 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061137871 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098468001 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061609307 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066435179 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060867213 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073693116 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081564666 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075349597 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079150515 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063064372 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063408305 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.06064539 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063191977 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06502164 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070503268 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060899011 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068850604 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060575716 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062540822 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072009315 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061427613 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066839069 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070350958 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074898769 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071878258 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070042739 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076770266 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070254696 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068735447 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06207096 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080545904 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063050935 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074372659 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076293154 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062410128 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07451378 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060895828 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059960047 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.06106278 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095061041 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062848672 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062648237 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061367363 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061775202 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062798713 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071592931 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067078436 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069364434 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065341864 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077138468 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070620565 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061158173 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068261242 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078865016 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064861813 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061299646 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077178886 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064484715 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060206591 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078039715 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070725074 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062508086 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061784216 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.06448918 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074323354 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062190202 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059764962 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069373723 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062318403 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062923734 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065095894 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0689337 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060577744 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070857896 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065481482 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062811846 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059707315 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065049252 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062191596 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060044266 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07076033 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061203495 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075509888 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067085346 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074914605 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075496776 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.07094046 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076024122 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060722422 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.05923776 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077849502 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069296271 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.199626097 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080245487 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.061834656 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075432299 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061608434 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063263358 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070819018 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060629543 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063507338 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061293844 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066405993 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062452235 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063189948 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066885375 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.06994435 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.07328855 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062577777 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.07057629 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061580545 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076851011 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071320846 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065630298 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064912269 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062030336 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072953468 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068266056 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070542688 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060925822 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061989049 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061220247 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071909297 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070817045 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062828176 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068900023 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065427311 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062199317 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061672384 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062298312 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064901212 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065024649 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061802051 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069297398 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070121263 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075273343 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068722613 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070316094 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060820184 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061165595 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062756659 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.06112917 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065682013 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071352588 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07696323 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073241764 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082629591 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061496896 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070881659 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062882843 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078333136 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074717308 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062943001 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066113712 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.06049059 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062914065 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070666491 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073031427 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074954539 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076261479 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066102127 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066002973 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061213988 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076491778 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061607073 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07015602 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070683971 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065836809 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061351304 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06282547 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070193578 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065758063 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061466948 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076471199 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067555515 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060684953 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075421532 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061801629 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071814143 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060752969 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065041291 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066528091 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063175741 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071086116 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076531015 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060635076 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062107118 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07690182 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063613121 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063208985 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069457785 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076661291 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.066151048 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069565001 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072051675 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071178011 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065428875 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070836984 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062230803 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.07050886 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064012819 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07285017 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061098482 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078903421 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059959623 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075736501 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061280838 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071758364 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061548659 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070134953 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061477105 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077369745 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062428032 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061513769 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072204838 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059708993 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070067022 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060078346 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065398685 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06719295 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069946676 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062683131 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069963691 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062418839 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.210824097 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067191679 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070806325 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071511199 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066544454 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061185279 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070210246 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072677667 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070115863 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062577104 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.062768722 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062064539 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071072545 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063026202 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06276291 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070113595 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.065965187 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067563018 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062716256 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063088391 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06313013 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070110077 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071328896 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079135773 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070107249 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069023506 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070746411 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061071307 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076865056 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061876308 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071535052 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060478713 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067010577 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070808975 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061379855 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080428082 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.06284923 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069207294 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073887567 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070625547 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06547175 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078980511 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064585879 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071084132 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069296927 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065938898 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067683654 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063091188 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069795467 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071317314 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072089808 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062461742 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069075313 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070445569 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.0633156 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069025144 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063190715 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069897519 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063196343 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060480622 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066007891 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072986835 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066046466 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066569514 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061797374 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060375877 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061810198 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068333794 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066155078 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070246944 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077113141 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060431798 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062592617 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061187249 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065140284 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079449884 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071535741 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069888345 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066489684 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.06090209 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063270607 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063738027 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061769063 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065037069 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.06080843 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060949754 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072091075 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06334668 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065711008 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061589018 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062470514 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071032331 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066205285 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.06183281 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067991553 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.06135453 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066491044 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.0607674 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06298969 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065854141 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060928804 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06513076 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071942924 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078377344 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067998525 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070460822 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062466565 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068948888 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076446649 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06828244 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.0624658 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070872403 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060696522 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079322134 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070814802 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070353025 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071150402 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062311392 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077475578 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.06500382 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070777545 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075909723 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061814687 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066971891 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060368031 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076578571 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06510993 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059963145 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068200215 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068191725 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066012902 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071640877 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060854094 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067939643 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.212870622 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065821519 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063955307 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063446879 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070531623 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077403183 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062415251 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065891557 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070168718 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.069839338 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066172228 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073755437 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069768534 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063095478 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063339099 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064720406 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062579397 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073181112 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061958816 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065836376 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065598164 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060829216 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.067734575 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077692814 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.07108491 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071051651 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061590744 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060429234 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079563513 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065102722 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064587356 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069522321 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.07112199 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073683737 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07102758 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078539277 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062319258 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067283154 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074023551 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062986397 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061455038 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065060559 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062858297 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070436845 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071175643 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069291059 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063619615 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068341177 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075128714 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062900129 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065923408 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066334578 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062243529 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072026529 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.06964386 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073118325 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062952228 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060876235 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064713785 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070430733 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.06899787 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070688249 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062538001 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068103195 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075088246 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068950996 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06454636 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061068774 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064684511 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070512287 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066087928 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061330219 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.065848243 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065515963 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068430374 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071043418 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065937132 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061138446 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078068283 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069138378 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070745933 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063149321 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063504573 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061970521 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061289501 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072845045 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061236793 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063222725 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066009454 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063270984 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079030316 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069850901 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077049568 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062152675 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065551305 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061399347 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070752486 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066328278 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061888297 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071889416 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060755631 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07689087 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.093153868 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066888827 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.061111597 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066504899 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069291356 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076180975 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070829755 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070334327 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064585901 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070684566 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063311439 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072265146 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061065688 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060549954 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071433315 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070204136 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073355565 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060751435 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071427261 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063053251 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069020872 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068709662 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062689942 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062761035 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062468736 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069582346 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064699416 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069474555 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064943966 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076472475 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.20543421 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073667939 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071156333 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072995549 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075652812 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07344396 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069513456 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062244834 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069469766 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069424407 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062683175 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066314332 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065141894 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082510469 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063095401 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062762234 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075494733 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067800884 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061691754 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067787848 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066323257 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071794845 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062527035 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072271245 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065831774 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062420712 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066347542 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06602957 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060963866 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061082329 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061573419 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071635864 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065712616 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061859863 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080009749 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.06276812 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.07065482 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073070889 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068266284 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063359004 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060270783 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062565254 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074670365 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077147007 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065164859 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070230049 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063527415 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071410388 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061221766 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070976742 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.06935848 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070305689 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061290562 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061672983 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076616924 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076911857 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065949893 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070644317 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070697218 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062889762 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082693935 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.07019829 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062627985 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072288827 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064293905 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060833758 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060556982 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062996266 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073006266 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061323131 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064135861 seconds)
  done (took 42.325064776 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098808963 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062295117 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061040573 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060999929 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069096837 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06213812 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061289493 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062272744 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061986262 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063517384 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061495466 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064254921 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.068101531 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07451464 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069869383 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064731471 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061518171 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062166936 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06136655 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062064181 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067867189 seconds)
  done (took 2.899545626 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065158766 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065335228 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065178408 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06550693 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064797842 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061212611 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065311008 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061203983 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066087299 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06174018 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065609672 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061792754 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062036503 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061935875 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061748518 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062911217 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065885098 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065079366 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061192241 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06546842 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062801533 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065512845 seconds)
  done (took 2.898549695 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063346829 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061770973 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.06988975 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060993623 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.06084707 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064137547 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061007462 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06564121 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065502226 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065255996 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070088764 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.061789578 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061130441 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066575747 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.06037005 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061993031 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103704117 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061926261 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.06200447 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.06090576 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.06382716 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070281901 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060909573 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061199997 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065301165 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064572513 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060718893 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.06352338 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06184241 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065284387 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.06206601 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060700744 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069995697 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069640457 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065390036 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.06534349 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063127233 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062360989 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.06106056 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060743344 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069441363 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062509466 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060918469 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062287605 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070164445 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060680256 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061658616 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070003554 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060985449 seconds)
  done (took 4.664109946 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071428866 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.112822569 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066969307 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094326626 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073781436 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067137118 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066677984 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095383548 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061966349 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06313349 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074552491 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075232801 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063906934 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065346023 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066686609 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063814703 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064574209 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062999481 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066615797 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063427272 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066328849 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067824197 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073449195 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073965566 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064766431 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062794988 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063821654 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064764513 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073714932 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066928141 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065142696 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065642609 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074366972 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066912184 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063482721 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063278184 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074843932 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064114922 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063713362 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062462795 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063263059 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065003995 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.06821545 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074891901 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064054256 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069107872 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064277805 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061830366 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074229008 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063343075 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067247317 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075065555 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064737148 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063966904 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065085962 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074367363 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064559297 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062353999 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06386033 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073820778 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061877541 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06453028 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077642448 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063084304 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067092566 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075271851 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068306218 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064814086 seconds)
  done (took 6.30826829 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.07018503 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096224482 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07631819 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07672737 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072153722 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071691354 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071709295 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071486774 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071517949 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074272631 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071527413 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.10649743 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068432948 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073385318 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071704248 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071638229 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071783087 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071158872 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071423331 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071101289 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071260239 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07663742 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071672871 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076221973 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073707742 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068243192 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071297338 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071354586 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076923416 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07118346 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073858758 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07110216 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071281336 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076840126 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074353271 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071437862 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06195687 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071542331 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071466779 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.0712443 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068095666 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076521194 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.072051069 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067913969 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071558105 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071264945 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076857531 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074116283 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073028225 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07453641 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071825399 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076605948 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071553551 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071495674 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076750834 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079126693 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076815689 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.076372216 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071506602 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076658766 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076567851 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079201575 seconds)
  done (took 6.112136997 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07427043 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067676017 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079592218 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061003012 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060857299 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070192961 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06138996 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061168876 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067989952 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068013683 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069723347 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071125896 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072528236 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069562916 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070488246 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072222447 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070004389 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070516538 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067989541 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070013574 seconds)
  done (took 2.907135822 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.075937534 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079626394 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066851215 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070130171 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066790533 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070571399 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065765218 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066572437 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067719372 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067159331 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071254095 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071476149 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066881901 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070583981 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071383594 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070767361 seconds)
  done (took 2.637565329 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06453552 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068806216 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067854676 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062666278 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064255169 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061741233 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062405735 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060573496 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063752591 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075338374 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.06178085 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064894555 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062742769 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062014985 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061645803 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065123897 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.0635181 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06216731 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063054143 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066442584 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070382802 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063031245 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.06496144 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061990491 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064251853 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070466927 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063364283 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064516934 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062542705 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064699357 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064196219 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068793907 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064376074 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062651316 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061235796 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062155142 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062660196 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064661943 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065147915 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062432598 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060814605 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.070040166 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062588435 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063181422 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064129804 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06483612 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064180361 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067785034 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062367956 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.06453601 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062215925 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064156235 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062440547 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069354731 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064302064 seconds)
  done (took 5.059683178 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078176196 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066561361 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061162941 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060957131 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.065941589 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067235066 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066324664 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066640312 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066911777 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060796252 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06750584 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06644273 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067184008 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066698707 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06683866 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066447929 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060816983 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066427749 seconds)
  done (took 2.722120426 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068041018 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066662633 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065490599 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06297893 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063343774 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067973163 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06110044 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062818314 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062970141 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063373958 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063184656 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.063110431 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062639612 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06255247 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067294097 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062975662 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062638521 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061402429 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06317215 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061553832 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067681342 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061693818 seconds)
  done (took 2.927596476 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.08786417 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084196303 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127399914 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080313532 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088601205 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.071852554 seconds)
  done (took 2.065733197 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0939488 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.097961143 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066040568 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065973166 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070853135 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069024581 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069165677 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069264747 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072347534 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072615405 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069044165 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072599497 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072505239 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074695923 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071218205 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071286737 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06908777 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069134757 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066339866 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076682203 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069419325 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072815879 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069508527 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069424057 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069621187 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074156779 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072385817 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073303909 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068944081 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073025142 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070850317 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069236823 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072890976 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073404354 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065889716 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072232344 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069171127 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076862384 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071156687 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074419112 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066179566 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070840606 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072272691 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072796533 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072568495 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069437437 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072378074 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069486602 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069505193 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078351808 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071214029 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074358135 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071010051 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073133624 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07248042 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078179012 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073187964 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074485332 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071532787 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07317644 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074619835 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07131447 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074810537 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073674308 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071559173 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074951842 seconds)
  done (took 6.304263141 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104250954 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066577524 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069746176 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073189675 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074740228 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069556305 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069621396 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069766384 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069630612 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066848543 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104685389 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069572159 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074939862 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07755988 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069637009 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069539831 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069599117 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074963495 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066669784 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078336285 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069271931 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074412872 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074413939 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074400861 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07311237 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070939335 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069504874 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069459338 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069209353 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069635369 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072437746 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069447511 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074626118 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066703237 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074647487 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069441935 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069193584 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072568369 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069280802 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071365885 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075002138 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077214064 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069366961 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069291174 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07342641 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069430173 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069545191 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067091869 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069989224 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067361641 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073251164 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073017965 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073448539 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074531862 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069681209 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069694419 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069577621 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069336068 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069817189 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071089628 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075059009 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069432753 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078330445 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069809934 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069712822 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074916017 seconds)
  done (took 6.322109981 seconds)
done (took 131.137576173 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218323383 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.189897161 seconds)
  done (took 1.921264428 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075064652 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.165777557 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07507568 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075329197 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108878829 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108469847 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076410488 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072726351 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075277886 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072450255 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.13944372 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076493562 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072718526 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072455273 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072245995 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07268307 seconds)
  done (took 2.944678062 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108015394 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.183933959 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082232573 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070432892 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.15199272 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077275967 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072869918 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077276111 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077573322 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070564366 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107559612 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.08403816 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076197672 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077355125 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072448982 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076036258 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.077067958 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077437879 seconds)
  done (took 3.158082463 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103932808 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.092748644 seconds)
  done (took 1.742988766 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156976352 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106365018 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145746081 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.345035354 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.136832868 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.139024435 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.144891329 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.137774682 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110885936 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.134265053 seconds)
  done (took 3.099203911 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106592851 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105114064 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309190944 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103096907 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.083118893 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077942166 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075619897 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080078256 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076069235 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076807731 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122617172 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075685377 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072781319 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124380371 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099341603 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107030858 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071375659 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.07917044 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080592446 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071496709 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07655496 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080660581 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178259457 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078854888 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100202296 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.076023926 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077755408 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075184399 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074988726 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078534919 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079643353 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099522476 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.07891649 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08287834 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077496825 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097745844 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072354641 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099311646 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074813508 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072936041 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075765084 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079339904 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.073159136 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078460866 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075865418 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077810026 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080449444 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071331281 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075674366 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074883189 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073010522 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076867354 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076488754 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077588529 seconds)
  done (took 6.353049866 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108385902 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108532904 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071128828 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113267561 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105565632 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070465964 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.10508566 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100679189 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109101499 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070205609 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069530419 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070031501 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076984976 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079882494 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117099194 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108419763 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072435371 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070994572 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107836259 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107873651 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06953007 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102553929 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100751694 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106973397 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069137306 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070986364 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069171804 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069784525 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074393284 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075457893 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069526918 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076625469 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081778512 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076013278 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068842111 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069247629 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.0692816 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07579546 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077242328 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076875357 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07512242 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068875372 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069371229 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069919064 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070194743 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069086846 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075502186 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076069613 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075600638 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069185799 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069709987 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068936692 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069922304 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076093647 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075000308 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076575102 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076277728 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06929601 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069359859 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070876441 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077390635 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077178225 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076702735 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070316055 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077438499 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069133129 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07789444 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080624681 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069280849 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069779812 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069797076 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069561344 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069946186 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075078926 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075262243 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070021458 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069257213 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069323405 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077468686 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075584867 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069356865 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074437811 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068903548 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069562308 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069619493 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069817862 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074599034 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076150867 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070180188 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069292052 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068998094 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069389789 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068586177 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.073961985 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075614412 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.07590039 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075004616 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069333548 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074968398 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074986246 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069445074 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074967533 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068859975 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069032107 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069208024 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074748062 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073604632 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.076041014 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068116717 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067722468 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073260117 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075675588 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067767946 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072913719 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075294598 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.07352607 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067475988 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076399285 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067987481 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074915558 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068112953 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076121052 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06777432 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073142212 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06832812 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.067053976 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067824065 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.073690959 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068282467 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067864367 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06788066 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067799279 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.07343485 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076637974 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068437964 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073652644 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073837945 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068374405 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073574507 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067825959 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074957245 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068058018 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068290963 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067079108 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075992051 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067866723 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067837651 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068005789 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075347114 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068158459 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076411557 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072898384 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066873227 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075341117 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074026234 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07152661 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.074406126 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067234877 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066966425 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067286827 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069707906 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071369643 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072493718 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066933219 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066843554 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.07098508 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.073493633 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066992553 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.071228143 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.071899665 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.071854993 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067419084 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067973288 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.074703987 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073565924 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072206597 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.071385513 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072047973 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066826014 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.071338151 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.071597272 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067145667 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078103338 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067332281 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.075924567 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072873633 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.070469955 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072367774 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.073206351 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074026717 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074147907 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.075976569 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067059697 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.298803085 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072329325 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067318236 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066778259 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.071751886 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067716397 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067248396 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.075752699 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06748566 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074040207 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.067012153 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.072431415 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066634763 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067251956 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076583823 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066730186 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067527544 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.071690032 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067655115 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.071724968 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074432969 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.071649607 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067349944 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06764007 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072658786 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07271061 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067611517 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067595696 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067460475 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07188045 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.071585248 seconds)
  done (took 18.325234086 seconds)
done (took 39.111540655 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.176711895 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.119648675 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.219138836 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.208068581 seconds)
  done (took 2.416542434 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.10617969 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.069625986 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.084158109 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.094074742 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.069262927 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.079655512 seconds)
  done (took 2.133537315 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.207647864 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.181633284 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.251754201 seconds)
  done (took 2.264311303 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.379331101 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.155708706 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.221056823 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.511877692 seconds)
  done (took 2.999149803 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.112880662 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.102154457 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.079707123 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.112928778 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086544285 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.064872072 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.135678897 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.071683974 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.101453875 seconds)
  done (took 2.560050827 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.14071638 seconds)
done (took 14.300682616 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.111978835 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.241003911 seconds)
    (3/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.287442474 seconds)
    (4/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.26197593 seconds)
    (5/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.187802465 seconds)
    (6/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.209532587 seconds)
    (7/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.19115458 seconds)
    (8/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.242942464 seconds)
    (9/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.233976809 seconds)
    (10/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.173524088 seconds)
    (11/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.221370775 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.168920402 seconds)
    (13/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.118190178 seconds)
    (14/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.147033878 seconds)
    (15/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.12677907 seconds)
    (16/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.067562463 seconds)
    (17/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.221583192 seconds)
    (18/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.067394964 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.12783378 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077106197 seconds)
    (21/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.18379939 seconds)
    (22/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.078322482 seconds)
    (23/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.181029191 seconds)
    (24/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.078175234 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.079637666 seconds)
    (26/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.24421316 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.080594391 seconds)
    (28/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.085567241 seconds)
    (29/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.076245115 seconds)
    (30/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.185838279 seconds)
    (31/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.176703251 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.093363447 seconds)
    (33/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.154143353 seconds)
    (34/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.096260548 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076382269 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.145226266 seconds)
    (37/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.150299507 seconds)
    (38/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.140816885 seconds)
    (39/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.071299691 seconds)
    (40/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.07515855 seconds)
    (41/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.146504148 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.078227321 seconds)
    (43/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.07812198 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.097386237 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.127558873 seconds)
    (46/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093777025 seconds)
    (47/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.089710119 seconds)
    (48/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.084076459 seconds)
    (49/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.080423014 seconds)
    (50/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.197971339 seconds)
    (51/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.079748797 seconds)
    (52/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.078499914 seconds)
    (53/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.221215117 seconds)
    (54/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.067985674 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.156568683 seconds)
    (56/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.076561571 seconds)
    (57/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.073184946 seconds)
    (58/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.126137804 seconds)
    (59/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.220114977 seconds)
    (60/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.146023219 seconds)
    (61/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.095406173 seconds)
    (62/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079387189 seconds)
    (63/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.077204977 seconds)
    (64/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067389474 seconds)
    (65/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.075736886 seconds)
    (66/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.179555585 seconds)
    (67/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.096811364 seconds)
    (68/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.142159353 seconds)
    (69/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.092892944 seconds)
    (70/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.079176672 seconds)
    (71/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075323906 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.089024059 seconds)
    (73/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.067745407 seconds)
    (74/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.079200235 seconds)
    (75/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06867923 seconds)
    (76/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.082833534 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149070958 seconds)
    (78/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.090917114 seconds)
    (79/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.14421389 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074791283 seconds)
    (81/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066888973 seconds)
    (82/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.198947684 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074447526 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085111118 seconds)
    (85/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066653475 seconds)
    (86/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074592765 seconds)
    (87/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066310071 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.178785985 seconds)
    (89/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.153666628 seconds)
    (90/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068336808 seconds)
    (91/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.083769869 seconds)
    (92/341) benchmarking ("sort", Float32, false)...
    done (took 0.137329013 seconds)
    (93/341) benchmarking ("sort", BigInt, false)...
    done (took 0.261254101 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092875388 seconds)
    (95/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.185313575 seconds)
    (96/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.233436678 seconds)
    (97/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.213015033 seconds)
    (98/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091013637 seconds)
    (99/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.136749988 seconds)
    (100/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.076333485 seconds)
    (101/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.165213536 seconds)
    (102/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.064868469 seconds)
    (103/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.065807224 seconds)
    (104/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.141522841 seconds)
    (105/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.066073999 seconds)
    (106/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.06550331 seconds)
    (107/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.065566345 seconds)
    (108/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.072161732 seconds)
    (109/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.06656541 seconds)
    (110/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.08093129 seconds)
    (111/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.148706412 seconds)
    (112/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.164902085 seconds)
    (113/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067135567 seconds)
    (114/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.06524909 seconds)
    (115/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.190226571 seconds)
    (116/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.063878635 seconds)
    (117/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.06504109 seconds)
    (118/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.161340458 seconds)
    (119/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073100427 seconds)
    (120/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.136291846 seconds)
    (121/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.065917622 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.065883812 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.086759835 seconds)
    (124/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.082670058 seconds)
    (125/341) benchmarking ("sort", Float64, false)...
    done (took 0.135336626 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.115714487 seconds)
    (127/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.064440317 seconds)
    (128/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.197918783 seconds)
    (129/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073765242 seconds)
    (130/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.188976707 seconds)
    (131/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.07326307 seconds)
    (132/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075755859 seconds)
    (133/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.068894599 seconds)
    (134/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074135312 seconds)
    (135/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068091111 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.088633288 seconds)
    (137/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.066337219 seconds)
    (138/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.072325336 seconds)
    (139/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.066055153 seconds)
    (140/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.088786026 seconds)
    (141/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.162637444 seconds)
    (142/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.130337887 seconds)
    (143/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068927752 seconds)
    (144/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.063638963 seconds)
    (145/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.07420239 seconds)
    (146/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.076223087 seconds)
    (147/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.0841648 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074447599 seconds)
    (149/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.194640952 seconds)
    (150/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077290172 seconds)
    (151/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.065313292 seconds)
    (152/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093867893 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073763587 seconds)
    (154/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072613484 seconds)
    (155/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.087752097 seconds)
    (156/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.169121846 seconds)
    (157/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075546781 seconds)
    (158/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.06664401 seconds)
    (159/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074327238 seconds)
    (160/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.131397742 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.087339251 seconds)
    (162/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.072856393 seconds)
    (163/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.167733949 seconds)
    (164/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.066022912 seconds)
    (165/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.097553866 seconds)
    (166/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075528337 seconds)
    (167/341) benchmarking ("sort", Bool, false)...
    done (took 0.141941359 seconds)
    (168/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.070122159 seconds)
    (169/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.067680908 seconds)
    (170/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065708142 seconds)
    (171/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.072600475 seconds)
    (172/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.065716663 seconds)
    (173/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.074449183 seconds)
    (174/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066214287 seconds)
    (175/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073921693 seconds)
    (176/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073041004 seconds)
    (177/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075048577 seconds)
    (178/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.237405153 seconds)
    (179/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.161119848 seconds)
    (180/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.065527123 seconds)
    (181/341) benchmarking ("sort", Int64, false)...
    done (took 0.066420021 seconds)
    (182/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.194786664 seconds)
    (183/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073267528 seconds)
    (184/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.442545735 seconds)
    (185/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.080764907 seconds)
    (186/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.201970955 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.070304708 seconds)
    (188/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.071452469 seconds)
    (189/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.157978322 seconds)
    (190/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.164849364 seconds)
    (191/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.238283051 seconds)
    (192/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.157038172 seconds)
    (193/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.078597463 seconds)
    (194/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.081429199 seconds)
    (195/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.068597322 seconds)
    (196/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.071231603 seconds)
    (197/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.07066052 seconds)
    (198/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.08554871 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.068017328 seconds)
    (200/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.068828398 seconds)
    (201/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069706358 seconds)
    (202/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.07670957 seconds)
    (203/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.160981993 seconds)
    (204/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.069212655 seconds)
    (205/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.068507898 seconds)
    (206/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.068150586 seconds)
    (207/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066919455 seconds)
    (208/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.06781299 seconds)
    (209/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.066631068 seconds)
    (210/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.1830035 seconds)
    (211/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.065969215 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.114318244 seconds)
    (213/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080054655 seconds)
    (214/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.079660605 seconds)
    (215/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072211818 seconds)
    (216/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.069385537 seconds)
    (217/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066948086 seconds)
    (218/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.076225177 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.145479072 seconds)
    (220/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.240057958 seconds)
    (221/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.068409797 seconds)
    (222/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.070157226 seconds)
    (223/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.068021567 seconds)
    (224/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.167491051 seconds)
    (225/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.16449124 seconds)
    (226/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.067707311 seconds)
    (227/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.07502599 seconds)
    (228/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.149368315 seconds)
    (229/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.067716548 seconds)
    (230/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.069589452 seconds)
    (231/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.071389608 seconds)
    (232/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.068426906 seconds)
    (233/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.084820734 seconds)
    (234/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.067882256 seconds)
    (235/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075806636 seconds)
    (236/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074362027 seconds)
    (237/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.067858649 seconds)
    (238/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067862235 seconds)
    (239/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.06596679 seconds)
    (240/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.224799022 seconds)
    (241/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.068105651 seconds)
    (242/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068286183 seconds)
    (243/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.06982701 seconds)
    (244/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.067355881 seconds)
    (245/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126368282 seconds)
    (246/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075659937 seconds)
    (247/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.067000281 seconds)
    (248/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.066300759 seconds)
    (249/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.067743191 seconds)
    (250/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074923662 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.067675535 seconds)
    (252/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.155218225 seconds)
    (253/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.124840147 seconds)
    (254/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.067931846 seconds)
    (255/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.06806369 seconds)
    (256/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069652819 seconds)
    (257/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.083392909 seconds)
    (258/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067830025 seconds)
    (259/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.071260506 seconds)
    (260/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067998834 seconds)
    (261/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.068264929 seconds)
    (262/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.068248113 seconds)
    (263/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079754167 seconds)
    (264/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077945551 seconds)
    (265/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.167133472 seconds)
    (266/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080667759 seconds)
    (267/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.06936551 seconds)
    (268/341) benchmarking ("sort", Int8, false)...
    done (took 0.151797542 seconds)
    (269/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.07486935 seconds)
    (270/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.067139079 seconds)
    (271/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074813615 seconds)
    (272/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.06800104 seconds)
    (273/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.134207021 seconds)
    (274/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.068092083 seconds)
    (275/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.070218266 seconds)
    (276/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.075179451 seconds)
    (277/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.07056124 seconds)
    (278/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.086256771 seconds)
    (279/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.068728163 seconds)
    (280/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072750161 seconds)
    (281/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.068060131 seconds)
    (282/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067029045 seconds)
    (283/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065883378 seconds)
    (284/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.0695414 seconds)
    (285/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.079787725 seconds)
    (286/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.0697493 seconds)
    (287/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.067386478 seconds)
    (288/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.067062021 seconds)
    (289/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.070910485 seconds)
    (290/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.067877167 seconds)
    (291/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.166908907 seconds)
    (292/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.068221262 seconds)
    (293/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.071091913 seconds)
    (294/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066955688 seconds)
    (295/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.076803995 seconds)
    (296/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070479526 seconds)
    (297/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065705798 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.085729831 seconds)
    (299/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074323197 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090222462 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.067153532 seconds)
    (302/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068545149 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085526573 seconds)
    (304/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.067083159 seconds)
    (305/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.080510515 seconds)
    (306/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.068955603 seconds)
    (307/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067406952 seconds)
    (308/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.067337984 seconds)
    (309/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073994961 seconds)
    (310/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151543629 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.274408947 seconds)
    (312/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.070128703 seconds)
    (313/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.073703439 seconds)
    (314/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.160364024 seconds)
    (315/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.071288645 seconds)
    (316/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.070623501 seconds)
    (317/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.077720721 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.095335003 seconds)
    (319/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.072276566 seconds)
    (320/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.160838669 seconds)
    (321/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.073137992 seconds)
    (322/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.069844158 seconds)
    (323/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.069327248 seconds)
    (324/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.072459148 seconds)
    (325/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073739339 seconds)
    (326/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.068145151 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.129588128 seconds)
    (328/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.067813961 seconds)
    (329/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.067336716 seconds)
    (330/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079039927 seconds)
    (331/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.08850487 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.088766639 seconds)
    (333/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.067450371 seconds)
    (334/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.067489488 seconds)
    (335/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.067457478 seconds)
    (336/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067285344 seconds)
    (337/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066860067 seconds)
    (338/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.067114981 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.142924254 seconds)
    (340/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.0678228 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.13149966 seconds)
  done (took 37.329671178 seconds)
done (took 38.994659255 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.093224882 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.08165954 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.079667262 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076106618 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079300537 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077994436 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078996321 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07723707 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078133446 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078165691 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077784615 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066312411 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074850092 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081984362 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075971315 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.082073448 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079889827 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082674156 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067558723 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081351087 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093920752 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.07893131 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075817753 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.08071155 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067080788 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076326174 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090641906 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087735269 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073480687 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07623139 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074420918 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084985644 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074815463 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073328942 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076497414 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072887636 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076660091 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074404387 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.090361647 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.073212684 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067295004 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079408325 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074372978 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.075020622 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.076249124 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.07888223 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072566368 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.08040394 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.067072168 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078550623 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089957764 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071884628 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073897463 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075113262 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.072153 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.076201866 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073463927 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078215832 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071993261 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078361744 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078558516 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075325704 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066850193 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075533066 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.07433126 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074511898 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.06546279 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071921645 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066638652 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.067345214 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.066112273 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075541669 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07351407 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071506381 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066314325 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.06684345 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066061162 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078669292 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072885651 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076026636 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066939835 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072138836 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071400959 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066770147 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071852503 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078275901 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.066240705 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.067345571 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065854368 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080938942 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073161077 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066543482 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078264836 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071587669 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071916102 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066960127 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065728839 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071675516 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074730878 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066428423 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065579228 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072127854 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071542331 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075394859 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067037889 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071555426 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071624496 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065665267 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075975029 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074182489 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075237776 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.080009552 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07591643 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078773296 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.06732522 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.066005498 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077493172 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.06692904 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07209962 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074919089 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071806976 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074944761 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.06698645 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065876633 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071636329 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073235873 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067317751 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067519892 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.067149502 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075817763 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073826376 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.066071278 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066621483 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075589951 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07545397 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.066053997 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065765707 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075972385 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.067240764 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.074338469 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072663871 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075395711 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.066196695 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.067613394 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.065942336 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066336056 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065846065 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072191115 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071889808 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067268056 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075590526 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073186341 seconds)
done (took 13.036685433 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.072072981 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.109550501 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.08121957 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083792421 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.080239306 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068817449 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.071988194 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086637735 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071360272 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.092467968 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095382507 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088972386 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.097992901 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066235455 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06812873 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068576836 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066496429 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.079458246 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.084964185 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090868459 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.103838996 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067229679 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.083423945 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.087080101 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.081758993 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.085080855 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.06898992 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.110379085 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070393674 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.08613006 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.093239232 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066966136 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068698723 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.085485672 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.08251193 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.075989962 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068261733 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07368064 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070761085 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067285149 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069460875 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08530723 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073931202 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.074577877 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068621172 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068876173 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067888969 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.074955597 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.084979795 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072983063 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.079612669 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.086233646 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.06910442 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.06766737 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.066537875 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074694561 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067856551 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068439221 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.068309389 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067439899 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06787764 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069913252 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.072701117 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.073866405 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.07096757 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.073878061 seconds)
  done (took 6.875656545 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084602485 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093159593 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081714861 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082477306 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066619708 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.06773631 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.068123186 seconds)
  done (took 2.363918103 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.0696111 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075362216 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079881805 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079848372 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089298381 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076983888 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068040228 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099513802 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066929868 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076402399 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083404084 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081072291 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071332615 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079642234 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068057324 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079872566 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068575541 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074967852 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075453543 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080779991 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072040459 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.098290955 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081428338 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068432521 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081154897 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075016042 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070602507 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068134104 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06873314 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067415485 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067543828 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089798518 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.074371078 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080062413 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068383416 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067282624 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072229581 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068272643 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.072212494 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076603847 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071201671 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067544372 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068021746 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067944534 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068773623 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072147418 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068632203 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067476962 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067063025 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075228132 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066684759 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073951452 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.0699433 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072717325 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072172952 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072124995 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07465194 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067900846 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075261169 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07408491 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067712496 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080502714 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079355934 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071220878 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079376728 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076047394 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074117922 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071563049 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067084185 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066815616 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068287597 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079401871 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.071222162 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.070132208 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068270448 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072647474 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071180719 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082641731 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082658972 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081069537 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069882547 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.068005999 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071595051 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.08256784 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072726495 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068356113 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068760744 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067324633 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072300818 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067637737 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072743493 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067471731 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074473972 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069976113 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070021414 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075161948 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067905558 seconds)
  done (took 8.940044303 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.071708466 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069911217 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068737114 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068989601 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069029978 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068715529 seconds)
  done (took 2.274347651 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092262329 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068785158 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080272882 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068224261 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090006184 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074342858 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074583874 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069622012 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083859991 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.07852418 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074236866 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076666797 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.077081605 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069957367 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074322764 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069298562 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.07430209 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071216213 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078080583 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070278823 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08385358 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.06957923 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070092902 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079696975 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071177386 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069028432 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068787878 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078402902 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077693053 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069646401 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069438085 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071019743 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076254828 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069508959 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074559801 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07624682 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068128618 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073181124 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070526331 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070765205 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076577112 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070169292 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070343871 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073234599 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069633078 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076610578 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.074016182 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071302219 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073824042 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073266599 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073466889 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068519276 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070793641 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073268579 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076032008 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069746317 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.0736418 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073956946 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069683812 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076201862 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067998281 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071271618 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069753719 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070874194 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072880384 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073919632 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076440296 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070109707 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069877994 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068145 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073514999 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068590732 seconds)
  done (took 7.103361036 seconds)
done (took 29.412458645 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.544240017 seconds)
  done (took 2.339950977 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.619525619 seconds)
  done (took 2.456072168 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.769446458 seconds)
  done (took 10.610147552 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.339860039 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.402886818 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.735591017 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.13331587 seconds)
  done (took 3.485917903 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.751173527 seconds)
  done (took 2.601163279 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231284598 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221069777 seconds)
  done (took 2.305106476 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.335695412 seconds)
  done (took 2.177559602 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.148357039 seconds)
  done (took 2.986688255 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.236977236 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162703229 seconds)
  done (took 2.248257654 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.540212487 seconds)
  done (took 2.38386495 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.297409936 seconds)
  done (took 6.150543748 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233121905 seconds)
  done (took 2.118864581 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231291375 seconds)
  done (took 2.08259146 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.068495672 seconds)
  done (took 3.913002659 seconds)
done (took 49.720376492 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.08568791 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086853427 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086528742 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081745142 seconds)
  done (took 2.16142194 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076554358 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.070884833 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074170407 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074625641 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072404258 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073241278 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073769312 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070575835 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072574958 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071074455 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069576312 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.070842481 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073440819 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071071021 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073255072 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074384086 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071299096 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071092926 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073773401 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071038451 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073239079 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070701877 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069110356 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070764028 seconds)
  done (took 3.584959568 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079919478 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.072800726 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075747138 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071709967 seconds)
  done (took 2.162119834 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078529307 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077135701 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086625441 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090902723 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077275337 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077715207 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084285645 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084565439 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066677067 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087498112 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069158516 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.06777985 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067983099 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086182156 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083964217 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.06305228 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064482736 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077978315 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.076996056 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079803442 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069462668 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066752146 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.076949525 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077751071 seconds)
  done (took 3.699807683 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.084066402 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066477163 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082266582 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091888107 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092811198 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066266545 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079916412 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093626032 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128067758 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066345655 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073123506 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066370047 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.106049071 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066195233 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081637203 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109228094 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112885077 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070727876 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099383242 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066436616 seconds)
  done (took 3.548028899 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077613607 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070520202 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071179115 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066629667 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077334548 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073893159 seconds)
  done (took 2.308920769 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.071301803 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068782874 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070421487 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.072792968 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068970397 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068843481 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068501573 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067007994 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066801721 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.06787802 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067955603 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068282634 seconds)
  done (took 2.688743691 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.15577528 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069935117 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070786905 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067030315 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071930046 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067376717 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081884091 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.06990359 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.0847647 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067862262 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067977152 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070167182 seconds)
  done (took 2.810184834 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107194855 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112527606 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146437909 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117923677 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117505678 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097387736 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.126022503 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.09598317 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160739666 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138262233 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117497772 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094353395 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087429732 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070848653 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100486161 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120191434 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138095793 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074077347 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114188021 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1654583 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133327122 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.13626883 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14935268 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117752274 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091880956 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149481336 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098711089 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103451613 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125282667 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127343438 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119504737 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.0990202 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073026794 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072119675 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150868071 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104080634 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121206256 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094009735 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106087322 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089146148 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108621833 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070166172 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087625817 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.115223326 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085585028 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131817589 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088888548 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116317238 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082361848 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.138641031 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124877902 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100109717 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086743726 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105868045 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.293497044 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11359207 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135272089 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108370789 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083659512 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.120008638 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103634862 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101310066 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109047317 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081396794 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.177280717 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090116981 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112785573 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112679363 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.095222775 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095850965 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108732481 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136914192 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126433175 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126573254 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139238144 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095808094 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123320623 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100582534 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129974357 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106305435 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074199261 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122093441 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129978053 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100300765 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101861683 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131108894 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093386702 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078227093 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.100705349 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119855658 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08153457 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.113625372 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081890129 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.10969573 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134718022 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098164414 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112223311 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117550383 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079269786 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155800085 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109983804 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073391201 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118089249 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115078833 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158137087 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.254883191 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077984927 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100973008 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105065083 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148919477 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108189879 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081146243 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111697892 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141074977 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096169274 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170141453 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097307044 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141382085 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113701298 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088693809 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076177273 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091043671 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113690547 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108867678 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113965491 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091526541 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.085410812 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088478421 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113240825 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09347051 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081886363 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113926282 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102787393 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076172285 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089745419 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080361893 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142654473 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.07886206 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139224929 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126295792 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079800613 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107531627 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098757978 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10871794 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.09847614 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117931412 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141259038 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117238816 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091076104 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.09525583 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108994795 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.14484209 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128680153 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093913524 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.07755043 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100726807 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112659483 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098403894 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126244698 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101060418 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109388795 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103575904 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142253509 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146365916 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102135073 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.264600106 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108340514 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.12400889 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077860118 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155948674 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104821371 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118379553 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085607153 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141238301 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115530226 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090401075 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088209401 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10122691 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104906386 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106846875 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144941796 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097193257 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073285463 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093631443 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145473777 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077424462 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111489456 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091706265 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094231763 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11954698 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094459581 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08273484 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069735366 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129788609 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.159970205 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071055107 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11509662 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.111972556 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103531962 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.122052481 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070264059 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119775246 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139048147 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119204335 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142096157 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148219852 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118040328 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119351817 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.115051456 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106424111 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080693355 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125742293 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135065775 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097293617 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093661828 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136693109 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11873823 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.137183073 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.27871557 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115933444 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106004933 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108413742 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103742025 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102394022 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14374727 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120879404 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.1251578 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086279194 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106576727 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118666802 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136248958 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082923024 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142833976 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084864127 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119236616 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078361125 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12504055 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080657045 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112270327 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080542142 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100540857 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070508949 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074861957 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141860265 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113121709 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107434081 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101327413 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138503535 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.137769594 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082743321 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109345561 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116442622 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102059606 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11749283 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110638891 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089775309 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096384875 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11050156 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.086248723 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082817538 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.116064503 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095908379 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128125118 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085238851 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076259073 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142085148 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105695972 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096997686 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079222588 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10925205 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123910533 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094073492 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08883139 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116506852 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105594679 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143051174 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091703543 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098989658 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.286539212 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082117656 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093260746 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071210226 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086483141 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076957116 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.127844688 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077376054 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116978585 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070081743 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130894369 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087698914 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094131704 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10299823 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112656386 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128187504 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095771763 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141733793 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09059628 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119024781 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108919655 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09470728 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089412717 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1040403 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102018994 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.123510358 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096875898 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123820139 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145988883 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105934689 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.141923015 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092192969 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122358068 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107954742 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125441364 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113059648 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148543497 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139230333 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113088641 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112804504 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075987499 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095811751 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10643391 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112831822 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176256643 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127529927 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.0734314 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107557278 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094799224 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108940403 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105834178 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083954638 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147628693 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10278563 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088925316 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114379052 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.251501472 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106121516 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077637662 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09631839 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.100863836 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094939277 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099185891 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11567999 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127645982 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114036996 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143265643 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100336025 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.09392506 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118930363 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111076686 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111327075 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087150484 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087645951 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138843623 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120449153 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129729672 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101494951 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112063278 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112239792 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101441412 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126755809 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109508494 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.128184387 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081538648 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077403562 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069499444 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073225129 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124607637 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10962672 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11323311 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099919421 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073445743 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104581999 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107231948 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073359309 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089797387 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095171823 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100727363 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.092435046 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107740467 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115138429 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091933701 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10559561 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100813117 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147954028 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101044595 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089920153 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144937812 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151622833 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089276132 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09396427 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072866078 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080159791 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114969496 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150931189 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.312681025 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078918 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087775622 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.086958491 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087651839 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.07270559 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087115586 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090207371 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104963156 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10058705 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113523406 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105765523 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077096739 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103758531 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100680582 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093181241 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105040815 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119456661 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125497911 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.141480393 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111749885 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108039457 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078117504 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081638825 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077000442 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081066987 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103070994 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080279803 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07781245 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144442938 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.093298687 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106077982 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110040575 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090013059 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076784553 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13463272 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070325728 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136853745 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072771874 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083871922 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.084046012 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080695124 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095254659 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14140545 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111190881 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114179194 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108052627 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105850944 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142966021 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157367594 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081581561 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14495293 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076900989 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076778285 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07770272 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114865007 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0914107 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115987054 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141662255 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092014959 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10471111 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078668722 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.305495008 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.097424132 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105443755 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088439242 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080273082 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143772364 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080892762 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.081193898 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091260985 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112152567 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073674486 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104998258 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08592759 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0808388 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143291021 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631486832 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091382415 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.076644872 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097499568 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142832297 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12865749 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096182753 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109676118 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119300756 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101009788 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096433243 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108759109 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185300382 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075595241 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096014743 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105097305 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099597557 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1035245 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.099680164 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.089725773 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093454199 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087915435 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08106975 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109245278 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090188174 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097934733 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108168317 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08427957 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.088271948 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131608304 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105030616 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083318689 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090031836 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.10690753 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089799026 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102670171 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070218346 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114767426 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092141043 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118295264 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.09601612 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108624993 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128022592 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091101984 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139974805 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.108525797 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.285370448 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089505624 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.080115751 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125824734 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.089060382 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078704612 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145433844 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.095664844 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09427722 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10516678 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097797267 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114307649 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118488286 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112572805 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099204747 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080121303 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100994559 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103165922 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085999061 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079479222 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.076088603 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077507096 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108500222 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086725972 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08490767 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115650942 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090500548 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104757382 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101536478 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.124112991 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084798467 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102189628 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110620666 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093495964 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111134295 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101118909 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129330829 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176295771 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127710225 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130757193 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135682693 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078384904 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076974232 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070319747 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116544385 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080413677 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.09026369 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082024797 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135256058 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083252577 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113558779 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232495859 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08179512 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095414968 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09776272 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071120475 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083794212 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109062594 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088512813 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081290218 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120357373 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084571957 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129127373 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.273650323 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100724339 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095808014 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082404007 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114355396 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106247946 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129242945 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096062134 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076661754 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114859345 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104219701 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13855195 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073903209 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081843335 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129947402 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104564883 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133358647 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081479897 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15092341 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143643304 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101229336 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135005241 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072481225 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084525729 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090187563 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126896824 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086170396 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11264334 seconds)
  done (took 68.796170458 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150729486 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141819862 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083122177 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.11334747 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.23431229 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.218733855 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.135766219 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.109559419 seconds)
  done (took 3.217920128 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.07139562 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083909522 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081772461 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.20709166 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109071502 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068356322 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.07400655 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.08287686 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068808042 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068159503 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.102600458 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068745537 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068770755 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.36870986 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067982216 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073310477 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068416916 seconds)
  done (took 3.72478979 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.336554851 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.523155801 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.243925873 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.862650741 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138129513 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486443088 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077891689 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083564177 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.570761405 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.367819711 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.134771736 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088860497 seconds)
  done (took 18.917309762 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078600609 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079340474 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079383371 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076099539 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075639027 seconds)
  done (took 2.390179811 seconds)
done (took 121.895570459 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.086121496 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.172301581 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.06845915 seconds)
  done (took 2.28094381 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.084374076 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.081812774 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.081843742 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079625056 seconds)
  done (took 2.348765894 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076980713 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077412173 seconds)
  done (took 2.168234216 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.223282643 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.177209583 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090837898 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083995692 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080901067 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081660292 seconds)
  done (took 2.274757095 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074135322 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072642715 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073215752 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073704916 seconds)
  done (took 2.301976753 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.070957714 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067152413 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069478534 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071742939 seconds)
  done (took 2.292627553 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.088612165 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.087205217 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117682747 seconds)
  done (took 2.307383676 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085423457 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084206484 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079585359 seconds)
  done (took 2.263104282 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111559846 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097901134 seconds)
  done (took 2.215152742 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.083446132 seconds)
  done (took 2.090627276 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.09185957 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098881772 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.140558486 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108170053 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140749103 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.12764747 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077908789 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079041471 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.07467408 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074061234 seconds)
  done (took 3.014642412 seconds)
done (took 28.153949833 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.082600703 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.368902009 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.364697001 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08792601 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672643015 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357358981 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.999359545 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092057466 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102155012 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069472331 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086446514 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652201293 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.99148829 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.328239555 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.978292982 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.325375948 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.652263047 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069740897 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069108896 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069771278 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.984026777 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068990162 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069395123 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070139201 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650767293 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375501759 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070058514 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.32538769 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069298413 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073055631 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.359305945 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070507455 seconds)
  done (took 16.592652049 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07176215 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123368709 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073729514 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.0850581 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071218649 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070647931 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072777636 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069752453 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113533599 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069524288 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086747725 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068844711 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073092545 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.07091164 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089448477 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069579779 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071591987 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073389419 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069920287 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070363365 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088293061 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069368795 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070333819 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070218125 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069812067 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082652622 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070727399 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069735714 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069481224 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073371757 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073898661 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07114644 seconds)
  done (took 4.486077996 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123162112 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.126581966 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074208235 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109476879 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119136566 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071093679 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.151738834 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092843601 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116373983 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070265163 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086534244 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06962809 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104627402 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.07067492 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09009576 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070036468 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072068623 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070281281 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069558554 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070180275 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088345394 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069127674 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069875134 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070813997 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070779872 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08444784 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.0708238 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069816527 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069844097 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073476632 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074603863 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070864456 seconds)
  done (took 4.757570595 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071579875 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073094839 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080897761 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082183091 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.067879958 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070335445 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071575491 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068167929 seconds)
  done (took 2.635846367 seconds)
done (took 30.527882564 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080565242 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069547667 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.07253673 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088611107 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075432272 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071869337 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066130868 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076379406 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072760909 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072681296 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074613077 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068309022 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07158055 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.06613555 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073692228 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067208323 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074050865 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071487252 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071816966 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073419959 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069996279 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073448102 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076079846 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071807443 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071996213 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072054224 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076374181 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073825533 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068040413 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071070546 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.06984554 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082409841 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073567927 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073576104 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067231797 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067501159 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071728187 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.06948169 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074190216 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077069743 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069799024 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076236032 seconds)
  done (took 5.062816693 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.090448855 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095377458 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087188946 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.082972234 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108097052 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083333759 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091716189 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080732906 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078875615 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091502316 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075118128 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080605658 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082200394 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076746579 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080037007 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075891406 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081241061 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074734057 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079744215 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079798451 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092530823 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073020013 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080580663 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081295907 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075252948 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081113458 seconds)
  done (took 4.216260067 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075847071 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089887489 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093726162 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142606317 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110589793 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08433982 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083430999 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098656443 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.10184533 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069982771 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073482268 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095411428 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097709468 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076361804 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107413956 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.08750843 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082588312 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071082573 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076006155 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103515279 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091727508 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087822406 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102223885 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.08922143 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068457903 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078783859 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076460572 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08530613 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076960993 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081821508 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073576189 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073050929 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070007897 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081891049 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076563115 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067206447 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.09118629 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082255604 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084708104 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10756084 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079110801 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071472284 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099541166 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134698999 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068747389 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072018904 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.07333109 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082057816 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070839362 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098652861 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087601763 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068721613 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088521024 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.07057464 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070804317 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085678616 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070746376 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070738957 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081567681 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.07493484 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089663153 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074176675 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090493595 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068767281 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080625936 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070346746 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071059025 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067707302 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105264894 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076271533 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121582929 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070019669 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067403478 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.0815809 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081177834 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075745565 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068778294 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088913791 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081108175 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072760554 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080851957 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.07174514 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072492427 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104895783 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068138931 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.0672755 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067492202 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.0714845 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072194624 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069622357 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082517916 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068621266 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072099346 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085263138 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069266463 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069886548 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071485101 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070000017 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068707357 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079894886 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073060534 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070806443 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081620853 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070548144 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073017384 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083853 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078455486 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068367374 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070140457 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071357869 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070678824 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073460932 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072388944 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070969525 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075937336 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076316066 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075272874 seconds)
  done (took 11.48954558 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.165107927 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154413428 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070624265 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.14923505 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077730552 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073614243 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151274017 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088889514 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069755367 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.07059047 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069235197 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.09748214 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093071961 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104270409 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073894193 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070463073 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094905124 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.102717912 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.153741712 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.148053574 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093305718 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077939438 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072316771 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071282047 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070855858 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078839934 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.0861086 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077624091 seconds)
  done (took 4.798113094 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077066705 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084712507 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074087016 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094077337 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.087987191 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.07038286 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071722905 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071149124 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08702382 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076612443 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069826556 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074023905 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073594142 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070870232 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071110716 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076349173 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076401293 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068549692 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073580102 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074481323 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080132561 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094781126 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074453409 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070294132 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072706363 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070011675 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076571809 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079394592 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069265316 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099908269 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067039254 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074358331 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084104918 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071144791 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069679207 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070469631 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069615923 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070028337 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.07031237 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068468347 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067873821 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074872678 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068913602 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075851349 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083494498 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077169325 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071092118 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075439699 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072125421 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066871382 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072834072 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073598376 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.0723344 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078454165 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073830556 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072281365 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070774569 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099546341 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075887842 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069074843 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069181515 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067854775 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071484005 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077235296 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086374516 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071315439 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068088016 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069692945 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.0748376 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083966864 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069028951 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075031335 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066521715 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070420826 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072181152 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072637173 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071302715 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068357137 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069694244 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069929544 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070248207 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069680265 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069191451 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072524516 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067320626 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068474679 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070242633 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.07137843 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07604753 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068908853 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072619126 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071277689 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068415282 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.07215212 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074910968 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072321451 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089489444 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078253299 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070243934 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.06753173 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084004191 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071656161 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068864058 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075780412 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073919413 seconds)
  done (took 9.872730617 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.093348078 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071108016 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089403168 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096002421 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080051133 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075027874 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083420974 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070108019 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085915958 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068653425 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078523718 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.06813244 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082959947 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078441893 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071278452 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079877003 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072201914 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090128115 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084456295 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068364316 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078891151 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082078751 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081923284 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087696803 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087360174 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087864425 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081627875 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072286479 seconds)
  done (took 4.359885704 seconds)
done (took 41.857623362 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.135434753 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.308900173 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.138087209 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.494427654 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.046855466 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.000253774 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.178265147 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.972993188 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.029720434 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.000594102 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.305314554 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.340838766 seconds)
done (took 70.080007675 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.067982657 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.111401342 seconds)
    (2/2) benchmarking "String"...
    done (took 2.184599817 seconds)
  done (took 6.205796157 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.562434205 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.968732622 seconds)
    (3/3) benchmarking "different"...
    done (took 2.021763807 seconds)
  done (took 8.449401534 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.053986623 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.672679647 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.23033443 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.96624725 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.970646192 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.379318032 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.75826098 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.436386655 seconds)
  done (took 33.312983272 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.055465783 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.158317597 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.667961764 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.698196213 seconds)
  done (took 16.518639297 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.582433757 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.229134008 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.231034655 seconds)
    (4/4) benchmarking "different"...
    done (took 2.221166425 seconds)
  done (took 11.214554308 seconds)
done (took 87.821668668 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.969079232 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.207918389 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.00642253 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.120235146 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.000620558 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.991914614 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.972488333 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.96955258 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.969912035 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.972631459 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.354781927 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.979495139 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.978747858 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.985279523 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.969407833 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.976769117 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.199546815 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.984250367 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.012869784 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.205956501 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.475184969 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.978881566 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.967985603 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.021079204 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.915373921 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.023836975 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.38574035 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.973866843 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.576662841 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.976150939 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.970796072 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.971737156 seconds)
  done (took 210.964295672 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.966978271 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.027352439 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.073261439 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.99985003 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.55189187 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.157167532 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.111794937 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.580051474 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.970014938 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.969370299 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.286126505 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.969486746 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.308177828 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.917434807 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.962740513 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.968037267 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.22251524 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.2721498 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.966260798 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.14646778 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.975667265 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.172849414 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.114845825 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.218872835 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.997511879 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.066135746 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.137965241 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.992812653 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.152032424 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.183201208 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.969914897 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.985478652 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.181985797 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.831292071 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.989992507 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.981435265 seconds)
  done (took 178.277591742 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.142373376 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.983948496 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.024512268 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.090511914 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.682573059 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.649193994 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.967014574 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.964925306 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.96631407 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.972500112 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.969250998 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.033616647 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.767351434 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.979948229 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.96748735 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.96617471 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.76034928 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.969048642 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.968371141 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.966293652 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.965509988 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.02844744 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.340240765 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.091210248 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.96859999 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.978583424 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.090840174 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.976902192 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.968372186 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.091356676 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.970450112 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.043917223 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.092771203 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.978166267 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.048824812 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.975500054 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.434468607 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.969477654 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.967227165 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.968368687 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.026681922 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.967530157 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.037954939 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.056334899 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.967160726 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.980119529 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.161012099 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.660128614 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.969588903 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.967310512 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.966723179 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.967276209 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.968049642 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.686863719 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.969951069 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.992877107 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.499971678 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.969413116 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.971520348 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.970239688 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.967563864 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.968728475 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.974844058 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.006079207 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.678147423 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.547426466 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.357068742 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.701391525 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.970068262 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.2799878 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.026530035 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.970643483 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.046534655 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.968035032 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.967489363 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.967670097 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.967875371 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.065248906 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.063864022 seconds)
    (79/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.970202362 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.96855176 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.092185478 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.972056614 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.968434238 seconds)
    (84/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.968937567 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.178175104 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.773439629 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.971387683 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.983057903 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.027497614 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.969482023 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.970666258 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.976451687 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.114651551 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.973261644 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.969038477 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.969420158 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.007452692 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.972600501 seconds)
    (99/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.96891171 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.110543157 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.19640842 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.041834299 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.218836293 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.137210369 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.973124848 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.970045826 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.985211998 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.971328995 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.970008071 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.980787335 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.970707597 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.969975253 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.971665171 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.971340626 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.969869548 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.973667354 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.984629814 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.970732029 seconds)
  done (took 431.870267366 seconds)
done (took 825.198939685 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.677898379 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.737850063 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.601963292 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.629566032 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.600434426 seconds)
  done (took 15.150308783 seconds)
done (took 17.056403398 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.002640809 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.988154358 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.976922898 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.036130847 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.996955429 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.983352184 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.018444204 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.019582926 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.002126684 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.98304201 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.03212081 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.987514315 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.003507037 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.00665559 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.057627077 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.012209943 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.988324737 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.98087946 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.039616297 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.988667521 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.988387878 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.985725265 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.985557122 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.035383009 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.06474951 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.9956017 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.985200472 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.03073894 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.996881713 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.030873971 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.04445855 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.007702662 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.020445994 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.059429153 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.044815153 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.064182604 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.995289727 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.06048516 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.992108217 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.073674297 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.041444545 seconds)
  done (took 84.510860389 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.983547835 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.110902123 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.186519028 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.012715004 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.977074754 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.184742555 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.037884561 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.102603421 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.099371516 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.190171183 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.19975229 seconds)
  done (took 24.994446116 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.98217743 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.11129954 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.187172774 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.015584135 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.983650847 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.195116427 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.045292698 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.106691521 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.114162064 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.193153756 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.209325481 seconds)
  done (took 25.056434188 seconds)
done (took 136.468107548 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.356766603 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.003324641 seconds)
  done (took 6.266583292 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.977602143 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.993393924 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.126907175 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.978287207 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.977408474 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.97730274 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.977028942 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.976956098 seconds)
  done (took 17.891147806 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.977458826 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.977213191 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.977539113 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.977281925 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.977674076 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.978007897 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.977634235 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.977477383 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.977509079 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.977928385 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.97871656 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.978818848 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.978350949 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.978550975 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.978769308 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.978200853 seconds)
  done (took 33.555386248 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.979082351 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.97860019 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.965710385 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.978445533 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.979695012 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.979541368 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.98137652 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.949618249 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.978793814 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.979136668 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.979168916 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.978985608 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.979546141 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.979010458 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.97896736 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.979374441 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.979882216 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.953011806 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.975988216 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.97984805 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.979676143 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.955880648 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.977004481 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.972608473 seconds)
  done (took 49.307912503 seconds)
done (took 108.93851049 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.145099696 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.478532156 seconds)
  done (took 8.532745124 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.982780087 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.97995514 seconds)
  done (took 5.927723267 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.980309579 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.980320082 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.97991538 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.980687019 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.980381429 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.980984708 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.981034874 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.979800105 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.98077222 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.980443508 seconds)
  done (took 21.713605498 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.981109605 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.981243889 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.981117603 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.980759502 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.980685709 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.980913931 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.980986638 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.980503898 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.981381786 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.981328356 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.981323446 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.981737793 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.981651095 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.981520932 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.98186847 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.981800838 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.981464923 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.982347363 seconds)
  done (took 37.574535222 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.981906666 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.981779015 seconds)
  done (took 5.874860794 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.982120623 seconds)
    (2/7) benchmarking "second"...
    done (took 1.982315945 seconds)
    (3/7) benchmarking "month"...
    done (took 1.982047721 seconds)
    (4/7) benchmarking "year"...
    done (took 1.982352718 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.983033675 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.982083305 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.982286069 seconds)
  done (took 15.788305451 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.983714479 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.129930133 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.179024254 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.585642486 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.983309356 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.985348635 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.851419301 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.9849319 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.987068173 seconds)
  done (took 21.582181382 seconds)
done (took 118.907286518 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.793473233 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.981054812 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.239255833 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.04428964 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.998222282 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.321989585 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.00511735 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.711969786 seconds)
done (took 44.011032063 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.079455961 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.985329187 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.014019637 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.015160836 seconds)
  done (took 22.931852242 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.989611154 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.269516336 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.00862275 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.907765274 seconds)
  done (took 23.108711971 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.364298054 seconds)
    (2/2) benchmarking "read"...
    done (took 2.330943274 seconds)
  done (took 6.615855565 seconds)
done (took 61.659287095 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.988310735 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.989616765 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.98885888 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.989482501 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.990041321 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.989978942 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.990528719 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.990192096 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.989800333 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.989292176 seconds)
    (11/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.988742547 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.989914805 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.989532506 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.989464412 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.990079138 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.988976439 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.989175273 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.991704884 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.99079025 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.99066098 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.991686022 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.990764125 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.990991521 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.99104179 seconds)
  done (took 49.679493089 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.990209322 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.990959237 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.990234279 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.989105535 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.991967533 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.99088265 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.990979085 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.990506631 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.990983399 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.989961325 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.990835375 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.990358869 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.990686551 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.99112691 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.990970428 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.991459681 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.990902868 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.990619222 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.99150933 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.991906466 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.992543336 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.990821238 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.992451629 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.991034398 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.974290364 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.981267359 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.992419755 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.993106189 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.994227719 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.991645413 seconds)
  done (took 61.631616387 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.992162063 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.991768585 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.992378095 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.993753278 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.993100632 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.993444036 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.991934183 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.991943905 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.993198159 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.994463095 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.99310479 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.994081102 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.992260341 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.992891802 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.992552499 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.993127631 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.993358099 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.993363734 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.993350184 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.9942533 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.992380893 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.994468193 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.99271318 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.992627372 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.993924817 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.992768085 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.993559765 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.994233032 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.992623724 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.993919303 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.994850082 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.994344245 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.995362011 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.993310037 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.993948893 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.995144195 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.994828947 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.993861522 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.995555582 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.994796634 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.994996741 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.996242223 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.995791539 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.99443928 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.995160468 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.985188045 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.976030043 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.994264356 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.995284142 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.994802076 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.995887298 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.995345521 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.995254116 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.994463019 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.99377145 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.996884816 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.996693769 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.995971566 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.99625797 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.995354385 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.996444072 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.996888301 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.99567406 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.996251947 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.996504579 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.997102841 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.995447158 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.996618988 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.99682978 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.998698904 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.997691139 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.998049714 seconds)
  done (took 145.504787542 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.996234684 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.99611264 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.997135368 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.995896702 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.998630291 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.996786759 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.997563833 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99825966 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.998680791 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.997111926 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.995799095 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.997321368 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.997273034 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.997308699 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.996771004 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.99526401 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.996847382 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.998000287 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.997617883 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.996397107 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.99756104 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.998101757 seconds)
  done (took 45.862030433 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.997529795 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.997994118 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.997548768 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.998970843 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.997450841 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.998875955 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.999510142 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.997421939 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.999198704 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.999299225 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.998739819 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.998215936 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.997865303 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.999044566 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.998931299 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.998048054 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.998901217 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.998469136 seconds)
  done (took 37.900343458 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.998603399 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.99848751 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.998629414 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.998856097 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.999050378 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.998616189 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.999329385 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.999879749 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.999728632 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.999603871 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.000497124 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.000068428 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.999314262 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.000362926 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.998588818 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.00111779 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.999269755 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.000154089 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.999337821 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.999356659 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.000554736 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.999637222 seconds)
  done (took 45.917349668 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.999010881 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.000754801 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.001584544 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.99913289 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.001022776 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.001973134 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.001028465 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.000425651 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.001430676 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.99911419 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.000529985 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.999565238 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.001890783 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.999344003 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.001301734 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.000877566 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.001880769 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.999909999 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.971360768 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.002117413 seconds)
  done (took 41.913929605 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.002247917 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.00200398 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.001169361 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.0014091 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.00096535 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.002456435 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.002556201 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.002881579 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.00179026 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.001536586 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.000541308 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.002445273 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.002193582 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.001506135 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.002059705 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.002981388 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.003155537 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.002371924 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.004245636 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.002571662 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.002883269 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.002908611 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.003479305 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.003786179 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.002545292 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.002838658 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.003879435 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.003392106 seconds)
  done (took 57.999933495 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.001386264 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.001311796 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.002211444 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.002946014 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.003922025 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.002007279 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.003331144 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.002400486 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.003124179 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.002121419 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.003817346 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.002358819 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.002588757 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.002486366 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.003081715 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.00322836 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.002455727 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.003603839 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.004594893 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.992733168 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.002693479 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.002355972 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.003512416 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.003418523 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.003262908 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.003687849 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.005335268 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.004357841 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.003325741 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.004197839 seconds)
  done (took 62.013731622 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.022360751 seconds)
    (2/2) benchmarking "in"...
    done (took 2.024901267 seconds)
  done (took 5.979305677 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.003149535 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.004044541 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.004028381 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.005242129 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.004097112 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.004766732 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.004258296 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.005576758 seconds)
  done (took 17.968297062 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.006718883 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.009221722 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.005350145 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.006531691 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.005649927 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.01300735 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.00692632 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.0079298 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.008080582 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.00713036 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.010426938 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.010749055 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.014707244 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.010715166 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.006159223 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.00742137 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.006553028 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.009027955 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.008546827 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.005473963 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.010771701 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.007271807 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.007104528 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.005872588 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.007282571 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.007805664 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.007728352 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.006543353 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.999400494 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.007029631 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.01540486 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.00733834 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.005119683 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.982910953 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.007057263 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.007999235 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.014443536 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.004746158 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.000768038 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.007464953 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.010299979 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.010083807 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.01191963 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.015680421 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.009113063 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.003411221 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.996686943 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.983349714 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.008051538 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.012413143 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.017786422 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.009443055 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.0082843 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.008727836 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.011374514 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.010347816 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.00903831 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.012239091 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.015795233 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.01475052 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.013901353 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.029312084 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.019110345 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.009134509 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.00949657 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.018544476 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.032715252 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.01158432 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.012216825 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.010361771 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.018218113 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.009888351 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.011567284 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.01105779 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.024450232 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.018913312 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.010794326 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.999760953 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.01029538 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.010460716 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.013295571 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.011564257 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.011149435 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.010093832 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.020848189 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.02411181 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.011235071 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.003363951 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.012988822 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.013414702 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.015818862 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.013843187 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.011124693 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.010756512 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.013675972 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.013236642 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.011028211 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.011553703 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.011453359 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.019597842 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.010577911 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.011394692 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.014908675 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.018483301 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.993992908 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.000702029 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.014244555 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.011527123 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.019019371 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.012094555 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.012484734 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.013272286 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.013469438 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.016819658 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.012437018 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.01752453 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.021312562 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.021781226 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.013911225 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.017201276 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.016849806 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.015872637 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.024353994 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.038426085 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.013602824 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.017065513 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.01928063 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.025790994 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.017226413 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.013761158 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.015842424 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.013198021 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.013637734 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.016046934 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.011772125 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.014887281 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.013595716 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.003654122 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.013697077 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.013859409 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.017062016 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.015860518 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.016888198 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.014440406 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.019250142 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.014395071 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.0185925 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.021392919 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.013344465 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.015870606 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.012951469 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.017730313 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.01711042 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.017399923 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.015882786 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.016236361 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.014260993 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.016093675 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.017541936 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.003054907 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.016010308 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.016616527 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.019920398 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.015595812 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.015485431 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.015590187 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.016464462 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.016356509 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.017750501 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.017328859 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.018882385 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.015216285 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.020660947 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.014564688 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.0156561 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.017476048 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.016631321 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.015941119 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.020347398 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.027330666 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.020784184 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.027331181 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.016359847 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.023176332 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.014401565 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.018341268 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.018494807 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.017165793 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.016138156 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.016166919 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.01623527 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.022078219 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.03771437 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.027375126 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.01979829 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.01839462 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.023536505 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.021890662 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.023675048 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.018298859 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.018178735 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.020424629 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.017429229 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.017990747 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.01753786 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.020909435 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.01782965 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.016007421 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.021873591 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.017559287 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.01653425 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.019302732 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.018414617 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.020282284 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.018356909 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.017195719 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.018226403 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.020638237 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.026421201 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.019993369 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.018732549 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.018133942 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.021918644 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.01867968 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.017491664 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.020062434 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.022881047 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.018977738 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.021544222 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.02835643 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.019513839 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.018830073 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.019093668 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.018916355 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.020211986 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.018006022 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.023170329 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.027203467 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.022756199 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.01918608 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.025824786 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.02002809 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.022671452 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.020467362 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.022405532 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.020189828 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.022222466 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.020180176 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.019020397 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.026684416 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.020312062 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.021485092 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.019282825 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.023873676 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.021457821 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.024300174 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.021129773 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.025214129 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.029329071 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.027218372 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.021507278 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.023047117 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.022674699 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.021568926 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.024993914 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.022863698 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.033093874 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.03085557 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.020521564 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.020985929 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.022023521 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.025007448 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.021177656 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.022991667 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.028925913 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.022347202 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.024151356 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.026109737 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.024599965 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.022100892 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.027228397 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.022436754 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.023656237 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.023819022 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.02376851 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.023445254 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.022233257 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.025634933 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.023233395 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.02547814 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.026981896 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.022010316 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.023879357 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.023473463 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.03062091 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.021782186 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.024202082 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.030422335 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.023528043 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.022200571 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.024285509 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.024112384 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.023874472 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.025228641 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.023242935 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.025328917 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.021977253 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.026531973 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.034734649 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.02821948 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.031405856 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.026104657 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.03472683 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.024052689 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.023133768 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.023718724 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.029280437 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.031779635 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.022787516 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.022950799 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.032348918 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.023726282 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.024584071 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.029382787 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.023873568 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.023396472 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.024422727 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.0257667 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.031155539 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.02801549 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.023545783 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.025419336 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.023811385 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.023908444 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.028077395 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.027282239 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.025980769 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.023999774 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.024092814 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.025420415 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.025390826 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.024476973 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.024706087 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.025399088 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.024523692 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.03272843 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.025120296 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.025174708 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.029565692 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.025561534 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.033650312 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.028275996 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.026373847 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.027253957 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.027375567 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.028347673 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.026185313 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.027346876 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.027028877 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.026203687 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.027718372 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.03860213 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.03393094 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.030517031 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.028313366 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.027263798 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.028884853 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.026632407 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.036536679 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.026808289 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.029410615 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.030704379 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.034610213 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.031845493 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.033802862 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.03216873 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.035884172 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.030838016 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.026902856 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.03333694 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.040709122 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.028471972 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.029209283 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.026952996 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.033531121 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.031538002 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.028238522 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.029635206 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.032977306 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.029947176 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.040361079 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.030441524 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.030565204 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.030429393 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.027489092 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.029181327 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.028959741 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.030585463 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.031803021 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.029605127 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.028906568 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.033666178 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.035771153 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.028125551 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.033579349 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.041387483 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.02983626 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.029991775 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.032746716 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.029040818 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.032149221 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.030940796 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.030971263 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.032019512 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.030945636 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.031618909 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.035489991 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.03997417 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.03160126 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.030589069 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.031197792 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.034183927 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.029889453 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.031163015 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.032326942 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.039422397 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.036837215 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.044558858 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.040775589 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.03128578 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.031773242 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.04032608 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.039591974 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.031194102 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.031539019 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.032081865 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.035670881 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.032889721 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.031394848 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.031346634 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.032858557 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.038005567 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.030783213 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.032973023 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.032239941 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.031835742 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.035830815 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.035716242 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.037922335 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.032262008 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.032770592 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.031561965 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.0345362 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.034647593 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.035421455 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.033775178 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.033408802 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.035984883 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.035379171 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.036213798 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.03241724 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.03354524 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.034599137 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.033619104 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.033628473 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.033138579 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.033218465 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.034335173 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.03849873 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.04128803 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.033254053 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.034624891 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.033817794 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.038070861 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.032436237 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.035038169 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.033672042 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.032999803 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.040882063 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.033944566 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.032744157 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.035183736 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.033898451 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.039195593 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.035290527 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.038001834 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.035006861 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.035544948 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.032974105 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.039185814 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.043410599 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.038443592 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.038690293 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.04145987 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.04007531 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.03656385 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.03400639 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.033597983 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.033455024 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.036538833 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.039464234 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.03669696 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.038481923 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.035102254 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.037652609 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.036211976 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.038412508 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.034521327 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.035248568 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.0398093 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.045912763 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.044222435 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.0354515 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.038433716 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.03702801 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.039086096 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.049240737 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.037046961 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.035222863 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.035700259 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.038767941 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.038331078 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.045142831 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.045144733 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.040208169 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.038018786 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.042147109 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.053138644 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.040393063 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.046550847 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.068491874 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.037182686 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.037599084 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.037712265 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.037742135 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.03684708 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.037584562 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.035335226 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.042581932 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.038379419 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.035874366 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.045814995 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.03707237 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.037287978 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.037223005 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.038259985 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.044564931 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.036952602 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.044919456 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.037337357 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.037007241 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.03843267 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.039223436 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.037096041 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.03790003 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.038094558 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.04137888 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.036885323 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.0389754 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.047154981 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.037532473 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.040030937 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.052072524 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.049741521 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.038241856 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.037646412 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.039846993 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.044373882 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.040721191 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.039145635 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.042971736 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.047132166 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.042828877 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.047548431 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.042131998 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.037360128 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.015020823 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.038316804 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.039541861 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.052346531 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.052245768 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.040960314 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.041886967 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.047926721 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.040695343 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.047932353 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.046748588 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.027820373 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.02774705 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.034999468 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.038723244 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.039650329 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.0396084 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.04540209 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.048975218 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.040433939 seconds)
  done (took 1209.042555702 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.041271197 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.041134963 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.039345121 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.040670606 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.041129961 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.039109954 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.03995762 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.040357873 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.040333931 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.040059513 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.039381436 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.040969047 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.040198397 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.040660392 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.041099681 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.040093654 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.08617692 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.187219194 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.185803544 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.18775685 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.186333408 seconds)
  done (took 45.447267215 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.185174871 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.185207015 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.185185484 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.187776572 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.183035809 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.183505771 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.183926341 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.183965732 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.182994989 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.183880578 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.183561988 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.183401184 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.184071057 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.184942218 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.157338066 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.182613505 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.183673678 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.185124045 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.184539688 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.171461078 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.182928043 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.173299716 seconds)
  done (took 50.113009822 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.166117428 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.169207457 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.185530219 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.184389739 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.18176066 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.183828672 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.152087616 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.184796869 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.182684759 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.184759973 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.19041702 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.187272145 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.182770763 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.18472308 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.175748443 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.177075507 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.322938238 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.178381542 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.176624589 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.176462052 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.176803465 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.184483043 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.177570033 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.175913566 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.175677908 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.176765007 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.17767077 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.161915291 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.174472743 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.175042766 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.178786257 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.17592815 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.177018668 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.178344951 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.175202133 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.176094005 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.181718618 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.175533754 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.173945647 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.159912673 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.187704459 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.199137692 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.17351211 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.162085639 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.166826189 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.165010127 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.173681068 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.179960761 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.183076431 seconds)
  done (took 108.918333756 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.174833218 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.162800697 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.174847345 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.168859452 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.156520909 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.164872777 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.158100154 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.156282977 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.165376089 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.176516542 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.173749678 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.174525283 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.174049505 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.177347169 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.174684995 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.174539013 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.175826867 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.175254557 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.172062315 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.170207463 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.171577651 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.167477114 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.168615079 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.169800145 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.169097984 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.169455582 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.170160749 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.170607152 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.169445325 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.170614286 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.169793542 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.170056248 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.170458417 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.647462002 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.170534877 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.171158069 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.171236253 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.168957778 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.170617164 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.17038137 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.170388588 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.171008931 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.170604766 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.169997226 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.17168176 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.169802911 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.170088771 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.171139028 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.170725679 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.171463852 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.171947821 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.171215208 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.172131818 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.171366384 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.172624243 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.171597528 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.170820289 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.171024644 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.17049395 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.17276602 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.171547361 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.172737389 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.172388046 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.170948698 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.173229086 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.17182964 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.172409211 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.172750117 seconds)
  done (took 150.178754497 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.171866697 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.173725517 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.171149153 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.173575595 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.175025319 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.172013068 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.17329803 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.17279343 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.15338273 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.173335035 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.17344686 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.171593064 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.173379509 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.175315712 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.1722542 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.171905906 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.172365671 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.173983227 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.174365212 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.172646779 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.172528847 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.17268216 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.174570122 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.168866544 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.172180577 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.172443015 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.172483101 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.163081867 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.173038678 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.172109392 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.171774047 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.172153794 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.17194206 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.170279604 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.172431491 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.172027431 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.171804709 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.169510006 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.170612293 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.17232239 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.172145925 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.171833333 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.167461678 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.166581511 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.168296909 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.169766659 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.168573551 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.167551141 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.167949466 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.169232308 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.170355093 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.167992114 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.166925776 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.1669013 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.165363564 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.165792908 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.166630648 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.167032653 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.166561368 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.166806308 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.164666627 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.167092791 seconds)
  done (took 136.661825524 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.167537292 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.167202295 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.168047455 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.164592204 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.163036174 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.166541029 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.170438857 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.166210831 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.169282773 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.167888048 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.170029916 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.164224477 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.168399201 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.167417745 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.166675721 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.167081578 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.16400236 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.165210451 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.167176948 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.166756274 seconds)
  done (took 45.426034486 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.167949988 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.165490086 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.165595603 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.168303609 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.164629694 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.166091316 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.165917133 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.164712844 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.1624091 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.161551092 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.164948523 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.164105945 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.164984909 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.166172134 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.161536314 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.165949931 seconds)
  done (took 36.725003103 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.165045413 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.163327792 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.164900912 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.163943699 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.163925427 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.164460705 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.166399042 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.164750386 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.164273985 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.164121109 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.1648559 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.165031197 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.168353913 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.167815725 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.164037604 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.166297975 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.166593072 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.168369268 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.165685621 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.171175825 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.166898185 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.166924106 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.168549478 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.164706593 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.166665737 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.167100398 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.166566632 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.167009327 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.164453411 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.165184527 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.168733839 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.167218528 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.168680914 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.165451782 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.167415687 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.169447451 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.168606069 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.168133321 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.1668801 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.164877644 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.168150947 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.164015634 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.165176614 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.169196771 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.167836425 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.166385093 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.167458763 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.168137817 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.168320909 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.167349014 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.167112223 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.169167302 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.16937459 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.169553988 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.166023462 seconds)
  done (took 121.251991438 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.165154651 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.170399843 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.167789233 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.168139304 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.168727252 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.170776556 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.167321804 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.167936402 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.166713878 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.171120101 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.167693581 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.169403504 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.171615131 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.170988868 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.172958148 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.169385021 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.171924547 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.170724825 seconds)
  done (took 41.134881012 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.170777129 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.15676848 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.17126661 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.16994283 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.171543086 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.166537211 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.169465598 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.169369095 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.1728339 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.172469667 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.170300719 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.170818605 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.174548859 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.171008997 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.171854241 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.172372856 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.172591059 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.170014155 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.173432686 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.170275012 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.167293759 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.17075518 seconds)
  done (took 49.836174807 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.173270502 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.171701219 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.184644875 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.195892619 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.193266436 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.210262004 seconds)
  done (took 15.21809406 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.170056835 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.17167491 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.173163044 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.171881967 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.172344843 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.175228389 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.174683575 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.174655898 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174564111 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.173649001 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.172957649 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.172386319 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.171474944 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173047961 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.173652945 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.173199355 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.174066873 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.172112595 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.173306613 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.173699412 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.171386861 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.173501201 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.173613053 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.175938724 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.17377352 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.173642735 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.17329758 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.173684092 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.171785694 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.175164692 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.174104749 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.174922552 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.174948206 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.171979992 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.172614405 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.172706457 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.176450224 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.17454022 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.177723142 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.172279695 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.173068957 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.174354726 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.173690579 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.175095202 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.17561917 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.174651812 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.175558039 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.175143034 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.174388713 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.173739465 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.174094962 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.17644993 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.177324274 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.177013351 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.173204675 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.176000833 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.17552953 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.17461665 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.177190756 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.175986317 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.176984801 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.173237111 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.178054217 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.177229224 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174068667 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.175911814 seconds)
  done (took 145.592105337 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.178169124 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.174209454 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.175718394 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.17390042 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.172680426 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.162682033 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.176884409 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.176022978 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.176318884 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.175368737 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.176186605 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.177458102 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.175825993 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.17848154 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.175178723 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.179273047 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.176560223 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.174305806 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.179340947 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.177676839 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.16233262 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.179540866 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.16626374 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.176660247 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.179678997 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.178694315 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.175992921 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.178727343 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.176631808 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.176518626 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.180327454 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.178783159 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.179286447 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.177732315 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.179079206 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.180202407 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.180080581 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.177779143 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.176237217 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.174878081 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.177164992 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.178695773 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.181314105 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.178642307 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.178666573 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.179907188 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.178421219 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.179629948 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.180055607 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.18049764 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.177579566 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.180294522 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.181501137 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.179006579 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.18194087 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.176409888 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.179782426 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.18147548 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.180293956 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.180829269 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.178649174 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.181114523 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.180649617 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.18188006 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.179506375 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.177736308 seconds)
  done (took 145.814759559 seconds)
done (took 2875.662528847 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.196720962 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.278156015 seconds)
  done (took 16.571909537 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.344972577 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.225323174 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.369255809 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.298372001 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.177743589 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.183963328 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.176748627 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.176903175 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.270660686 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.177074555 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.185930507 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.176084603 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.175883751 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.176174055 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.177254998 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.176228481 seconds)
  done (took 57.7494351 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.178060936 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.18075638 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.17999938 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.178007065 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.188586929 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.338298144 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.188537353 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.181120798 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.192431067 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.21466441 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.194742287 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.184803002 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.182339626 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.169297463 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.27414236 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.232564871 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.236270704 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.252026878 seconds)
  done (took 41.842369194 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.256139943 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.187247627 seconds)
  done (took 11.516286247 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.205162976 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.203375433 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.204529533 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.178322842 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.199163823 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.197042065 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.183925938 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.212541744 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.190174055 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.188681928 seconds)
  done (took 74.062745874 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.176172214 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.175395846 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.430642321 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.184677632 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.181125074 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.197810231 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.175781252 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.205413761 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.1741305 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.172338248 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.187572859 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.423422603 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.184194068 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.175729886 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.521832412 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.184991476 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.173282064 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.197708832 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.20362732 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.179247152 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.179981445 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.177258026 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.335223727 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.902910444 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.172965898 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.176823129 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.179433292 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.169710258 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.171873643 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.175006359 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.177938223 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.173395641 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.178260301 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.180501016 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.180148335 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.179206334 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.668121576 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.193760473 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.183362555 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.254048335 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.220129237 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.179496476 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.972536795 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.174757191 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.172837769 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.180258867 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.861526247 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.269415582 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.177373747 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.360287447 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.527321166 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.189711881 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.354855434 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.328823173 seconds)
  done (took 149.578512057 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.174039675 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.418751652 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.333915997 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.18145009 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.43750455 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.390955661 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.183145968 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.226263598 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.183025394 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.383508795 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.431255838 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.284526802 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.187653948 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.182395974 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.182938562 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.181119843 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.32746041 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.250767058 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.184617326 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.180521015 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.205941044 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.384510298 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.304472707 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.184259688 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.207869477 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.3915192 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.305015622 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.284995703 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.948566939 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.182531014 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.245108759 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.186803415 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.18665725 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.182387011 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.336346296 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.27957609 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.266803468 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.18851141 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.1832657 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.18354287 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.858500246 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.385748612 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.279806009 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.30556757 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.428073722 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.396625929 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.794701843 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.183761161 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.80478526 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.347524684 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.387936383 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.391319364 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.301690189 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.187830334 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.745757405 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.182351235 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.183269905 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.404167719 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.401839733 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.283680357 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.185201055 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.184559874 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.181942767 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.420655935 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.188268502 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.273715282 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.186635286 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.18453296 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.277404632 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.284746912 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.410022882 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.405590522 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.21541812 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.525901049 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.671098548 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.387544048 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.248255426 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.411005768 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.187965728 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.183589899 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.266205502 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.02589631 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.436286288 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.429157833 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.383081683 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.215683347 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.835606155 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.1855729 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.371039551 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.374706231 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.417371426 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.433233069 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.423395543 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.538655753 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.186462706 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.185464787 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.505977533 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.302795576 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.13507219 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.537674547 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.414435816 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.667288331 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.211396119 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.532538328 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.314576577 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.189534211 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.834875083 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.175741378 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.393107167 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.223490889 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.186173764 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.18834162 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.376227742 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.093732948 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.187534582 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.882931781 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.246780917 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.191955261 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.391053456 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.189206779 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.431363321 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.187418781 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.419857482 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.811158286 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.218342694 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.411543801 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.431542546 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.821953796 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.430078701 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.430452803 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.301386398 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.412869945 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.915685588 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.186815993 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.44583635 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.192629075 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.187898043 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.35384396 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.191235955 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.331062491 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.191855071 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.453725131 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.206872087 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.419548769 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.194793219 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.42749603 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.219152957 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.237034791 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.192897602 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.31740343 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.190828112 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.027951718 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.347261075 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.191405596 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.188855741 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.957192197 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.189663915 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.311216606 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.415032569 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.20874919 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.259700698 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.752759357 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.183155916 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.27698105 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.212042302 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.467881612 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.189062638 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.438504295 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.160369324 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.671563664 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.188930488 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.424837149 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.374547222 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.192321143 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.190727311 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.039565881 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.164065486 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.190596945 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.333107095 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.641962418 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.099751431 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.38966009 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.192994645 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.318247537 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.195699672 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.267553882 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.534633091 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.188832324 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.190589206 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.191368969 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.191594691 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.190568307 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.453281803 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.218772614 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.625249991 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.327844192 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.446628719 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.495192079 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.387680005 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.230827659 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.194029301 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.41395484 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.192462197 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.253309391 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.195761026 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.21143303 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.419699337 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.195444727 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.393492436 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.426645418 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.252240887 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.237687294 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.194553961 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.191709563 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.105085974 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.337634724 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.28035507 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.193807163 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.194241473 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.305213199 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.315190715 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.375389339 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.013394514 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.323181453 seconds)
  done (took 972.102792634 seconds)
done (took 1325.528310801 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.186358646 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.191268251 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.19737387 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.186146483 seconds)
  done (took 30.863558533 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.186543347 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.185521541 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.186558411 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.188639383 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.187164083 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.185552509 seconds)
  done (took 15.226548669 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.185163157 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.189226254 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.187994366 seconds)
  done (took 23.66684893 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.617495152 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.600154057 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.259530676 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.331068417 seconds)
  done (took 11.9152564 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.191537979 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.188405352 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.188337981 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.18762 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.18713549 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.18975196 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.188652722 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.187647596 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.189518172 seconds)
  done (took 21.814039741 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.366688448 seconds)
done (took 109.960290848 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.197944564 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.390046095 seconds)
    (3/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.594617193 seconds)
    (4/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.576647509 seconds)
    (5/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.45288112 seconds)
    (6/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.507321884 seconds)
    (7/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.906139757 seconds)
    (8/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.544852613 seconds)
    (9/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.408402723 seconds)
    (10/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.725728027 seconds)
    (11/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.375888398 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.324045675 seconds)
    (13/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.046625583 seconds)
    (14/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.356095313 seconds)
    (15/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.907009434 seconds)
    (16/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.969979188 seconds)
    (17/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.506395187 seconds)
    (18/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.352034665 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.112896115 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.312663075 seconds)
    (21/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.191762091 seconds)
    (22/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.195114267 seconds)
    (23/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.209620544 seconds)
    (24/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.491236593 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.205338257 seconds)
    (26/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.595548582 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.205535709 seconds)
    (28/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.455562076 seconds)
    (29/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.2942316 seconds)
    (30/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.304587315 seconds)
    (31/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.192221258 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.432175042 seconds)
    (33/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.558223899 seconds)
    (34/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.884194478 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.203361064 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.287891773 seconds)
    (37/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.650616018 seconds)
    (38/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.26781752 seconds)
    (39/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.255445417 seconds)
    (40/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.397236579 seconds)
    (41/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.272788934 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.277017042 seconds)
    (43/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.426828599 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.929631614 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.333223798 seconds)
    (46/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.047697705 seconds)
    (47/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.508191408 seconds)
    (48/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.042272647 seconds)
    (49/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.62099295 seconds)
    (50/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.540438076 seconds)
    (51/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.279999635 seconds)
    (52/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.990901056 seconds)
    (53/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.281983346 seconds)
    (54/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.204802618 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.27187915 seconds)
    (56/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.202027093 seconds)
    (57/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.269707291 seconds)
    (58/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.193592901 seconds)
    (59/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.445701713 seconds)
    (60/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.388450394 seconds)
    (61/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.21202254 seconds)
    (62/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.948091038 seconds)
    (63/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.433127818 seconds)
    (64/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.529800182 seconds)
    (65/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.276708531 seconds)
    (66/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.190564952 seconds)
    (67/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.192431653 seconds)
    (68/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.645625821 seconds)
    (69/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.541369558 seconds)
    (70/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.324287774 seconds)
    (71/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.206124829 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.497207194 seconds)
    (73/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.962092597 seconds)
    (74/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.197689466 seconds)
    (75/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.902360893 seconds)
    (76/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.407442444 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.22500723 seconds)
    (78/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.204316618 seconds)
    (79/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.573997536 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.202861728 seconds)
    (81/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.413989312 seconds)
    (82/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.611040156 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.207765683 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.203938321 seconds)
    (85/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.417028937 seconds)
    (86/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.210413251 seconds)
    (87/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.964555214 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.193505132 seconds)
    (89/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.165283946 seconds)
    (90/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.201487007 seconds)
    (91/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.284820752 seconds)
    (92/341) benchmarking ("sort", Float32, false)...
    done (took 5.879449547 seconds)
    (93/341) benchmarking ("sort", BigInt, false)...
    done (took 7.196502233 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.974070474 seconds)
    (95/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.643327401 seconds)
    (96/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.196638735 seconds)
    (97/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.611219834 seconds)
    (98/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.12295644 seconds)
    (99/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.376518238 seconds)
    (100/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.197358353 seconds)
    (101/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.374652942 seconds)
    (102/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.337217315 seconds)
    (103/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.432498521 seconds)
    (104/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.305330428 seconds)
    (105/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.45684335 seconds)
    (106/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.453324444 seconds)
    (107/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.280377622 seconds)
    (108/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.299139231 seconds)
    (109/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.207374334 seconds)
    (110/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.687870597 seconds)
    (111/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.194540707 seconds)
    (112/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.643679912 seconds)
    (113/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.253504775 seconds)
    (114/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.837254895 seconds)
    (115/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.195098851 seconds)
    (116/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.276156234 seconds)
    (117/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.887457008 seconds)
    (118/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.311059436 seconds)
    (119/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.213678127 seconds)
    (120/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.27418575 seconds)
    (121/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.432317367 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.50395391 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.597965356 seconds)
    (124/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.406307901 seconds)
    (125/341) benchmarking ("sort", Float64, false)...
    done (took 5.89036243 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.328951233 seconds)
    (127/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.332290476 seconds)
    (128/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.630744475 seconds)
    (129/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.208380607 seconds)
    (130/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.174516147 seconds)
    (131/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.415714404 seconds)
    (132/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.50642514 seconds)
    (133/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.471782155 seconds)
    (134/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.191003162 seconds)
    (135/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.193119793 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 4.707166914 seconds)
    (137/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.203255969 seconds)
    (138/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.615820458 seconds)
    (139/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.199272767 seconds)
    (140/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.244170717 seconds)
    (141/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 4.053597835 seconds)
    (142/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.316247915 seconds)
    (143/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.257465701 seconds)
    (144/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.276765414 seconds)
    (145/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.078909307 seconds)
    (146/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.995100687 seconds)
    (147/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.257364007 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.224079104 seconds)
    (149/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.506196055 seconds)
    (150/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.807507989 seconds)
    (151/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.426403623 seconds)
    (152/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.235620924 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.285870963 seconds)
    (154/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.287940199 seconds)
    (155/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.642915332 seconds)
    (156/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.117466604 seconds)
    (157/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.455867233 seconds)
    (158/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.18760633 seconds)
    (159/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.069892587 seconds)
    (160/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.406258378 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.592188107 seconds)
    (162/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.496015524 seconds)
    (163/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.202535636 seconds)
    (164/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.35106558 seconds)
    (165/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.319929584 seconds)
    (166/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.449253704 seconds)
    (167/341) benchmarking ("sort", Bool, false)...
    done (took 2.41608043 seconds)
    (168/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.300172466 seconds)
    (169/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.093769966 seconds)
    (170/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.499443508 seconds)
    (171/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.286626432 seconds)
    (172/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.518329461 seconds)
    (173/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.280207157 seconds)
    (174/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.533519436 seconds)
    (175/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.224513521 seconds)
    (176/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.213528896 seconds)
    (177/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.215864598 seconds)
    (178/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.578854721 seconds)
    (179/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.508534372 seconds)
    (180/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.534503266 seconds)
    (181/341) benchmarking ("sort", Int64, false)...
    done (took 5.875661602 seconds)
    (182/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.406376661 seconds)
    (183/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.219129963 seconds)
    (184/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.198828579 seconds)
    (185/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 4.286540242 seconds)
    (186/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.208799856 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.597041901 seconds)
    (188/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.064436673 seconds)
    (189/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.311021268 seconds)
    (190/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.097384657 seconds)
    (191/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.512054988 seconds)
    (192/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.192884331 seconds)
    (193/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.265437269 seconds)
    (194/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.803035561 seconds)
    (195/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.424501725 seconds)
    (196/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.281292808 seconds)
    (197/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.206211073 seconds)
    (198/341) benchmarking ("collect", "all", Bool, true)...
    done (took 3.958188436 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.54327092 seconds)
    (200/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.967951767 seconds)
    (201/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.219701433 seconds)
    (202/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.229032808 seconds)
    (203/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.399783662 seconds)
    (204/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.604893654 seconds)
    (205/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.347497175 seconds)
    (206/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.412889671 seconds)
    (207/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.458875152 seconds)
    (208/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.306774999 seconds)
    (209/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.208408423 seconds)
    (210/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.414516039 seconds)
    (211/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.351264012 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.323350561 seconds)
    (213/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.009481193 seconds)
    (214/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.233772021 seconds)
    (215/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.283009494 seconds)
    (216/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.315241677 seconds)
    (217/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.439366163 seconds)
    (218/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.216901813 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.337378479 seconds)
    (220/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.203826016 seconds)
    (221/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 4.038661199 seconds)
    (222/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.019583895 seconds)
    (223/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.768103326 seconds)
    (224/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.411912398 seconds)
    (225/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.327426101 seconds)
    (226/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.525946248 seconds)
    (227/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.347987517 seconds)
    (228/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.206474971 seconds)
    (229/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.566505829 seconds)
    (230/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.20617234 seconds)
    (231/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 4.376801019 seconds)
    (232/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.156334934 seconds)
    (233/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.701424796 seconds)
    (234/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.333727696 seconds)
    (235/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.225059785 seconds)
    (236/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.213378757 seconds)
    (237/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.292836595 seconds)
    (238/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.483633345 seconds)
    (239/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.220718421 seconds)
    (240/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.199632173 seconds)
    (241/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.558865605 seconds)
    (242/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.650999859 seconds)
    (243/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.418769952 seconds)
    (244/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.459287894 seconds)
    (245/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.195620748 seconds)
    (246/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.37999281 seconds)
    (247/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.361151372 seconds)
    (248/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.314463506 seconds)
    (249/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.464736468 seconds)
    (250/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.223324852 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.601004148 seconds)
    (252/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.207294481 seconds)
    (253/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.195054554 seconds)
    (254/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.636825604 seconds)
    (255/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.713755086 seconds)
    (256/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.538321617 seconds)
    (257/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.49942185 seconds)
    (258/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.555842313 seconds)
    (259/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.276152757 seconds)
    (260/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.618596388 seconds)
    (261/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.516342664 seconds)
    (262/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.637004193 seconds)
    (263/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.878286385 seconds)
    (264/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.500580458 seconds)
    (265/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.348156799 seconds)
    (266/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.219045947 seconds)
    (267/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.4313332 seconds)
    (268/341) benchmarking ("sort", Int8, false)...
    done (took 5.25394701 seconds)
    (269/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.226011575 seconds)
    (270/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.335157413 seconds)
    (271/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.221411391 seconds)
    (272/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.308530381 seconds)
    (273/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.209705783 seconds)
    (274/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.310832082 seconds)
    (275/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.289690396 seconds)
    (276/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.223802607 seconds)
    (277/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.29406949 seconds)
    (278/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.583808443 seconds)
    (279/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.205835283 seconds)
    (280/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.389798645 seconds)
    (281/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.537466738 seconds)
    (282/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.604289176 seconds)
    (283/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.285648995 seconds)
    (284/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.983616241 seconds)
    (285/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.217492995 seconds)
    (286/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.37631708 seconds)
    (287/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.542921471 seconds)
    (288/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.39182559 seconds)
    (289/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.44882581 seconds)
    (290/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.635024906 seconds)
    (291/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.403691727 seconds)
    (292/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.524928722 seconds)
    (293/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.304356009 seconds)
    (294/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.350132502 seconds)
    (295/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.213209365 seconds)
    (296/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.268471936 seconds)
    (297/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.220153137 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.483443567 seconds)
    (299/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.210259295 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.150527905 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.506988079 seconds)
    (302/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.34151594 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.290625809 seconds)
    (304/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.389370746 seconds)
    (305/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.901287727 seconds)
    (306/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.219765421 seconds)
    (307/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 4.07486017 seconds)
    (308/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.346652495 seconds)
    (309/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.221662582 seconds)
    (310/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.208319784 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.171740062 seconds)
    (312/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.435202999 seconds)
    (313/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.413507514 seconds)
    (314/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.215479371 seconds)
    (315/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.42638641 seconds)
    (316/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.497790871 seconds)
    (317/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.222035521 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.11080852 seconds)
    (319/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.351160634 seconds)
    (320/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.219243924 seconds)
    (321/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.347243445 seconds)
    (322/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.215181741 seconds)
    (323/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.554957443 seconds)
    (324/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.412274498 seconds)
    (325/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.220727195 seconds)
    (326/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.477879718 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.304716096 seconds)
    (328/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.766133271 seconds)
    (329/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.356655405 seconds)
    (330/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.069965711 seconds)
    (331/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.218605598 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.324241244 seconds)
    (333/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.21126589 seconds)
    (334/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.279023405 seconds)
    (335/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.364972377 seconds)
    (336/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.480903032 seconds)
    (337/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.35960689 seconds)
    (338/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.303026005 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.343413115 seconds)
    (340/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.217130948 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.445253712 seconds)
  done (took 1209.703898243 seconds)
done (took 1211.913898848 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.237665126 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.210933889 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.71824822 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.221307465 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.210635668 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.215806708 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.728517106 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.240173301 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.229624904 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.728647964 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.223268739 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.212938002 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.227604719 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.245730578 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.222972736 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.224724993 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.219367237 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.240143968 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.248361058 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.219094954 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.264438888 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.21960609 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.212941912 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.261662362 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.211942997 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.228175458 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.239879478 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.263263029 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.261582246 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.218311779 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.220095496 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.574691272 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.26758046 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.219304722 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.223053218 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.229998893 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.219895232 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.230262675 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.237548912 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.228674013 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.212068372 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.228561915 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.217509349 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.215174487 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.211821482 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.213807563 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.213613511 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.339531919 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.226286848 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.560079621 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.282029849 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.236760307 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.26387445 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.217607134 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.204088961 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.21776524 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.265448467 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.21842707 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.218624322 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.560927147 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.309040258 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.228990677 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.560585643 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.278431372 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.223800975 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.221336138 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.210644281 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.237210369 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.575470798 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.770807424 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.245306607 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.234594405 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.217077025 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.220751704 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.232983883 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.727778249 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.232154689 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.803456281 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.240601561 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.230243667 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.223374815 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.21780951 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.218292068 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.234160385 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.240977232 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.215238885 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.22236308 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.22058894 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.230225283 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.577864346 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.263361379 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.722839342 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.22355003 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.242710635 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.241297761 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.804359461 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.244093143 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.228090704 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.218573537 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.56482776 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.261115975 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.242066433 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.220395197 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.229882847 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.332536367 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.239888443 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.240918157 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.217216405 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.236160501 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.223697685 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.219201862 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.231041376 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.238877852 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.254237948 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.233597782 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.217318819 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.227065308 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.224264122 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.242007541 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.229225687 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.226031255 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.22943428 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.219095056 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.270295038 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.242487807 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.236522293 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.334579296 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.223686349 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.344059583 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.234788397 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.227612566 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.220951573 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.561011725 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.263800501 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.239295317 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.227186424 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.243317647 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.241688378 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.235599689 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.223262321 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.235897249 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.22163901 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.270920278 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.218593976 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.24698454 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.270667193 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.233050099 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.227054864 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.243729705 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.257240633 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.240436691 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.225043267 seconds)
done (took 348.772924251 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.265665442 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.219531217 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.294469238 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.207002721 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.289940487 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.27546982 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.219393213 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.220974912 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.220848584 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.605418904 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.220079352 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.226662492 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.22172551 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.221885299 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.27029142 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.220986709 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.221661789 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.449603657 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.223281331 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.279783342 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.218820668 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.223147995 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.221212841 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.632302592 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.221449816 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.220294117 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.280808167 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.223715881 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.458528086 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.221483965 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.222631677 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.46416782 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.283511103 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.238317902 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.233007699 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.229885562 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.290323431 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.232562724 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.268789825 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.269530497 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.297108273 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.257476733 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.22177106 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.22205818 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.229382796 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.22315967 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.223769067 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.256672678 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.223538976 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.230207651 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.455117905 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.229908122 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.230916526 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.22322135 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.22336539 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.240359747 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.224832193 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.227423068 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.281644856 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.22511304 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.270816892 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.638910766 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.608541957 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.223990109 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.224245736 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.222670533 seconds)
  done (took 207.301480494 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.292397333 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.308359405 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.29167399 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.225962206 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.270419284 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.291686555 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.23054238 seconds)
  done (took 18.049171116 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.203920657 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.224062318 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.24949128 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.2488269 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.225037352 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.363668119 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.235947707 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.231796796 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.25319807 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.22452697 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.562913112 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.225182858 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.233275728 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.211309034 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.240108803 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.254710522 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.226034018 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.224086079 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.321671922 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.304833098 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.232343503 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.23335636 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.254528943 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.238988526 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.225904703 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.226507685 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.227146334 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.233887144 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.228103235 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.213759536 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.223700136 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.239118953 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.202086226 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.223161333 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.215005458 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.227746716 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.220818688 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.202353447 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.226080884 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.224639608 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.228977915 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.226787583 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.228683525 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.227338532 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.229812702 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.247185233 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.228691457 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.230025875 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.227840174 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.216165143 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.256903361 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.227391011 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.230061457 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.234186141 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.270822143 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.235961915 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.228900587 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.230482198 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.229880953 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.226804465 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.227488402 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.308967774 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.250844601 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.228787383 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.254414788 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.266939977 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.230973901 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.227069343 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.229496693 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.253389579 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.227619052 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.252585107 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.227521452 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.325914676 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.226043277 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.372008291 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.249997123 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.232069097 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.232394346 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.229575639 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.235808897 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.228792944 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.229768177 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.236975303 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.234059656 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.22690565 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.230229449 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.229514305 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.238482313 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.229871537 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.275765514 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.231479273 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.231283378 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.327336756 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.23263562 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.329312601 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.260180679 seconds)
  done (took 239.851764794 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.231765291 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.231856076 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.245287684 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.2339873 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.231743156 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.226476772 seconds)
  done (took 15.544822014 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.23500186 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.23465097 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.231624852 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.229487462 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.22984922 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.233368825 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.23039504 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.23641146 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.235250343 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.231727587 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.234451172 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.233452017 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.231940235 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.231937589 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.234783655 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.232546308 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.232649193 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.231168728 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.229098422 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.230788542 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.475551132 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.234619875 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.233970468 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.236106685 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.235683412 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.232087536 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.242912138 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.233077163 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.231688684 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.23957471 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.235817511 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.233966673 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.235714236 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.23880855 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.237353666 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.234994581 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.238998358 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.236179047 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.231719578 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.233342605 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.234793943 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.236200399 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.23350814 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.235191311 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.237322269 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.241094165 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.238493438 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.243394653 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.234912746 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.232816888 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.235598638 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.233971787 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.234623367 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.23474744 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.239542419 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.239370042 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.238667403 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.234074507 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.233764845 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.238269433 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.239461883 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.234139263 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.236918977 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.239666787 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.242174126 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.234285615 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.237949377 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.237283655 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.2340759 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.236188301 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.237207294 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.235936827 seconds)
  done (took 164.305174615 seconds)
done (took 647.191430039 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.271911516 seconds)
  done (took 9.420142599 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.416205242 seconds)
  done (took 9.653396472 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.745262319 seconds)
  done (took 12.901447428 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.260351526 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.270346963 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.245399807 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.233761781 seconds)
  done (took 31.172470113 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.448681912 seconds)
  done (took 9.600932672 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.248796191 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.232546017 seconds)
  done (took 16.694386021 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.256665152 seconds)
  done (took 9.408196167 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.285733832 seconds)
  done (took 9.463857567 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.262007408 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.263566946 seconds)
  done (took 16.693824593 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.2398521 seconds)
  done (took 9.390685724 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.04456079 seconds)
  done (took 10.27730723 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.246148828 seconds)
  done (took 9.415662102 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.301461949 seconds)
  done (took 9.453252376 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.269708742 seconds)
  done (took 10.421282972 seconds)
done (took 176.120156796 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.244721154 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.235733127 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.233085624 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.234441945 seconds)
  done (took 31.098682053 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.271972349 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.27285839 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.282754835 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.272496541 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.263653895 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.264488035 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.273125683 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.271921634 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.263476424 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.268741407 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.272539462 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.268888983 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.24121899 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.280946713 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.280783136 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.269893429 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.271510332 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.27252974 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.263282634 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.281524439 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.272345671 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.271809691 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.236490287 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.239789985 seconds)
  done (took 56.582968853 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.4282526 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.304390467 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.392281898 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.285915091 seconds)
  done (took 11.563611094 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.238895736 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.302061522 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.290516577 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.285064584 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.291256006 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.34066315 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.290548347 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.37257071 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.366065584 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.363654175 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.246310072 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.260339683 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.26119226 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.283636468 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.341370812 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.238451508 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.239622209 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.358826664 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.298819447 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.490853524 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.238329214 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.292385774 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.288615997 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.291323046 seconds)
  done (took 57.424641232 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.239783365 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.249301653 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.248150727 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.240997121 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.24751377 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.242988506 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.248251848 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.244262414 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.263604246 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.245748421 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.24356824 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.242093997 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.250941861 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.245095633 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.244312098 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.256413398 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.255298006 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.244703736 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.246967276 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.249528 seconds)
  done (took 47.10358237 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.241386656 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.087128764 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.587172646 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.493760093 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.245481241 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.241191349 seconds)
  done (took 34.052696831 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.255889018 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.26160566 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.25174203 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.270544268 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.29114473 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.2494724 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.301839692 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.405072148 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.251201979 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.301706263 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.263718178 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.251585217 seconds)
  done (took 29.513962146 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.258971625 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.242709053 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.218236972 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.252812406 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.248936596 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.252404855 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.251910735 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.241998626 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.252093216 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.263912018 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.251755787 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.241516814 seconds)
  done (took 49.134927653 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.457384692 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.469678466 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.466233967 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.849409344 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.557241079 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.227385067 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.520963678 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.455270902 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.9114055 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.995384751 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.534096151 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.226716797 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.189582293 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.168523655 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.141756065 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.487976849 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.24619694 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.104009629 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.496693538 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.293469501 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.248578174 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.246374954 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.247601261 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.524975385 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.571657821 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.246037903 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.455532952 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.260232469 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.247326051 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.510464573 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.850455038 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.295082319 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.446312857 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.503219245 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.581820872 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.383301526 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.247747344 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.433901172 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.288880693 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.279360759 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.256662309 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.254628831 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.787833321 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.258901868 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.518976547 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.246808358 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.330369057 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.2378048 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.171691007 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.596674276 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.353869271 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.24757667 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.280686469 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.686362387 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.366677661 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.488122397 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.250965067 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.439060122 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.293012718 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.531089323 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.436076123 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.248049085 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.460030279 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.172255956 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.588235154 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.36529974 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.246996091 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.253689018 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.94809244 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.491833373 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.332521769 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.607712207 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.004085574 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.249050142 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.250237971 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.286468308 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.345002992 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.246875229 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.54439501 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.234893607 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.17453024 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.346473327 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.642705341 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.253262309 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.235881327 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255844625 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.066031812 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.177324798 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.344155579 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.527487209 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.5661003 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.249569783 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.249578364 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.270391239 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.252115366 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.194633973 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.826343079 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.312175892 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.178091517 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.815545849 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.853220402 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.213613784 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.725368244 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.291211188 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.524579954 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.39980556 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.654530307 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.456722698 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.496565102 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.780054288 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.253555037 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.809271053 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.335279314 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.325088101 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.248279591 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.810278289 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.440972526 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.533612135 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.346855949 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.250602818 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.176256992 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.261239645 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.455036794 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.85495763 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.303537751 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.250118887 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.254744486 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.24993663 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.253213733 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.360737517 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.266794517 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.539995085 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.324786997 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.250227803 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.185916403 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.254261532 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.52887443 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.930234239 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.30635634 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.501342575 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.518401942 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.954245925 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.847499073 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.309670932 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.516796101 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.327493553 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.325708763 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.812717306 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.380708103 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.348475616 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.253092618 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.378143975 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.262046264 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.253460205 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.658714393 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.662565072 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.681472846 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.294659814 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.253836744 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.202571495 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.448415706 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.49309156 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.310708216 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.277664316 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.257653035 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.335815855 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.481568036 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.252684097 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.178627098 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.494539584 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.492374044 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.534140861 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.660508319 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.303544217 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.328949792 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.263472382 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.467691063 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.336589775 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.927153056 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.799330812 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.463195464 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.835578525 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.215339344 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.892568788 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.543379214 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.63047382 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.270035207 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.70897201 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.446092628 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.948321805 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.281938136 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.782897767 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.179186678 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.26028634 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.582863135 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.20871993 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.56507685 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.317844048 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.273516011 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.256410402 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.25581097 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.261952633 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.151558057 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.363595968 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.324299503 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.328225778 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.180653439 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.918935232 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.290747257 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.258891928 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.2550521 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.586608135 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.06904167 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.209949877 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.254982942 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.333551732 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.00334762 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.808094196 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.259029567 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.258586212 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.864378579 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.261914739 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.169593909 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.349829363 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.000429889 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.285766416 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.546786909 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.951860186 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.538897951 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.332157922 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.330274749 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.259721079 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.257354242 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.959881913 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.26723879 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.957199319 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.538761243 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.508495307 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.705136076 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.31690667 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.435064146 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.241035299 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.25826079 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.733862718 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.282260115 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.258904791 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.462480046 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.77602118 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.618474777 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.899945125 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.345572878 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.259568438 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.524299344 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.26156946 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.860950665 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.944080017 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.262409369 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.260762398 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.514702292 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.944718207 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.260903788 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.183739528 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.2655545 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.472692183 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.462717277 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.531208881 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.541692327 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.712108078 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.18745006 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.248374134 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.291574645 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.503901923 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.260529413 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.299675458 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.719677123 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.313441275 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.688432827 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.54007675 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.67434394 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.891262007 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.522207589 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.325920893 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.27214727 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.909031645 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.381758795 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.197022783 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.378461392 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.186645364 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.927874916 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.551085413 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.278124719 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.524686346 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.242942877 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.597585247 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.561815743 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.571583058 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.268944865 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.290551074 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.255357268 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.298982142 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.2603957 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.465899555 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.379930909 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.26903717 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.810122158 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.301272669 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.307231727 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.266842988 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.74623358 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.282564391 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263615373 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.957991314 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.286247244 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.38180536 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.333416282 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.001487788 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.926932465 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.288296219 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.216496882 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.091093462 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.527885618 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.319767313 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.703035587 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.299637727 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.668766314 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.261523428 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.478030456 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.268320486 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.846209835 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.308204468 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.533963172 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.216749886 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.475189928 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.468730897 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.289326401 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.268991362 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.189143715 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.371225202 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.146967858 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.243853335 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.269894971 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.947899898 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.693129954 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.454843722 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.729915021 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.083628206 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.265819452 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.559870051 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.648018439 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.888995499 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.296248052 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.2582795 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.588657338 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.383219771 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.599903756 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.55923579 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.27361982 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.294107194 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.478382833 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.391514798 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.185828275 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.75970084 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.849933807 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.966613286 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.276771511 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.469671435 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.626612615 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.553651155 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.299249553 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.342246653 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.671136695 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.529705692 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.336660752 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.191330829 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.266045067 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.662256588 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.670086564 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.36326446 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.507434987 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.565365354 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.900813733 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.864242664 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.717004628 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.636804113 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.675600626 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.665869733 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.469339711 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.609363115 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.591600297 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.85908416 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.680880048 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.479798323 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.362906621 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.546295701 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.136914438 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.976802753 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.513455918 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.271667462 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.19788526 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.476645388 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.279558247 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.700725178 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.845063809 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.518478026 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.544435775 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.72808395 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.806431292 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.457287116 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.291772302 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.235629811 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.293212332 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.290901135 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.268442118 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.765995421 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.560275436 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.284776402 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.213851782 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.940559265 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.195299749 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.483798997 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.464684069 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.303654831 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.825425359 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.557224196 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.362805846 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.55495645 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.521644702 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.304353349 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.199235735 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.006168317 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.217002474 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.322936059 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.693217671 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.283440458 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.271897082 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.472612171 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.200465376 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.316219931 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.277137152 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.469097754 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.850074305 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.537208311 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.397967543 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.50602531 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.570005672 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.095314901 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.292411876 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.544290326 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.199263349 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.905559192 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.967324654 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.311858739 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.340994966 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.271429649 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.273810842 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.54473561 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.615272978 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.368395067 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.000842119 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.302865316 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.294002447 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.638002607 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.357867738 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.273301868 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.277446694 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.77893584 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.504031264 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.27177666 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.243497376 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.485295549 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.355513003 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.469541704 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.345364296 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.787156423 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.278260193 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.09627213 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.365188526 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.226054956 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.271825261 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.986230168 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.333743755 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.273499749 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.538766366 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.899513755 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.475286948 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.669640342 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.15460357 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.476055775 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.314512932 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.276183156 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.412612461 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.556246456 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.575121822 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.270596012 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.538521223 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.316794359 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.27688183 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.933478817 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.239725515 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.272374758 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.9410346 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.164597619 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 5.003126738 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.671638711 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.296460187 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.278962301 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.277513996 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.20414637 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.272499945 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.44452261 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.248724854 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.271667622 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.638964094 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.601763416 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.357905933 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.28043167 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.277894816 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.282514937 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.489782921 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.78826302 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.292264588 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.976358828 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.478253846 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.276501829 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.76935828 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.716222203 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.542010966 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.312438156 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.480898025 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.514700937 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.8136685 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.484561733 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.249261678 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.500537471 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.279319094 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.546611743 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.543793993 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.276799473 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.489828735 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.894939875 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.559965494 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.62682982 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.58464488 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.340818228 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.485368982 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.179847599 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.278481859 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.278627665 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.540527106 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.327130137 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.276312127 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.287304199 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.240082465 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.948466954 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.744304055 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.431164133 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.629293119 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.09881419 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.031742674 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.281563627 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.203155719 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.276404991 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.301459096 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.280274835 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.203894917 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.005370804 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.003512514 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.491384426 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.588434858 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.206450496 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.481951602 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.881277931 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.203799061 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.246677066 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.293022642 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.521163494 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.205418689 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.282240566 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.233436073 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.574548743 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.003639437 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.548735182 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.277852758 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.221295133 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.28388554 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.283528863 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.27971545 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.367236548 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.279746126 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.396469837 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.541709172 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.673722881 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.376410944 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.920111504 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.948730587 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.215192253 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.323594294 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.83957453 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.849651117 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.575497233 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.402138163 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.003425888 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.227500356 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.284746047 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.270236277 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.512928298 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.282357487 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.282048699 seconds)
  done (took 2318.827918797 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.353122317 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.360469434 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.339042547 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.348273181 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.409050092 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.37877471 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.315005824 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.420807334 seconds)
  done (took 61.116299926 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.293367903 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.250698962 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.290036933 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.282234293 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.280327209 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.312142791 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.457852241 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.310597896 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.281269888 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.285771864 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.28191621 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.283325234 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.283608352 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.280030878 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.284853363 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.585056168 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.303809167 seconds)
  done (took 83.550193112 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.335585113 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.090334912 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.284970874 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.949555061 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.335112877 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.622592175 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.285742371 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.285490748 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.393175219 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.577052515 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.33560033 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.301601389 seconds)
  done (took 95.01753872 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.283638699 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.284062478 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.284277478 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.283527981 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.282923671 seconds)
  done (took 13.61386674 seconds)
done (took 2890.81612037 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.543725546 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.381185051 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.35771589 seconds)
  done (took 6.935342475 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.426339401 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.473822734 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.589414813 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.599903257 seconds)
  done (took 12.291491447 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.563535626 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.650621158 seconds)
  done (took 7.409250044 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.653962675 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.300198791 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.668008326 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.282096411 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.287428951 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.286386235 seconds)
  done (took 24.058055615 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.283137813 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.286973959 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.284940417 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.28383012 seconds)
  done (took 11.336899192 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.284257722 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.116172796 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.286126917 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.293786962 seconds)
  done (took 23.176471712 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.484002779 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.383938501 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.052813196 seconds)
  done (took 11.115583561 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.907413269 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.825655244 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.899102292 seconds)
  done (took 10.828459445 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.142815878 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.102123084 seconds)
  done (took 8.444602363 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.428235398 seconds)
  done (took 4.627737893 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.122122754 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.592693855 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.760321483 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.254256972 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.929632321 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.700142773 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.789767144 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.588871203 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.693848148 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.771234529 seconds)
  done (took 30.399504019 seconds)
done (took 167.988012831 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.93039918 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.329959781 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.514640513 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.698069163 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.538905093 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.515724017 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.593302679 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.7022206 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.41498336 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.391865886 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.682349938 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.541174621 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.539297538 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.328161473 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.545503883 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.326830478 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.535508941 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.785271835 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.367287715 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.578827792 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.600365657 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.328231818 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.519603631 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.351321215 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.541089865 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.465362988 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.938849596 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.325783082 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.515026349 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.956369782 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.465057796 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.725053909 seconds)
  done (took 183.803038291 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.30246192 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.300890982 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.301699814 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.298871685 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.707620734 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.298794442 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.300920251 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.302463542 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.536351759 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.498746105 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.30061009 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.676310626 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.303450056 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.299865711 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.30289161 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.301931942 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.671217383 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.301341351 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.302610899 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.303160347 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.301642985 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.55626294 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.302663016 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.579390363 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.613598025 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.302307049 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.303743908 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.302392906 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.303039791 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.301787027 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.303062843 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.304190658 seconds)
  done (took 222.304056065 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.304550216 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.304851415 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.301564628 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.303901391 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.304581267 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.304333919 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.303188665 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.302666735 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.018490627 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.009377916 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.304991586 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.290056961 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.294213077 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.291626252 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.304715811 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.304486755 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.302772869 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.30226922 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.304207755 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.303278768 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.305122747 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.16949746 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.304366211 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.208829232 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.303831113 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.304919574 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.304538057 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.304410567 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.302804928 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.303461977 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.303117493 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.30549631 seconds)
  done (took 235.100639858 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.546821702 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.305049246 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.306480609 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.314944538 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.306913592 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.306666297 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.296356492 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.552442065 seconds)
  done (took 23.154406944 seconds)
done (took 666.592902163 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.743718457 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.102224318 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.439070557 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.329651815 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.610122216 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.375304524 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.322920512 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.398399901 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.972896986 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.408012593 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.723056055 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.33481311 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.034103227 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.357453253 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.441651495 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.392246457 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.673665099 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.942190353 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.463055737 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.993021173 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.539279455 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.286751892 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.413741095 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.030209039 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.736143673 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.305298113 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.351657439 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.685105817 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.331001306 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.564284149 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.006073078 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.59270017 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.344074321 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.326781036 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.388961105 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.367965918 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.529061554 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.339669267 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.436052248 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.078027758 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.99903872 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.85843003 seconds)
  done (took 118.788214483 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.314526584 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.315293707 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.316313926 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.315134242 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.324131136 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.315768972 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.317449365 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.313279994 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.314718648 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.317925042 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.303740297 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.324112132 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.314616435 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.32517033 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.31629462 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.314248018 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.317926741 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.322882288 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.31526318 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.315750485 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.316479909 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.315720728 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.311508591 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.317876996 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.313291084 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.318781656 seconds)
  done (took 62.462084907 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.31123835 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.490476468 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.608184514 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.344937267 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.311756134 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.316598646 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.3404241 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.316885089 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.313780409 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.314244105 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.402691029 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.315834382 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.326284481 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.604159086 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.342136543 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.310893918 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.309784925 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.313814551 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.501407743 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.330218417 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.341767737 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.317932093 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.341925187 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.326108919 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.314904052 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.315225242 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.317318994 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.731199434 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.325824158 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.406823627 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.389599141 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.348058223 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.655270481 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.616625724 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.372753069 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.318651242 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.314901926 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.455098561 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.327326389 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.314975179 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.341699981 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.321785348 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.611300535 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.839729207 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.331885417 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.313774016 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.724045979 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.466316778 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.362240834 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.328760073 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.616995593 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.346722356 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.313330749 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.315394993 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.350374225 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.326387836 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.314397552 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.592204009 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.331183817 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.342391746 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.31919263 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.314839163 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.512691771 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.326650121 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.492903233 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.326788492 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.320807206 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.316334073 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.617715453 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.3514447 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.837152112 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.332234556 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.313471951 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.410340742 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.499282667 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.749379819 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.329818129 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.515718709 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.67997308 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.355391944 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.325856339 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.71542953 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.357846234 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.326455425 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.315431862 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.315920908 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.314239681 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.359575663 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.345004069 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.752001858 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.83568915 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.612081192 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.357078942 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.328439046 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.317372409 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.593102934 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.327298261 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.316653429 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.604366341 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.866210616 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.334373564 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.323651981 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.822176655 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.331569887 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.348804832 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.328200383 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.622907441 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.349230585 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.359771437 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.315147414 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.321202262 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.322274307 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.348462644 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.328082423 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.314922689 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.812531642 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.468640358 seconds)
  done (took 285.256426311 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.321364111 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.316413655 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.316054613 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.315290824 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.315091405 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.317256582 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.318905897 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.315873843 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.316473811 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.316481499 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.317736673 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.319168959 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.321458127 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.317415169 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.354131907 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.32118068 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.803601732 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.317894629 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.316309763 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.318291575 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.892953767 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.323047074 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.317700916 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.319344541 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.319758585 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.32066136 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.320743568 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.351000575 seconds)
  done (took 180.276740161 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.320353688 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.368850374 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.331962206 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.36861691 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.330870325 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.319295253 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.339134115 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.335595733 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.325235173 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.321020935 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.320367973 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.348537377 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.327357846 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.392023488 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.35165994 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.344752931 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.395297592 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.327819154 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.319685611 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.321803517 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.365816438 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.334311027 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.348691254 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.376602974 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.331985718 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.370670319 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.334746212 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.31975919 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.322504027 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.412476895 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.340374926 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.336980186 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.353303733 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.335705554 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.414769861 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.415934142 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.402108655 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.350389037 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.323327594 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.319636784 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.322982005 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.323511876 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.371433864 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.332968606 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.323583389 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.414800381 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.345219027 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.322359998 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.340466122 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.323470809 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.334984354 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.339214426 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.355604793 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.424656258 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.370900737 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.347383375 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.347855648 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.341743343 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.323448626 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.395025888 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.329146264 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.415485861 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.346414393 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.322376652 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.323273668 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.326425496 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.373168034 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.359355571 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.398091502 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.328193753 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.396117856 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.377245216 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.334980366 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.324202468 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.324003782 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.374439469 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.409503422 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.37863819 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.384008797 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.35807657 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.333913036 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.322771762 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.325283671 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.35133947 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.330242819 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.416352609 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.419884039 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.329892583 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.32415657 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.324530504 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.325131728 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.3461932 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.383420627 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.365574063 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.405345775 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.357597101 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.360479561 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.333031196 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.336590306 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.330556021 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.362155376 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.339580703 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.34135776 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.708013846 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.36612989 seconds)
  done (took 249.479214826 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.689666077 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.381075381 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.402853185 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.597966237 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.703596087 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.456302244 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.367695834 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.392654027 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.389575796 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.496107962 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.442521513 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.425562897 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.368367452 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.351804448 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.37915672 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.390284458 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.405119925 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.674426709 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.477478092 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.276879941 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.371230482 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.661465615 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.677251627 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.71157065 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.423749997 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.771830077 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.997556849 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.4693496 seconds)
  done (took 75.398420016 seconds)
done (took 973.881490579 seconds)
SAVING RESULT...
DONE!
