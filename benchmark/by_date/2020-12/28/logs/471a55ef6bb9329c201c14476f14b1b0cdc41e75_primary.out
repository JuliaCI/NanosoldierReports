cset: moving following pidspec: 10973
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.848400272 seconds)
loading group "shootout"... done (took 1.131263695 seconds)
loading group "string"... done (took 0.671717018 seconds)
loading group "linalg"... done (took 8.66687318 seconds)
loading group "parallel"... done (took 0.166295627 seconds)
loading group "find"... done (took 3.048728182 seconds)
loading group "tuple"... done (took 2.150356527 seconds)
loading group "union"... done (took 14.969388098 seconds)
loading group "dates"... done (took 1.45843974 seconds)
loading group "micro"... done (took 0.221341793 seconds)
loading group "simd"... done (took 4.815542105 seconds)
loading group "io"... done (took 1.088642597 seconds)
loading group "random"... done (took 9.585864239 seconds)
loading group "problem"... done (took 1.533487563 seconds)
loading group "array"... done (took 25.411361666 seconds)
loading group "misc"... done (took 1.902295872 seconds)
loading group "scalar"... done (took 43.801604775 seconds)
loading group "sort"... done (took 3.347672293 seconds)
loading group "sparse"... done (took 12.821365217 seconds)
loading group "collection"... done (took 18.821589855 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.424503405 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.115632005 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128836108 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114040003 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.186062467 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.120690818 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129498143 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.083688162 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.886273941 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134224057 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113797516 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.423913881 seconds)
done (took 5.293253069 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169906924 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.088934186 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081945419 seconds)
  done (took 1.381341292 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069382381 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061639492 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067293029 seconds)
  done (took 1.409485392 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064814892 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.132608458 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064943121 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066223706 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066403994 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.065721112 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.065580441 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065920141 seconds)
  done (took 1.741956431 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070233241 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065785344 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063621959 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065991779 seconds)
  done (took 1.479230075 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063377899 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119237955 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06276673 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062856217 seconds)
  done (took 1.518796995 seconds)
done (took 8.998613124 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.136459766 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.817959456 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.766573345 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.122515147 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.248083414 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.36510792 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.121526146 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.180269078 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.086637188 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073069028 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119090685 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.077919063 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.385688604 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.503927318 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.068973774 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.171996806 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.639871056 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.086267207 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135274916 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.613478915 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073761727 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.08760439 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086868204 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069176474 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.380348384 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.156048871 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.701511664 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094493788 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067976046 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.098918585 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070772715 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078197866 seconds)
  done (took 10.932640347 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.090874266 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088595134 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.06877491 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124221382 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094549636 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070143117 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075496633 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.06710588 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089099925 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124847208 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091170056 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099239528 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066901042 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069127223 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.073805907 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.198288008 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081331007 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081804474 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067399769 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081055442 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106752367 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079468809 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078538164 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07821156 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133015883 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.168530539 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.10128386 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099666442 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066340539 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079536875 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11588033 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126668588 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067323096 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064885358 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120762488 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095443835 seconds)
  done (took 4.648572329 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.876146453 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094701397 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083608439 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074287556 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107133858 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112897367 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122403266 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122819155 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100172862 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068357739 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.099952887 seconds)
    (11/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.083982973 seconds)
    (12/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.066970723 seconds)
    (13/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.150398388 seconds)
    (14/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.666545988 seconds)
    (15/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.173038762 seconds)
    (16/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.073152754 seconds)
    (17/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.12088571 seconds)
    (18/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.357666698 seconds)
    (19/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.113652571 seconds)
    (20/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068422121 seconds)
    (21/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066515602 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069473928 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069621432 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.115285554 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065962028 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.177260134 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.582214136 seconds)
    (28/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.062145193 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067716859 seconds)
    (30/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069788751 seconds)
    (31/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.09664234 seconds)
    (32/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.070342588 seconds)
    (33/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141243799 seconds)
    (34/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093066754 seconds)
    (35/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072309569 seconds)
    (36/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.54280098 seconds)
    (37/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.173008309 seconds)
    (38/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065813579 seconds)
    (39/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088572115 seconds)
    (40/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094896405 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06683023 seconds)
    (42/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.06807359 seconds)
    (43/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079161493 seconds)
    (44/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066252055 seconds)
    (45/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109141896 seconds)
    (46/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080334829 seconds)
    (47/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.514585869 seconds)
    (48/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069935176 seconds)
    (49/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.585246259 seconds)
    (50/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.22563258 seconds)
    (51/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073495255 seconds)
    (52/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072604301 seconds)
    (53/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10187357 seconds)
    (54/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064243363 seconds)
    (55/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068037314 seconds)
    (56/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.901660509 seconds)
    (57/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.146075117 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066958575 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.27418669 seconds)
    (60/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066004204 seconds)
    (61/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067832827 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071941767 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099851292 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06747602 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068607478 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073052391 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096420078 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.872937429 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088829707 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096927919 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067106259 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.400951498 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072188147 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069135565 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069544826 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.069006204 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.10714044 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066669472 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065910516 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112432809 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.096626175 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090070741 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069782625 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067940203 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06610471 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.32525358 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.194085489 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065275243 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067373036 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.482663868 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063582899 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065731873 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067978474 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.211426966 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066161353 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062828614 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.06393524 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098286757 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071225125 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.364997634 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067399539 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.485869183 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069491132 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103581314 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119127031 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066446719 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099354798 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066635947 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.064055055 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074210046 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065516318 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064929711 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069638184 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065921056 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066525779 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069347046 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068414742 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06763404 seconds)
  done (took 22.92820249 seconds)
done (took 40.599956697 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.316398149 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078381613 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.07836987 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078692298 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077748506 seconds)
  done (took 1.885066046 seconds)
done (took 3.236109771 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.250384715 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.074162768 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064376769 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.205220478 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.087243605 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.174267472 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.211992732 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.157718926 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.086988012 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.08609321 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086695252 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.217322656 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.223087106 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.087027349 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.157191965 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.22335095 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.087214572 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06247057 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086950867 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086452693 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086445415 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.063015598 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.086760624 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086474295 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.158250643 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.087753422 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062812921 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.156722338 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.085117251 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.155418773 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.085207756 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.08456746 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.084933271 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.154334591 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.08466009 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.153211188 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.061807134 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.084916254 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.084708071 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.084474764 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.084120148 seconds)
  done (took 6.085024192 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073521943 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.199853726 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084527233 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062514827 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071926834 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082639401 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061946171 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082228964 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092114525 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082933006 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082262989 seconds)
  done (took 2.314768788 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068554097 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081964155 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084313738 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061618457 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072756311 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083402038 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061491491 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082846238 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085734416 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083402748 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083753322 seconds)
  done (took 2.138034166 seconds)
done (took 11.787259373 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.094975355 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063894396 seconds)
  done (took 1.430650813 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.22282318 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.499821007 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.910001117 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090848276 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070309886 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083682137 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.193613338 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065026718 seconds)
  done (took 7.599594227 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.103442556 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070107732 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069217762 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.06821775 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067425071 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068756961 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069075912 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067755928 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068106207 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067846918 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.067889504 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069155763 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068654742 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067659713 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067813625 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067972541 seconds)
  done (took 2.520030192 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103970264 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069600655 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.10042051 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062407426 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071893596 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062453277 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071116374 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072764313 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070181055 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071557699 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072861538 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071530471 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071766983 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071475658 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073598165 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073209983 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073174146 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071192813 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073652268 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073889978 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.0724928 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073296496 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073875977 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071359736 seconds)
  done (took 3.184009999 seconds)
done (took 16.024725367 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.172284404 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.07330265 seconds)
  done (took 1.532138012 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066201123 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.067073362 seconds)
  done (took 1.439931353 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071438041 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.05928035 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.077505487 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068664773 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.060220294 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.05924412 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.075296893 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059460858 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059617349 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059632182 seconds)
  done (took 1.95676861 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061730969 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068553312 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066239143 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063149472 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066614607 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062805526 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065402056 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062873316 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069055233 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061769606 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065866199 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083359167 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065553037 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084134777 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065463947 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.0659984 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067413373 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065212051 seconds)
  done (took 2.519828126 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059362841 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061156668 seconds)
  done (took 1.429068262 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063039732 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060186564 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062401086 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062685474 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060221345 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060079218 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060940427 seconds)
  done (took 1.734057837 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.4181816 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.123654784 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.349786254 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068994946 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077135028 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259075518 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063981823 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.0688911 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068665086 seconds)
  done (took 2.845994208 seconds)
done (took 14.775253225 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080720049 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.17920707 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085726962 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.379835472 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091920215 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067127764 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113087947 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.180422786 seconds)
done (took 2.509307795 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.275227774 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.238343985 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.404001596 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.126692183 seconds)
  done (took 3.079258805 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.330260014 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078000381 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077301081 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067057498 seconds)
  done (took 1.876552216 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064201597 seconds)
    (2/2) benchmarking "read"...
    done (took 0.070807988 seconds)
  done (took 1.451616247 seconds)
done (took 8.008203748 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069909801 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.091263543 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061360774 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.066892334 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.063867552 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064116796 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.063699515 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063127241 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064100519 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061547774 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.063978971 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064077125 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063803426 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063238582 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06338162 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063781201 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063230724 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0635368 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062740739 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063826973 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061467113 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064387626 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062962908 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063378414 seconds)
  done (took 2.899802491 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077823393 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.064689954 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066795238 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066322252 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.0665574 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066696729 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066468334 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065433984 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066731276 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065111749 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067300144 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067375481 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064898086 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067177043 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065428622 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067388209 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066773021 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066128673 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065326026 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067312243 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06709371 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065596539 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067334037 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06678674 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067553156 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067318466 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065488931 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065544502 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066902285 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067329581 seconds)
  done (took 3.337520276 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064638578 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059889762 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059909146 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069584755 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059559332 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059867997 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060268055 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059280501 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059900237 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.06112984 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060332248 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.05987587 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060794107 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060271893 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060262962 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06060588 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064669996 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079471978 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060366077 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059695001 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064237519 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060237142 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060070969 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060222105 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060741924 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060396513 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060352362 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060527953 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060049544 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060843106 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.059982842 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.06416608 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065688582 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.059947161 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.0700694 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06494876 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.059814923 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066409889 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061486589 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059733658 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059998635 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.06000436 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060180023 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060203755 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070364785 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060221364 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.06112266 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060987969 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060205792 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060015196 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060126556 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.061880381 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068583111 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.0615531 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060086756 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061434988 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059792238 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060618735 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061069148 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060119765 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059943573 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064251086 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061724153 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060661635 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080342503 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061964774 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070788254 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060152204 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060521394 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063979816 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060815701 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078396014 seconds)
  done (took 5.819190166 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.070054625 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071034864 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079249223 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070467298 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064231354 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060775767 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064915192 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061113189 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070782093 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06505554 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060833955 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064614964 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070566661 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065315689 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062253636 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070833246 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065266315 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064363037 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060996815 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065379282 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062250976 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064817919 seconds)
  done (took 2.799350856 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.138004468 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06543131 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106365738 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.07047271 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069079892 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070485096 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066552812 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066371248 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066690593 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067354791 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067491436 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0665499 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068945354 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066961383 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066714897 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066503841 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066136464 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066508853 seconds)
  done (took 2.653091636 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074816983 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066326416 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089651649 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065481596 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068983279 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065717589 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069718141 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070740833 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065477988 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066055291 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.07004787 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065674733 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065684471 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066217649 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065530139 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065889777 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065613889 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065728802 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070318445 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069730767 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069776214 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070940723 seconds)
  done (took 2.84711589 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077734677 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064921366 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080810767 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066506216 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.06012651 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060009042 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066459168 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065453033 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066384058 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064957359 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065331464 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060887026 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067424418 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06564861 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067329263 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065156059 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064703844 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065390722 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064789353 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060646413 seconds)
  done (took 2.652737007 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070178649 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062167212 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062994135 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068433827 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063342287 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063071797 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068779655 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063222024 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063953646 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085548231 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063475064 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07422596 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069343356 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067181061 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063572212 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068841597 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068762885 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068856069 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063414421 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063328779 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085518715 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063648064 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068885414 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063618984 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06298478 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063205855 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063598263 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067172253 seconds)
  done (took 3.214364628 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.063202116 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062852742 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063307679 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063039398 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062891811 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062646634 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.062838728 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062860008 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062602024 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063119097 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.062563302 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.06303838 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065960249 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063103109 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.062833774 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063008008 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063088082 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063513158 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063615786 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063374039 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063319122 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063142891 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063158267 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063754905 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063624796 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064946332 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063643688 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063148203 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06280698 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06361205 seconds)
  done (took 3.238668639 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073998203 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071092426 seconds)
  done (took 1.481148672 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060591315 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077390966 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059176944 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072242438 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068368074 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.0635511 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069063059 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070569022 seconds)
  done (took 1.871538526 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067327581 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090639908 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062000292 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062021671 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.06490603 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.128138761 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075187346 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073810304 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076552447 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064750132 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062768231 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.075042604 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061449361 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07540129 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06351033 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071098067 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069288981 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079866764 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074824778 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059923821 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074535596 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062433709 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060777885 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063070455 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061722266 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068850313 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077376225 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074325182 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070165217 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059523461 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081017299 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060305971 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061774158 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070302636 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.064940435 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.060639694 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098524215 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061695586 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067021762 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060824694 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073678757 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081807309 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075920386 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.07977815 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062279954 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06295382 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060146154 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062956339 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064167249 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070277622 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.06025799 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068470159 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060129775 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.063040003 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072412366 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061806194 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06668423 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071294169 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075443325 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072363734 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070489406 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077563488 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070696009 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.06935337 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062393032 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081134713 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061045352 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.07268589 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074363091 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062066506 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074514683 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060031304 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060865751 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060418753 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094643525 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062196347 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061788675 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060657555 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060166818 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062032376 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070605169 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065896147 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068464535 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064324022 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077036041 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070310624 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060525313 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067605326 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078788766 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064270832 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060579817 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.07774387 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063900116 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059615116 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078650206 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070647463 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062091026 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061124812 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064080889 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074071491 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061852247 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058875794 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069229617 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.061903219 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062582917 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065005542 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068581281 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060475382 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070260657 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064756238 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061820942 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058744189 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064359969 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061145493 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058557575 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069833444 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059789865 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074387993 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066441657 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074378978 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074663328 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070313834 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075488946 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059067397 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057394458 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076353718 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067588446 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059373519 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.07559469 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057297639 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.070920201 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057247077 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059381595 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.066921685 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.056958149 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059728507 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.057979277 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.062755934 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059200699 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059456744 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.063863074 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067127141 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071999587 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060725736 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068816774 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060106156 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075449398 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069804779 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.064281726 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062807585 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060095553 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.0717019 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066213387 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069081702 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058888539 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060065351 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059388262 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070202953 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.06938433 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061375492 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066397649 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064225028 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060096861 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060096918 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060636616 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063491949 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062902493 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060052817 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069807241 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070777385 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074656616 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068910554 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070876084 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059442588 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059765214 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.059667236 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.057486009 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064644537 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.066479607 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076648453 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072244196 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.078630813 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.058804876 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070126958 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060333036 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.07530466 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072175777 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061051373 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064727069 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058354945 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.059442129 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.067272612 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.069376383 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07127304 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073788734 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.062942364 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.06682849 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061498925 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074127538 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061723534 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069180936 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068539365 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06677129 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060713763 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061430504 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.067701792 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063064827 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.058331796 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.075313163 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.064455649 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.057155436 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.072315344 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060059324 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.069433667 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.057787097 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065060122 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.063533071 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061032818 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068612135 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072418615 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05841835 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059248125 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072784056 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.059145533 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067822294 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067418616 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.073539801 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063566232 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067711918 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070237467 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069164045 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063467202 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.069179056 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.064956139 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068709256 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061476013 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07049948 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061371631 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077326978 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058563302 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073103618 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058424437 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070805261 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.057612887 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068672493 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061088133 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077969821 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060470121 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.05845214 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072560373 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058595271 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070824346 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059848492 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065042274 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.064227795 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068647442 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061610738 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067962234 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.060395225 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.069040008 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062557926 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067169005 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067185993 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.065216897 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061221005 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067088403 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073486287 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071049458 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062523609 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.062295992 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.061072231 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.328971597 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063137141 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062735833 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07048186 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066490152 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067566238 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062804481 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063950724 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063925416 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07156213 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072838783 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081759447 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071874108 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070844387 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.07240454 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062413614 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07839228 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062809932 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073000545 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.06106331 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067508335 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071140749 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061349551 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080806017 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062588435 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069645248 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073963538 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070241675 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064830816 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079382424 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064156031 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.07002799 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069646278 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065797296 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067912348 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062866598 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069398612 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070620151 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071523925 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061578956 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068748063 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069907248 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06211921 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068356119 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062508182 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069391471 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.06224471 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059632693 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065315032 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072084504 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065418458 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.065599028 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060688343 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059150447 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060394267 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.066560181 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.064891877 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.069048767 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07569386 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059004099 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060676781 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059865584 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063393023 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078255624 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069865848 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068032161 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064833046 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059103141 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061945124 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062125966 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060332662 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063280974 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.05914978 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.059515089 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070820511 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062042552 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.064571597 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060231586 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061063395 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.069533975 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064618797 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060408084 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066477777 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.059700572 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065025515 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.05934405 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061263304 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.064196783 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059093787 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06327199 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.070384747 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.076484502 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.066341798 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069527884 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060400628 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068003768 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.0753743 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067059907 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06084696 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.069252575 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058838763 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079456244 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.069111991 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068478748 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069470212 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.06065641 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076360382 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064157342 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070092323 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07535652 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060854566 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066112003 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059322798 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075106482 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064118252 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059050138 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067840067 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067550118 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065381968 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070753877 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059717904 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.06710484 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064576674 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.06270896 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061407801 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060775428 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068267291 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.075359877 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.05965664 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063172981 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066841642 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067566133 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.063410146 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07074987 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067085491 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06013223 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.060423077 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062340081 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.206354768 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072333755 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060196346 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064176065 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064077209 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059091951 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.06592501 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075874403 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.06885904 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069030774 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058655781 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058586106 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07704704 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062639035 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062597963 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067739246 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.069060838 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072201522 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068981752 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.076935781 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060678837 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06565198 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071968634 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.060295452 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.059382897 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.063572617 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.060914349 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.068645405 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069347152 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.067415711 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061675907 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066496875 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.073117419 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060575315 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.06390916 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.064423268 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.060992502 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072364884 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069709927 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.07247867 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062380357 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060476702 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064264155 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068797091 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067107317 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068476352 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060663976 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.066114555 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.073478652 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068003713 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062685793 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059196523 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062328232 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068687163 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063736238 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.05902846 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063988749 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062913347 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065975158 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068538975 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063571819 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.05971527 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078241498 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068786767 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.069841403 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062809651 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061983191 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.05963044 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059026988 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070579776 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058876225 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060917406 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.06436217 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060962446 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076936539 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.06751459 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074877673 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060423485 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.064068552 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058890567 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068973407 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.06370924 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059612623 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069816324 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.05823859 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074366625 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071045766 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.064590675 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058942494 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06443227 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067216884 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074027555 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068865558 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068827191 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062647231 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.06903716 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061095166 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070111913 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058536431 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058271776 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069376065 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068555999 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072067167 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058729687 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069548051 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061144935 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067559791 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.06729759 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060850632 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061182849 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061284239 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068719005 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064379958 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070483571 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065644726 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077834702 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061683567 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.072015836 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069865921 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072166527 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074740891 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073353867 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068577817 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.061426049 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067925527 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068835714 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061536476 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.064802467 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063662518 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081923808 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061991102 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062034349 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074190931 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.066238021 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060470935 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.0665636 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.212942701 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.069714676 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060503399 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070850097 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.064157594 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060353583 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.063887994 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06472391 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059467777 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060037562 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060786459 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071055038 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.064791594 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060681251 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079852241 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062416361 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068722133 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070807192 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066593276 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.06270417 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.05986285 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.061927298 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074486934 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077003848 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064398283 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069873096 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062322663 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070782862 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059687614 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069661457 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.06920517 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069886652 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060761248 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062332373 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076348549 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076851597 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065623286 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071011063 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070618584 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062934451 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083433974 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070292648 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062206366 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072170055 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063600599 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060262846 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060020295 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06278449 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072630266 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.060474878 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063271184 seconds)
  done (took 41.511309064 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.097651778 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061567808 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060159395 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059240555 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067262206 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060347396 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.05990843 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060809504 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061220425 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062456701 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059621378 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062116882 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066571836 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072463886 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067983181 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06357243 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061056109 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061955565 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061098809 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062194403 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067679451 seconds)
  done (took 2.850118203 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062970013 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.064565845 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064318349 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064394773 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063151351 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060919097 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064989717 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060994971 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066913935 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06196267 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065726705 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061024645 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.06122223 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061488465 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061120986 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062410745 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065623101 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064772399 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061350565 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065089563 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06262213 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06517445 seconds)
  done (took 2.853277363 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.061519269 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061045471 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069976172 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.059596275 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060059287 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064116035 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059702324 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065026934 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065090799 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064792142 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069812934 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060987704 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059659913 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066131476 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.05992545 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060728888 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102022296 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060486822 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.060602609 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060079351 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063419078 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070046921 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060257558 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060740843 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064934821 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063880383 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060314745 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062955962 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061452951 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064900982 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061471407 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060207386 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069979402 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069174839 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06517637 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064816325 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.06213275 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06146946 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.06010268 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060254852 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069384068 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060959245 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059868159 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060390576 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068205431 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058959519 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058496494 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068127546 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058502608 seconds)
  done (took 4.583215969 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069478151 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.111666653 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064770328 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092941597 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.072263943 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.065406947 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064562753 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.093675885 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.060132501 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060943637 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072699934 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.073373992 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063060354 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063492413 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.064747012 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062211362 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064830312 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062512479 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065409893 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062545774 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066422946 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067315527 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073806106 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074008613 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064509339 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062405827 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063179926 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064815425 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073815253 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066808574 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064781244 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065306573 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.07401998 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067307688 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062007676 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063139147 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.073805847 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062834519 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063285437 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061459601 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062840375 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063706264 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.065957094 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074026919 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062671876 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068751884 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063664612 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061088246 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.0744567 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063284401 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.066989851 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075203276 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064742706 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063711238 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065119303 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073836409 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063613932 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062310272 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063836034 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073984258 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061729503 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06440501 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077095199 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062911315 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066886152 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075857481 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068809915 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064448077 seconds)
  done (took 6.231166628 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06778043 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093782774 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07451758 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074324983 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069221705 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069546168 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071034566 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071249348 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071636629 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074440775 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071685634 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.106681598 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067784396 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073479278 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071281463 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072124912 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071871643 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071916164 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07166221 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071411469 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071320452 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076967452 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071414248 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076931782 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073947823 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068103541 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071367171 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071369015 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076990401 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071351395 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073790294 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071720324 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071709594 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07707887 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073984888 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071563038 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061591147 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071312015 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071531205 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071175301 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067695036 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076850398 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07116612 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06784214 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071603676 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071251465 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.077064451 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074027427 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073315306 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.075155348 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071684364 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.077147405 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071486227 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071765925 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077135982 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079350047 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076896864 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.077177352 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071734735 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.077080698 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.077322435 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079431306 seconds)
  done (took 6.069965062 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07229399 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065413347 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079001371 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060514477 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060397684 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070162871 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060500464 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.06074799 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067685757 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067475898 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069484407 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070791832 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072351899 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069469521 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070341124 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072301328 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070586363 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070303107 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067808094 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070083464 seconds)
  done (took 2.866170798 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073804802 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.07969602 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066595845 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06979044 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066097303 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070232863 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065482845 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066725682 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067097822 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066423234 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071467693 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071500377 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067030562 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070113777 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071434412 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070120326 seconds)
  done (took 2.598119923 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062699884 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.06706822 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.065350831 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060576368 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061819832 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060603599 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062150209 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060328501 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06313353 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075107126 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061625167 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064237057 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.06182662 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060693183 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061165747 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064412863 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063639425 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061604707 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061769178 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066155848 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070352694 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062606038 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064644954 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061597828 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064031812 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070486353 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063151662 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064208477 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061383537 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064546357 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064053441 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068531557 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06422201 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062055514 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.060646985 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061697587 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061796768 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064514139 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.06440926 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062007596 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060332058 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066834653 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062366308 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062521967 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063545098 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064645371 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063548777 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.066442661 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060324291 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062622039 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060534325 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062336343 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060667364 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067274267 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062533005 seconds)
  done (took 4.979916021 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076954661 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064685009 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058741155 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058984552 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06396642 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.065051375 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063861997 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064460669 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065069544 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058881594 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064995058 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063868223 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064859868 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065724677 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065715285 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064125033 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059068008 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064599198 seconds)
  done (took 2.655982089 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065489422 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064803075 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063372924 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061301936 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.06117763 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065561999 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060588684 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062267388 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062166386 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062826758 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062754272 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062078233 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061936757 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061812071 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066350958 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062733412 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.06212884 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060656955 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.062538437 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060939465 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067389064 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060892952 seconds)
  done (took 2.875001862 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.08920393 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084194911 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128582349 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.08023994 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089585501 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072282758 seconds)
  done (took 2.033663085 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.092265785 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096482576 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064262115 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064504057 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068884821 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067281813 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06922133 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069048994 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072678588 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073108753 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069684252 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072968682 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072144787 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074508901 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069939374 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071082889 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069386677 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069631653 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066090348 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075913675 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067689622 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070582114 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06720736 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066996181 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067181078 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072407961 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070599726 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070838886 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067368448 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07283762 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070984014 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067924798 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071186454 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071512978 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064144072 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070592793 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067383199 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074629792 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069069879 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073915853 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064133182 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068944555 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070853357 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070539597 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071122693 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067446135 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070349667 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06765138 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06772371 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076409958 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069503555 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072522028 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06924389 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071379207 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070883866 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076452325 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071359089 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072744895 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070634699 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072509756 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073352838 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070297729 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073586804 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071893337 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071327368 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075347069 seconds)
  done (took 6.188567005 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102750163 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064492736 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067925963 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071107394 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072274839 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067874137 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067411589 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067864119 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067516562 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065196728 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103544308 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068232504 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073020848 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075646031 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069831991 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070059588 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069872681 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075001381 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066996037 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078147611 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069698179 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074668843 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07485822 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074965332 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073047662 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071291719 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069315783 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069466083 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069377321 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069890714 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072679347 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069351974 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074656209 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.0665241 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075065473 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069644692 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069194487 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072786224 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069156898 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070918025 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07505633 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07720701 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069114637 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068871669 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07313851 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068488655 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067976854 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065108554 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068761636 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066507871 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073597153 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073305607 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073401672 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07528263 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069447406 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069643335 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069563049 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069423765 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069650918 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071276537 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075046717 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069386941 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078843844 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069482163 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068507154 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073168446 seconds)
  done (took 6.256987933 seconds)
done (took 128.688137272 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218169579 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.188767782 seconds)
  done (took 1.886797057 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.073798559 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166960059 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072963916 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.073219781 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.107264641 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105750355 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.074193694 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070180629 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073067988 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070340573 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.137504608 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074093997 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.07047551 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070204729 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.07037434 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.070432353 seconds)
  done (took 2.879485746 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.105990141 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.182618686 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.101869035 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068273493 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.149810951 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07511183 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.07185471 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077140972 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076695292 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069806056 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.105864866 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081219796 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073872488 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074852132 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070432988 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073460994 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074864426 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074763272 seconds)
  done (took 3.112936316 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101582342 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.090062695 seconds)
  done (took 1.705694972 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.159797834 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106634487 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.14545794 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.342742714 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.135633257 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138561854 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.142997707 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.138946389 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.114254895 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.133806574 seconds)
  done (took 3.066096174 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107012574 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105496841 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309968997 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102835381 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082086138 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077325565 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074883056 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079278444 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073765616 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075492806 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121583091 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075064828 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.07190412 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124839897 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099689721 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107724743 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.070419867 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078083657 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080045855 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070695546 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076289206 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080116296 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179879612 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078543174 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.10110073 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075516675 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077680383 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074157556 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.07422077 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078333299 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079274313 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100011725 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078059342 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.081356522 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.075204688 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.095530268 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069542583 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.096655363 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072347123 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070571618 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073392568 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076792678 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070280064 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078140335 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075213627 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077409703 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080177211 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070650896 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.07500698 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074407469 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072324881 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076143403 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074192078 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076043807 seconds)
  done (took 6.268798178 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106114206 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106050936 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068824232 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.111377618 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.103497206 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068743472 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.102944015 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.098329706 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.106437599 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067940485 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067193702 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067221155 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074531128 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.077403024 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.114415077 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.106281447 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069997513 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068411399 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.105694672 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.105972769 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067546158 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.10012703 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.099041482 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104574144 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066823423 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068330668 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066705993 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067062086 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072489646 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.0730301 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067191014 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073846019 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.07886432 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073253087 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066031478 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066493523 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066513111 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073756392 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07417914 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074189283 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072793981 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066275973 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066385248 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06737569 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067610025 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066250234 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072944288 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073646692 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072593465 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066782646 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067160919 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066573885 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067182732 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073298562 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07274002 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074356047 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074610459 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066760856 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067069574 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068030714 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07485679 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074704372 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074058553 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067986838 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075862121 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067387284 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075762143 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.079113567 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06697518 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067675842 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067073214 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067090936 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068025989 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07291017 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072884447 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067896222 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067352442 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067071442 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075352864 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073493614 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067059803 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072600918 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066418323 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067007102 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06727552 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067772082 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.072409375 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.073724832 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067628227 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066673829 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067128263 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067221436 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.066529249 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.072223961 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073606561 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074065998 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.073172512 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067418074 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072769743 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072761293 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06722082 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072516644 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06659354 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067098696 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067023597 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072943883 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072044484 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074177413 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066223026 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066409851 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.071762897 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074622174 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065935234 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.071137982 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073711199 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.209081696 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067749294 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076705823 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067971974 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075624095 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067458354 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075514108 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067605152 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073086433 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067836914 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066648139 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067240036 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.072981479 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067684362 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067143187 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067367745 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068457862 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073302093 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076601245 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067986114 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07346095 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073343979 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068325667 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073168565 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067696683 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074611536 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067244998 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.0675858 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066832916 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075805053 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06684241 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067181093 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067008683 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075004253 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067155115 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075149492 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07243692 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066785342 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076756833 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.0753138 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07284934 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075464845 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067822361 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066967986 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066888897 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069657642 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072089688 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073470916 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067759501 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067283235 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.072419228 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.075522442 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066936215 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072589505 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073037566 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072780523 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067695869 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.0673115 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075979766 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075262854 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.073061733 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.073103188 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073544462 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067097053 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072742636 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073119886 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066739162 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079407899 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.0671869 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07702481 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073327238 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072110729 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073292736 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074599667 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075611007 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077055967 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077548683 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066520628 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066985216 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072988227 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068358088 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068485655 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074798686 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069314272 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069213678 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.078336515 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067177247 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075129377 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066268615 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073660801 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066372446 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067290301 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077840495 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067213354 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067681321 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07293265 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067337708 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.07311182 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075496981 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073044236 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066780891 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067053464 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073117317 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073812857 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066667609 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066757 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067506093 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072847924 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074141353 seconds)
  done (took 17.974501229 seconds)
done (took 38.413792871 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170373579 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112953827 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.211302011 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.196816617 seconds)
  done (took 2.293663092 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.09841407 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063511528 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.078365037 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087844569 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063722706 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.074389503 seconds)
  done (took 2.018063343 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.198640217 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173809919 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.242421929 seconds)
  done (took 2.158092075 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.365470672 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.146755956 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215360222 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.501138103 seconds)
  done (took 2.876963598 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107974838 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097573247 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075279977 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108827163 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082989364 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060759471 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.13094858 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067363327 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.09842407 seconds)
  done (took 2.441025624 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.13778105 seconds)
done (took 13.48905836 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.121150341 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.241416941 seconds)
    (3/341) benchmarking ("sort", Int8, false)...
    done (took 0.18598849 seconds)
    (4/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.528776859 seconds)
    (5/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074371812 seconds)
    (6/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.076309767 seconds)
    (7/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.218857656 seconds)
    (8/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.223893462 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.158511861 seconds)
    (10/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091493567 seconds)
    (11/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.078853704 seconds)
    (12/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.221368352 seconds)
    (13/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.251168858 seconds)
    (14/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.174680454 seconds)
    (15/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.119747825 seconds)
    (16/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.261651451 seconds)
    (17/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.195358763 seconds)
    (18/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073279357 seconds)
    (19/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.072747906 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074269887 seconds)
    (21/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068732509 seconds)
    (22/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.071313125 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.076068029 seconds)
    (24/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.255471001 seconds)
    (25/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073731692 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125313044 seconds)
    (27/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.147616474 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078283095 seconds)
    (29/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.239942549 seconds)
    (30/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074414694 seconds)
    (31/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.073539306 seconds)
    (32/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.23425576 seconds)
    (33/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078778595 seconds)
    (34/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.20975118 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074869677 seconds)
    (36/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.092545909 seconds)
    (37/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.076822745 seconds)
    (38/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.094448222 seconds)
    (39/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.09120445 seconds)
    (40/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.183227123 seconds)
    (41/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.175265604 seconds)
    (42/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069307393 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.07660682 seconds)
    (44/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073062412 seconds)
    (45/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.182345588 seconds)
    (46/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.219215125 seconds)
    (47/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.193001797 seconds)
    (48/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.092358577 seconds)
    (49/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.175937668 seconds)
    (50/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.145724783 seconds)
    (51/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.141949916 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078894159 seconds)
    (53/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.185752534 seconds)
    (54/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081841417 seconds)
    (55/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.068461909 seconds)
    (56/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.190980959 seconds)
    (57/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.066231335 seconds)
    (58/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.153367161 seconds)
    (59/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.082819281 seconds)
    (60/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.07337631 seconds)
    (61/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.16491541 seconds)
    (62/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.094025484 seconds)
    (63/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.164139922 seconds)
    (64/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.195352936 seconds)
    (65/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.081564285 seconds)
    (66/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.06834275 seconds)
    (67/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.062779122 seconds)
    (68/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.066702995 seconds)
    (69/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066117691 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067161984 seconds)
    (71/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.072188198 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.154945247 seconds)
    (73/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072812417 seconds)
    (74/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.117632903 seconds)
    (75/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.080823378 seconds)
    (76/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.064723276 seconds)
    (77/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.072657833 seconds)
    (78/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.072403338 seconds)
    (79/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.31707012 seconds)
    (80/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.075323876 seconds)
    (81/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.208166145 seconds)
    (82/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.147021362 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086880351 seconds)
    (84/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.06782157 seconds)
    (85/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.066923315 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066622514 seconds)
    (87/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095008283 seconds)
    (88/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.201028419 seconds)
    (89/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.224465934 seconds)
    (90/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.222628639 seconds)
    (91/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.145816097 seconds)
    (92/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.065603457 seconds)
    (93/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.146233528 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.08847 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095185602 seconds)
    (96/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.065646754 seconds)
    (97/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.144260199 seconds)
    (98/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.110381987 seconds)
    (99/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070133145 seconds)
    (100/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.065943424 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086019798 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.088648873 seconds)
    (103/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.084260578 seconds)
    (104/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073981291 seconds)
    (105/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073370812 seconds)
    (106/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066077852 seconds)
    (107/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.070786294 seconds)
    (108/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.075949193 seconds)
    (109/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065490594 seconds)
    (110/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.072910207 seconds)
    (111/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068330095 seconds)
    (112/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.074185268 seconds)
    (113/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.082748613 seconds)
    (114/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.07324506 seconds)
    (115/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.182949601 seconds)
    (116/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07420273 seconds)
    (117/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.222620135 seconds)
    (118/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.064780887 seconds)
    (119/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.135817404 seconds)
    (120/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.067173365 seconds)
    (121/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.196984295 seconds)
    (122/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074157479 seconds)
    (123/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.067324619 seconds)
    (124/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.146175914 seconds)
    (125/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087476016 seconds)
    (126/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.068109165 seconds)
    (127/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.063980183 seconds)
    (128/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.063757653 seconds)
    (129/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.141800465 seconds)
    (130/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065515465 seconds)
    (131/341) benchmarking ("sort", Float32, false)...
    done (took 0.1369004 seconds)
    (132/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.071862417 seconds)
    (133/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.06521894 seconds)
    (134/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072910809 seconds)
    (135/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064877887 seconds)
    (136/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065503229 seconds)
    (137/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.067175121 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.080461118 seconds)
    (139/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065017716 seconds)
    (140/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.117320196 seconds)
    (141/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073333087 seconds)
    (142/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.072033363 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075090392 seconds)
    (144/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.142855952 seconds)
    (145/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075202911 seconds)
    (146/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.162669048 seconds)
    (147/341) benchmarking ("sort", Bool, false)...
    done (took 0.142100835 seconds)
    (148/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.137218425 seconds)
    (149/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.065959474 seconds)
    (150/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.093192215 seconds)
    (151/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.065773874 seconds)
    (152/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.159402604 seconds)
    (153/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072905081 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075261295 seconds)
    (155/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.066319394 seconds)
    (156/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073411175 seconds)
    (157/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065385221 seconds)
    (158/341) benchmarking ("sort", Int64, false)...
    done (took 0.066727662 seconds)
    (159/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069166646 seconds)
    (160/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.200608093 seconds)
    (161/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.078394364 seconds)
    (162/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.157787426 seconds)
    (163/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.201361964 seconds)
    (164/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066167297 seconds)
    (165/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.06615211 seconds)
    (166/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.064128443 seconds)
    (167/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.075263546 seconds)
    (168/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06507295 seconds)
    (169/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083181532 seconds)
    (170/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.231326874 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.087108495 seconds)
    (172/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.066037637 seconds)
    (173/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066359243 seconds)
    (174/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.168072807 seconds)
    (175/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066553763 seconds)
    (176/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074835403 seconds)
    (177/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092917708 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.143646993 seconds)
    (179/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.063599686 seconds)
    (180/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074023454 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065132314 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083959576 seconds)
    (183/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.171234617 seconds)
    (184/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.082375936 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.064941972 seconds)
    (186/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.165047008 seconds)
    (187/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.191792424 seconds)
    (188/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065889578 seconds)
    (189/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.130473405 seconds)
    (190/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.063690777 seconds)
    (191/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.072613114 seconds)
    (192/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.234935179 seconds)
    (193/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.082463441 seconds)
    (194/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.155803056 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.149852916 seconds)
    (196/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069719452 seconds)
    (197/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.0669412 seconds)
    (198/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067088921 seconds)
    (199/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069940708 seconds)
    (200/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.077916557 seconds)
    (201/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.065939562 seconds)
    (202/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.063768951 seconds)
    (203/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.067777058 seconds)
    (204/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074695488 seconds)
    (205/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077250088 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091727709 seconds)
    (207/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.164504321 seconds)
    (208/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.155418688 seconds)
    (209/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067552732 seconds)
    (210/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.072760628 seconds)
    (211/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063841628 seconds)
    (212/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.06571099 seconds)
    (213/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.154044397 seconds)
    (214/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.06808348 seconds)
    (215/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.065806661 seconds)
    (216/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.065398556 seconds)
    (217/341) benchmarking ("sort", BigInt, false)...
    done (took 0.266779613 seconds)
    (218/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066810022 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.073896605 seconds)
    (220/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066747615 seconds)
    (221/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124727103 seconds)
    (222/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072653762 seconds)
    (223/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.06564454 seconds)
    (224/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.22470649 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.065625345 seconds)
    (226/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066106206 seconds)
    (227/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067854354 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068368035 seconds)
    (229/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.065898574 seconds)
    (230/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073455431 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.098694494 seconds)
    (232/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.149611228 seconds)
    (233/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.064598528 seconds)
    (234/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.153099578 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.0892183 seconds)
    (236/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064426287 seconds)
    (237/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.088673206 seconds)
    (238/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071142182 seconds)
    (239/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084474866 seconds)
    (240/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.162199496 seconds)
    (241/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064010616 seconds)
    (242/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.065191233 seconds)
    (243/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.167693242 seconds)
    (244/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.063218598 seconds)
    (245/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.073904507 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075288563 seconds)
    (247/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063812662 seconds)
    (248/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.149556123 seconds)
    (249/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.064357365 seconds)
    (250/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.067269464 seconds)
    (251/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.06348851 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070862698 seconds)
    (253/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.071747737 seconds)
    (254/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.081109446 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.130120849 seconds)
    (256/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.175099255 seconds)
    (257/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.07270995 seconds)
    (258/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069302424 seconds)
    (259/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068371953 seconds)
    (260/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.067840218 seconds)
    (261/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.063942415 seconds)
    (262/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.064993322 seconds)
    (263/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.065448224 seconds)
    (264/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.06631402 seconds)
    (265/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151144013 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.06383228 seconds)
    (267/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.065930346 seconds)
    (268/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143430805 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089152589 seconds)
    (270/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.138108928 seconds)
    (271/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.066960691 seconds)
    (272/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072706803 seconds)
    (273/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.09417488 seconds)
    (274/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.067196226 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.086283922 seconds)
    (276/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.067169094 seconds)
    (277/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.0660866 seconds)
    (278/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.1530661 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133076921 seconds)
    (280/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.06515719 seconds)
    (281/341) benchmarking ("sort", Float64, false)...
    done (took 0.137820139 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086718931 seconds)
    (283/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.082716302 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066429993 seconds)
    (285/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066418911 seconds)
    (286/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065006681 seconds)
    (287/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065857036 seconds)
    (288/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.065480269 seconds)
    (289/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072302832 seconds)
    (290/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064054615 seconds)
    (291/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070387114 seconds)
    (292/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075178417 seconds)
    (293/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.065965707 seconds)
    (294/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080528489 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116131677 seconds)
    (296/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.065701287 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089999873 seconds)
    (298/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150860182 seconds)
    (299/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.06580671 seconds)
    (300/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066139126 seconds)
    (301/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.06809863 seconds)
    (302/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.173709535 seconds)
    (303/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066081296 seconds)
    (304/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.065999821 seconds)
    (305/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.065229918 seconds)
    (306/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074237404 seconds)
    (307/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066135951 seconds)
    (308/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132522969 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133638422 seconds)
    (310/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.065098744 seconds)
    (311/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.065178667 seconds)
    (312/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.066619849 seconds)
    (313/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076662473 seconds)
    (314/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.076345543 seconds)
    (315/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069194606 seconds)
    (316/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.06567208 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12275521 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.064450906 seconds)
    (319/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.065014547 seconds)
    (320/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.271251389 seconds)
    (321/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.067447882 seconds)
    (322/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.070180047 seconds)
    (323/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.069089738 seconds)
    (324/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.070591145 seconds)
    (325/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.0779736 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078545171 seconds)
    (327/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.066499284 seconds)
    (328/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.065789312 seconds)
    (329/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.06560124 seconds)
    (330/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.0789146 seconds)
    (331/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065740044 seconds)
    (332/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065645965 seconds)
    (333/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066819522 seconds)
    (334/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066080947 seconds)
    (335/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.070598269 seconds)
    (336/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073696378 seconds)
    (337/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.066697011 seconds)
    (338/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068133335 seconds)
    (339/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.065677822 seconds)
    (340/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.06503681 seconds)
    (341/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.06571037 seconds)
  done (took 37.036812138 seconds)
done (took 38.605215479 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.095235276 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080699766 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078655409 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075482582 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079161677 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077144757 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078469652 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076758228 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077525088 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077202679 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.076756632 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.06506596 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072882435 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.08046409 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074159038 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.080988738 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077769028 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081247752 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066079726 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079928959 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093832875 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077261283 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074089914 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079642782 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065327378 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.074612025 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089878092 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.08667457 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071784096 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074675655 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072978254 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083378247 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.07299414 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071785762 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075132907 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070755846 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074457323 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071847628 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.088846858 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.070939741 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065168599 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077477279 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.07253989 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07345153 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074185723 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077945277 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070854362 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079232132 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064927156 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076267758 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089357785 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070083642 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.07043015 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.071975909 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.068952969 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073242733 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070174473 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075373047 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068558085 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.07499712 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.075214736 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072470966 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065013001 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074089184 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.072448388 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.072604178 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063654497 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070006187 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064682664 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065020541 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063990044 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074313789 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072226411 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.06992913 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063882848 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064682356 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064092466 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077311615 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070968264 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074586071 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.065388208 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.07029453 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069971045 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065269708 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070128614 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076630272 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064286954 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065072159 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063822178 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079420284 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071336483 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064985574 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076623028 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070761185 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070214185 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064617359 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063923743 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069957673 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.07312512 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064718099 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063641399 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070505649 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069957634 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074456655 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065144079 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070099888 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070033248 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063348848 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074150906 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072248353 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074017612 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078064905 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074045011 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077147229 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.06523743 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063624021 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074581057 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.065712073 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070508226 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.072766824 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.070152553 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073125118 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.06526788 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.06384416 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070283496 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.071092995 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.065253741 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.065299971 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.065205919 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.07467646 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.072194719 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.063732495 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065091236 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074636608 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.073753122 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.063559045 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.063962222 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074267741 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.064936462 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070580717 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070557486 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073430112 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064184211 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.064683023 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.063365817 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.063532461 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.063541218 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.070409096 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073383243 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.064926064 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.073126179 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.218503639 seconds)
done (took 12.74837913 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067897715 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108185623 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077686916 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.079882713 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076878811 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.064924668 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068100562 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082381473 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067544443 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088349749 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089477691 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085472063 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094227338 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062792021 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064091635 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065039524 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062724481 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075888669 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080882258 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087497081 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099992311 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.06367922 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079716471 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083709861 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.07863338 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082123739 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065482302 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.06480925 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.06722644 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084014293 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092442223 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.065620117 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.066759367 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084139748 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081243413 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074096602 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06629469 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072481931 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069008584 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065611204 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.067742962 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083951389 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072891206 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073416428 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066825769 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.067093485 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065919385 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073149362 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081395097 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069389898 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07589326 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082798877 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.065803822 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064416365 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062985127 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073544688 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065654357 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066294453 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.066411129 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065386792 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.066072432 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.068173835 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071222689 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.072000677 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069446211 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072583636 seconds)
  done (took 6.503269872 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082799782 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.091229143 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.080566734 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081619478 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.065854272 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.065952388 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.066045555 seconds)
  done (took 2.208959993 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067015455 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.073548427 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.0774826 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.078599603 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.087924354 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.075867217 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066498893 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098156031 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.065439514 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.074546132 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.082012066 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079874701 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069836798 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078829736 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06673238 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.078316042 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066663812 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073512458 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074065401 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080018877 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070627737 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096557933 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080253688 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066879911 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080153873 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.073940818 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.068319685 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066246202 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066768212 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065631594 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066166291 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088782825 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.072544281 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078697481 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066728074 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.065359779 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.070576907 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066663963 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.070274604 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.074955634 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.069609242 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.065432744 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.066127012 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065640771 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066885069 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.070367396 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065947877 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064848437 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.063858494 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.072673644 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.065073063 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.072130605 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.066487998 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069084784 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.06879178 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068361478 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07111286 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.06450682 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071290378 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.071007512 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064464068 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07861529 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077881901 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.069440417 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077974548 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074726049 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.072481027 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.069572156 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065771788 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06518725 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066306395 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078151464 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069171581 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068020075 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.066925886 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071306248 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070057927 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081763051 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.08166116 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079562452 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06867205 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065943649 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.070273419 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081397938 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070881527 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065375488 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065655988 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064882153 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.070964208 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.06604503 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07055644 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.065791909 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.072765521 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069240227 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.068042345 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074287957 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.066083678 seconds)
  done (took 8.6086406 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069249287 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.068487982 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.067040506 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.067128917 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.067685046 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.067321739 seconds)
  done (took 2.115500456 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090492786 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.066680849 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.078099246 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.066387069 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.088873154 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.072989101 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.073368 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068708408 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.0830241 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077796567 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.073184123 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.075758167 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.075000679 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067692602 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.072871566 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067872005 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073320306 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069634085 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076620971 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069123357 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.082673578 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067106893 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06684757 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076649197 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067835622 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065384209 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065825194 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.075067984 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076278631 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.068058193 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067725196 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.069628027 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075005808 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067806322 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.072709504 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075072256 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066241983 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.071846625 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068876598 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.069290652 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075337062 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068169279 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.068783672 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.072118938 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.068180118 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074768436 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.07201195 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07017875 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.072627033 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071726563 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.071734618 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067090861 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.069198822 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.071717161 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075008678 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067915539 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071777462 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.072870499 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067934628 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075405277 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066179741 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069453028 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068390194 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069027632 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071406592 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071722617 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075080541 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068045911 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06822906 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070198752 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071895594 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066324527 seconds)
  done (took 6.831239256 seconds)
done (took 27.917288663 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.543409552 seconds)
  done (took 2.188339655 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.911673589 seconds)
  done (took 2.60124128 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.10108399 seconds)
  done (took 9.796771209 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.337325324 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.395665361 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.726316491 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.129477432 seconds)
  done (took 3.315260454 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.752697347 seconds)
  done (took 2.457040764 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231718621 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.217607382 seconds)
  done (took 2.159734984 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.352814714 seconds)
  done (took 2.044388016 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.143037421 seconds)
  done (took 2.834938414 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.23434777 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162647081 seconds)
  done (took 2.095712685 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.532350247 seconds)
  done (took 2.224656441 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.220610684 seconds)
  done (took 5.917318291 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.230905173 seconds)
  done (took 1.966706016 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230875868 seconds)
  done (took 1.927460563 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.018148482 seconds)
  done (took 3.70893257 seconds)
done (took 46.936224113 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.083306636 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083697983 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083405093 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078413218 seconds)
  done (took 1.994798519 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074283253 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.069658448 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.072862629 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.073085357 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.071142801 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.071682577 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.072747496 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.069147617 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.071209379 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069262844 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.068183943 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.069525303 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.072257768 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069416507 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.072158763 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.073344404 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.069554191 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.069333803 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.072088572 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069228552 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.072332637 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.069483193 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067428026 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.068986399 seconds)
  done (took 3.390711218 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078576886 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.071566718 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075022487 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.070416425 seconds)
  done (took 2.001405539 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.076534056 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.075758465 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.085206326 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.089875625 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.075009641 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.076020599 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.083697475 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084020815 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.065038258 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.086946042 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.067741722 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.066259981 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.06610014 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085488472 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.082555042 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061449554 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.062971766 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075161219 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.073699002 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077302537 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.065709986 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063157465 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073629831 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074541568 seconds)
  done (took 3.495752087 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082052071 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.064339873 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081443369 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091125179 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.091599099 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.064547579 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079134991 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.092263217 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127864549 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.065006491 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.071139414 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.065108616 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.10468077 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.065069718 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.0808656 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108453185 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111944508 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.068924462 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.098925767 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065194773 seconds)
  done (took 3.397126681 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076134154 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068769818 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.069820875 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06481211 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.076287908 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.072744714 seconds)
  done (took 2.145387333 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068135044 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.067359638 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068832585 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.071829828 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.067243275 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.067182518 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.066740476 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.065480266 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.065615229 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.06614574 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.066389275 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.066573545 seconds)
  done (took 2.516231491 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.150454465 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.068773695 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.069677942 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066136433 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.067010188 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.06604137 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.080945422 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067922079 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085028853 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.066441954 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.066530968 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069151002 seconds)
  done (took 2.633820823 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104378675 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111526911 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145227383 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117263992 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116270266 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097004517 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.126227449 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095298213 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160057237 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.13769303 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117550284 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092276875 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084380027 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068718916 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099821848 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118509203 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137732766 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072278223 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112712228 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.163828184 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132745565 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.133726078 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14549528 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114270503 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087932742 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145813936 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094989993 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100102809 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122134538 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125243004 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119933466 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097631515 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070967685 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070178782 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149706779 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104130532 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121239906 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092786563 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105272628 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088396815 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106433434 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069185189 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.085373433 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113719904 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084720516 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129567426 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.08573773 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112596545 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078927173 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134600046 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121635978 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095260799 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082980003 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103387793 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.290987291 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113311566 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135161231 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107564257 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083025483 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119554001 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103091534 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101249674 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108414065 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080144605 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.178705571 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088776905 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112246742 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112283915 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.094637403 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094872972 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107302521 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136135978 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125964466 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.125972937 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138700788 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095105909 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121946437 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.103857326 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128242766 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105330167 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072693766 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121969319 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130237064 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100082542 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101581065 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130390291 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092319224 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077686537 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.099619465 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118623944 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080312336 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.112737969 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080908192 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.109461221 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135375411 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096790082 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112733488 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116659953 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076436125 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151893715 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107358454 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072502794 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117756464 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114167404 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156307022 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093908893 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.075521768 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098315627 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.259886297 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146608443 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107705131 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080422722 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111232804 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140816241 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095749251 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170164774 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095791554 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142177706 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113282628 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087186213 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075146601 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090372256 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112719702 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107735484 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112905432 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090300459 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084618688 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086806042 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112563421 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091408267 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080663387 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113989593 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.101826817 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074906018 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088896248 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.079071843 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14239568 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076574643 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134963477 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122942798 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076319688 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104195334 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095831034 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106159294 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.09515928 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114235634 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137518445 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113846849 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087922081 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091272948 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106153493 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141227142 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124739728 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090072627 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074544586 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098190498 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109522048 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094744077 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123654988 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097173433 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106575905 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100399626 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138742935 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140369816 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096908628 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097342236 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103255942 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.118487276 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074505488 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153453364 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101539979 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113439375 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082460748 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138049708 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111916955 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086457531 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083357462 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095655019 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.098851473 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101321328 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137068473 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094192988 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071497375 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090869556 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139221682 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074466615 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107316356 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.08928285 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090819799 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116437554 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090320894 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078839461 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067592105 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124537902 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.153600433 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068063182 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112062185 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.112582101 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099318924 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.116434367 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067814411 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114627368 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13475355 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11377486 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135646536 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14132435 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112241697 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114678518 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.109882607 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102154433 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077321141 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.121598267 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.130328896 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092648514 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089341048 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130468301 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115961676 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.140446985 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.115977099 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10505442 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101116241 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.384363635 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104658664 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.105655645 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.15092065 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125358872 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.127934446 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086629397 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106254441 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117538063 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134558041 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082444624 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14275945 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.083227517 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11724062 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07669326 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123750896 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.079022338 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.111769074 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078830623 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101651418 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070705281 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.076384023 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144474475 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.115141225 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108849661 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101442689 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.136527854 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134301726 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078955026 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105773141 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112704398 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099146447 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113904128 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107185929 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086665904 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092926361 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10694291 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083110676 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079589969 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112267785 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092040984 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1255984 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082018466 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073130416 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138433805 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102647396 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093379002 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075921071 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105685551 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119530878 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090707939 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085943966 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116287715 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10554566 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142959131 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091333273 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098256692 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.126054979 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080341042 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092581029 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.068744219 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085382438 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.075239068 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.289997585 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074207565 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114243103 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067338704 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127110272 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08483634 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090730566 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099667037 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108572177 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125010824 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092527134 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137747937 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087159632 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115207853 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105351324 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091616459 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086125148 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102861724 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101487194 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.123718089 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096776282 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124235456 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144807215 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105648895 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14263033 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091845469 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123070539 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107174602 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124893806 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111621319 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145810369 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135864125 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110606231 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110012047 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073352156 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093224511 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103773125 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109701554 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173823135 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124182321 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070306792 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104030444 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091486736 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106113022 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103037891 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080463573 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144425393 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100542535 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088711259 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114361764 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090896827 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102621214 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073939296 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09324766 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.098037863 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.253020844 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096191651 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112951922 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125167446 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110632949 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139704255 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097367295 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.09037259 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.115549172 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10952889 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111372975 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086646385 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086784204 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136897657 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116271639 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125991353 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.097529886 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106932358 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108869649 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098227934 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123128742 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105818938 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.124450168 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078282837 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075587118 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.068215223 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.072104719 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124586382 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109250302 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112399534 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097468566 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.071701065 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103884878 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106717622 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071924478 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089459398 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094808084 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099094068 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089870934 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107667951 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114557867 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.09157081 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105037096 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09955948 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148094139 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100272334 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088972414 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144760659 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151397985 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087510303 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092819343 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.071655351 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079326888 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114701562 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151218245 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1534111 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078734425 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086734982 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085548187 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086261993 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.227960303 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.084140521 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.089955065 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105366863 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099033995 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113320596 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104698751 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075506557 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101943156 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099552454 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091993988 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104492228 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118443979 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125100222 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.139491641 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107117897 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10611561 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075996766 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080547745 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07566688 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079350632 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10242778 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078929515 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076194446 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144027712 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.091881723 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105248999 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109362095 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089369368 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075630027 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13464497 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.069108762 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135544608 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.070953265 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082408835 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082738676 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079335088 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094479152 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139160356 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107624628 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111827478 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107264608 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105074433 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142687382 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157904783 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080831153 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144139033 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07588552 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075293492 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07581539 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11388351 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09013043 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115447895 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141806771 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091772911 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105349399 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077477576 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144446865 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09977399 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105310374 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087491534 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079119407 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.303592304 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080308863 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.080827684 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090715059 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111614392 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07246032 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104548964 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084953898 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079341115 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142904996 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.630318535 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090133194 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07541484 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096128687 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142682928 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128519703 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09564418 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109066743 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119188177 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100035544 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095661663 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108272942 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185243043 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074605911 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095635248 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104220176 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099272674 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103448512 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.099116447 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.084766012 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093233073 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087103937 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079961027 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108479457 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089662364 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097838395 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108028254 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082616409 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087143807 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.129454323 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101475858 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.079901539 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086590814 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103769639 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086827895 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099139817 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068162912 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114638017 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091573489 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118349727 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095866407 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10798257 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127653268 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090489285 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139338294 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.106510594 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120531665 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085496524 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077734751 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125273098 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.086205671 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076056771 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.30384049 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092779076 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091069431 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103589702 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097852201 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113548707 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118306366 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112436027 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097729052 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079168557 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100979704 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.102839702 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08569166 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078119774 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072842283 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074751472 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105861876 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083778033 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081912202 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112365153 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088848551 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103664484 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101343147 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.123633179 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08414103 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101923396 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111492577 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093245624 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110806143 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101601116 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129362321 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.17486433 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123377236 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126243303 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13189716 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074606609 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073540782 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066439243 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115565285 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079499883 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089852018 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081439961 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134926755 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08201432 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112718683 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.231148152 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080097479 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094862501 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09693408 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069598323 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083433904 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108262388 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087245547 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080487086 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120486906 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08371391 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129375238 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111864519 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101221011 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095827311 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081517566 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115873219 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105416693 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.12983905 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094958619 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.074874233 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.269218387 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101235227 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134732796 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071013332 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078474552 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125862145 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100750444 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129700494 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079336868 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150345839 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141903526 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099838755 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134989571 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07128393 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084039343 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089667261 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126665378 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085202644 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111590798 seconds)
  done (took 67.514387095 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.148561487 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.150614618 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.092069015 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.112291717 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195560521 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.206481307 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.13104118 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.102388024 seconds)
  done (took 3.033645761 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.068424951 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.082261812 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.080521602 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.207671847 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096426916 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.067588365 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071868554 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.079892807 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.064836468 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.064415339 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100148883 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065240337 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065291312 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.365125698 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065207675 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072172946 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.066994315 seconds)
  done (took 3.56645566 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.33487898 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.981957823 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.236811963 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.262108115 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.14320839 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.553049497 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074602134 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083030462 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.695495628 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.36967138 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.137433412 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086245754 seconds)
  done (took 19.848135697 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.075708899 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.076475227 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.076142838 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072738206 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072616636 seconds)
  done (took 2.245095296 seconds)
done (took 119.500153243 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083836258 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.173536167 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067867049 seconds)
  done (took 2.151967143 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.08078381 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.079555736 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.078675372 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076196212 seconds)
  done (took 2.202461492 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.074584864 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074551002 seconds)
  done (took 2.024237941 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.218204437 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.173095562 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.087887625 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.081399071 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077252492 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.077762 seconds)
  done (took 2.128444606 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.071303781 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069296085 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069706677 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069687127 seconds)
  done (took 2.158217015 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.067571846 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064285085 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.066603734 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069177518 seconds)
  done (took 2.148751385 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.084113464 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085878805 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113965752 seconds)
  done (took 2.162739726 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.082622974 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.080526006 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.075551951 seconds)
  done (took 2.125225318 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109137905 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097213264 seconds)
  done (took 2.085509851 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.079883903 seconds)
  done (took 1.966010195 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.08996543 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095549844 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.136951753 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.105811786 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.137749581 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.12314048 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074567035 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075661871 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071280496 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070530804 seconds)
  done (took 2.859929443 seconds)
done (took 26.447811334 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07977661 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.362722719 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.357088089 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08456486 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.669122828 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354074994 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.984065681 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091819476 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.103215973 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066304394 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084789049 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649106822 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.971971601 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.322516895 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.958523287 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.320108517 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651752976 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068565851 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067485628 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068283436 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.968981269 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068175163 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068536015 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06877704 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.649464167 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.37374234 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069212048 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.321023952 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068397918 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074139303 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357644635 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069638427 seconds)
  done (took 16.322423769 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.069077938 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120205694 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07055888 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082937812 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.07044543 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069343539 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071231776 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.068846109 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112985421 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067787395 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084991709 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066486034 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072084261 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070264658 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089011162 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068129041 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07101507 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071353986 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068131057 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068958953 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086322914 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065437185 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067380953 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069228196 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068849496 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081758282 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069403216 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069317121 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069884237 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072780616 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072840787 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069896806 seconds)
  done (took 4.292188625 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.118929335 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123468153 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070827538 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106408039 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115217257 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070159794 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.151523921 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092221369 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116188902 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069004482 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086484301 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068319955 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.10500343 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069896413 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088028171 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068408492 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069156419 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068618431 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067540542 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066755015 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084883569 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06635056 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066502734 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066753675 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067002974 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081013214 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067283552 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066699473 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066146633 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070381585 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071317466 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067536497 seconds)
  done (took 4.50750882 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.068152387 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069117583 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075907212 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078526257 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064321143 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066537952 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067384797 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064446899 seconds)
  done (took 2.456509329 seconds)
done (took 29.474182163 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.07739743 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065539182 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.06908998 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085200456 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071605853 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.067943997 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063425435 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.074175939 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070730459 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.070954331 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.072613852 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066501501 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069558633 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064109351 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071687804 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065507733 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.071935953 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069650515 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.070166957 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071775365 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067625023 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.07090278 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073687319 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.070105112 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070665559 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.07012997 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074925047 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071693324 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065890683 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068409956 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.068070947 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.08129156 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.072476575 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.072378055 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066242078 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065809347 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.07022278 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.068418363 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.072301514 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074672173 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067870376 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.074651822 seconds)
  done (took 4.81222609 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.087502935 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091786825 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084232061 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079291471 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.10484033 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079200662 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088991377 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076971094 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075064024 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.087888091 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071045927 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.0764102 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079636953 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.074862454 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.077750254 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07407953 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079578353 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.072790761 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077914417 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078052496 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091861434 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.071054507 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.07859962 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.07921872 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073500526 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.079148892 seconds)
  done (took 3.999992351 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.071449138 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.085921485 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090450615 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.138746821 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.10722821 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.080683809 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.082117284 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.093692627 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100412498 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.067563818 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072113755 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094318481 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096055908 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.074417286 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106487363 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.086241175 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080166272 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069375479 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074539002 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102328662 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090380435 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086713021 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.100302103 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.08817983 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066885643 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.07712544 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074563338 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084086082 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075137183 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080628289 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072164471 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071531982 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068131175 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080727907 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074534039 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.065775046 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.090068098 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081149217 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082448988 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106006974 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078434394 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069254731 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098316925 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133441593 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067267165 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070682341 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071562243 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080649285 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069507761 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097594317 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086444372 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.06752789 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.08692373 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.069327005 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.069071894 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085061221 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.069236171 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.111829774 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079809501 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073917795 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088146953 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072570597 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089188359 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067062833 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079288884 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068889241 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068842472 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065700571 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.10723729 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074495231 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120708804 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068198722 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065285597 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079920232 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.079160616 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07389158 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066841638 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087702975 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079347062 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070590208 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078694041 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070061902 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070596607 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.102852785 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066255379 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065167764 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065036795 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069621204 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070515861 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067501053 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080992149 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066672024 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070523913 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.08286416 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067177261 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067514871 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069623003 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068626664 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066721806 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078434254 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071185052 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.068950628 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079963708 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068304444 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070339858 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.081806645 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076736507 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066478498 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068123103 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069527912 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069210883 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07135542 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070375518 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.068939201 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074427599 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074727318 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073193797 seconds)
  done (took 11.174843938 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.161383082 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.150693851 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068442604 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149143024 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07600024 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.071982665 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.15066036 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088098437 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067633739 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068803277 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067467334 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.096375189 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092032061 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105507134 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.072243724 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068444004 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093882786 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.101629903 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152575629 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.1473947 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.091767702 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076125396 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070936166 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069410221 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068995798 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076676532 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.087147718 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076929685 seconds)
  done (took 4.609630465 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.072580442 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.081359723 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070001064 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.08987056 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084140957 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066027093 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.06781605 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.06715451 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.082834053 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072529475 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066351108 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.070325624 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.069841199 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.066724093 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.066639549 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072350535 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.072467028 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.064882554 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.069394318 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.070437942 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.076066476 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.091122033 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.070257606 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.06635139 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070532805 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.068108763 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075428786 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.077885952 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067570836 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.098631581 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.0649144 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07225547 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082255824 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068985887 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067797561 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.06845156 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067751611 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.068196936 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067996039 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.066073843 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065521209 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073268149 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066166656 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073921222 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082012848 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076076055 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068075482 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072918076 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070084879 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064893359 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.071484405 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.07087456 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070203606 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076282238 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071578907 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070233817 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068924301 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099423234 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073955579 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067415594 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067139525 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065582949 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069462654 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076420875 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084033055 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069734499 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065633401 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067779987 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07236214 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081648316 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067153475 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072762397 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064587089 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067679506 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069901629 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070647867 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068819516 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065627322 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067659485 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067727889 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067969473 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066984329 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067138025 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070285652 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065368136 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065778737 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067973483 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068998438 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.074260835 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066384263 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070363965 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068843194 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066470841 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070139773 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073537529 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.071004908 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087885346 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076382297 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068083649 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065571895 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082129988 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069800306 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.067143892 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.073296484 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072215872 seconds)
  done (took 9.464772274 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088814635 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067423342 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.085890211 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.092414475 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079021213 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07158344 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081818098 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.068480904 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.083871935 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066441387 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076794896 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.065699335 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080835045 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077028694 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069398985 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.078231889 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070187653 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.08821081 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.082268765 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066212486 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076747542 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080006751 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080484263 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085804989 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.085834548 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.086931342 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080428549 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070530244 seconds)
  done (took 4.144342968 seconds)
done (took 40.096538243 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.973517923 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.138063272 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.967856183 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.232688687 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.212398194 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.967924011 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.205453424 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.960028027 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.028829141 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.009793062 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.276881452 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.327968731 seconds)
done (took 68.265151141 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.983335658 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.105273713 seconds)
    (2/2) benchmarking "String"...
    done (took 2.1913387 seconds)
  done (took 6.189161066 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.558378284 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.961094595 seconds)
    (3/3) benchmarking "different"...
    done (took 2.008349129 seconds)
  done (took 8.416617013 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.060957324 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.596872935 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.219615147 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.959063997 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.960110015 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.368822958 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.754077402 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.423406844 seconds)
  done (took 33.177134752 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.218396387 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.211619589 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.651022158 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.682453342 seconds)
  done (took 16.695511143 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.562962293 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.217350959 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.216312592 seconds)
    (4/4) benchmarking "different"...
    done (took 2.21015087 seconds)
  done (took 11.156934042 seconds)
done (took 87.659614214 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.946179599 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.169947681 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.961358322 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.105081561 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.991146052 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.98496549 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.953587332 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.999033059 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.952796 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.95237054 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.400202988 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.954268473 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.959148108 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.989761704 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.951766186 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.985209822 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.591291415 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.948470231 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.012451934 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.634785758 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.460538551 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.943065019 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.95585037 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.008893356 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.063269486 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.987965716 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.953312974 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.950301799 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.55401483 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.959382761 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.956624652 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.948871888 seconds)
  done (took 210.073039183 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.947348832 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.863770829 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.944329381 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.991044059 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.308534932 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.144797833 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.087724935 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.377228745 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.951287044 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.972936685 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.149137796 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.948941349 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.180692373 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.904264024 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.945074829 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.035930383 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.116163869 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.159634211 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.944498092 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.140749948 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.974456132 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.000283758 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.957038193 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.118192847 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.98287031 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.99796803 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.972080134 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.981914317 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.142961588 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.096262234 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.961138678 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.952451588 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.083179388 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.815338009 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.959908539 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.950619062 seconds)
  done (took 175.94678383 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.130733115 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.958236312 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.008685781 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.086023991 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.700411359 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.677302436 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.950295385 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.952129049 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.950726616 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.955671101 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.946459168 seconds)
    (11/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.949159101 seconds)
    (12/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.94721111 seconds)
    (13/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.95771952 seconds)
    (14/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.014672428 seconds)
    (15/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.812675131 seconds)
    (16/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.214455782 seconds)
    (17/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.955494355 seconds)
    (18/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.956633269 seconds)
    (19/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.213388366 seconds)
    (20/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.962823877 seconds)
    (21/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.955219557 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.955127183 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.031368346 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.329790168 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.200237142 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.960789682 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.965282478 seconds)
    (28/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.957672478 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.964531101 seconds)
    (30/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.092712372 seconds)
    (31/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.960344235 seconds)
    (32/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.088665246 seconds)
    (33/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.960091309 seconds)
    (34/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.032121058 seconds)
    (35/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.094552752 seconds)
    (36/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.967214468 seconds)
    (37/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.038610347 seconds)
    (38/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.965405556 seconds)
    (39/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.457975035 seconds)
    (40/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.956181751 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.955511755 seconds)
    (42/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.958103352 seconds)
    (43/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.021108864 seconds)
    (44/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.959455644 seconds)
    (45/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.06906886 seconds)
    (46/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.044422821 seconds)
    (47/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.954865757 seconds)
    (48/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.969266009 seconds)
    (49/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.157754495 seconds)
    (50/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.639617827 seconds)
    (51/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.957964724 seconds)
    (52/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.958536186 seconds)
    (53/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.958360567 seconds)
    (54/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.958746055 seconds)
    (55/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.958360893 seconds)
    (56/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.235508244 seconds)
    (57/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.96448745 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.984862909 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.632784655 seconds)
    (60/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.962139078 seconds)
    (61/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.959895617 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.960840765 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.959415888 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.957873716 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.965758586 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.998704708 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.775003341 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.019013393 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.349656397 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.78146508 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.963203231 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.55422125 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.020284975 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.963581576 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.040571302 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.956372043 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.958026363 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.958091322 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.961932828 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.104336868 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.051850355 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.939974578 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.082322514 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.967048944 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.959018828 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.085490261 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.260324096 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.965874849 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.97930651 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.020974908 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.966371659 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.965605747 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.972238139 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.084499664 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.96399015 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.965708673 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.963677141 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.075881424 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.968778184 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.472888012 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.192817622 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.039218349 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.208773909 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.217572569 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.967004029 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.962014015 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.97158963 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.944111521 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.966911545 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.976309725 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.9672352 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.963352942 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.966719293 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.96625324 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.96608978 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.970684594 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.980461503 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.968919763 seconds)
  done (took 430.423889514 seconds)
done (took 820.502476215 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.670842425 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.742795137 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.585727841 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.627849895 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.593688465 seconds)
  done (took 15.122788314 seconds)
done (took 17.022917854 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.988011908 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.981114189 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.971853222 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.991305912 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.986481766 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.985045223 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.018119532 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.008409816 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.004883408 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.982781558 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.993650631 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.987470269 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.991201176 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.006396095 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.997069492 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.991046552 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.985383955 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.977293796 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.99285823 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.985513317 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.986668335 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.984943704 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.985685898 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.99026069 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.00052589 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.988387417 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.982000566 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.989685138 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.989123271 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.991055416 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.024338589 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.991422096 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.018875744 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.997357907 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.994451619 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.997157369 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.985241111 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.011925013 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.984011742 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.026148462 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.993647395 seconds)
  done (took 83.643018204 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.975870176 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.111439105 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.183279232 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.003920421 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.972319654 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.209456135 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.030845475 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.101486541 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.10133143 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.191196972 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.201545098 seconds)
  done (took 24.989301374 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.974543698 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.113376918 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.188141539 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.008428664 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.997760429 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.188551103 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.037892099 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.105453077 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.110596857 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.190597268 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.200315668 seconds)
  done (took 25.025801474 seconds)
done (took 135.560422704 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.346149058 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.998418823 seconds)
  done (took 6.249218515 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.974133579 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.989653447 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.118136562 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.974442226 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.973611534 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.975761153 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.976238384 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.971298224 seconds)
  done (took 17.860778484 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.971039639 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.973366866 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.97224739 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.971788697 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.974095484 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.971248303 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.972275793 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.971122585 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.971836751 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.971825259 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.972323469 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.974195197 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.972970481 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.971297182 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.97281479 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.972148627 seconds)
  done (took 33.461846681 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.971153125 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.973462973 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.972582269 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.973155973 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.971657858 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.972749495 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.972207279 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.97160541 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.970970688 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.972561695 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.971684199 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.973448428 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.971293631 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.97187732 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.971951976 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.973608991 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.971687774 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.973337909 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.971313069 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.972912038 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.973673141 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.973022005 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.977415585 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.974214321 seconds)
  done (took 49.251862136 seconds)
done (took 108.73171306 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.133956329 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.493427164 seconds)
  done (took 8.535850879 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.974459167 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.97156594 seconds)
  done (took 5.910346646 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.972894584 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.973620021 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.973508923 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.97391082 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.974474147 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.973984803 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.972817824 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.974485725 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.973473051 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.971591459 seconds)
  done (took 21.643123754 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.9725029 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.972492569 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.975422405 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.972619164 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.973045971 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.973425844 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.972974484 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.97529079 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.973078123 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.974847583 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.975106921 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.972646647 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.973121094 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.970867538 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.973647238 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.97555487 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.972997414 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.97448522 seconds)
  done (took 37.434858587 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.974057458 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.974777865 seconds)
  done (took 5.858329056 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.975311792 seconds)
    (2/7) benchmarking "second"...
    done (took 1.972494822 seconds)
    (3/7) benchmarking "month"...
    done (took 1.972663597 seconds)
    (4/7) benchmarking "year"...
    done (took 1.974284241 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.974247131 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.974339014 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.977114523 seconds)
  done (took 15.730389375 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.974600152 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.135536936 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.193024036 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.575020805 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.976565961 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.979460423 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.857007965 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.979309281 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.98010997 seconds)
  done (took 21.560460565 seconds)
done (took 118.58013976 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.813486187 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.977493168 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.282117385 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.033322386 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.976058625 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.274006064 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.958507749 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.519053916 seconds)
done (took 43.734380281 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.057840746 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.972966852 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.003268955 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.000233354 seconds)
  done (took 22.888457409 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.974786762 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.270443105 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.993296917 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.916628942 seconds)
  done (took 23.079200933 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.357029113 seconds)
    (2/2) benchmarking "read"...
    done (took 2.315260875 seconds)
  done (took 6.586004045 seconds)
done (took 61.521984002 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.976429106 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.978793523 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.976219305 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.976863487 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.977226094 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.976187385 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.976849815 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.977992235 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.978810086 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.978457635 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.976402485 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.976175699 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.976627447 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.977349314 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.976869746 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.976785166 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.979414009 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.977174373 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.976934163 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.97771941 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.978303888 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.978479224 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.977929993 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.978388872 seconds)
  done (took 49.370917014 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.978074885 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.977274265 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.979531501 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.977307431 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.978190224 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.97603088 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.977776284 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.978892366 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.979233808 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.978407458 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.977713989 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.979860393 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.981359227 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.969696492 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981062419 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.980366786 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.978112163 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.977403861 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.977009895 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.981394187 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.978442188 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.975578572 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.977704318 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.979012372 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.980405001 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.97931843 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.977805848 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.977622273 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.978085441 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.976221828 seconds)
  done (took 61.258404652 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.979193881 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.980193243 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.978553662 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.977789592 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.978645725 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.980442978 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.979434054 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.977404081 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.979212244 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.980735237 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.979679321 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.980096918 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.980947831 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.980470214 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.981453853 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.97890877 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.978259814 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.97822725 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.978533527 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.978005677 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.977514221 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.977704828 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.978623014 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.981178149 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.98007686 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.97696904 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.979497094 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.978419593 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.979335028 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.976792246 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.978599927 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.977314892 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.979677129 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.977848357 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.977524031 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.979640277 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.981258922 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.983927801 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.990832732 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.978722318 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.978869605 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.978478295 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.980010423 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.981481815 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.978270476 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.981800915 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.981024268 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.980734932 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.979768228 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.982965753 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.979760826 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.979019185 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.98026568 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.981870735 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.977443749 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.981405299 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.980778501 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.981243839 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.983247667 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.980726793 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.980933648 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.982397491 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.982691272 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.983492848 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.981221209 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.983592607 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.979742989 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.980946833 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.981555254 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.982060665 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.980535167 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.980662428 seconds)
  done (took 144.483010231 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.979569894 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.980938968 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.981006032 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.980607208 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.977846222 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.979580995 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.972718039 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.982782162 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981600596 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.981430441 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982641641 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.976280835 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.984825328 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.982795513 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.986092338 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.9805665 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.983294041 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.983246474 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.981617619 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.983970267 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.983581417 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.981556538 seconds)
  done (took 45.506932834 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.984339104 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.983038755 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.984560111 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.979901301 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.983972549 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.981572467 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.984312851 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.983469063 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.979862989 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.985120017 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982599984 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.98109736 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.980292114 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982906032 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.980783673 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.985437028 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.985542784 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.987153647 seconds)
  done (took 37.614990961 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.983281398 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.98591518 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.98212226 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.979754507 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.983405893 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.983410378 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.982074555 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.984197369 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.983737404 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.984874925 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.983304089 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987371818 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.983208685 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.989293691 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.98460538 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.983561034 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.986728279 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980715976 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.985375099 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.982941085 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.982529175 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.981266739 seconds)
  done (took 45.564818623 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.985649585 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.985965213 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.98443378 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.985550551 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.984871596 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.985577948 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.983760029 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.985013806 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.985505906 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.98414055 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.987314411 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.985684898 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.985848771 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.984671781 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.984384369 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.984493216 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.986635102 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.981939328 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.982907537 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.985735985 seconds)
  done (took 41.620512294 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.990337686 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.989368202 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.987459059 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.987696841 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.987163413 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.989919031 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.987828547 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.989893698 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.987809567 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.988231799 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.986621356 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.988468744 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.985805387 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.986543494 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.98944949 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.989072815 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.988246664 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.987493623 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.98868589 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.989210435 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.98898025 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.990364316 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.990342693 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.988401718 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.989744977 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.988486954 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.986231236 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.992893952 seconds)
  done (took 57.602934906 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.98511565 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.988738524 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.986120485 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.988265378 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.987920283 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.988580396 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.987942019 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.983477364 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.988769556 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.988144357 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.986441069 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.987369538 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.989621106 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.988133677 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.990276347 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.990911828 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.989604841 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.991610741 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.990469753 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.989041005 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.989848592 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.987497643 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.987419957 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.990657256 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.986032435 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.989217249 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.986426166 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.98804303 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.987271367 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.988801733 seconds)
  done (took 61.57191142 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.004856004 seconds)
    (2/2) benchmarking "in"...
    done (took 2.003579334 seconds)
  done (took 5.934842098 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.988945445 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.986132158 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.990033387 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.9868526 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.991525268 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.989233215 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.98997535 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.993078648 seconds)
  done (took 17.843478587 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.990679827 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.996586729 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.991076784 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.988503692 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.991517667 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.996949725 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.990524821 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.991010937 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.994943256 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.989453983 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.99717989 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.996013398 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.996704966 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.994120114 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.966841576 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.986770663 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.992289082 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.994660229 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.968741364 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.990698771 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.993961803 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.991221986 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.989617642 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.993080192 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.988648108 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.991973411 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.001300151 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.994096424 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.995882475 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.992734731 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.002524807 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.988776653 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.994371856 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.994638005 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.995286245 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.991406943 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.999736312 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.993314226 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.993075208 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.990360526 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.994357399 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.994549544 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.992032193 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.000351282 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.996026695 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.991620349 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.989765174 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.996171257 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.991358905 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.994867277 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.000677005 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.992602092 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.991794335 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.989731715 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.994388863 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.997067269 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.993524281 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.998418647 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.998782581 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.99304505 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.000123316 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.016626578 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.004863959 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.994777893 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.996121212 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.008820202 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.020987092 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.996728908 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.995573662 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.992057077 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.001817063 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.991313846 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.992403077 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.99316247 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.007030339 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.005757325 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.992113047 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.995749135 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.991644406 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.99309509 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.999221837 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.995893854 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.994838636 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.993070398 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.006768569 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.022686301 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.993235214 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.996668447 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.998280801 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.995482865 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.000798189 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.999588361 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.994912293 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.993860722 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.995234698 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.997912837 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.995835061 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.994620939 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.992331888 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.005092819 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.992919955 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.99779427 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.998239738 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.003154806 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.992535415 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.996963199 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.995574179 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.996692465 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.005513864 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.000308744 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.994780728 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.996362337 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.997402271 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.998631032 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.97835584 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.991544399 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.009083879 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.006659959 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.000307904 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.998093027 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.999664763 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.00225691 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.009471421 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.02863439 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.994240698 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.00353031 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.998324476 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.009407572 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.001590686 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.994402784 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.999122835 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.997995693 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.995530875 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.996864144 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.992558566 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.998314761 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.997248427 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.997058826 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.997329473 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.995867953 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.998801177 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.000077163 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.001669982 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.999587752 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.002627041 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.996535932 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.999794157 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.004298687 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.99763007 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.99827005 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.995553992 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.001666798 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.996542666 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.997686376 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.995500789 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.994690782 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.001437789 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.996538283 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.999738171 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.996981352 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.997959926 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.99808632 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.003035461 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.996468016 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.000488074 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.995318014 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.998853131 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.99899334 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.999628713 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.001054836 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.001367742 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.002551712 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.002160706 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.997736184 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.998218593 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.002537545 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.995931783 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.999303429 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.008363984 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.012637085 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.008104532 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.009399404 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.997660188 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.010250666 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.998350326 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.999990977 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.999784433 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.002340999 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.000921883 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.998802866 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.997336941 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.008576779 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.020909164 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.00814402 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.002395775 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.000909346 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.006663021 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.003550708 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.006078191 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.00152999 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.003715101 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.002233493 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.001511066 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.001843097 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.000875586 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.007049957 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.002869747 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.997056572 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.003516201 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.001472962 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.997084551 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.003389921 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.000332748 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.002585743 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.998946734 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.000742287 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.999636639 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.002068504 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.01031125 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.006772935 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.00224657 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.001720428 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.004646644 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.004047748 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.003915065 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.006766352 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.0067817 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.003594431 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.003067721 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.011717995 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.00533122 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.003244341 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.000271112 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.001388474 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.004551454 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.007413111 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.007862473 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.011130647 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.007187182 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.999574336 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.008425354 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.001076792 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.007781582 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.004498215 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.005505506 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.002995256 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.004779259 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.002479379 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.002072013 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.011094154 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.001744141 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.00636069 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.003366431 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.005321967 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.001279709 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.008002663 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.005252688 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.009807559 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.014726341 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.010946604 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.003746326 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.007831192 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.008891798 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.005224923 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.006151507 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.009477477 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.018370509 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.015680415 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.004007671 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.001139766 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.003759753 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.007854106 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.00694943 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.004902832 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.015000587 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.003427552 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.004955944 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.009137832 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.008702612 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.004832643 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.010219378 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.008468971 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.006979243 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.008280087 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.007545998 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.010321159 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.003567402 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.006138838 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.007649044 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.009236507 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.008176162 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.005361716 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.008195368 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.003507256 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.017518375 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.002123859 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.006861465 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.014589502 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.010343614 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.00595864 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.005790316 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.007396895 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.008810809 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.00822715 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.005845964 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.006551296 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.005969792 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.011632638 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.01365454 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.009251479 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.01394803 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.005919562 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.018820122 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.01062157 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.004746056 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.006646314 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.009725898 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.015183286 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.004430863 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.005051591 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.014381095 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.005709362 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.006163929 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.008199601 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.0052004 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.006867179 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.008900302 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.006706168 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.011429245 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.011264671 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.006276596 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.004924791 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.006092538 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.006975702 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.010406742 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.012952514 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.007618512 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.006676862 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.005025457 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.008593925 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.005777325 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.009468201 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.008065257 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.007178184 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.003540187 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.013315793 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.010130803 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.008977721 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.01577559 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.007142529 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.017761777 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.01094357 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.009096623 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.008010549 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.009480359 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.010188037 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.007015467 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.009692106 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.007875852 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.007868581 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.009491418 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.020903112 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.018038547 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.013560688 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.010745541 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.013742442 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.009477429 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.022665598 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.036360268 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.009006668 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.012301304 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.01302573 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.015720568 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.013763476 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.01466989 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.015596009 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.023331606 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.013238612 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.00799991 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.014981506 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.021857551 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.013006435 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.004843494 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.010389752 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.015107631 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.011952903 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.011316138 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.007236677 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.017079638 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.009967875 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.024119442 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.010583759 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.009792688 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.011735245 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.004987818 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.013987227 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.008474243 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.015013342 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.01171189 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.010194169 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.012105467 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.015044405 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.014739331 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.012069988 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.016805406 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.022389741 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.014539209 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.014005987 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.010187635 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.013350706 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.014703846 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.015094034 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.010021657 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.01217096 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.008545006 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.011132065 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.019613004 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.019952871 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.017514129 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.011967302 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.009126562 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.015065059 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.010601075 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.012572833 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.016459132 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.021355204 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.015331697 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.023285338 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.023971876 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.013367624 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.013751747 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.017791804 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.021100165 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.012568371 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.010447953 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.012479442 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.015329273 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.016877317 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.013690776 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.010662844 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.010662946 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.01991917 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.011912243 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.009296959 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.01411259 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.012585983 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.013818888 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.018242577 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.019840811 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.011367467 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.013938488 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.010086315 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.011432932 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.013474068 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.016512985 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.986854611 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.013310578 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.014826209 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.018071815 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.015785241 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.009997186 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.013586819 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.016965282 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.012066246 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.014966896 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.009250344 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.015227011 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.012540852 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.019774504 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.019082913 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.014621563 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.017739918 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.01358283 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.016105629 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.013076334 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.014392516 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.018379427 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.009586703 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.022881414 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.014234566 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.01715118 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.012592155 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.012998091 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.021039686 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.019048449 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.020733392 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.0163065 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.012174188 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.014623937 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.018659149 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.025612735 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.021554877 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.019264908 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.022696247 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.021076476 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.019507621 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.0129904 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.015277109 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.014267084 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.015899638 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.018338803 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.019101248 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.016320852 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.0148325 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.019704299 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.018182869 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.013907591 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.998715408 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.016053725 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.019898537 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.027723797 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.025975404 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.011627204 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.019521662 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.01774717 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.020660258 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.02344353 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.021038978 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.015704269 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.016218052 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.01948642 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.019846657 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.026754595 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.025878796 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.021607924 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.017949805 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.022520221 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.035725839 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.019987927 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.026895581 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.049380618 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.017902222 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.021246859 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.020324742 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.014390144 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.015769289 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.017863033 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.018498798 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.024646851 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.015272869 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.014352707 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.024853771 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.017417997 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.015332096 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.016334199 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.018031839 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.024227492 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.018924361 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.025784393 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.021026134 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.015564776 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.0177235 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.021655418 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.017583408 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.017647858 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.018459566 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.022305574 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.016587329 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.020383566 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.02906763 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.020644639 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.022742418 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.031861424 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.030755593 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.019757271 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.017649491 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.020801725 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.020416131 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.017991316 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.018809596 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.020615833 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.023101105 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.02272781 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.027552818 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.020522356 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.020238297 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.997172495 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.017657653 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.023301017 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.033299373 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.030142554 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.017145165 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.017734115 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.026917193 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.016709975 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.02531742 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.999041609 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.021945396 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.022663724 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.01801117 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.016026971 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.021593645 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.015934925 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.02281371 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.03014291 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.021709623 seconds)
  done (took 1198.602046721 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.016881002 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.018754083 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.017251995 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.018290054 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.017825036 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.018889511 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.020210164 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.01841463 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.019603726 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.016262243 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.019886003 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.021402675 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.020486044 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.023089376 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.018908459 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.020426486 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.020956004 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.016567097 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.022152397 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.013092164 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.018593674 seconds)
  done (took 44.351907362 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.017188094 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.017948931 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.019691677 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.021394483 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.016163204 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.018128837 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.019958616 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.020329682 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.02140494 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.020143046 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.020441265 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.01903099 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.017185906 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.021154129 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.018279412 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.02222862 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.019164647 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.020927489 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.02140121 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.021170036 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.019428726 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.019806856 seconds)
  done (took 46.386496028 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.021860449 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.02090142 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.02209683 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.019580997 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.020122297 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.020741367 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.019272087 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.02330493 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.018963611 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.024119373 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.033280914 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.031801496 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.020936824 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.022902062 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.020417376 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.023427973 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.169729256 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.022690708 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.025374016 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.017904529 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.022947969 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.030815746 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.023395854 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.018687564 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.021516642 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.020775068 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.020255262 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.021215067 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.012644969 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.022942873 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.026243749 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.020282959 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.026139222 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.026514034 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.024034315 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.023597435 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.028746783 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.022535708 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.023043696 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.021334482 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.033947767 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.047739584 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.023076956 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.025571375 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.030850422 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.019672718 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.023303713 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.025579472 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.031163988 seconds)
  done (took 101.272560345 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.019848094 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.024830871 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.020490695 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.022643255 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.02280657 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.020301964 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.021952315 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.022825109 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.026181537 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.022011708 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.02206005 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.020956822 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.021402095 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.01610098 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.017177855 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.021882879 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.02401927 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.023208578 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.021119394 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.023603775 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.024097325 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.021960824 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.022980519 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.024291188 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.025212907 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.022369427 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.021198539 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.012641399 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.021502868 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.025911738 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.024449662 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.023588058 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.02201269 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.02331864 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.023761936 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.02565069 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.022669075 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.019862818 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.022804705 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.023369753 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.025200236 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.024451132 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.021904894 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.022978473 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.02619859 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.022991982 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.025619564 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.023144852 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.022348191 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.026039832 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.023948619 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.025077844 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.02530944 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.023480848 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.025474438 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.025133397 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.024277715 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.027919951 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.024682205 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.023603651 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.024571932 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.027303983 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.027817087 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.02463055 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.0259959 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.023694133 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.02481574 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.021488231 seconds)
  done (took 139.53854025 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.02920533 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.028902359 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.030275818 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.027009064 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.029064961 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.028756419 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.028137713 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.024971979 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.025987693 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.026878028 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.026514312 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.02608338 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.024780882 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.022516311 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.027111325 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.029202527 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.030642456 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.033556273 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.027621119 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.027823235 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.028578218 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.027813215 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.028619049 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.028422435 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.028746519 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.030723518 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.028521457 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.032003955 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.025279221 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.011160095 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.028944184 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.02815152 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.030217813 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.026916823 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.03125684 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.028416202 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.027794638 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.030626166 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.029698059 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.026688467 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.0297708 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.027713144 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.028125306 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.017675978 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.018907843 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.03043277 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.029157642 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.030274244 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.028046411 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.030857218 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.031130606 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.029591554 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.030237405 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.030309462 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.032843098 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.026765142 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.033085572 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.028389589 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.033277339 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.028363353 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.029438785 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.02970134 seconds)
  done (took 127.708052303 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.02745953 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.02945429 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.026607294 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.030960802 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.028752579 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.028476127 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.027245024 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.029091817 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.028977301 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.026764022 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.028885676 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.030811913 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.030293951 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.026363445 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.027614753 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.027860707 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.030360917 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.029525328 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.028581166 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.02752719 seconds)
  done (took 42.535041156 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.028017108 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.030227701 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.029985574 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.026387138 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.029869615 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.028522421 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.003275475 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.029818774 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.02906553 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030215425 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.031448461 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.02988451 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.028066035 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.028435952 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.026614773 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.029709742 seconds)
  done (took 34.401481469 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.030355688 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.030922441 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.032558447 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.033079487 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.031451859 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.03154287 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.02879326 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.033600632 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.030403798 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.028042107 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.030192489 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.033139086 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.029836782 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.030494783 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.031331105 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.029140566 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.031425387 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.026950686 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.029468199 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.034534525 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.028050494 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.033644552 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.03030181 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.028170065 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.029474534 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.032436298 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.033015552 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.029812278 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.028341379 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.030931841 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.034130789 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.029935958 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.0290669 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.031796094 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.035467372 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.030709717 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.032622733 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.032517432 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.032247325 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.030520659 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.032540852 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.030904023 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.030050067 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.030905357 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.030136663 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.03318391 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.032989369 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.033502265 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.033179673 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.032974712 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.031549891 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.034571673 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.033345791 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.03083556 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.029068685 seconds)
  done (took 113.687913898 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.032053786 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.032432979 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.032225179 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.034301363 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.031338091 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.031134125 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.029622271 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.033191867 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.034381699 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.031963697 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.032842165 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.032239541 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.03404201 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.032500773 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.034860681 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.032148602 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.033176989 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.032217432 seconds)
  done (took 38.553595923 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.031355436 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.034320134 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.033458258 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.033519522 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.034419056 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.030868832 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.033404731 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.032813809 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.032427598 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.031993272 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.033595773 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.031432398 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.032945888 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.035329441 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.034145043 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036960231 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.035427543 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.03787014 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.034087908 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.024747298 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.035927069 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.033974877 seconds)
  done (took 46.700325009 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.033098298 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.03662111 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.048437928 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.058472592 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.06027674 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.074740747 seconds)
  done (took 14.278751874 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034898569 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034696649 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.036198143 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.033206953 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.034131906 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.034528532 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03263805 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036273019 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.032543695 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033259367 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034098069 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037029435 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037337425 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.034246465 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036342784 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03690102 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033715384 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034214774 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035123371 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033609331 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.034181626 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.034420589 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035290906 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03454587 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037162647 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035218445 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.033453888 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035060878 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03539637 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038439296 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035943928 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.034841528 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035611215 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037689485 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.034930295 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037944714 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.027311036 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038345517 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035148091 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034971493 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.038277706 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038094959 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0345847 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036277067 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038017784 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039173575 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03729633 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035227911 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034775906 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038321871 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037197225 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035504252 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038792615 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037674413 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038909379 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039631214 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037286817 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.034316697 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035387751 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03773452 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036703912 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035422379 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037397538 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039011378 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037764728 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038877084 seconds)
  done (took 136.339243342 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040923473 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.039073642 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035257772 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038473147 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038333899 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035720847 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.033826007 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039356992 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038114072 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040201297 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038000443 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037841879 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037133941 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.040195218 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038503463 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039641561 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038534954 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03607775 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03752199 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040148152 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038171038 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039430587 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038512853 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039371136 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038293818 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038025747 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039121049 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037229264 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025400702 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037391298 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037911293 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039297537 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038078382 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.039054832 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035361828 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.018671664 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042323822 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.040724367 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04060216 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041303315 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.03886389 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038597558 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037472823 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.041024906 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038701668 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041052272 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03991929 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039513077 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040480435 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039777086 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.040563668 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040316096 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039308541 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038497716 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043209813 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038487486 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039792098 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03897976 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038288664 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040870689 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041887548 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03911946 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040677512 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04080237 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0411773 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041771927 seconds)
  done (took 136.521547376 seconds)
done (took 2791.168409924 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.140817662 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.120557989 seconds)
  done (took 16.235391633 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.205829558 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.08659526 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.229918625 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.158625988 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.049568339 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.042630247 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.046458015 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.044909915 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.135854494 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.044817666 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.102030528 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.046301084 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.045681907 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.045860926 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.043929386 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.045332397 seconds)
  done (took 55.345523573 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.044963007 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.050806573 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.045684864 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.047085025 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.055006829 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.119382484 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.065667476 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.049523904 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.059138098 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.082575741 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.063162531 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.051637079 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.052082221 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.049633846 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.132239562 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.090147217 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.105198693 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.124871715 seconds)
  done (took 39.264573761 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.127548811 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.057134098 seconds)
  done (took 11.169335636 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.031618394 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.073299521 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.070737974 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.080060296 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.053361915 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.060955101 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.04448433 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.087958567 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.049061061 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.073131924 seconds)
  done (took 72.609228779 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.054036583 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.051560777 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.310774108 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.057977643 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.05784269 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.072418164 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.048039143 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.075542003 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.048257034 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.049047897 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.052190916 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.299264457 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.056194964 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.051721821 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.470858287 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.064433648 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.054857319 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.078398631 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.081432432 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.057271919 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.058110749 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.052311828 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.212778726 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.734388476 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.050591734 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.052621886 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.058445893 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.044096337 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.044348334 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.049406664 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.052675168 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.051811611 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.049134163 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.053000533 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.055745235 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.057127803 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.551622999 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.066582249 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.059358064 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.134183817 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.098289954 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.057325406 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.874769525 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.053739378 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.048529883 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.055497983 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.736662778 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.137866166 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.053093173 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.230684426 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.387913474 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.069314841 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.222081697 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.21083937 seconds)
  done (took 142.796409491 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.050189129 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.281216855 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.197812104 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.048937134 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.30211331 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.256829351 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.046673127 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.092336853 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.049416715 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.249388898 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.301776935 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.150422914 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.048780567 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.048407193 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.046788251 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.04428627 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.193756531 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.112361475 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.047937084 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.046054931 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.071596754 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.248885016 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.168622461 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.052293369 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.074355878 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.253583224 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.16907207 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.148290224 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.859540758 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.044859793 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.107252212 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.049160117 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.050069139 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.047835148 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.198905469 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.140807897 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.131134689 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.047928508 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.047437312 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.048862774 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.719194513 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.247931708 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.144398018 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.16936749 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.298298255 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.262939077 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.661310728 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.0462389 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.672842339 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.212940393 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.256066663 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.257030888 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.167791984 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.051125869 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.330442099 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.047846045 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.04958004 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.268925825 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.267901812 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.148790771 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.050464539 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.047883629 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.048407491 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.274664371 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.053115522 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.141437079 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.052639588 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.047943029 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.141152153 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.150937383 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.275658119 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.273873669 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.07942764 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.365719781 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.560388713 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.252404939 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.115640541 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.271762234 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.049458611 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.048653344 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.128316729 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.891926742 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.306357213 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.296349279 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.24894957 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.081736203 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.701315969 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.051623422 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.235992625 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.240128152 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.283465392 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.287584903 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.273565845 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.53569976 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.03458698 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.047275971 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.345108583 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.167330404 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.000785991 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.398253555 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.277238476 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.545929876 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.075621239 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.397177997 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.179652841 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.054832091 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.696234593 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.053724939 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.256091254 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.09159737 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.056317112 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.05202525 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.239697647 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.961686589 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.051117469 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.753215818 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.115795053 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.056211395 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.256710104 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.053978162 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.295677885 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.051645131 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.284399535 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.690965543 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.081533608 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.226346752 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.295002782 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.6804289 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.292311215 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.294897938 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.165888317 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.276158446 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.862744375 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.052340223 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.314307321 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.054524965 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.050299014 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.220179827 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.056629791 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.628998002 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.056144658 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.316240567 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.075475089 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.282915322 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.053939232 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.2921005 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.087157248 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.106770966 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.058037223 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.182627604 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.05406602 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.896553048 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.213374106 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.056553967 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.050836172 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.637810793 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.054458421 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.200571665 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.280583677 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.073099675 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.124921876 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.620777935 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.052464573 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.140674069 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.074607869 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.677683523 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.054676713 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.306137905 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.014905975 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.531057794 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.054894532 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.291371633 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.238261277 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.056999626 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.04539609 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.89562891 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.054148452 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.052547032 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.209400984 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.516955405 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.956644355 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.254713613 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.056410815 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.181715624 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.058233987 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.138581265 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.392186285 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.054924424 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.053775641 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.054411853 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.056017311 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.05619456 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.263490869 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.082904049 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.489978228 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.192787432 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.311057563 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.362436448 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.255918857 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.094064687 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.031134572 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.278121566 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.058246243 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.117940999 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.058259967 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.073917655 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.283579567 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.058545766 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.263104401 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.289596806 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.105490747 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.106356078 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.06162738 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.056909798 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.96623678 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.20184793 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.142479664 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.05852403 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.054541949 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.169854288 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.177118055 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.239499116 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.87290975 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.201256856 seconds)
  done (took 942.139012801 seconds)
done (took 1281.53372916 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.056092704 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.058829342 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.064058296 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.058709254 seconds)
  done (took 30.228626611 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.05765001 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.05764799 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.061799219 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.058630617 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.057492478 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.060305295 seconds)
  done (took 14.344661467 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.054980992 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.060589383 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.058073899 seconds)
  done (took 23.167238243 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.488351923 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.468447354 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.130823428 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.199387987 seconds)
  done (took 11.27963042 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.062366158 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.060400714 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.060797973 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.063383633 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.061171702 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.060824969 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.061545156 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.061175784 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.061835487 seconds)
  done (took 20.551251599 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.19311797 seconds)
done (took 105.753627606 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.915724921 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.172522293 seconds)
    (3/341) benchmarking ("sort", Int8, false)...
    done (took 4.99385506 seconds)
    (4/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.059153283 seconds)
    (5/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.917634847 seconds)
    (6/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.144266601 seconds)
    (7/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.437657322 seconds)
    (8/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.064234136 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.054023382 seconds)
    (10/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.005777592 seconds)
    (11/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.063806804 seconds)
    (12/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.401969554 seconds)
    (13/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.458763278 seconds)
    (14/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.134843004 seconds)
    (15/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.184347483 seconds)
    (16/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.363040755 seconds)
    (17/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.063021233 seconds)
    (18/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.190236283 seconds)
    (19/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.068969594 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.073957393 seconds)
    (21/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.154147114 seconds)
    (22/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.357519586 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.075319016 seconds)
    (24/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.03336149 seconds)
    (25/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.882578582 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.93597553 seconds)
    (27/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.613675785 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.075330258 seconds)
    (29/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.397034755 seconds)
    (30/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.176167364 seconds)
    (31/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.159284635 seconds)
    (32/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.439544347 seconds)
    (33/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.115357764 seconds)
    (34/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.366470105 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.078805551 seconds)
    (36/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.396782302 seconds)
    (37/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.061809599 seconds)
    (38/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.82453063 seconds)
    (39/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.457311656 seconds)
    (40/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.15818326 seconds)
    (41/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.062410914 seconds)
    (42/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 4.253243607 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.153029887 seconds)
    (44/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.291616774 seconds)
    (45/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.063572538 seconds)
    (46/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.060076529 seconds)
    (47/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.09084439 seconds)
    (48/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 4.033323747 seconds)
    (49/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.531657034 seconds)
    (50/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.162709355 seconds)
    (51/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.515143497 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.479572535 seconds)
    (53/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.170957596 seconds)
    (54/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.50243679 seconds)
    (55/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.797895406 seconds)
    (56/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.278860584 seconds)
    (57/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.381194037 seconds)
    (58/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.068670506 seconds)
    (59/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.310745474 seconds)
    (60/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.210814647 seconds)
    (61/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.335775849 seconds)
    (62/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.062896421 seconds)
    (63/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 4.028682748 seconds)
    (64/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.276612909 seconds)
    (65/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.334819454 seconds)
    (66/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.190906819 seconds)
    (67/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.149192864 seconds)
    (68/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.061200698 seconds)
    (69/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.842737034 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.774861171 seconds)
    (71/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.157101884 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.093879703 seconds)
    (73/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.072854923 seconds)
    (74/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.071008843 seconds)
    (75/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.064591805 seconds)
    (76/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.174892227 seconds)
    (77/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.077268638 seconds)
    (78/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.269171885 seconds)
    (79/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.091362641 seconds)
    (80/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.141192366 seconds)
    (81/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.219972799 seconds)
    (82/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.326395034 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.981489938 seconds)
    (84/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.070873418 seconds)
    (85/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.78011692 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.398301223 seconds)
    (87/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.92037223 seconds)
    (88/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.343008112 seconds)
    (89/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.063716104 seconds)
    (90/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 4.370085215 seconds)
    (91/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.437563189 seconds)
    (92/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.341439478 seconds)
    (93/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.152978183 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.316765361 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.804670932 seconds)
    (96/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.60999949 seconds)
    (97/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.336060892 seconds)
    (98/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.662957153 seconds)
    (99/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.155938071 seconds)
    (100/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.177273867 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.314599342 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.385059324 seconds)
    (103/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.545049932 seconds)
    (104/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.0754622 seconds)
    (105/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.075000701 seconds)
    (106/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.403009921 seconds)
    (107/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.169991559 seconds)
    (108/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.196444749 seconds)
    (109/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.464473922 seconds)
    (110/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.164871288 seconds)
    (111/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.123607526 seconds)
    (112/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.066172284 seconds)
    (113/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.192411486 seconds)
    (114/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.469506382 seconds)
    (115/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.2796416 seconds)
    (116/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.08028956 seconds)
    (117/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.391842315 seconds)
    (118/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.068924285 seconds)
    (119/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.2888592 seconds)
    (120/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.455737845 seconds)
    (121/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.445659348 seconds)
    (122/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.354097307 seconds)
    (123/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.337010834 seconds)
    (124/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.066772548 seconds)
    (125/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.129967756 seconds)
    (126/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.154021318 seconds)
    (127/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.279304757 seconds)
    (128/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.383349207 seconds)
    (129/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.346480694 seconds)
    (130/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.478082212 seconds)
    (131/341) benchmarking ("sort", Float32, false)...
    done (took 5.7475781 seconds)
    (132/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.317523212 seconds)
    (133/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.068497055 seconds)
    (134/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.085209344 seconds)
    (135/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.454903504 seconds)
    (136/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.700816947 seconds)
    (137/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.46214432 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.38516837 seconds)
    (139/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.308472923 seconds)
    (140/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.202750159 seconds)
    (141/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.15507438 seconds)
    (142/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.067888394 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.310635558 seconds)
    (144/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.147828145 seconds)
    (145/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.316865236 seconds)
    (146/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.213581177 seconds)
    (147/341) benchmarking ("sort", Bool, false)...
    done (took 2.287511793 seconds)
    (148/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.170519469 seconds)
    (149/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.838463918 seconds)
    (150/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.065969569 seconds)
    (151/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.211593798 seconds)
    (152/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.86550361 seconds)
    (153/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.100334897 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.080781241 seconds)
    (155/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.303156802 seconds)
    (156/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.081045525 seconds)
    (157/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.462799441 seconds)
    (158/341) benchmarking ("sort", Int64, false)...
    done (took 5.701093419 seconds)
    (159/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.133062942 seconds)
    (160/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.477304006 seconds)
    (161/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.200179388 seconds)
    (162/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.946840865 seconds)
    (163/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.494378432 seconds)
    (164/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.219229901 seconds)
    (165/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.165050315 seconds)
    (166/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.150175006 seconds)
    (167/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.085200985 seconds)
    (168/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.270977593 seconds)
    (169/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.22095058 seconds)
    (170/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.472132779 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.163809951 seconds)
    (172/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.073421093 seconds)
    (173/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.301782844 seconds)
    (174/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.267162039 seconds)
    (175/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.290016007 seconds)
    (176/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.086911742 seconds)
    (177/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.082854347 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.194782019 seconds)
    (179/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.216860208 seconds)
    (180/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.069619534 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.386395913 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.09540028 seconds)
    (183/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.017176548 seconds)
    (184/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.443217756 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.382373446 seconds)
    (186/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.519484796 seconds)
    (187/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.966019662 seconds)
    (188/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.333298836 seconds)
    (189/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.196842718 seconds)
    (190/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.144512909 seconds)
    (191/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.253001447 seconds)
    (192/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.151658447 seconds)
    (193/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.165623391 seconds)
    (194/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.008965627 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.076503169 seconds)
    (196/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.140327594 seconds)
    (197/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.067184287 seconds)
    (198/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.856794836 seconds)
    (199/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.35279606 seconds)
    (200/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.750457786 seconds)
    (201/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.360919256 seconds)
    (202/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.073192425 seconds)
    (203/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.160819043 seconds)
    (204/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.087647287 seconds)
    (205/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.733501232 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.852997163 seconds)
    (207/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.199511201 seconds)
    (208/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.042376069 seconds)
    (209/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.226966913 seconds)
    (210/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.180416299 seconds)
    (211/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.086538472 seconds)
    (212/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.147718351 seconds)
    (213/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.073893547 seconds)
    (214/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.36289631 seconds)
    (215/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.339321544 seconds)
    (216/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.300137232 seconds)
    (217/341) benchmarking ("sort", BigInt, false)...
    done (took 7.073006838 seconds)
    (218/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.335894827 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.217226291 seconds)
    (220/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.467303636 seconds)
    (221/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.968559842 seconds)
    (222/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.190725492 seconds)
    (223/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.071081953 seconds)
    (224/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.126768985 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.528369522 seconds)
    (226/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.844606146 seconds)
    (227/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.150084375 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.398788876 seconds)
    (229/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.317137151 seconds)
    (230/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.086152088 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.168878499 seconds)
    (232/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.099430851 seconds)
    (233/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.070853145 seconds)
    (234/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.787456052 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.791702038 seconds)
    (236/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.443963336 seconds)
    (237/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.949415096 seconds)
    (238/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.103345073 seconds)
    (239/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.884364377 seconds)
    (240/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.281595721 seconds)
    (241/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.387060607 seconds)
    (242/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.171992417 seconds)
    (243/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.144028623 seconds)
    (244/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.190756206 seconds)
    (245/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.379028189 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.725157378 seconds)
    (247/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.337769605 seconds)
    (248/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.075028439 seconds)
    (249/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.151559841 seconds)
    (250/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.175402485 seconds)
    (251/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.21187722 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.093415106 seconds)
    (253/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.078369163 seconds)
    (254/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.453418225 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.172167509 seconds)
    (256/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.072225687 seconds)
    (257/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.092045512 seconds)
    (258/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.147374318 seconds)
    (259/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.156611964 seconds)
    (260/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.453060143 seconds)
    (261/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.194343475 seconds)
    (262/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.46814846 seconds)
    (263/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.159791941 seconds)
    (264/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.074716028 seconds)
    (265/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.1415534 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.157046907 seconds)
    (267/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.246541319 seconds)
    (268/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.214963107 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.016121394 seconds)
    (270/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.163497455 seconds)
    (271/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.456116894 seconds)
    (272/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.195415047 seconds)
    (273/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.114931927 seconds)
    (274/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.263372578 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.162288879 seconds)
    (276/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.086085106 seconds)
    (277/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 3.969272135 seconds)
    (278/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.078553279 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.177235935 seconds)
    (280/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.23071428 seconds)
    (281/341) benchmarking ("sort", Float64, false)...
    done (took 5.805614962 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.517340062 seconds)
    (283/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.154439986 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.075730677 seconds)
    (285/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 8.60451385 seconds)
    (286/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.270659916 seconds)
    (287/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.283317124 seconds)
    (288/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.23632399 seconds)
    (289/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.077351793 seconds)
    (290/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.086951646 seconds)
    (291/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.086392363 seconds)
    (292/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.958657877 seconds)
    (293/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.43293733 seconds)
    (294/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.898140709 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.216884776 seconds)
    (296/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.26448597 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.992103145 seconds)
    (298/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.083328041 seconds)
    (299/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.215653337 seconds)
    (300/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.516230367 seconds)
    (301/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.213299362 seconds)
    (302/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.087565785 seconds)
    (303/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.268740754 seconds)
    (304/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.215948706 seconds)
    (305/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.279518718 seconds)
    (306/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.098206142 seconds)
    (307/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.280668928 seconds)
    (308/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.080597142 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.197584268 seconds)
    (310/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.373252542 seconds)
    (311/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.278943622 seconds)
    (312/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.483305637 seconds)
    (313/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.9552934 seconds)
    (314/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.933152707 seconds)
    (315/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.797493951 seconds)
    (316/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.077409971 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.119091983 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.469360163 seconds)
    (319/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.42359048 seconds)
    (320/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.095518316 seconds)
    (321/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.249796766 seconds)
    (322/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.958095815 seconds)
    (323/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.497126772 seconds)
    (324/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.409418661 seconds)
    (325/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.904897463 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.976545128 seconds)
    (327/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.932159522 seconds)
    (328/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.443196437 seconds)
    (329/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.083305251 seconds)
    (330/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.143372925 seconds)
    (331/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.209853921 seconds)
    (332/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.241965648 seconds)
    (333/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.518693597 seconds)
    (334/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.499654181 seconds)
    (335/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.078190212 seconds)
    (336/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.104650684 seconds)
    (337/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.076904276 seconds)
    (338/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 4.660995866 seconds)
    (339/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.903717651 seconds)
    (340/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.477695627 seconds)
    (341/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.194911018 seconds)
  done (took 1163.953571816 seconds)
done (took 1166.029450684 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.107321938 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.086321563 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.595328257 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.101217925 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.086880058 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.087191743 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.605075913 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.119740758 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.1072897 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.60816697 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.100175406 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.086846996 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.107294494 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.122067936 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.098678519 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.101666499 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.093212028 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.116434476 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.122879707 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.093029137 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.134320667 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.093222908 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.092750142 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.13856005 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.088015629 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.102481768 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.10746944 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.13229953 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.136241333 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.090616574 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.09529375 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.448005791 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.142212787 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.091491162 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.100028826 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.1031893 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.097383022 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.103024651 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.100606274 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.105824803 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.088569503 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.0977633 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.093640792 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.093910663 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.087223861 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.088733081 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.089853455 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.214529354 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.103087519 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.427824484 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.149860546 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.102059994 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.135989047 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.091527158 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.092015923 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.092023472 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.137635121 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.094124163 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.09336109 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.429880139 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.186443069 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.103273595 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.426375221 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.156421887 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.106050927 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.097177646 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.091078579 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.100873204 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.444775671 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.651384054 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.122060699 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.111595039 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.090926364 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.092634373 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.103048312 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.605364868 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.099158642 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.67059293 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.120759064 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.105134804 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.097760915 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.081847722 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.093369172 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.110115402 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.10346763 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.089379908 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.098422258 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.098344941 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.106040433 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.446263173 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.138624592 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.596185988 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.09974331 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.103327768 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.104211395 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.674350356 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.123848913 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.103368535 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.095751718 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.447313607 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.13923786 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.106211901 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.095734433 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.10319155 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.20637387 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.109706657 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.106942298 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.091096792 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.112506938 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.101564313 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.092364944 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.105365174 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.113946933 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.124951785 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.113911007 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.093728583 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.098938469 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.096943702 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.105055648 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.102855236 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.098593582 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.103589891 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.092691625 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.144769747 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.098253343 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.106543103 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.211339158 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.101420637 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.226122972 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.112198412 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.102064235 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.095174067 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.436356161 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.14586514 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.118858429 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.104191432 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.118029008 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.118680503 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.113223308 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.101627667 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.109424917 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.103012128 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.148601799 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.098322392 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.123882184 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.147243796 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.114028454 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.10491013 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.108990656 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.132526923 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.11970458 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.104069261 seconds)
done (took 329.555331049 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.13469137 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.089862576 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.168317158 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.090030251 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.155073899 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.145076199 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.091426194 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.090216287 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.088848217 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.477877527 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.092555612 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.098840933 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.087691678 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.090087951 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.137330029 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.089082605 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.091084317 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.326374688 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.09384608 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.150467508 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.089338475 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.088852644 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.08938795 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.485283767 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.089576726 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.089761308 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.149916231 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.09164706 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.332923101 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.089534304 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.090895908 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.335157949 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.149363339 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.101822616 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.099461785 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.097713633 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.158000401 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.099783305 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.139697128 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.139955532 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.16727074 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.126554312 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.091217709 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.089380145 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.094253237 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.082858648 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.071408662 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.126071356 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.090573122 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.098974587 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.327208357 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.097661218 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.092012949 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.071794259 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.09150545 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.107808839 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.092153352 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.09566399 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.151463714 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.096239148 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.141490769 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.483994723 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.47882831 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.09318337 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.091091179 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.094734445 seconds)
  done (took 198.464550613 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.160058791 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.178153273 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.161358053 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.098245116 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.143055979 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.161264817 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.099840596 seconds)
  done (took 17.025397118 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.101020358 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.0942147 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.116665579 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.115850317 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.09525229 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.231251705 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.103324071 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.096509603 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.11962537 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.093520993 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.431304959 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.114155567 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.101474938 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.094187667 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.10591649 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.122161842 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.095877782 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.097080109 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.197378764 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.175301303 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.102954398 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.103374407 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.125496802 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.108055641 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.09674194 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.097641135 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.101043574 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.103378825 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.097925751 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.095777829 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.098386538 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.111877175 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.098304777 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.096566004 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.097851268 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.099865153 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.099454667 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.098507054 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.097034613 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.097152112 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.095329418 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.098005366 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.097771884 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.096928363 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.097164524 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.102579758 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.089429504 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.095097455 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.100001059 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.099609673 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.127456254 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.099589733 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.098907417 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.104707386 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.139444083 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.105527724 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.101470448 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.097368538 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.097755235 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.100250108 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.098941486 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.180551225 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.104696983 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.089050907 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.122697876 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.137920205 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.100310313 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.095597984 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.098180589 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.122364824 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.096998596 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.123130156 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.099588247 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.197902539 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.100377534 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.243122604 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.123528682 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.104742184 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.10287239 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.099170963 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.107811215 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.099381906 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.103027962 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.107088384 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.106195267 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.102041839 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.099182973 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.10059884 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.109203494 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.099059186 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.146233096 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.099234543 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.10511571 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.197199908 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.100444658 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.197209739 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.128928906 seconds)
  done (took 227.247026598 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.105368084 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.10129804 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.112719009 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.103302179 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.100624782 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.107351296 seconds)
  done (took 14.661552893 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.103698255 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.10610656 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.081833822 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.080370412 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.102695476 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.104356035 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.103305943 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.103609494 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.107516957 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.100503547 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.104812722 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.092405098 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.104117554 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.102307546 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.102657974 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.099109021 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.102496355 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.100596491 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.100691571 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.103951771 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.349770429 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.10340719 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.103042933 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.107315758 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.111473364 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.100288212 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.111431801 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.099658625 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.101444796 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.109778734 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.109582697 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.104556329 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.106521221 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.111107996 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.106146871 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.107973419 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.108021025 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.105297194 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.105598424 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.106151879 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.10576975 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.103590816 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.102906306 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.10779636 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.107023133 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.113315534 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.111903809 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.110675459 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.101152023 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.108806548 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.10760391 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.102076413 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.106580152 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.106771032 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.110002864 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.107141101 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.113247243 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.104136925 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.105207406 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.109878104 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.108325781 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.106549359 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.108016493 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.108478258 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.110821313 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.108274954 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.109952202 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.111098601 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.109217499 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.105368689 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.108085145 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.106998492 seconds)
  done (took 154.85668717 seconds)
done (took 614.274461516 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.183702932 seconds)
  done (took 9.218107599 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.200342658 seconds)
  done (took 9.331768607 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.434500255 seconds)
  done (took 12.475069083 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.120668918 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.126939733 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.119806861 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.106255487 seconds)
  done (took 30.526210826 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.36288165 seconds)
  done (took 9.399298618 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.118495423 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.104060612 seconds)
  done (took 16.322302281 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.135824171 seconds)
  done (took 9.175902281 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.144881062 seconds)
  done (took 9.208505892 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.12013973 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.135105404 seconds)
  done (took 16.308495027 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.106628178 seconds)
  done (took 9.142001865 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.878193983 seconds)
  done (took 9.990866389 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.121982372 seconds)
  done (took 9.17829704 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.127257602 seconds)
  done (took 9.164778113 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.04399615 seconds)
  done (took 10.078952 seconds)
done (took 171.54987207 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.114944217 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.109633137 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.108712024 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.10866603 seconds)
  done (took 30.479966404 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.141797044 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.142446742 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.14984167 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.143682926 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.131346898 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.133689917 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.143770842 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.140596901 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.13062767 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.139099454 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.143604859 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.139717184 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.139209376 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.151759282 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.149795315 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.140392651 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.142919999 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.145265011 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.131506611 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.152875503 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.138783146 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.141949137 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.108834573 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.107250572 seconds)
  done (took 53.368807219 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.301383436 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.175907273 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.259609372 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.152346003 seconds)
  done (took 10.925265573 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.107838965 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.174211298 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.160011119 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.155396926 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.158821208 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.210294967 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.158874982 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.242688187 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.235891321 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.235220444 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.115991873 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.130290643 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.132879705 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.154512021 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.212796476 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.10865913 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.107098339 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.229798795 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.171277248 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.367522754 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.109413457 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.161276335 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.158223471 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.164463674 seconds)
  done (took 54.201753005 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.110983652 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.117738181 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.115166997 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.110584895 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.110237517 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.109508987 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.115755745 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.112619486 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.131725895 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.115459447 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.108852391 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.112192152 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.117832835 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.110175662 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.109222439 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.123337874 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.125715346 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.110985828 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.115649224 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.116193801 seconds)
  done (took 44.339175507 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.106874995 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.956337731 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.455546889 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.360334467 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.113270302 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.112525716 seconds)
  done (took 33.148493911 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.122312563 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.129057741 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.118315112 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.133509691 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.158900932 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.122052707 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.172767426 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.281439078 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.124959493 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.170943702 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.134346463 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.118035181 seconds)
  done (took 27.829557817 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.11270441 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.101887692 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.114895866 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.122958587 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.123614175 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.117618285 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.119289442 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.112962276 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.127771201 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.132074539 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.119598633 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.122858369 seconds)
  done (took 47.471783574 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.32586594 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.336117187 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.321464945 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.741490221 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.440018289 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.089684587 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.398296798 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.329045682 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.822171251 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.848735235 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.407983858 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.087169138 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.06070945 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.0377317 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.025942502 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.355172715 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112048773 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.969673408 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.364070736 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.152950483 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114441065 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.110802368 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.11023717 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.40422189 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.438408162 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.109967777 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.323371724 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126065535 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.113095373 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.380530919 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.72542284 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.176069064 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.317403653 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.369443848 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.452578552 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.217686403 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.112304773 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.327285278 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.163569756 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.146421977 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.121623203 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.12212548 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.653962057 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.122814606 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.383810073 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116068836 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.172308495 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.098846021 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.038886725 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.37517236 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221732437 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.114928527 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.147324044 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.547386446 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.233961847 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.35691089 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.119752738 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.331383675 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180938681 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.30918957 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.299932712 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.115762972 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327691547 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.041203695 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.453462879 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.23454442 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.115102131 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.118093436 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.814288572 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.359074184 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.196308371 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.382072401 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.867812543 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.114920931 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.117601195 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.157377822 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.207328964 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.115448296 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.410452248 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.112043947 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.040880864 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.213543734 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.513124546 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120996838 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.115267796 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.121641486 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.961443893 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.040214204 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.211473048 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.306863547 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.434049857 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.116094524 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.115397374 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.139358339 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118955687 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.06107459 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.714104481 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.186735107 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.043878704 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.680617658 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.742022717 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.086893085 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.614983982 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.164281809 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.396208194 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.265207667 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.523964018 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.324543772 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.363631825 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.651851082 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.122747722 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.676397207 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.198917185 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193563117 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118638601 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.681311456 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.335642512 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.363000833 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.22736363 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.117297294 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.041769937 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.126927334 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319052276 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.741258283 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.178428652 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.116921951 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.122103461 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.118437314 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.11970103 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.224119627 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133994524 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.411232371 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.173504779 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.118308015 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.053065231 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.121460053 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.400077586 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.833753229 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.182628706 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.38589091 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.375815172 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.822088806 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.71655618 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.160051472 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.385480292 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.184168947 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.191928151 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.683459975 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.248917282 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.216711853 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.121158069 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.244562886 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.125285161 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.122157991 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.572909224 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.539819779 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.545329082 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.162582142 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.119807839 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.066386909 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.333479876 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.366601788 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.155874396 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.15180603 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.124276344 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.204329036 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.345095891 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.121947701 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.046037417 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.36172003 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.358420309 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.38550436 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.523974845 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.150928878 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.163334933 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.130768737 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.332423421 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.20040754 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.780289329 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.666425954 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.335048283 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.722654778 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.088946396 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.763125308 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.322717738 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.495421721 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.135830299 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.575230468 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.340410308 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.84494593 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.158668972 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.645234626 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.048111438 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124532354 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.45588649 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.078966883 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.432619954 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.18473186 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140399621 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.125985925 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.123404809 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129958512 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.01201235 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.235433554 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.190287493 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192854194 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.04937376 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.7930169 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.169396816 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.126097957 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.123688711 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.407088621 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.88976061 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.072857321 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.119925903 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200439567 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.865632665 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.675499224 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.115123234 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.122521571 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.734102392 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.129702681 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.961550132 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.132994425 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.854581683 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.148855054 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.32673293 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.820230527 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.411750394 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.198020286 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181923755 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.123052423 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.117483677 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.807777935 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.132505551 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.822770419 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.409237869 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.391812925 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.56245765 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.183955077 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.331769304 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.137618443 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.123182828 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.608957542 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.147595003 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124645612 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.332109795 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.645077892 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.404638181 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.084589452 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.207926958 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.122663619 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.394386366 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.125677848 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.750024581 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.826932935 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.118899261 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.124656391 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.384071393 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.81013813 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.124176812 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.086053749 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131863024 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.335009586 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.327742937 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.394200675 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.423706656 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.571353253 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.050232659 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.130858142 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.147220321 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.369696775 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.125210045 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.160581054 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.567912289 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.160126488 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.554906045 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.417304428 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.459302298 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.755910139 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.399635042 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.182938717 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.138652861 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.787279545 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.245038108 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.057732697 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.247669533 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.052085195 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.855988725 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.415613595 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.14560686 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.396532856 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.088019483 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.454804538 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.419477471 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.330093111 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.168678054 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.155748741 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.125691833 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.163897821 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.124316166 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.365492389 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.247391765 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.13720385 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.692231371 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171451385 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172000198 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.131829551 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.60932503 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.145183625 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130581931 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.82233855 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.151162709 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246104882 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199248008 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.849165629 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.787345161 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.160169377 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.075388701 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.772720932 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.397473676 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.181361147 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.57264432 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162087259 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.53106014 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.127792101 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.341975923 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.134590751 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.743339099 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180061595 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.399649785 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.080029086 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.340524733 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.325993049 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.156114353 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.137549218 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053543918 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.230862561 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.007297927 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.109293281 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.132104491 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.811344496 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.512774074 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.366794908 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.550161743 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.968604399 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.130815306 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.423265165 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.526966336 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.782698632 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.168716645 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129415496 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.403701264 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.258371157 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.378393069 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.398852984 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.135775704 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.155615984 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.341713731 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252390135 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.049715909 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.610276905 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.714793458 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.830026658 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.140029034 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.334896003 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.403608783 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.450384538 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.171359333 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.202433056 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.535356091 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.398387857 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.191575242 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.053538725 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130022564 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.522865371 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.529156717 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.230536954 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.372627855 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.445495873 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.802128699 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.842568591 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.607916806 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.523011093 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.537121215 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.541700138 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.344376825 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.493489919 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.45015299 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.722667027 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.541612896 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.339835366 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.221112531 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.405992699 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.99716188 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.837927459 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.363640957 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.134729587 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.060140236 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.337337283 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.133654108 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.678920362 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.66271128 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.377490026 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.346118849 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.594945516 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.669933058 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.359968487 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.162499084 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.095031257 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.148248771 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.146807007 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.134268348 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.614290907 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.420659106 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.143493974 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07295978 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.803964597 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.054893464 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.345315836 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.355098189 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.176464399 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.68930417 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.349173686 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.234618665 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.430112072 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.414838377 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.17484156 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.057668551 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.861886688 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.080368087 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.160324172 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.557181499 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15014637 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.134019429 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.334729776 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.060781205 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.180117554 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.137205012 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.328231752 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.712311114 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.407276784 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.253728744 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.362274857 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.429393881 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.945797853 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.16107565 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.407415418 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.059730647 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.791851868 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.817598616 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.175286053 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206470258 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.136049107 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.13527522 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.404861288 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.420086348 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.230494793 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.870068138 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.172136136 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.161107827 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.404048624 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.227040833 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.135326624 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.140635443 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.701385645 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.377952752 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.131393285 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.109278697 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.346286633 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206558923 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.333288008 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.210119402 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.650579656 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.140210101 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.959602978 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.235913382 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.087694195 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133565351 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.839534287 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.197451928 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.137512508 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.407326225 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.749930493 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.34015392 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.529518141 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.006656729 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.364882437 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.182039975 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.139065863 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.219819895 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.424404826 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.433629539 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.135817589 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.411565074 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.177853587 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.143562598 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.801225634 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.102913018 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.133092935 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.858718197 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.059358812 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.868378094 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.531449322 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.202816367 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.143075802 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.136146797 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.046160136 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.1376596 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.307631523 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.120752167 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.142380464 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.506309708 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.381273615 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.225043365 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.14292941 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.139113752 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.144839479 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.349544434 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.651240046 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153946531 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.837198551 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.338227322 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.137958579 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.617956659 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.574432005 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.436304748 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.181127837 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.370035178 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.394524622 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.681405849 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.370712153 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.119951303 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351087219 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.137804609 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.409584102 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.410072702 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.137289058 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.3505828 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.767630107 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.42659822 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.497006515 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.451648828 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.203246586 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.376212805 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.078791427 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.142721653 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.137616869 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.408621774 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186029781 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.135773971 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.144752734 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.688102209 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.857522511 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.599836219 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.291608552 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.411095407 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.878645039 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.8927993 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.141467598 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.06334554 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.139531188 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.163754006 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.143145221 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.066267911 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.794096248 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.865299344 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.354663835 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.447251219 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.066295257 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.34393855 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.706568236 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.067560685 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.108778168 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.147359328 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.386840596 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.067520058 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.142071848 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.095011559 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.342446573 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.89978028 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.41763952 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.140292432 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08477814 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.144511202 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.144408962 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.137048446 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.228778167 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.14280101 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.249074684 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.40621649 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.450963915 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.241354461 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.780469059 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.864939097 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.077460804 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.182353942 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.697639534 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.709806627 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.342619476 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.27333359 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.863295743 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.085868332 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.145826765 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157585539 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.401663152 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.143775847 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.144318159 seconds)
  done (took 2235.585261513 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.205244069 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.17802432 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.189842146 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.221872173 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.22669698 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.193549058 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.161115158 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.219386418 seconds)
  done (took 59.668028117 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.142624172 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.092900202 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.150663753 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.143967399 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.142729095 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.163866793 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.329259328 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.169236134 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.142284301 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.147311439 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.147190781 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.149028969 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.143545422 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.145427898 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.148772873 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.427915686 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.18642876 seconds)
  done (took 81.067989594 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.195859411 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.060527357 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.148634484 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.959705141 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.202609206 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.443739233 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.145944553 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.145317572 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.494920159 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.443984604 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.164103619 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.16251432 seconds)
  done (took 95.632547547 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.146649835 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.143260616 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.147775044 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.145693416 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.146095086 seconds)
  done (took 12.805445275 seconds)
done (took 2788.623984133 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.389271903 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.239035302 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.223520802 seconds)
  done (took 6.536560175 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.288669463 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.33499634 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.450115782 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.46178272 seconds)
  done (took 11.61488121 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.434640665 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.527103481 seconds)
  done (took 7.03842394 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.522668608 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.156823589 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.543024246 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.14663504 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.145946945 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.153148491 seconds)
  done (took 23.523602447 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.148932192 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.145454458 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.143845199 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.147952545 seconds)
  done (took 10.664737491 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.145992955 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.92255142 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.143990547 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.151996327 seconds)
  done (took 22.439090932 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.306598252 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.115067627 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.915614234 seconds)
  done (took 10.41280579 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.770255802 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.597314955 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.762455762 seconds)
  done (took 10.204287622 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.278863729 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.984623201 seconds)
  done (took 8.321278114 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.291053103 seconds)
  done (took 4.373412643 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.98845471 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.460599104 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.621650589 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.661266407 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.726320421 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.360290734 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.470220308 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.415037556 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.541947553 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.537009262 seconds)
  done (took 27.858354321 seconds)
done (took 159.671576432 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.578302275 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.173696317 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.361253729 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.523506171 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.411955363 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.371129811 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.391277484 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.509572245 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.204428397 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.186059656 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.52736184 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.40127148 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.353242865 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.165450635 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.363953978 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.17142144 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.396641777 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.61205729 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.212084563 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.452026411 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.429420536 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.171706621 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.36337111 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.191954863 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.394575187 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.315285939 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.777743069 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.17582464 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.358255167 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.790645681 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.31120713 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.592582319 seconds)
  done (took 178.319233943 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.024977075 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.149354333 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.151902933 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.148466026 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.476657054 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.149781301 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.147934676 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.149800116 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.4690602 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.456132112 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.149717847 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.46413152 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.152670305 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.150316188 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.149054041 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.146581743 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.598171668 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.082163807 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.149510474 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.149838613 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.14972738 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.34039646 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.149202637 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.355836955 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.586324678 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.155730654 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.151180098 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.147539261 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.147531241 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.151942018 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.15413096 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.151315373 seconds)
  done (took 217.23515109 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.14988937 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.152243114 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.149194295 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.149814943 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.151453672 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.150814232 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.153207509 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.152371657 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.890205741 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.883130112 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.152267938 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.154893175 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.154958904 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.150113518 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.152371925 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.152043598 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.149148141 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.151883786 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.151076192 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.14403816 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.144043187 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.02001857 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.149867451 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.042868584 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.15503558 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.150288285 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.152882038 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.149905774 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.153354704 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.155272492 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.152783552 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.151494115 seconds)
  done (took 230.157119598 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.388876003 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.122592974 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.156276594 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.164378125 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.156144155 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.152282289 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.164188009 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.400239402 seconds)
  done (took 21.783629919 seconds)
done (took 649.581450701 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.522745557 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.90839359 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.289408944 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.179254735 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.425955127 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.217911127 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.171370915 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.235082509 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.817462417 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.248353342 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.588164381 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.179128756 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.916519766 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.198037268 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.287569563 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.230135682 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.515463614 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.78139766 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.306718821 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.844038453 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.373567734 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.125748536 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.252877711 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.855928704 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.600568367 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.139891612 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.188242773 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.52054396 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.176854941 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.406656331 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.847147796 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.415881444 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.187570198 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.175075597 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.232076724 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.215540217 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.370180615 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.185681697 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.28661732 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.922205856 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.838911944 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.70926826 seconds)
  done (took 111.973106091 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.160510368 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.160409317 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.158528638 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.15845813 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.166591147 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.158241723 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.15807482 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.160142799 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.158582503 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.161333826 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.16205609 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.165876972 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.162412613 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.170982546 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.163849301 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.159866609 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.157010848 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.169040443 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.158707652 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.158998216 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.160257759 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.16021581 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.158825428 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.158505975 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.163004269 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.158656798 seconds)
  done (took 58.283844016 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.158327426 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.308836353 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.446913922 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.191799426 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.156285759 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.15944892 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.186932904 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.162149985 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.160926244 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.156742741 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.270283936 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.15983916 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.171861662 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.44717987 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.185376827 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.158009921 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.157916745 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.158104628 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.315872279 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.175239609 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.190766059 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.169042783 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.1881346 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.172752206 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.160589292 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.158153347 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.164256475 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.575041252 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.167598782 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.270408029 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.202071347 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.19052077 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.547588076 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.459869653 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.22524432 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.167436531 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.158036666 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.319463152 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.167803765 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.160673389 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.187884629 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.168720585 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.450040386 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.689110855 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.173818062 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.158089191 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.572716206 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.328354822 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.208145786 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.17477004 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.457170172 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.189122773 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.154509371 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.160991543 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.197147033 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.174442008 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.159903977 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.437237787 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.175494079 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.188407003 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.165372463 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.160966949 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.320654802 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.155567836 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.314229788 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.167233899 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.165832802 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.160139453 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.450062859 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.19057347 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.6800351 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.1718046 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.155240899 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.276725728 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.323495308 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.595391587 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.178550694 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.319421539 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.557228342 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.196216406 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.171310639 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.562116315 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.201149982 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.172549841 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.159293113 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.157887934 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.159457897 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.202741141 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.186379013 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.604909107 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.683975719 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.456521783 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.200448653 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.173482751 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.162989397 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.439442903 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.170450082 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.162064367 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.444853197 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.709664331 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.175953261 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.166693486 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.66352033 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.176266038 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.189945249 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.169804895 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.454325529 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.191896341 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.204572293 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.163560238 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.168451919 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.166631572 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.189153397 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.171684778 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.162361951 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.658825454 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.334527183 seconds)
  done (took 266.894827555 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.157152357 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.162472141 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.158626217 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.159602713 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.161780912 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.164244023 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.159383722 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.159589764 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.162265295 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.160781138 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.158972272 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.162760823 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.161330686 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.165022727 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.207484356 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.161139328 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.646336583 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.16144202 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.164654931 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.161454282 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.734179393 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.167194561 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.163853638 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.162837423 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.161880929 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.160259585 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.1687365 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.206346397 seconds)
  done (took 175.774533464 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.160548929 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.207791494 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.182378213 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.21075286 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.178859857 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.162593219 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.182132734 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.165999003 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.166453712 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.162782524 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.161087838 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.19252153 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.170333039 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.238344058 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.190575022 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.191713292 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.242359645 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.171656257 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.163509179 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.16440298 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.198591103 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.181267601 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.190005094 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.221829769 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.180773248 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.212585246 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.180334472 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.160714544 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.165094697 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.254185335 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.182867848 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.193989489 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.199546159 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.185322372 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.258065213 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.2611968 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.244308628 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.191255054 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.170394446 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.163344441 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.164456339 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.16427098 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.21001427 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.178130061 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.167742881 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.256177912 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.184944553 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.164900587 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.188731376 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.167189993 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.176678709 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.178977146 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.19841213 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.265813379 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.192318806 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.194474753 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.185037605 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.186935651 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.1698851 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.238909086 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.172493983 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.25456782 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.188754449 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.166887469 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.167221493 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.171128977 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.212865906 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.200452486 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.2465281 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.17337585 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.242689468 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.21901495 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.18018879 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.168677962 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.166439833 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.215072655 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.252783603 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.218607377 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.227163735 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.200870817 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.17668087 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.165558799 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.165543205 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.194680326 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.175133354 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.255533766 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.260840733 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.17363184 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.167752937 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.169798387 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.166110248 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.192038193 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.22287229 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.207853607 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.251821656 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.200238594 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.206642907 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.175893636 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.179849746 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.170341939 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.196919139 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.176543541 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.180011014 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.496274846 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.20983916 seconds)
  done (took 232.7732695 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.547141497 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.218594558 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.239306203 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.448798411 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.558626847 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.285755625 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.210188047 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.227978496 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.225325171 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.333495674 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.270719481 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.261893456 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.204004014 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.190227492 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.21755038 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.224389098 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.246978787 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.514432385 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.316354818 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.922026288 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.211255801 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.491680858 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.504568678 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.543269987 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.254390879 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.624054023 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.85746195 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.304346298 seconds)
  done (took 70.557546596 seconds)
done (took 918.337000976 seconds)
SAVING RESULT...
DONE!
