cset: moving following pidspec: 877
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.990105154 seconds)
loading group "shootout"... done (took 1.061432041 seconds)
loading group "string"... done (took 0.672499705 seconds)
loading group "linalg"... done (took 8.692121584 seconds)
loading group "parallel"... done (took 0.169657456 seconds)
loading group "find"... done (took 2.973502773 seconds)
loading group "tuple"... done (took 2.217548593 seconds)
loading group "union"... done (took 15.041378933 seconds)
loading group "dates"... done (took 1.484535491 seconds)
loading group "micro"... done (took 0.221217971 seconds)
loading group "simd"... done (took 4.793660511 seconds)
loading group "io"... done (took 1.089769854 seconds)
loading group "random"... done (took 9.626646479 seconds)
loading group "problem"... done (took 1.526627824 seconds)
loading group "array"... done (took 25.36608414 seconds)
loading group "misc"... done (took 1.895704223 seconds)
loading group "scalar"... done (took 43.878368232 seconds)
loading group "sort"... done (took 3.360313845 seconds)
loading group "sparse"... done (took 12.826767687 seconds)
loading group "collection"... done (took 18.771086507 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.426747724 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.128425872 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.131260583 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.116725258 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.185109571 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124721121 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.134095357 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087938614 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.866420099 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138605566 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115531471 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.434435362 seconds)
done (took 5.336692486 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166747998 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093950831 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083448367 seconds)
  done (took 1.396138303 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072313113 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.060647909 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068628205 seconds)
  done (took 1.420487681 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066933177 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135700798 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066634469 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068186405 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.071562048 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068176881 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06778406 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067724734 seconds)
  done (took 1.767847929 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072282368 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069336628 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067054307 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069277521 seconds)
  done (took 1.499039006 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065607174 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.124520138 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066987782 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066699018 seconds)
  done (took 1.540573581 seconds)
done (took 9.100709848 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140015711 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.819797594 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.757368597 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126764953 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250741604 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.45113071 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124502588 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183778841 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089757005 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077054301 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.125811882 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.08052929 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.405865064 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.405613698 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073991723 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.182552514 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.653365488 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087084553 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133195015 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.434006621 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074165445 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088798239 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085939133 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071641942 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.330601751 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154401789 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.679429365 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097127651 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068603876 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096071804 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.072151427 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.080327156 seconds)
  done (took 10.75786481 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.092887863 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.091739422 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070492761 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126019983 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.096817889 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072215599 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077735536 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069760698 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091862901 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.133399324 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.093074166 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.10148641 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.069129745 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.07161049 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.076489749 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.200263986 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.083449639 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083776393 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069621638 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083090026 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108503948 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.081008661 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080660753 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080559598 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132014276 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.173125216 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.100682336 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.100933973 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068528236 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081251953 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.120757608 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128433084 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.068999951 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067150837 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122107781 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.09779745 seconds)
  done (took 4.741352978 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.901893592 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096065183 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085075803 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076531891 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109116666 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.115803068 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.125038806 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.126388417 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103285383 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070812984 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.1566331 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.657062964 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.151842739 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071854088 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120868213 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361989139 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.064805422 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07009219 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06809342 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071173001 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070187654 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112309299 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066179539 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.17595393 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.582748539 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07149656 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070217375 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097229839 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066067614 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.14245547 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.096318667 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070584735 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.54820179 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065677883 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065151346 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089873698 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094009291 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067684633 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069008726 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079852525 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.179777462 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110167226 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083332111 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.500174704 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.072407665 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.565850436 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224705954 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074036248 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072288259 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104128919 seconds)
    (50/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.097204904 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065372951 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069402915 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.796866663 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.126000718 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068501517 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.277913191 seconds)
    (57/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.08852765 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068874691 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070271818 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070903975 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102566443 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069159386 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070507825 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074815628 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098884749 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.806026946 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.092923592 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098410063 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069041871 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.411046328 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076614878 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071472207 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071421325 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.086181764 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.114044733 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0688255 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068499602 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110561301 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.091164704 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.092866518 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071872475 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069866969 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067795618 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.330197086 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.155797216 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067058695 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068549357 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.479839443 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064606995 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067441895 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070013012 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091048129 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066595624 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063858989 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064656312 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100175421 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.070000733 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.480743701 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.069869807 seconds)
    (100/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.065955733 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.475029208 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071568069 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.105591808 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.126527573 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069539984 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098474271 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.070428297 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066826198 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075401223 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067391772 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066434259 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065945445 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071646476 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067303116 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068089166 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070771456 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069775309 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069513848 seconds)
  done (took 22.774870936 seconds)
done (took 40.40144001 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.33533976 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080847911 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080934208 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080969276 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081489085 seconds)
  done (took 1.929013832 seconds)
done (took 3.296981233 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.135580277 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077515965 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065986612 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.102978265 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070520295 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104709271 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111337438 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.107178997 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070764184 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070619831 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070765647 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.106063155 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.108674702 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070430999 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.10088925 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106776443 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070999423 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.069538985 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070688932 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.0706548 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070580307 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066171197 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070999164 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.071065019 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.102001247 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070866045 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066256456 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101541109 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.070854227 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.101937976 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070916361 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.07099076 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070823016 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.10254392 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.071015001 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.102315923 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066355552 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.071239642 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.07111822 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070958392 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070602357 seconds)
  done (took 4.707255892 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071733663 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084151685 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085420314 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064194555 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073592202 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08450147 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064194726 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083902734 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090738817 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084575652 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084289759 seconds)
  done (took 2.188616205 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071529671 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08492552 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089525109 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063597643 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075205381 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085556519 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063476747 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085075416 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087993516 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085706596 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08624935 seconds)
  done (took 2.177397635 seconds)
done (took 10.365786753 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097497594 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06813008 seconds)
  done (took 1.440024099 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.229195646 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.636032403 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.351276653 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093340251 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.074625783 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08850084 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.207573856 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.069264479 seconds)
  done (took 8.221420771 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.101721711 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069832807 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.074726898 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069919114 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070326163 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070562051 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069836925 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069497493 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069623354 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071729959 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.07033874 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069702556 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071440015 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071757946 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.070111935 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.070965502 seconds)
  done (took 2.561943332 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105574573 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070979829 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101798817 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063939165 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073870325 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064579768 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.07277569 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075023943 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072341845 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.073309421 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074427159 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.07319257 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073516426 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073883528 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075172527 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074979678 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.074904157 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072343175 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074762744 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.076006467 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073939109 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075232278 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075665552 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073959344 seconds)
  done (took 3.234148107 seconds)
done (took 16.75566446 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175388809 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.07618137 seconds)
  done (took 1.540170202 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068219314 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069159873 seconds)
  done (took 1.447717327 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073672754 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061019899 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080332722 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072824626 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063487746 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062920336 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079546961 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06379329 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063392182 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063627291 seconds)
  done (took 1.992893391 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063506412 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070878282 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068559061 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066635274 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069345018 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064315644 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.06742411 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065192326 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071887537 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064033924 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068769759 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08589535 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067785404 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086507225 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06734068 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068115984 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069777513 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067774925 seconds)
  done (took 2.566223695 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061459948 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063258789 seconds)
  done (took 1.441571181 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065128503 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062391336 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065812055 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06587922 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.064121141 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063103197 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064009946 seconds)
  done (took 1.758313555 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.433390006 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124854234 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.348809923 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070750517 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07891314 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.260009069 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.06556016 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070330006 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070577843 seconds)
  done (took 2.877952612 seconds)
done (took 14.95038379 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082830152 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182556729 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.089778911 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.412211354 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094354161 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069024764 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114559333 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.179776361 seconds)
done (took 2.565466654 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.217741375 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.252375799 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.394526875 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124415516 seconds)
  done (took 3.090393006 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336603261 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078163888 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077980797 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068585357 seconds)
  done (took 1.892618127 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066793834 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072525004 seconds)
  done (took 1.463124748 seconds)
done (took 7.997647346 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072795262 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062018407 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.079807803 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065931272 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.065953385 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065359276 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.095340505 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065944647 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063423355 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.065924876 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.066301068 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066001555 seconds)
    (13/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065523437 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066226404 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065764721 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06597389 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065933531 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065629747 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.063728105 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065857071 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066410852 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065342899 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066095595 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063896477 seconds)
  done (took 2.967577064 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080152629 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066134204 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068231094 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068508733 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068947616 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068777535 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068852854 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067517923 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068653899 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067363252 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069086474 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069444202 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067252408 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069479984 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067120487 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069370454 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068856959 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067761909 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067314173 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069353612 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068963173 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067643614 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069268154 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068502927 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069681108 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069198327 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067662937 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067756739 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068832305 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069300202 seconds)
  done (took 3.406123343 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067553539 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061773193 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061874012 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071759756 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062030694 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061938932 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062349806 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061708906 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061973323 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063113551 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062466533 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062014847 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.06264891 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061828509 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061964489 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062509175 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066559255 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081353452 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062287606 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061901975 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066299962 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061863782 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.0621416 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062495166 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062714714 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062183532 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061942056 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.06257328 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061972751 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062612822 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061966232 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066122655 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066816745 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061770961 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071687813 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066796974 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061737192 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065885901 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063173752 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061673546 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061921305 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061724775 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062066212 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062411869 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.07222827 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062317708 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063171552 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063171307 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062429276 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061882487 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062138226 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063956738 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070501754 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063365121 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.06170458 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063027138 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061532084 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062293325 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061660022 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061641198 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061930491 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065338555 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063392281 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062955498 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081547995 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063016345 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071670434 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061955212 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062694786 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065596969 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062551652 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07997183 seconds)
  done (took 5.96254667 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072370177 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.07395366 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081209066 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072368893 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066519145 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062972172 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067063588 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06310112 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072925381 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067367563 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063448569 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066717288 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072985853 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067774152 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06424644 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072532125 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067411588 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066522576 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063127637 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067337228 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064860228 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066985145 seconds)
  done (took 2.859629295 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135837146 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066819577 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108047705 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076610246 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070794025 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077135249 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068191521 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068048211 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068036121 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068686213 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068706451 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068295364 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070809873 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068515639 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068405774 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068742986 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067898123 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.0685626 seconds)
  done (took 2.699177669 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077315643 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.06606094 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089330509 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06598179 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066967082 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067571913 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071655512 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072681491 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067442449 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067816042 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072332498 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067554166 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.06741868 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068058201 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067208786 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067729072 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067681241 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067870145 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071850717 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071554823 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071670835 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071958949 seconds)
  done (took 2.892907411 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077659278 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064992318 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080227493 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067858349 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062564377 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062390381 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.06772108 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067138144 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067681609 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066552218 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066956676 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062126652 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068861426 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067651486 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06879957 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067094991 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06695314 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066872751 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066451564 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062281261 seconds)
  done (took 2.696428288 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.087720052 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064774636 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065018403 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084448149 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065001167 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065056685 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084627501 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06475336 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065300651 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087401586 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06522041 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065433509 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.08504646 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.085106744 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065394996 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.085253428 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084916115 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084491167 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06508222 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065086498 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086956459 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.0653796 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084960003 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065768098 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065634524 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065499475 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065321401 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084529054 seconds)
  done (took 3.420018268 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066427954 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065025295 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065520507 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.06508964 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065922731 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065545528 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066091993 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066013945 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065621669 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066140834 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065447708 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065953948 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068706355 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065651177 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065678935 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065631426 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065648695 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06597232 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065815765 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065773735 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.06572613 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06583275 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065551302 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06601134 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066005604 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065537146 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066052749 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066342279 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065926087 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065987632 seconds)
  done (took 3.334016728 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.075985549 seconds)
    (2/2) benchmarking "in"...
    done (took 0.073703996 seconds)
  done (took 1.506922357 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062460136 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079652877 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061517633 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074302686 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.07023163 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065643821 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071595473 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070974802 seconds)
  done (took 1.906310929 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.069371534 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.093161322 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064018302 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064175968 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067556771 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.134786278 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.077288515 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075704131 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078019914 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066399624 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064726142 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076266086 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.064143752 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077376901 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065331977 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073069488 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071045386 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081283998 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076779825 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06284029 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076670609 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065000439 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.06311648 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064857029 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063894906 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070969608 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079949411 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076661339 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072064587 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061699768 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083016073 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062424621 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06413961 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072343785 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067540341 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063207773 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.101242569 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063225895 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068533169 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.06246201 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075584623 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084000865 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077359837 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081313433 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064897195 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06532666 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062678215 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065324947 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066594088 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072154824 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062744958 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070793657 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062034131 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064164224 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073710009 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063246209 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.0685956 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072276227 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076796012 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073758603 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071665792 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07878181 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071739852 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071392565 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063906656 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082620476 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064868601 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.07618613 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077765485 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064143475 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076734172 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062169084 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061358323 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062537747 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.096803589 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064440985 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064156435 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062851283 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062588523 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06420765 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072553766 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068271644 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070100795 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066700181 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079778654 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072344959 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062687269 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.070614733 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080879501 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066083467 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062955256 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.080072718 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.06618074 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062036108 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080589815 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072510409 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064410319 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063738608 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065900665 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076242659 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.064338024 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.06157364 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07144867 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064177487 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.065127996 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.067386829 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071064872 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.062410372 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072790199 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.067800961 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.064049895 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.061453889 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066446038 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063209746 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060688522 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.0716547 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062331643 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076097209 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068492996 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076680128 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076584675 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072253911 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077840989 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062007509 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060130822 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079146999 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.0709709 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.200091237 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.082935501 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.064527891 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.07858421 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063619756 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065583631 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073538818 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062502444 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065551574 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062903699 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068288158 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064421787 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065033721 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068247114 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071763097 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075683727 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064118511 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071897029 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063721335 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079446482 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.07321922 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067433828 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066513635 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063517297 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075139835 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069457439 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072662817 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062423042 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063518497 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.06325545 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07347705 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072851696 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.065126109 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.0704944 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067389981 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063501474 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063263021 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064062726 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.06622327 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066646431 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.06362656 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071059221 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071726891 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07627673 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06840691 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070616514 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060925423 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061847972 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.065415127 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062898317 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.06732043 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072799878 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078701509 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.075500452 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084540982 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063726845 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073235584 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.065159315 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.08029491 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.07714791 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064212193 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068219274 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061849409 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064703156 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072679245 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074866728 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077114906 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078044241 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067630461 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067281556 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062564954 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077955719 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063572947 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071995798 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072716686 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067966603 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063579823 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.065127898 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072341841 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067950661 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062823766 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079064438 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069680465 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062975993 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077631476 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063138364 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.074031849 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062430252 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06628413 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068037054 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064969847 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072435282 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.079043303 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061973539 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063840826 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.079100083 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.065411386 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06453189 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071033728 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07818186 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067512917 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071014518 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073559199 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072555325 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067379769 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072561734 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063740238 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072069819 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065596183 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074015526 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062283317 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080356664 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061024156 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077237686 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062479545 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.07333715 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062733563 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07160097 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.063247023 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079048168 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063790788 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062963872 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073421131 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060628615 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071283322 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060895569 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066418401 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068437366 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071118866 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063806746 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071323549 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.063745456 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.212261589 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067350908 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.072733774 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073767484 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068394415 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063258324 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072311047 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074580302 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071806976 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.065499237 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064763046 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063538822 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072612888 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06461392 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064617755 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071341841 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067564614 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068998704 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064887365 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065199735 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064615446 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071812303 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07268902 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081218403 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072037129 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070972765 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.07266839 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062932404 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078832104 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062995489 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073883179 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061896796 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069426738 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072544902 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063173901 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082392686 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064716937 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071450886 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075915094 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073628517 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066537688 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081164352 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066432333 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071391788 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071262382 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067580486 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069173209 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065092794 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071808586 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073460062 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.074460506 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064314601 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070732922 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07234777 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064751354 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071527464 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.065468545 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071833627 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064871388 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062428378 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067770285 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075528288 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068073361 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068048661 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063549128 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.062041108 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063897327 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070822239 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067665632 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072322607 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079207792 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062542452 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064129477 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.06254639 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.067066819 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081312327 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072900621 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071430381 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067932669 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062494919 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064923035 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065108483 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.06384202 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066779552 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062559695 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062963697 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074264892 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06535465 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067286488 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063650015 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064465575 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.073013695 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068595661 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064126512 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069922579 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063164767 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067987805 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.06245916 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06494678 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067693172 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062192099 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066429053 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.073700755 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.080170666 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069495159 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071662736 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063940986 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070959439 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078404212 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069755043 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063624727 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071938566 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.062108512 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081218591 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072112294 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071251211 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072695202 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063935213 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079247964 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066709457 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072121028 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077748084 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06314903 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068562804 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061256273 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077188085 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06621067 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061244071 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069783432 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069734829 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067792191 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073527271 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.208986336 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070526727 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067533737 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066247673 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065370259 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065175217 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072333801 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079516657 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063941253 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06787427 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071469701 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072119021 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067333441 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075820753 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071661197 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064184956 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.065063893 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066636878 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063923108 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075241547 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063592226 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067894286 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067982594 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.06298846 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069932112 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080161456 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073093598 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073258707 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062874985 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062211203 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080518683 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066472697 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.06699845 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071366265 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072773729 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075521046 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072429663 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080170637 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063661642 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068743189 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075822898 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064087637 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063290516 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066388064 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.065035443 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072836474 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072937889 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070880985 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065068153 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069672799 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076865783 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064381452 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067765163 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068097058 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063904219 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.074014303 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071449661 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.075447806 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064765249 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062590894 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066728302 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072463318 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070669903 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.07280314 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064412141 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070282866 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077230711 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071270248 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066570789 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062850798 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066685849 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072704662 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068330307 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063231625 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067893148 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.06702507 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070733759 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.073347324 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067962946 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063166538 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.08111313 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071593411 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072883337 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065429099 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065740622 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064146646 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062864169 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074787061 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062955032 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.065240439 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067860335 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065317352 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.081321317 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071751271 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079563105 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064559593 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067904168 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062973928 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073080725 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067996251 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.064003514 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.095348105 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.06271556 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078685646 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.075182797 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068706263 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.063230833 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.068142772 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071230956 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078669277 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072886546 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072104622 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066355792 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073032135 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.065144796 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.07418428 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.06248803 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061800072 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072907073 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071510562 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075550321 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062124519 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072459045 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064633972 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070410632 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070433728 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064044811 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063591258 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064763623 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072192791 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066833409 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071875552 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.066986279 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079011621 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063210037 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073350021 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071606859 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073271287 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076325057 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074543647 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.070205995 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062344693 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070006854 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069817245 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063327975 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067159825 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065070732 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083227042 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063516117 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063275069 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075928329 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068215379 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062052121 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068019291 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066233302 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071835914 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06283924 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072232854 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065768139 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062725694 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066152022 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066598337 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060760508 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061665207 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06207763 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072046446 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066853155 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062510577 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081829258 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063893903 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070197214 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071796829 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068728734 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064169233 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060838594 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063170251 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074905423 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077347838 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.06548235 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070559296 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063705764 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071432876 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061322072 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070533556 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070240521 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070623693 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061827228 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062065476 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076669003 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077700235 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066371952 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071365483 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.071048687 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063744324 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083683673 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071235981 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063571666 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.073784971 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065170025 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061927064 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061406251 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063893705 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074368082 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061935252 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064672624 seconds)
  done (took 43.102366754 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.112754572 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067597783 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066151226 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.066785969 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.078363881 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068167781 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067095852 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068031066 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06756495 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.068772403 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066103366 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069205716 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.077344668 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.079864396 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076515984 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069999122 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066069695 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.066843961 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.066077154 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066781266 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.076660072 seconds)
  done (took 3.120970247 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.070085434 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.069396253 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069885004 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.069371231 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069048828 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.065159888 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.068897264 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064876581 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.069195063 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065171249 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.069276403 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064873543 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.064840231 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.064904856 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06493547 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066598914 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.069814311 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068441016 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.064741721 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068882628 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066566229 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.069009393 seconds)
  done (took 2.963692764 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.066313038 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.064958616 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.07328474 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.063752957 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.063457326 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.067330835 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.063799486 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.068160166 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.068351368 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.068531493 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.073773947 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.065123375 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.064057979 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.070048332 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.06396165 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.064752662 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.108317694 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.065178737 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.065294925 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.063974552 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.066827165 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.073911113 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.064352338 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.064509021 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.068450324 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.067426481 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.063635993 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.066921035 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.064902332 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.068144903 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.065083014 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.063661878 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.073087226 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.072535774 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.068247352 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.068720871 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.066475353 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.065160793 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.064078066 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.063839976 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.072947628 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.065536794 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.064343037 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06572179 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.073153092 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.063500875 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.063228561 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.072888803 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.063214546 seconds)
  done (took 4.799059104 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.075211141 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.117727935 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.069882592 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.098401777 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.0769639 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.070305976 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.06954479 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.099160833 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.065378882 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.065486383 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.078215648 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07841634 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066774851 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.0686361 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.071562991 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066882462 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067644717 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.066406184 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.069802885 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066839701 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.070279731 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.071909044 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.077958689 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.078035967 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067912751 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06629227 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066774133 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.068181338 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.077881701 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.070318242 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.06853667 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068822655 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.077950474 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070361158 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064721196 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.064008709 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075567268 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065406803 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.066433523 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.064741606 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.066300739 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067474495 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070947147 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.078026372 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066940469 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.071585076 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066391673 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.064268488 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076976302 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.066296502 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.070573638 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.078943257 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.068438883 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.067309725 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06875135 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.077784659 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.066850839 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.065438752 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.066979751 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.077730639 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.065670955 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067629248 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.081538506 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.06628862 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.070337194 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.078952157 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.071851522 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067970071 seconds)
  done (took 6.521516794 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.074398991 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.099428454 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075068353 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074681848 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074547888 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.075097319 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.074830549 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074874337 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074745808 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075201251 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074898008 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.11667478 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.071089043 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.079337629 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074939171 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.074920769 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.075108647 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074775766 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.075198996 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074975934 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.074580312 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075631186 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.074989297 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074888052 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.077428469 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.071045405 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.074565179 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074227011 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074763295 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074627768 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.077546718 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.074465775 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074795027 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.075110354 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.077921058 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.074504282 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064903167 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074455862 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.075013387 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.074639275 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.071136175 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074814772 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.074274793 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.070697784 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074803568 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.0748835 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074907922 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.077405284 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.081846222 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07538387 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.075013615 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075291442 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074640458 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.074911007 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075356177 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.082152369 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075470113 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075430106 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074982213 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075393002 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075419672 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.082107025 seconds)
  done (took 6.246041409 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078417131 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.070321066 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.083436466 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.063457858 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063861442 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07327051 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063862741 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.06377691 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070876944 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.071287439 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072694953 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.076862412 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075768328 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072782654 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.073459115 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075571381 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.073803846 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.073610671 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070777659 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073693913 seconds)
  done (took 2.960617924 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.079264821 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.082954778 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.069521207 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073122269 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.069106979 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.07326936 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068950913 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069598467 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07019503 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070171271 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.074619519 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.074780202 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070434913 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.073902755 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.074723034 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.073625149 seconds)
  done (took 2.674488156 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.067529934 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.071196235 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.069390436 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.06345739 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065542726 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062916151 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063288973 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.063005302 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06660562 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.078716542 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064662685 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.067433478 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.065129722 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063793865 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.064221356 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067421073 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06650281 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.064943652 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.065050264 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.069545404 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.073575317 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.065977115 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.067204633 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064507869 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.067034561 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.073698779 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.066215095 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.067233489 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.0647115 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.067603928 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.067482614 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071539964 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.067139348 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.065543845 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063869245 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064951559 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.065154031 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.067613124 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067857342 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.065011541 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063337657 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.070573631 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.065098721 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065762239 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06648438 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.067555826 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.066408218 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069397657 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064546199 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066954757 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.065157202 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.066877942 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.065576623 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.072095279 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06730259 seconds)
  done (took 5.182054021 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080554097 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067632087 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061993523 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062280562 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06721204 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068435877 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067552711 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068071198 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068145619 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06215354 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068013027 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066993934 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068290522 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067875186 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067822212 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067710107 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061925905 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067986685 seconds)
  done (took 2.730465948 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.071102316 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.070082678 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.068262548 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064426933 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.06416017 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.070639792 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063923446 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.065512818 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065206568 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065973174 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065889363 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.065069368 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065741847 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.065047383 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070049564 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065690289 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.06546677 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063632932 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.065730709 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063782239 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.070546267 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064767702 seconds)
  done (took 2.973944294 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.091596938 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085619071 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.129112627 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081654174 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090205942 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073525228 seconds)
  done (took 2.068212101 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098426172 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.108050976 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066429342 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068095802 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074870086 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070041383 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070889386 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070238827 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07568204 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073832287 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070102094 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075783723 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075738748 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072107051 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076017866 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078312621 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070758667 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070355196 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067105375 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078392001 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070206038 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075582738 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070223117 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069869719 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070026882 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07167846 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078258061 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074152375 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070074896 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075484778 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078031586 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070129114 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075559175 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073979083 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067246565 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075657645 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070342922 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077950282 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075780206 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071940727 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066995076 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075521409 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07625876 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074001976 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080205543 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070359479 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072486238 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070474347 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070545983 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.08024259 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076206495 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072473656 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075946044 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078371613 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078254712 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080145438 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074972176 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072088649 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075799214 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074257363 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072016176 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076333888 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072018291 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074221711 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078029424 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072078133 seconds)
  done (took 6.437057123 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103680582 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067120786 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070398714 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07395201 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071763129 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070639867 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070768856 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070470359 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070259802 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067959203 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105732237 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070552866 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072161417 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075054129 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070913265 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070436181 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070732753 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072326189 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06764422 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.08053133 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070259261 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071961166 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072345614 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072088024 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074064626 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077651159 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070046084 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070150387 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070474888 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070572759 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072260185 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070151073 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07161163 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066828946 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071931116 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070099518 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069994514 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071816295 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069972009 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075223078 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07177405 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078029508 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070125559 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069673846 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07452909 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070803553 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072475154 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069403224 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071981861 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069489273 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076542467 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076513151 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076220623 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074087754 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072761579 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07312008 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072333468 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072856976 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072602887 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080694541 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074324387 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072660712 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.082902442 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072509244 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072442173 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07417368 seconds)
  done (took 6.385957361 seconds)
done (took 133.14318365 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.222846657 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.192245822 seconds)
  done (took 1.919824138 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.077918801 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.168143173 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075970692 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075515644 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109888217 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108568674 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.07761209 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07320336 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075876968 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072971563 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140326809 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076997803 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073258489 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073209948 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073232576 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073351074 seconds)
  done (took 2.95642999 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.110943812 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185925446 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.083673506 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070988618 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.116124287 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077684028 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.073505553 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076314373 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077399527 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071530801 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.108770797 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082550959 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074926369 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.078123201 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.073391407 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074605347 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076128308 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077765371 seconds)
  done (took 3.126835318 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.100952802 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089418287 seconds)
  done (took 1.728511192 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.164338056 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107575944 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145990035 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.330791063 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130833999 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.128925549 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.132600105 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.129298547 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.114041445 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.124115045 seconds)
  done (took 3.039598774 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.110065463 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.108135823 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.313022731 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.104803226 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.08335969 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.08031237 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.078329067 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082107917 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076106868 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077496029 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122899594 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075983153 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073527946 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.125285295 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099453924 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107060388 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071888971 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.079426437 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080476378 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071804977 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07656608 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080636538 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179975574 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079255292 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100522988 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.076364179 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077794749 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075188135 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075161068 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078866145 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079860239 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100417642 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079119991 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.0849161 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.07795279 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.098198398 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072668756 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099855934 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075063764 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073068622 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075526839 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079599045 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.073465637 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079281714 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.076685099 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.079021492 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.081295669 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071793775 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076149836 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075193829 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073339925 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077437995 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077087984 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.078025308 seconds)
  done (took 6.392252106 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.112830026 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.111048457 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07082769 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11359279 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106130001 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071215988 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105661293 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101004195 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109304717 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070632114 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070005092 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069978157 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077244874 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080105261 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117489187 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109431708 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072423009 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070972153 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108560772 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.10819813 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069960627 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.103101781 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.10079731 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107007206 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069459908 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070814022 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069229788 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069854149 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074712138 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075831722 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069853815 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076734386 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081470863 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076439116 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068927362 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069347053 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069316859 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076581465 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077062583 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077304838 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075229252 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068851899 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06925192 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070156701 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.07055939 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068971116 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075459524 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075979846 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075731602 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069953054 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069785577 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069136132 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069752778 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076294461 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075475813 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076950607 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076764636 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069785318 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069805529 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071113818 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077883338 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077453347 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077225913 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070753772 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077813893 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069795262 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079147252 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081636992 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069871263 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070188851 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070053944 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069963129 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.07051789 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075752501 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075698067 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070218624 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069748761 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069738286 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078109103 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075792873 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06970329 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075057415 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069327749 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070149117 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070781847 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070407138 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.07522093 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.077074993 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070331491 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06966142 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069650916 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069688458 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069724191 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075378417 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077121056 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.077008292 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075918653 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069962508 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075924624 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076201631 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070545749 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075446591 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069618767 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069756175 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070120847 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075901875 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07600699 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077376652 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069060608 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068688377 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074674853 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077804486 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.207938519 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076436315 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078810329 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077025125 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069860686 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079199685 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070108694 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077669653 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070050677 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077994639 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070009765 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076007991 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070252592 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069347063 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069813294 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075587113 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070705805 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069837813 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070108033 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070067522 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076318349 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079202362 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070669611 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076197035 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076441565 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070038731 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075533485 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06980798 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076991276 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.0699326 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070185593 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068705223 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078342551 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069685438 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069634625 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069650527 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077750818 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069910388 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078032434 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075280301 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068796271 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07997757 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07767308 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07533956 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078134414 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07026323 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069914528 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069786264 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.075252304 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077613472 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079704233 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072704364 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071936551 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.077617411 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.081442589 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071664839 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.078011313 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078316921 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.077043491 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069925581 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070355579 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078592498 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078042158 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.313470799 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075369297 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076088754 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069289995 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075098253 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075414879 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069374216 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081158523 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069904624 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079381798 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076611504 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074557825 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076097399 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077609172 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077583202 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078720265 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080003403 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070004295 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069315194 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.076001793 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069733931 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07001562 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075970842 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070200255 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070398972 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080315617 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.07045615 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077888722 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069464221 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076423212 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069109862 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070251079 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079955646 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06972567 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070098192 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075591393 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069310779 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075045512 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077798419 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075469096 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069049958 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069677813 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075683812 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076209959 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06882494 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068834802 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06940838 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07430644 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073466064 seconds)
  done (took 18.875257419 seconds)
done (took 39.593658517 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.173887341 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116078416 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210222828 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199728916 seconds)
  done (took 2.345501899 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.104356195 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.068189915 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.083389646 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.09367205 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066398157 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.077307508 seconds)
  done (took 2.089159986 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.206371602 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175193083 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.244101724 seconds)
  done (took 2.210127262 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.374351551 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.154460298 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.222758605 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.509999933 seconds)
  done (took 2.950910443 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.113937382 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.104444853 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.082144303 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.116376128 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.090193494 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.066091073 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.138612522 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.071724335 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.103302041 seconds)
  done (took 2.534308337 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.131830757 seconds)
done (took 13.86217786 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.192859367 seconds)
    (2/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.283321989 seconds)
    (3/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.208521855 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.22484481 seconds)
    (5/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.178534489 seconds)
    (6/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.11045435 seconds)
    (7/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.189511373 seconds)
    (8/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.12786917 seconds)
    (9/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.241598847 seconds)
    (10/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.242345382 seconds)
    (11/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.189760334 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.145578039 seconds)
    (13/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.217478919 seconds)
    (14/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.154274423 seconds)
    (15/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075598714 seconds)
    (16/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.079586553 seconds)
    (17/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.108503027 seconds)
    (18/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.218669404 seconds)
    (19/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.188630557 seconds)
    (20/341) benchmarking ("sort", Int8, false)...
    done (took 0.152793086 seconds)
    (21/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.219107935 seconds)
    (22/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.074412166 seconds)
    (23/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.080498419 seconds)
    (24/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.077105228 seconds)
    (25/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076863948 seconds)
    (26/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151377843 seconds)
    (27/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.118141671 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.092471231 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.092030313 seconds)
    (30/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.075284665 seconds)
    (31/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.14568016 seconds)
    (32/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.217349074 seconds)
    (33/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078590083 seconds)
    (34/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.07359162 seconds)
    (35/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080098614 seconds)
    (36/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.076618743 seconds)
    (37/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.20332813 seconds)
    (38/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079565092 seconds)
    (39/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075238145 seconds)
    (40/341) benchmarking ("sort", Float64, false)...
    done (took 0.139118067 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.14285243 seconds)
    (42/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.0755411 seconds)
    (43/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.080684774 seconds)
    (44/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.209644225 seconds)
    (45/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.096496032 seconds)
    (46/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.06764646 seconds)
    (47/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.124797399 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076934785 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074209023 seconds)
    (50/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.201123833 seconds)
    (51/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077196394 seconds)
    (52/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.18351948 seconds)
    (53/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.191388275 seconds)
    (54/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.14994564 seconds)
    (55/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.069707421 seconds)
    (56/341) benchmarking ("sort", BigInt, false)...
    done (took 0.265718224 seconds)
    (57/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067037705 seconds)
    (58/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134101531 seconds)
    (59/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.178448768 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.125799142 seconds)
    (61/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.234526135 seconds)
    (62/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086665391 seconds)
    (63/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074338836 seconds)
    (64/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.070896921 seconds)
    (65/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.154503365 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.08819698 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.093445369 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.082493674 seconds)
    (69/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.083770395 seconds)
    (70/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.145633383 seconds)
    (71/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075354803 seconds)
    (72/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067957461 seconds)
    (73/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.070163983 seconds)
    (74/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.073279578 seconds)
    (75/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.072893445 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067670188 seconds)
    (77/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.228659597 seconds)
    (78/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.182137054 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.089961564 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075528572 seconds)
    (81/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.065292498 seconds)
    (82/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080976475 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133406433 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075057407 seconds)
    (85/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.084507619 seconds)
    (86/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.084347957 seconds)
    (87/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068960266 seconds)
    (88/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.193141253 seconds)
    (89/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.218407902 seconds)
    (90/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.163724239 seconds)
    (91/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066911824 seconds)
    (92/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.165816189 seconds)
    (93/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065882402 seconds)
    (94/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.07863441 seconds)
    (95/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.071150043 seconds)
    (96/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.225610879 seconds)
    (97/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.189013299 seconds)
    (98/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.067798978 seconds)
    (99/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.088981599 seconds)
    (100/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.083618744 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.088891027 seconds)
    (102/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.090186885 seconds)
    (103/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.077270411 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090107228 seconds)
    (105/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.074310272 seconds)
    (106/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067375 seconds)
    (107/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068287121 seconds)
    (108/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.07619958 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075222924 seconds)
    (110/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.202012345 seconds)
    (111/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093640701 seconds)
    (112/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.233485586 seconds)
    (113/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.204419976 seconds)
    (114/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.131956935 seconds)
    (115/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.078472163 seconds)
    (116/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.095940921 seconds)
    (117/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.074424693 seconds)
    (118/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071433501 seconds)
    (119/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.067865543 seconds)
    (120/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.077016459 seconds)
    (121/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070303349 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066781045 seconds)
    (123/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.163040669 seconds)
    (124/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.228408946 seconds)
    (125/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.170281637 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149539488 seconds)
    (127/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.166267288 seconds)
    (128/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075913601 seconds)
    (129/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067144351 seconds)
    (130/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.16403436 seconds)
    (131/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.173581605 seconds)
    (132/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.082495082 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087732806 seconds)
    (134/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.161511131 seconds)
    (135/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.077623822 seconds)
    (136/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.169535912 seconds)
    (137/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.143886963 seconds)
    (138/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.077804452 seconds)
    (139/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.08514532 seconds)
    (140/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.1763641 seconds)
    (141/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.068121799 seconds)
    (142/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.144004218 seconds)
    (143/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076661476 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092524591 seconds)
    (145/341) benchmarking ("sort", Bool, false)...
    done (took 0.146699407 seconds)
    (146/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.149798862 seconds)
    (147/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.138987263 seconds)
    (148/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073429964 seconds)
    (149/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.085319341 seconds)
    (150/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.170299585 seconds)
    (151/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.196533782 seconds)
    (152/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067869304 seconds)
    (153/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.065698027 seconds)
    (154/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.067720639 seconds)
    (155/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066944719 seconds)
    (156/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.141828768 seconds)
    (157/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089329305 seconds)
    (158/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.09091895 seconds)
    (159/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073806708 seconds)
    (160/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077007502 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066050119 seconds)
    (162/341) benchmarking ("sort", Int64, false)...
    done (took 0.068067028 seconds)
    (163/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.196343876 seconds)
    (164/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065997518 seconds)
    (165/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.154310503 seconds)
    (166/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.146209184 seconds)
    (167/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069095904 seconds)
    (168/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066296049 seconds)
    (169/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066559156 seconds)
    (170/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065411839 seconds)
    (171/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.152397982 seconds)
    (172/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083049306 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091366497 seconds)
    (174/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.07256258 seconds)
    (175/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066747995 seconds)
    (176/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073738388 seconds)
    (177/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074258328 seconds)
    (178/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.244049195 seconds)
    (179/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.070799461 seconds)
    (180/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.145775599 seconds)
    (181/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.086380742 seconds)
    (182/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.149762104 seconds)
    (183/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.077980824 seconds)
    (184/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.070406471 seconds)
    (185/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.068687355 seconds)
    (186/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.132922174 seconds)
    (187/341) benchmarking ("sort", Float32, false)...
    done (took 0.14389079 seconds)
    (188/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.070087006 seconds)
    (189/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.202100743 seconds)
    (190/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.072385722 seconds)
    (191/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.072123274 seconds)
    (192/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.076140227 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.156472708 seconds)
    (194/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.151578693 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.137661752 seconds)
    (196/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.078783369 seconds)
    (197/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.069712696 seconds)
    (198/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.086001119 seconds)
    (199/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.097224311 seconds)
    (200/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.069611016 seconds)
    (201/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.069532369 seconds)
    (202/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.068558259 seconds)
    (203/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.068329952 seconds)
    (204/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.079481884 seconds)
    (205/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.081170405 seconds)
    (206/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.087304024 seconds)
    (207/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.069406286 seconds)
    (208/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.072920592 seconds)
    (209/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.069459893 seconds)
    (210/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.175159377 seconds)
    (211/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.070604592 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126402151 seconds)
    (213/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.067206121 seconds)
    (214/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.076454858 seconds)
    (215/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.068380637 seconds)
    (216/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.073816333 seconds)
    (217/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.151135625 seconds)
    (218/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.237065341 seconds)
    (219/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.069120879 seconds)
    (220/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.075366663 seconds)
    (221/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076827757 seconds)
    (222/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.069560732 seconds)
    (223/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.133139132 seconds)
    (224/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.075479124 seconds)
    (225/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.068918241 seconds)
    (226/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.067872968 seconds)
    (227/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.069195857 seconds)
    (228/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.06896673 seconds)
    (229/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.072241301 seconds)
    (230/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.069015884 seconds)
    (231/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069773803 seconds)
    (232/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075537961 seconds)
    (233/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066991786 seconds)
    (234/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.07535826 seconds)
    (235/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.067505193 seconds)
    (236/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079718599 seconds)
    (237/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.079179105 seconds)
    (238/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067697611 seconds)
    (239/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.13618905 seconds)
    (240/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.08689628 seconds)
    (241/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.069763615 seconds)
    (242/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.070917333 seconds)
    (243/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.069675237 seconds)
    (244/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.090775967 seconds)
    (245/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.076885961 seconds)
    (246/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.076537737 seconds)
    (247/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.171920787 seconds)
    (248/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.07968254 seconds)
    (249/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.083422705 seconds)
    (250/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067272117 seconds)
    (251/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074004476 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070238426 seconds)
    (253/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.06671171 seconds)
    (254/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.140686618 seconds)
    (255/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.067542306 seconds)
    (256/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124575306 seconds)
    (257/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.07632781 seconds)
    (258/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074802565 seconds)
    (259/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065348559 seconds)
    (260/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.06815792 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.066786741 seconds)
    (262/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.071755898 seconds)
    (263/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.06937925 seconds)
    (264/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072848197 seconds)
    (265/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.080784693 seconds)
    (266/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071587642 seconds)
    (267/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.076200155 seconds)
    (268/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.143819703 seconds)
    (269/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073418827 seconds)
    (270/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069426992 seconds)
    (271/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.202074533 seconds)
    (272/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.067264535 seconds)
    (273/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.068987193 seconds)
    (274/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066688021 seconds)
    (275/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066955204 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065826358 seconds)
    (277/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067194049 seconds)
    (278/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.067169181 seconds)
    (279/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.067285086 seconds)
    (280/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.06725028 seconds)
    (281/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067369306 seconds)
    (282/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066673307 seconds)
    (283/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065719329 seconds)
    (284/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.091835958 seconds)
    (285/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067260457 seconds)
    (286/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.06805979 seconds)
    (287/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.070765716 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150564394 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177603681 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.115409773 seconds)
    (291/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.069060797 seconds)
    (292/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.070090713 seconds)
    (293/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.069334649 seconds)
    (294/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.072089098 seconds)
    (295/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.068990981 seconds)
    (296/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.069408616 seconds)
    (297/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.069317445 seconds)
    (298/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067576508 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083104638 seconds)
    (300/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.065913931 seconds)
    (301/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.064911385 seconds)
    (302/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072397655 seconds)
    (303/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.065104359 seconds)
    (304/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.066773532 seconds)
    (305/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.093020049 seconds)
    (306/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.25905192 seconds)
    (307/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.196835159 seconds)
    (308/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.069305742 seconds)
    (309/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076838537 seconds)
    (310/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.069160955 seconds)
    (311/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.068426138 seconds)
    (312/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.069389631 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.085049806 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.069668123 seconds)
    (315/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.073702071 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.081814263 seconds)
    (317/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.070669786 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.087298913 seconds)
    (319/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.069867211 seconds)
    (320/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.072924195 seconds)
    (321/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.070246726 seconds)
    (322/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.06997694 seconds)
    (323/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.072248831 seconds)
    (324/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.070878652 seconds)
    (325/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.069124048 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.093573946 seconds)
    (327/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.068242289 seconds)
    (328/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.068968195 seconds)
    (329/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.071977636 seconds)
    (330/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.070050475 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068674103 seconds)
    (332/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.069363544 seconds)
    (333/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.069111443 seconds)
    (334/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.06755978 seconds)
    (335/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.071565362 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.097646652 seconds)
    (337/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.071241644 seconds)
    (338/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.069448573 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.115640625 seconds)
    (340/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.069699643 seconds)
    (341/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.069231469 seconds)
  done (took 37.517479099 seconds)
done (took 39.124147794 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.095084134 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082407154 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080715889 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.07736169 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081613701 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.080110989 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.081103669 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079277959 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080678234 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079311264 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077630265 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066194662 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.07437785 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081298084 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075299287 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.082217914 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079251302 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082470003 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067728399 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081322009 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093073112 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.07876061 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075501782 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.08064004 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067044098 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075714088 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090495589 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087732305 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.0735439 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076809866 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074293452 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.085155961 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076531423 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.075403255 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078932553 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.075388224 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.07882613 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.076977993 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.093256821 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075167638 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.06940972 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.081461609 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.076600778 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076798554 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077628927 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080887241 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074292867 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.082591847 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068917053 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079873476 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093404479 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074452192 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.075649771 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.077865239 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.074589964 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.078573267 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.075921583 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080750402 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.074499133 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078997007 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078117474 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074924814 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066393133 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07532733 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.074152231 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075263208 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.06760419 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07450211 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068831583 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068510672 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067818496 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.076680742 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07434038 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.072908973 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065794417 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066908439 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066841546 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.079902731 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074332585 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.078381419 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.069083412 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074121965 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073805944 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068747875 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074062509 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080556508 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.068133745 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068944201 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06793606 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.083242662 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075748702 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068195142 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080678584 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074435004 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073922364 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068782096 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068033476 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073977856 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.076780206 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.068714111 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067728416 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074235498 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073800412 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.077444438 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.069149246 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074205107 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073723569 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067085599 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076920169 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.075554473 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.077435984 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.082546041 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.078017365 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.08073707 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.069390909 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.067989736 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.078452068 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.069293979 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074154103 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076631511 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074546425 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.076533807 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.068164948 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.068373096 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074427016 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.07539978 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.069319982 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.069342277 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.069520904 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.078797117 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07597244 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.067324027 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.068103955 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077470493 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07766044 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067855889 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.068296179 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076192712 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066278691 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072220032 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071857588 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074852 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065476924 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065963278 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.213139636 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066945936 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066319535 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.073256425 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072414698 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066957091 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075496945 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074691847 seconds)
done (took 13.263784342 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.070428119 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.109716576 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077147398 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.086173907 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.081371787 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.070640813 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073681519 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.087303072 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.073694149 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088333312 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.096728953 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089118769 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094243 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066229346 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067422245 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068154895 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065951505 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074981929 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082228228 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090541817 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.096340649 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067140321 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.076512262 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084121687 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.118990035 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083400374 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068299528 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068118465 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069912756 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.083940415 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092838765 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066826476 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068180477 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080403413 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.08142454 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074075164 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068123339 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071188016 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.07070472 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067239153 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068899699 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082252194 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071118859 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071326512 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068629244 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068866176 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067928471 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070768971 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080529538 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070671763 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074821542 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.079048662 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068913037 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067293385 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065538028 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071212118 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067304177 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067896409 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067729577 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067733124 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06799768 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069702354 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068443794 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.068027193 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.07218438 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.07159119 seconds)
  done (took 6.667693469 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.086625834 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.094437685 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081899742 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082668378 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067299414 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069090768 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069507165 seconds)
  done (took 2.27112465 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.070719926 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077491916 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.082676539 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.081013903 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088978754 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077120313 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.06864843 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.101300831 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.068215901 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078284983 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.085077214 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083751056 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073535046 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.082524881 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.070545869 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.082843239 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.07058102 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077613792 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.078428226 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.084026184 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07427257 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100536854 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.083273835 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.06989322 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081253926 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075180567 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070201852 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.06839799 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068458085 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.0678108 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067458001 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089591789 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.074098554 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082121615 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067905415 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067123739 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.073437307 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068519609 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071961398 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.074405409 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071309377 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.06762884 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068270383 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067510006 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068598831 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072172391 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068244149 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067469033 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067496425 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074942559 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066552379 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07419871 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069581514 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072789508 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072135374 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072577493 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074501229 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067878156 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075300038 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07409213 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06739545 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080037201 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079220937 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071280077 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079121261 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075741152 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074095792 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071254633 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067409633 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066720839 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067951264 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079231489 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070645743 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069811773 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068283675 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072216484 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071581324 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082815165 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082695401 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080726786 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069761263 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067761588 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071616838 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082386752 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072270952 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067549311 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.06851952 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067317494 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.073654411 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.07023709 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074974501 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069709593 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076677231 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072800332 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072406164 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07825576 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067665852 seconds)
  done (took 8.895979435 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.073628054 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.07185443 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.06960748 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.069373613 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069536041 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069060326 seconds)
  done (took 2.177746518 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.094545871 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069922043 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082628128 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.07035606 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.093915395 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.077440748 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.077714862 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072764206 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.087131685 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.080981388 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.077140253 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079706739 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.077225634 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.072717189 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.077266186 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.071673755 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.077161157 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073754352 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080963492 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072401563 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.085283676 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069674046 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070028884 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080070989 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071687424 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069197111 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069241779 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.079152576 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.078707986 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.06995036 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.070055854 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071211139 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076271069 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.070740728 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.077242297 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.079343519 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.07070129 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.076086543 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.073079237 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.073629668 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.079565655 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072592554 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072894524 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075844807 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.072284971 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07952217 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.0752136 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073107928 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074583225 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073225531 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073143714 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068862367 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070899711 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073561628 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07622773 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069877606 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073409827 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074344749 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.071849284 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.077329949 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.069405518 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071526788 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069662138 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070737846 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.073028712 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073472002 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076389983 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070056042 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069706202 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067799163 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.07335994 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067695574 seconds)
  done (took 7.095173203 seconds)
done (took 28.809944322 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.551127713 seconds)
  done (took 2.238302136 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.597383952 seconds)
  done (took 2.333678604 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.445091189 seconds)
  done (took 10.185024399 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.296938857 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.320390744 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.731322847 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132845055 seconds)
  done (took 3.250662496 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.756559684 seconds)
  done (took 2.503048598 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.232465069 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.224092429 seconds)
  done (took 2.208839449 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.339432525 seconds)
  done (took 2.079707781 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.151671441 seconds)
  done (took 2.889232275 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.232366668 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164523635 seconds)
  done (took 2.149140351 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.544306304 seconds)
  done (took 2.289951808 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.266209155 seconds)
  done (took 6.017198774 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.236001359 seconds)
  done (took 2.015003908 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.233217698 seconds)
  done (took 1.977342711 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.057435846 seconds)
  done (took 3.795993321 seconds)
done (took 47.679167211 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.088121492 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086840635 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086754416 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082272786 seconds)
  done (took 2.052803944 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.078154499 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.073645844 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.076846377 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.0774377 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.074986796 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.076371268 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.076513369 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.073486999 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.075362731 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073820246 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072620992 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.073648843 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076358219 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.074268188 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076607702 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.078916605 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073819659 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073706819 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.076507463 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.07379403 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.076417492 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.073738181 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071625104 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.073764992 seconds)
  done (took 3.544338789 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.082056211 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07532333 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07873708 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.074394809 seconds)
  done (took 2.06228649 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.080811487 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.080123534 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.088671904 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091649194 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077642261 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078101886 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084831698 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.08555313 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.067794169 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.090710933 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.071750641 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.070771558 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070472721 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.090145726 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.087264372 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.065878555 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.067481493 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080914483 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.079340032 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.08264758 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069877724 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067426534 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.07796164 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078455563 seconds)
  done (took 3.635081657 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082882428 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066284449 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079196978 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091339084 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092383297 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066455162 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079693585 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093484712 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128275437 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066406896 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.07445238 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.068890602 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.109211527 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068937411 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.085462532 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112893459 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.11565996 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.073015568 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.102560635 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068984408 seconds)
  done (took 3.485375483 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079662597 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071576479 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.07091061 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066620627 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077625641 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073659964 seconds)
  done (took 2.206830438 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.071884564 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.071402617 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.072888192 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.075321465 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.071025009 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.071129684 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.07028296 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069069777 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069620639 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.070363078 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.070099818 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.070882193 seconds)
  done (took 2.609816258 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.160158456 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071136034 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071077722 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066704807 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072333125 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.069831103 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.085498227 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.072199406 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089524207 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.070586498 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.070742091 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.072905746 seconds)
  done (took 2.730130594 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10449232 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104785989 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150302941 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122336293 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120369611 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097575931 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12027138 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095753195 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161848742 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138467162 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117760899 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094710227 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087871627 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070738534 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101300635 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102612811 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136611472 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073588212 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113963839 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165162832 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115861092 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113187178 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123378847 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11806187 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0824823 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12312197 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094797686 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103407577 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124542441 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110619522 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120640124 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.101963552 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.074002705 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072262161 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150813101 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10095591 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108371469 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094032158 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101209028 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088848207 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108439879 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.071020731 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.090507523 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107061288 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085132739 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117623668 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088746454 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104164557 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081832889 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132124366 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108444059 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09958877 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086134591 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104780552 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130514603 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096244772 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111657378 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107206823 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083257777 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.117806018 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101396301 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.255143236 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095108881 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081673197 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.163205839 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091148624 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112794802 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113837983 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083493166 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090431473 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104293928 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131254901 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107869259 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108464049 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115147893 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095946766 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111002674 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.092739612 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128656242 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093789438 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073938903 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105223094 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129601698 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087187083 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101263975 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130868165 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092758114 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078654293 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093453364 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120703479 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081427848 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.09771652 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070693808 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098766885 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108171384 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098082868 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112833572 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10832424 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079220347 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125711547 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109575231 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074048364 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118398434 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099780586 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153604458 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096396591 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076915216 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101302551 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095000733 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149439823 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086039464 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081419509 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099714908 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143024641 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095225563 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170427743 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097270436 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129713283 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098221258 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088401421 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076237068 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090208563 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102713196 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107603429 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102088218 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08913012 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.076828845 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087349784 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09608637 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.253779972 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082481819 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114772973 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102612719 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076682472 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089705969 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.08059798 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126364913 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079138558 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112235953 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128485023 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.082653213 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110133576 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102042854 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112202487 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.101589104 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11095758 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143585362 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.120649096 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083635799 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.088101571 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112514473 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.148115531 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11836746 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087969617 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.07763077 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100430869 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111611363 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098289733 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108064836 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101079362 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110731429 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098745882 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142500515 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119209639 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092347898 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096196872 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097273015 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124080085 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077536357 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157770574 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095949454 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119432053 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088110832 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146324572 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.118999363 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094363245 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089051429 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100178373 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.108529366 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107518528 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144662311 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096731427 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073753049 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094412023 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133389424 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077623472 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10219132 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091336503 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094527252 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119655575 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084119883 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082079026 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068972846 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102412757 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136297317 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070025736 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113635508 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.279276671 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104103281 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.106224246 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.072675275 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102631639 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139365304 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106752268 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141600509 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117240613 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101960175 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120951221 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.103565764 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110266276 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08325769 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.130288361 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.139952744 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100663529 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094836648 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140217507 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123033959 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.14033076 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.100925564 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119278367 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.110038101 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104247077 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104903939 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101814482 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145579817 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121764305 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125739247 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086970266 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107682926 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110080856 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137891586 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083245308 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117913527 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076555619 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112897184 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078601051 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108462626 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080544629 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.113194454 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080412539 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101157296 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070669428 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075680952 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143467109 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113481849 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090804341 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0876503 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.13862327 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132843533 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082809673 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10532686 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106239846 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102500607 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101618532 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108393959 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085811662 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094396949 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.274194396 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081325942 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083594589 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10195876 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098082346 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110243981 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085002685 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076211504 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137075361 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105678086 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096417412 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078598007 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096022423 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122825038 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090714468 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08846929 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10590715 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104571427 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143028652 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090575317 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098802321 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.12168818 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083908577 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096563866 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.073112986 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088553666 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.079861846 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112998597 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079639657 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113264142 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.072464477 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134705695 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091533218 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.096933466 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105113028 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103517675 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1292964 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092878723 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130150363 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09120958 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10344704 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109144701 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095058746 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082151557 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10714993 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100332066 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113907639 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100510902 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110601175 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113565584 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095994198 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146218293 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09427781 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12642147 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109284865 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110403753 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107552675 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118010306 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138980897 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113999023 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11396278 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07678282 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084332539 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106987437 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101313267 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145773494 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102491844 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072709903 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086602145 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09081835 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096326665 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.266957331 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084052537 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143860156 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088218312 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087925646 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114340087 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090962508 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098484298 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077468567 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096629925 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101371478 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095403635 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095257095 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10853855 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118273517 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114554657 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133619895 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099913447 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093557022 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120107818 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115483394 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115167495 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090276105 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089193138 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128008913 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107040414 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.131791693 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.105271443 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099737308 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10742566 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095118707 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104871599 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100962895 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.115225682 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085324771 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.080280151 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.072493243 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.076252543 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123543999 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114071695 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104204781 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103663054 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.076482001 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108568683 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104299474 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075679675 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091917776 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098335758 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101880546 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.086220164 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094980299 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.118257214 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.093074718 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105241869 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100912029 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130026143 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101487619 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090359284 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144889875 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129711008 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089758859 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094783156 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073495055 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083301258 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106957908 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149685679 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120479841 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077863314 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08579248 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.243023408 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089333426 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.075285287 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.091694655 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.094434767 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108957235 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097359165 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.117044778 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107814062 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079967103 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107821794 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102028782 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096475454 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101131812 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106860116 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110498211 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.12999423 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105563282 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101769312 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080328756 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084718449 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079834484 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083897723 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10692123 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.08206839 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080024841 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135143026 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.095778043 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109056132 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113692688 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089462519 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079987238 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138978213 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.073435325 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139821905 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.074752406 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085510634 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082369278 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082964612 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097580979 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108424623 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100073139 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118709371 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111083494 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110236089 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115081611 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159420476 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072107634 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14516422 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078744993 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079653822 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080065328 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119843456 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094224429 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110042774 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146764995 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09369279 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096976362 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081625305 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132505117 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099558215 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104583834 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084305073 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080294437 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130062121 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080957114 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072713332 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088438104 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112868888 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073350093 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104295658 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.248810657 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081392507 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113932693 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631713822 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091421674 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077531657 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089611277 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143613713 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129573695 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085092839 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109554337 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120242104 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094144579 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088310602 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112519206 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.187335549 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077981358 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099514175 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.108243357 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102653358 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097075836 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096070393 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090773344 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.097463731 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.090422449 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084004707 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111432646 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091086379 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094943257 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101183451 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08500938 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.083184439 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133655401 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105972148 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083464952 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089868027 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.101816778 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08910979 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092558672 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070798028 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115415945 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094494393 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103438122 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092138999 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109651121 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121317527 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089862506 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114018097 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089984316 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.114713032 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089251509 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.082477464 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106958564 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.081640088 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080728123 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120129903 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085745612 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093793827 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105767822 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096295063 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11519701 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119477695 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112532098 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100439476 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07992097 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087472083 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.089374086 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076174539 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079016673 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075511576 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076659177 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.272884076 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089925868 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087605575 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118700489 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084454263 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105149137 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101792711 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110318541 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084478181 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102288102 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109922757 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091470019 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104292166 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102753045 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130044928 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146638881 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100401119 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125038637 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137706507 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.080876786 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.080371234 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072402277 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120247636 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083575806 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.084889618 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085333284 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137023076 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.085683153 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097736352 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.231538313 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085031304 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086493432 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101128158 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.074514556 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088148399 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113434876 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089446994 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084877238 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103642955 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087244077 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123168233 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117238831 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094388044 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087352971 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084841983 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096912748 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.107442299 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.13113637 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091770912 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076875394 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107882821 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105191906 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124848676 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074395847 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082220592 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130836694 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092949071 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108707884 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081296556 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124661949 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137270208 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092534069 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135571479 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072236859 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084869266 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092448193 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127127295 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076100364 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08979031 seconds)
  done (took 66.192999281 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.156419608 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.148551498 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083198173 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.099032519 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188285432 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.19967752 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120622036 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097358682 seconds)
  done (took 3.033774054 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071900627 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.08696796 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084567999 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.213561569 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.112975498 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.071662488 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.077720748 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.086467088 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.071431558 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.07018108 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.102773009 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068427377 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068876419 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.373782778 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.070349593 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.07571719 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.071232692 seconds)
  done (took 3.670559456 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.332230106 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.472912134 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.228305705 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.712062869 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.137849884 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485786949 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077416637 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084894309 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.634706359 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.374289496 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135468054 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.092137117 seconds)
  done (took 18.678240405 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.08221201 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.084369172 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.084424152 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.080363406 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.079897284 seconds)
  done (took 2.38235965 seconds)
done (took 118.043412048 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.089855985 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.181083502 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.073062338 seconds)
  done (took 2.191673928 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.088167031 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.085259844 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083872126 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080523971 seconds)
  done (took 2.248056197 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.080248706 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.080513277 seconds)
  done (took 2.062620801 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227185569 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.183485648 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.096585563 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.088515526 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.085763935 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.086042505 seconds)
  done (took 2.18244535 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.077194574 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.07678844 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.077251157 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.076971138 seconds)
  done (took 2.216340708 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.073010062 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.071116583 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.073726407 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.075933553 seconds)
  done (took 2.203054795 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.091644152 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.089249995 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116640146 seconds)
  done (took 2.208259648 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.089799159 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.08856745 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.082245543 seconds)
  done (took 2.171160562 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.116298932 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.103036157 seconds)
  done (took 2.120808113 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08589173 seconds)
  done (took 1.993976032 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.096247239 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.102463442 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.143622066 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109667371 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.143405969 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.130236578 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079313538 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.080431534 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.07575425 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07463957 seconds)
  done (took 2.942026326 seconds)
done (took 27.036459401 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.084930154 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.375792995 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.362718091 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089040154 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674527803 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358991437 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.004771192 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093493981 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.10251446 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070525379 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087787246 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.654454895 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.997593711 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.332807858 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.980967152 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.33329633 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.656191978 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071430915 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070502559 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07053787 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.991653469 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070867198 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070735966 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070723696 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652773719 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.376725305 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071392426 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.33211103 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07104877 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07298001 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.35901244 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071479222 seconds)
  done (took 16.556953284 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076542918 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128310813 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075044267 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086496299 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072552022 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072041991 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073504419 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.071412455 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.1136797 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070869966 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088113911 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070063471 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.074615349 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071536177 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09037426 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070455942 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072029251 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.075003456 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071330781 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071778648 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089232717 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070329729 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071518596 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071360991 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070992396 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08376729 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071844126 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070823374 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070874546 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073241324 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073892194 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071660339 seconds)
  done (took 4.411443018 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.127905528 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.130416941 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075049608 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.111782661 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.12121323 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.074944262 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156429269 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093867842 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.117177959 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070791067 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08838294 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070469194 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106430014 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071697113 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.091099582 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.071023374 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072348672 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072854215 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073772495 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072824412 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.090279934 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070361321 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071160745 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072937261 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071253661 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085559284 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07147522 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070982796 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070619604 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072956592 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07471966 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071771647 seconds)
  done (took 4.694607837 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.075176063 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.076333626 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.084055025 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083633025 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068936281 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071094673 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072342472 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069228506 seconds)
  done (took 2.533731942 seconds)
done (took 30.121735023 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.085670907 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.073121678 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.075464118 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090071087 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07616459 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072607685 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067188662 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076602334 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073790505 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073787933 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07571401 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069233927 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072794269 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067379515 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074509933 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068519438 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.07475229 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072511247 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072956189 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.07509182 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.071233094 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074336546 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.077408157 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.073650639 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.073028334 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.073089691 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077522417 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074470345 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068783806 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071536678 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070408768 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.08283547 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074687612 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074979406 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.06828044 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068115874 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072945711 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070856794 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074668313 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077357586 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070872368 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077284094 seconds)
  done (took 4.993513607 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.095066656 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.09877323 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088728043 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084227557 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109399911 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.084476985 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092611217 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.08198107 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.080204089 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092351644 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.07640404 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081763429 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083302034 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.07760938 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.081124191 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07726866 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082492991 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.076066621 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.081199569 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080868701 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.095248035 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073850029 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081478445 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082244424 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075996134 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081994009 seconds)
  done (took 4.138867734 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.078472714 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.093650175 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.097475774 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.1442928 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112577531 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084933061 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084452368 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.100608343 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103289869 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070616116 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073996886 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096930493 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100057122 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077387314 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109415569 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.089570378 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.086024683 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.073947104 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.079894073 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.109117064 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.096300321 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.092655004 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.106524784 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.094020983 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.071477568 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080482921 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076952793 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.086071074 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.078443898 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082795285 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074807648 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073612256 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070934212 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.083107645 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.077259178 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.068308609 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092777123 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083207911 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08619869 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.109427783 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080124046 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071842162 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100836617 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135502289 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069945265 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072941712 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074416523 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082577603 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071432836 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100491762 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.089145378 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069801468 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089021042 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071414631 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071559277 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087314757 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071605134 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071832489 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082827835 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076166081 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091361552 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.0754888 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091657627 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.071955396 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081650087 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071875605 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071567781 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.069089665 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.106382714 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077365507 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.123342896 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071205583 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068088494 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082962832 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081732582 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.077052157 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.070072361 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089702238 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.083234613 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.076428639 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.08501297 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.076127758 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.075727989 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.109445112 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.071890814 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.071422026 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.070776596 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.075545133 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.075192932 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.071065488 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.085488651 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.07232774 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.076269869 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.089362578 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.073023604 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.073239045 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.07584587 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.074682625 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.072161688 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084436556 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.076895976 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.07447257 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.085364853 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.073904683 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.075994051 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.088214263 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.080350815 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.072143048 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.074155176 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.074549133 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071872582 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074354504 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073144751 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072721146 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.077483003 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077489254 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076571561 seconds)
  done (took 11.628631396 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.171425593 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.158829317 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.074647912 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.156674822 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.082569382 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.077939401 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.158514105 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.094023362 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.073764202 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.075023593 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.07281552 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.102362019 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.096909885 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.113148134 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.079118522 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.074023405 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.099789839 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.107986159 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.156734929 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.15004765 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094240905 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078842004 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073177408 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.073335815 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.074078716 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080436304 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.087332799 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078753 seconds)
  done (took 4.804974769 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.080467529 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085973163 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074985337 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094804676 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.0890735 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070993962 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072399247 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.072236691 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.088638173 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.078237386 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.071077916 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.07530112 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.07462533 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071560757 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071650112 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.07702807 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077635434 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.070147567 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074477313 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075187346 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.081309638 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.096524465 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.075468565 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071116096 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073778902 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070850695 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.077441991 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080893033 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070180901 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101232544 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.068051048 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075077548 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084980871 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071846304 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070490146 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070996877 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.071149777 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070903691 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071378725 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.069093755 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068702353 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.076064212 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069996435 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.079841695 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.087911101 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.081394166 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.07506675 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.079354354 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.076059466 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.070543352 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.076913102 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.077226488 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.07616419 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.082152176 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.076042066 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.074602116 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.073360946 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.103608062 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.077032805 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.070239881 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.070808603 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.070020088 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.073714562 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.079117395 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087661937 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.07241018 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068704097 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070770419 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075632649 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084645213 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069972785 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075980033 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067605101 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070790788 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.07290571 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073177881 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071886197 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.069435183 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070241258 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070860172 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070624368 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070522063 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.070112324 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.074248949 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.069434166 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068825359 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.071419075 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.074246019 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.080097022 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.072294359 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.076582901 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.07487244 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.072292631 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.076083961 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.077398575 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073708968 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.093011828 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.081080823 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.071053729 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068518315 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084904464 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.07325312 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.070431427 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.077049602 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074851675 seconds)
  done (took 9.930266197 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.097395361 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.075233803 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.094235159 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.099411524 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.083997207 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07914117 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.088181884 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.074495803 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.090725796 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.07279819 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.081885895 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069815464 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084492129 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.080172312 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072346355 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080847814 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073279564 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091169432 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085856507 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069354986 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.080301648 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083490116 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083636702 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.089229939 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088481467 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.08938741 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082805006 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073531744 seconds)
  done (took 4.307973018 seconds)
done (took 41.731263334 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.005270897 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.177834266 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.005659564 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.22241423 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.056935213 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.1088539 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.113940276 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.997985498 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.158622435 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.020630007 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.312331937 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.430849919 seconds)
done (took 69.607656114 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.047294063 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.150025452 seconds)
    (2/2) benchmarking "String"...
    done (took 2.22349529 seconds)
  done (took 6.297313469 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.597415535 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.003656055 seconds)
    (3/3) benchmarking "different"...
    done (took 2.052612904 seconds)
  done (took 8.574052845 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.109954996 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.566750653 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.26099105 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.998705773 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.999694201 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.414799795 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.823844067 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.465106983 seconds)
  done (took 33.454215462 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.10016719 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.190850811 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.709222294 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.731556076 seconds)
  done (took 16.699358061 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.606523623 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.26417161 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.261922031 seconds)
    (4/4) benchmarking "different"...
    done (took 2.25708465 seconds)
  done (took 11.369152357 seconds)
done (took 88.568125138 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.002876918 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.107536463 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.005829726 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.150888728 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.016288457 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.024602876 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.00952666 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.04036055 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.998098319 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.000752824 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.434325743 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.998233595 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.996382675 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.033634958 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.999444304 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.043473104 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.627048529 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.02204384 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.038232644 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.63713814 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.571108224 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.007550927 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.008651784 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.065214425 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.138317291 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.036499804 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.601561889 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.009834155 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.620251284 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.028218723 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.868751981 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.862458988 seconds)
  done (took 211.928250611 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.867125768 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.758973203 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.815317406 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.908873506 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.289428918 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.057394903 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.005388222 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.310313383 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.86939299 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.862466392 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.044126662 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.852637644 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.056413466 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.813956438 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.863295359 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.961787029 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.075423507 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.045579852 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.865036175 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.043970059 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.868770609 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.867278783 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.827219828 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.995124542 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.867142557 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.868974358 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.875112138 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.887093669 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.050238094 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.070128507 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.892424075 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.894742265 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.047459792 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.729806704 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.879139094 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.869562048 seconds)
  done (took 172.649833097 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.031762107 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.872571732 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.925329535 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.9863316 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.578836614 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.527771526 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.873732438 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.002321609 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.008959945 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.013795687 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.00656589 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.078385913 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.52770285 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.022968353 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.004897522 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.005681767 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.553557432 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.190265855 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.00636843 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.005862117 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.083206496 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.376951695 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.237147808 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.004026989 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.018350512 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.142672305 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.013704873 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.007273202 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.14312268 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.009800681 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.093724535 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.140273626 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.015224914 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.090526251 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.011687385 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.534625605 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.006211621 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.003243842 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.00690926 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.069167786 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.001680273 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.128193802 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.101821743 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.996566064 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.001911339 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.078813785 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.699371612 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.996290944 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.998446338 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.996272041 seconds)
    (50/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.997931859 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.997235875 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.99843902 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.419278288 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.995621969 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.021337323 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.658587138 seconds)
    (57/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.998886767 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.998669697 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.995919392 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.998654153 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.997950342 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.999861594 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.004241354 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.035797419 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.818633444 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.276656365 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.378746704 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.806626495 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.995605982 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.970229659 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.050650483 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.99310419 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.070082472 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.988787815 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.991330742 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.993044693 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.993420058 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.129727647 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.092878473 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.991804971 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.129707306 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.992637302 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.992393592 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.068278749 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.47627542 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.991358717 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.005923568 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.045450448 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.99169519 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.990293363 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.997125759 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.095409007 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.990369487 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.991600022 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.99362075 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.107592585 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.991014175 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.457564273 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.215494306 seconds)
    (100/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.989197576 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.065309048 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.240151439 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.267019925 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.993510974 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.992081746 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.014280655 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.992853045 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.992790662 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.001123007 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.99425125 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.998434342 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.984661105 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.988699664 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.978372055 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.987495753 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.996562176 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.992439465 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.981458599 seconds)
  done (took 434.64423029 seconds)
done (took 823.227564957 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.698156455 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.77434192 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.612918017 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.646568422 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.621434868 seconds)
  done (took 15.258501421 seconds)
done (took 17.165554774 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.014597354 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.995147521 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.990916424 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.048729085 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.00176233 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.989540124 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.027726018 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.031451647 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.005404457 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.991009577 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.040772565 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.991053608 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.014737423 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.009723708 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.064013361 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.014823172 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.99412838 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.988712809 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.046259762 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.989312177 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.991884534 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.990892476 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.99114479 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.039968313 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.069267041 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.998000608 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.988718117 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.039042573 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.997978931 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.038195523 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.047001181 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.013487975 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.022155245 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.068242526 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.046032193 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.070536338 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.99495792 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.060185254 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.994295491 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.077743665 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.043472855 seconds)
  done (took 84.736192924 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.988760902 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.119054856 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.199621343 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.018695792 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.986515374 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.197444607 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.042369516 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.115193139 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.121645269 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.213081358 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.215279751 seconds)
  done (took 25.123974324 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.985869034 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.12579693 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.208899847 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.020138275 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.008826596 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.200609716 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.050433439 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.114319298 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.121605607 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.209408632 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.214967422 seconds)
  done (took 25.170428669 seconds)
done (took 136.936997147 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.357570436 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.006469952 seconds)
  done (took 6.265743043 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.981159709 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.998244354 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.132741737 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.980821176 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.981560136 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.981146424 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.981172647 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.982953974 seconds)
  done (took 17.921625744 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.98090225 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.981000189 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.982065369 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.981780247 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.982240506 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.982394418 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.983170089 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.984003117 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.98259749 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.984554499 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.983671735 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.982545685 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.983287501 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.982710314 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.981365835 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.983212936 seconds)
  done (took 33.623254382 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.982633477 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.982161767 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.981764903 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.981652313 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.981447935 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.9836071 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.98589682 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.982450391 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.982782259 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.982649901 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.982534701 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.980325391 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.982118776 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.982184407 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.982994948 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.983330485 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.984352182 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.984402464 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.984087954 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.98357027 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.984048176 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.98398739 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.987739274 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.982990513 seconds)
  done (took 49.498762046 seconds)
done (took 109.221572045 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.165727853 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.52443626 seconds)
  done (took 8.593964973 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.986016528 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.984375402 seconds)
  done (took 5.935125633 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.98293371 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.984284672 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.984666165 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.983117227 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.984452703 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.982782222 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.987026864 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.972619831 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.982817726 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.984083541 seconds)
  done (took 21.732015519 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.985464263 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.984369749 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.984278541 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.984093 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.984797927 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.985126288 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.984622003 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.985271902 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.98442525 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.952363799 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.981127865 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.985277804 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.984755807 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.984914126 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.984074413 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.983990013 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.985795361 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.985855949 seconds)
  done (took 37.595363936 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.984650874 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.983428463 seconds)
  done (took 5.873623535 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.985084705 seconds)
    (2/7) benchmarking "second"...
    done (took 1.985008334 seconds)
    (3/7) benchmarking "month"...
    done (took 1.98427285 seconds)
    (4/7) benchmarking "year"...
    done (took 1.985737911 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.986348087 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.985709129 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.985027109 seconds)
  done (took 15.803240271 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.986059096 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.136218797 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.189363461 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.590819201 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.987870268 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.987614705 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.8633993 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.988138617 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.991140964 seconds)
  done (took 21.626174545 seconds)
done (took 119.067686657 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.824947304 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.986459071 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.20616649 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.081144706 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.003255283 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.321544324 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.993198008 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.535374093 seconds)
done (took 43.862477546 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.043880153 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.983965418 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.008105407 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.009636835 seconds)
  done (took 22.910190305 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.988194453 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.319848937 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.003927835 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.959917528 seconds)
  done (took 23.192001629 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.360914419 seconds)
    (2/2) benchmarking "read"...
    done (took 2.326996231 seconds)
  done (took 6.599294713 seconds)
done (took 61.659289796 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.988349156 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.989041534 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.987952205 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.990306485 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.989193571 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.988048554 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.988680496 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.989387124 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.987463081 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.987740708 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.98991064 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.989332848 seconds)
    (13/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.991658609 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.988731319 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.988671655 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.988551754 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.989864739 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.989523632 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.99008383 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.988561602 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.988815275 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.989438015 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.990071729 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.990790449 seconds)
  done (took 49.646378119 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.99100469 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.989623013 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.989666928 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.991048239 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.990802509 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.991159347 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.990607771 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.989785552 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.989182014 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.990532311 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.989833284 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.992935546 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.991093214 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.991050843 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.988755738 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.992501817 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.989868314 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.990340919 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.988781824 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.990508929 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.990799298 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.990805304 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.989792276 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.990398132 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.989484663 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.990913791 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.991080018 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.990664967 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.990408188 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.991122176 seconds)
  done (took 61.625755386 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.99135135 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.991301183 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.990018696 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.991435386 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.991357179 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.990847526 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.990183491 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.99056342 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.991712698 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.99170648 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.992070908 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.991371254 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.991062773 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.990629481 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.992032855 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.991848747 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.992457022 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.992408652 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.990062778 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.990853017 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.991397082 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.991261936 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.991530785 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.992256596 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.99169459 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.990890855 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.98146158 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.992919348 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.990784114 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.9915827 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.994035338 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.992352614 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.99204638 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.991498892 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.991814771 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.969753984 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.978475403 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.991009027 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.992391841 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.993296275 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.992358471 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.993326844 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.994025845 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.992885672 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.993761599 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.992852626 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.991363955 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.994092201 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.994010411 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.992943041 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.992470859 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.991828076 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.991938813 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.990594278 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.991397413 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.992788466 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.992854483 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.992782879 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.99463934 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.993536908 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.992646857 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.994128792 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.994103206 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.994190034 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.994189156 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.994632581 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.994523836 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.994197427 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.994830093 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.996426905 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.993412282 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.995573201 seconds)
  done (took 145.321452711 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.995798986 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.995506435 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.995355229 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.995356885 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.9956087 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.996519755 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.994565107 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.995261282 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.996037078 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.998029202 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.995778718 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.994190443 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.995407685 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.996604877 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.996341556 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.996437865 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.998097222 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.996171589 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.995655396 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.995455218 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.996075131 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.996121211 seconds)
  done (took 45.825043388 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.995817994 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.997086782 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.99589537 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.995634467 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.994927584 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.995706437 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.997004782 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.996443495 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.994803075 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.997454818 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.997007584 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.9950315 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.996169014 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.997204038 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.996918711 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.996204392 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.996091913 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.994150993 seconds)
  done (took 37.846501665 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.995000156 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.997228238 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.996769794 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.998049937 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.99789563 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.998559606 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.998200201 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.997486496 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.997655093 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.994972177 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.995852802 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.996542763 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.998796702 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.998660795 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.998361893 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.998857696 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.998976071 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.998119461 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.000333552 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.999263662 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.997246674 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.999316909 seconds)
  done (took 45.868935143 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.000052907 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.998952184 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.999340795 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.999584564 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.00014066 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.998090885 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.000060411 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.999520204 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.997991626 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.998337304 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.998304929 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.999644005 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.998213954 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.999468602 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.997973273 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.000774207 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.99894697 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.992273782 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.973033207 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.99993229 seconds)
  done (took 41.870593564 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.000515525 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.000127239 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.000705396 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.000077522 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.999956708 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.00106991 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.001942443 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.000632718 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.000818799 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.000220009 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.000991765 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.00059208 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.002045406 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.001457738 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.003331358 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.001606697 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.000759588 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.000708079 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.000768181 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.001502567 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.003457306 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.000114516 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.999932753 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.001474436 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.002362495 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.001774579 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.00188665 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.999954518 seconds)
  done (took 57.950011429 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.001434676 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.001736298 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.000664217 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.999300387 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.001941641 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.000863131 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.998998521 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.003470154 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.001016624 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.999734507 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.001983498 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.002491468 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.001234643 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.001991494 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.002798376 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.002068184 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.001240063 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.001125492 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.002623609 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.002015013 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.00154261 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.002082575 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.999104985 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.001865882 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.002182484 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.004008272 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.003023579 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.004827936 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.00445381 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.00311306 seconds)
  done (took 61.975982025 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.026088229 seconds)
    (2/2) benchmarking "in"...
    done (took 2.0198806 seconds)
  done (took 5.968060673 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.002316342 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.003338933 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.000545639 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.001927779 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.002293386 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.993389929 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.004120423 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.002538156 seconds)
  done (took 17.934234611 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.003708145 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.00714614 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.000057349 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.003306368 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.004007783 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.01414238 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.00452498 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.007477951 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.007455213 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.006023899 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.008325175 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.009512566 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.014186091 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.010781787 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.004370818 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.004332655 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.007305795 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.007602214 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.005184109 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.004712971 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.008358291 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.006463233 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.005874185 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.007125807 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.005832458 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.008513299 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.016737659 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.008389028 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.008038653 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.000498334 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.008517713 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.00571704 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.006646695 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.007907794 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.006340066 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.00697405 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.014170814 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.005684272 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.007453361 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.006352035 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.009833596 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.009865123 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.010114704 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.014347111 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.007987323 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.008153666 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.006604873 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.008857895 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.007051003 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.011378151 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.01390202 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.008896664 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.008214502 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.007711337 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.010552822 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.008274316 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.007763256 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.011826245 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.016969946 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.015012534 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.01001398 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.029548256 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.018493093 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.008855031 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.006932062 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.019822631 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.035672701 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.010899188 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.013915028 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.007676069 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.015746921 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.008452542 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.009098917 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.00893988 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.022204466 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.017406223 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.008503482 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.010866846 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.009336177 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.010186574 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.011050264 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.008711508 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.011533537 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.008888367 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.018291715 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.038378627 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.008513842 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.008940925 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.013453489 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.012685132 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.015324203 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.012135864 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.009565836 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.011510544 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.014494827 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.014171966 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.012050425 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.009947845 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.009361079 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.01892535 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.011211101 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.01130437 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.017114126 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.01857165 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.00925573 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.011223977 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.013679012 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.010052566 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.018567549 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.010431123 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.012920373 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.011087906 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.012237965 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.014604916 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.010309701 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.015537095 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.021219968 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.021066912 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.013018612 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.016899674 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.015870121 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.014546212 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.021684637 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.037589381 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.010877588 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.016016637 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.018331175 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.026642807 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.017510202 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.011125378 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.01583028 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.01184301 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.011584759 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.013318395 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.012302717 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.011023809 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.012730922 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.013163273 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.011287799 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.013123019 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.013097104 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.015872761 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.015880977 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.012908395 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.01751505 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.013123463 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.01628461 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.019846649 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.014306669 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.01367858 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.012128572 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.017783581 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.015165464 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.016182887 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.012691376 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.014627653 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.015244459 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.015009227 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.017099352 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.015369225 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.015010401 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.016929393 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.019969131 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.017725552 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.017670363 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.016302665 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.016454935 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.014869319 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.017380595 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.017091622 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.017881857 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.013695165 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.020717001 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.015644711 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.015783079 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.01715063 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.016493212 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.0172053 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.020476904 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.0291773 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.019686151 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.025712062 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.015923726 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.024515299 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.014139706 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.020593152 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.018941958 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.017174887 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.018142104 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.015374066 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.016443141 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.020407456 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.039056908 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.029071807 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.017914852 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.017319824 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.023564873 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.019882199 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.023523879 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.0159741 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.018716824 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.018412845 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.015844647 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.017613542 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.017617784 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.022473082 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.01653535 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.018216664 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.021571838 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.015488383 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.016109905 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.018258885 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.015340247 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.019597119 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.01698452 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.018084284 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.016754383 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.018715177 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.027153067 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.020780103 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.014798187 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.016760192 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.018986696 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.017669442 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.018705965 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.021784257 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.025128102 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.019206118 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.020279206 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.027484017 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.019486609 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.019510126 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.017768974 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.018858093 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.021556736 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.018677858 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.02259197 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.026668984 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.023093807 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.018479685 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.026815043 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.019279557 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.023576139 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.020286973 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.022488029 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.020584558 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.022801462 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.019015129 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.020867844 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.028174724 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.019477258 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.022534398 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.018997179 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.024266857 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.021709528 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.022161632 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.019530572 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.026880785 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.028504188 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.027440511 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.020871531 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.024707355 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.023395405 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.022289602 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.024172156 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.023732628 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.035004477 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.032017427 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.021023554 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.022455668 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.02033525 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.027520611 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.019846923 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.022465665 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.029931147 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.021978136 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.023380965 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.025444572 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.020845855 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.021750121 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.029355511 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.023433037 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.024173842 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.022867232 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.022805084 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.023887891 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.020409468 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.02499069 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.019683564 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.023093037 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.026367497 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.019498708 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.022748079 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.020748896 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.031424179 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.021202531 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.021825248 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.029345664 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.02370481 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.022615627 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.022991063 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.022210506 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.02439746 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.023492037 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.023539688 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.023289116 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.02394203 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.027008787 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.034833594 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.028643425 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.033730465 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.028926564 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.035610273 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.025228541 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.023738728 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.024116386 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.028941147 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.03354428 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.024296214 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.025252678 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.034647706 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.024927667 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.024923909 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.029294585 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.021460656 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.024862394 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.02489655 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.027130373 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.029226852 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.029046675 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.023925295 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.024679464 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.023935839 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.023932537 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.031131291 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.02768941 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.026873808 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.025633904 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.025123479 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.026688538 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.028204082 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.026861453 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.026494632 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.023760431 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.026205134 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.035916148 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.026617599 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.024740974 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.030195488 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.026125278 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.037323809 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.026595972 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.02693319 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.029307003 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.025606585 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.028601655 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.026753739 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.025510614 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.027360462 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.026029782 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.02836492 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.041523787 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.03564318 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.03001869 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.028761282 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.028264284 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.030801881 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.041713301 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.053469779 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.028173881 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.030116419 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.033099852 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.033991012 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.03123398 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.036403032 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.032298848 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.034407067 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.031305366 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.027552705 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.033492872 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.043857541 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.027755985 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.01649088 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.029473453 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.036304949 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.031349942 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.030307121 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.030327568 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.033114964 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.030811435 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.042287816 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.029108423 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.031746754 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.030380451 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.027883989 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.031042827 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.030287483 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.032386784 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.031789025 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.029841469 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.031560175 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.034110183 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.035826936 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.029968266 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.037139293 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.042817785 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.03277598 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.031489305 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.031513402 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.032032904 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.034996887 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.03182062 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.031005619 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.0331127 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.029476444 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.029975574 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.034652833 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.039819952 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.032335734 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.027990388 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.028612352 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.033348026 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.029407209 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.03166952 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.02081551 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.039116586 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.031048026 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.042917853 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.042204925 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.029428688 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.030429653 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.038771944 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.040606232 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.030174154 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.031490382 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.031185871 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.034662334 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.033328538 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.032205461 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.032938511 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.031986164 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.038338893 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.032704661 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.034573973 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.031711842 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.031165716 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.036197447 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.036038513 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.039731659 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.031944835 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.033514372 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.034213088 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.034426512 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.035282625 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.037053721 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.034027679 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.033795653 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.037478994 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.037604388 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.040297912 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.03218222 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.033059001 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.036941271 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.033607968 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.033617636 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.033028736 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.035246506 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.032955913 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.039769806 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.04339119 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.03429755 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.037126879 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.033887316 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.039088579 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.033728513 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.034322324 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.025130533 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.03287643 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.043687561 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.033755045 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.03467046 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.035086878 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.036260656 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.043753521 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.036944755 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.04027333 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.034786346 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.035518825 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.037276854 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.041261707 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.044646531 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.039933869 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.040171515 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.047264254 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.042556396 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.038223634 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.03602975 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.038289961 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.036969174 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.03938495 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.041228915 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.038641932 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.040417521 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.037151047 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.040108556 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.038356439 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.039154945 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.035953956 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.037454119 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.040626818 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.04934694 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.046482484 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.038105441 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.039261087 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.035853984 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.042723765 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.049788191 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.038492456 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.03822946 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.039088324 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.04038081 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.040626201 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.047840199 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.047659719 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.044707465 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.036703588 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.046530769 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.058571299 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.039976939 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.036992556 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.074330138 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.040042432 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.037797218 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.040920311 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.038885256 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.041016269 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.042682481 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.039104541 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.04684749 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.041012597 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.038361523 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.048226444 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.038567871 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.03981536 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.040271057 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.041502645 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.048022702 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.041764193 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.048136235 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.041462076 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.038955263 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.04318544 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.042662205 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.041613811 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.041697509 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.040998693 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.044083191 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.040961392 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.041208711 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.051226341 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.041925638 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.040349001 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.054751798 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.520207999 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.041668844 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.04255677 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.0454348 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.050244463 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.045805955 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.040328074 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.044333739 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.049763849 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.047329517 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.054973966 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.032691166 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.041190649 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.043251654 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.041956785 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.041259191 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.053894604 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.054361368 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.041068604 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.042452723 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.051219734 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.039404677 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.049164929 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.048059255 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.043815181 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.046799362 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.042251644 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.041198713 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.041209164 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.040444687 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.048845321 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.051175944 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.042998729 seconds)
  done (took 1209.911940973 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.041970379 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.041937523 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.040039517 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.041562338 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.040411914 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.040691886 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.042944508 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.042807842 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.043558372 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.042664277 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.04198259 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.042316596 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.045579675 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.041878269 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.042257042 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.04415688 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.043686533 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.041202533 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.042062946 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.042436233 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.043593945 seconds)
  done (took 44.847507596 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.043161464 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.044266212 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.045468963 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.042233059 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.045499884 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.044667258 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.044066219 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.043086797 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.04481275 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.044380554 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.044981862 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.044312207 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.045584647 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.044591207 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.044721811 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.046496259 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.043617281 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.045216819 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.043651539 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.043096909 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.044622154 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.045019877 seconds)
  done (took 46.939205849 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.046388843 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.044661421 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.047145562 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.048561348 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.046513555 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.047355191 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.047276792 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.049742004 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.047377887 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.046505736 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.055413162 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.055598867 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.044907069 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.050538553 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.0454196 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.047671677 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.19235539 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.045018201 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.045952908 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.046565032 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.045713596 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.051701162 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.046059266 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.046858976 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.046341566 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.0477968 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.046983588 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.047440308 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.046856863 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.048880558 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.05274115 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.047611476 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.050448241 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.053441909 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.046504926 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.049106815 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.052605541 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.046602637 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.046280184 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.048955998 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.061770973 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.074351341 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.050954523 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.048848761 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.058914457 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.047835004 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.047864782 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.051806272 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.058339445 seconds)
  done (took 102.536785935 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.048938407 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.047024477 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.047612899 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.048442464 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.04928226 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.048430459 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.050217924 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.046782394 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.049515599 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.049000696 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.047743652 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.039152897 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.046701407 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.048637008 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.049093376 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.050620217 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.049042913 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.051211211 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.047354847 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.045328656 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.050276026 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.049344561 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.050346812 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.051899748 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.047644608 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.050348196 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.052683937 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.051863915 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.050513844 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.051399326 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.050934779 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.050610061 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.054441338 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.050802574 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.052228479 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.050580694 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.051974896 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.053120696 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.050661055 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.048497021 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.050888716 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.050359176 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.051642026 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.051249763 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.049644415 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.051801577 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.05182393 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.051009434 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.051420762 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.050159448 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.050520412 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.05010045 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.048632948 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.051329471 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.049840906 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.052132468 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.051751629 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.047823058 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.05236251 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.048751721 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.049561771 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.048717446 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.048320284 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.04851053 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.050189437 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.051838121 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.05004368 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.052330614 seconds)
  done (took 141.358715382 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.052379061 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.051267919 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.052457498 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.051434491 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.05072754 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.050969806 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.05067243 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.048572411 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.050412044 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.049108497 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.053462817 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.05185717 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.052894035 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.053638776 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.052451152 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.052301576 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.050886315 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.053094507 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.052516113 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.050790134 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.051911771 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.051762095 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.053612303 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.053350395 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.052611631 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.05361042 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.053228902 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.052480458 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.052858698 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.053288626 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.05403668 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.053141075 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.053107905 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.053378635 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.055849678 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.053185657 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.054089272 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.05557509 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.053927884 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.053795948 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.055673718 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.055650681 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.056471076 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.055854491 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.056813818 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.054264749 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.057935556 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.054967907 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.05493077 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.057315178 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.056189359 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.054350628 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.054637115 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.057205919 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.054938894 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.056465194 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.054070116 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.057625954 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.056847092 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.056573765 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.056011017 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.057600185 seconds)
  done (took 129.29234467 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.055576793 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.057552094 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.055317396 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.056474561 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.05598988 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.05725244 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.05768007 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.056538335 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.058091018 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.055890543 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.057027406 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.057416974 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.058016706 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.056490252 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.056111427 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.055398478 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.057228055 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.057961384 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.056515907 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.057476769 seconds)
  done (took 43.108916197 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.057258597 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.056689501 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.057377056 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.056809915 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.060477365 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.05536254 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.056760883 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.05843029 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.056020195 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.057055252 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.057710145 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.059974768 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.058977075 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.058617076 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.060618875 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.057870987 seconds)
  done (took 34.899391019 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.058847019 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.057297751 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.059213482 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.045168717 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.061111107 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.059315094 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.057733546 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.059432608 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.05841309 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.057717068 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.058634145 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.058728911 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.057156305 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.05783143 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.058832132 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.058154513 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.058688755 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.058507759 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.057675389 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.057211546 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.058973234 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.058100712 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.05764257 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.057592366 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.057465304 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.060049789 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.059360525 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.059383937 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.060788798 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.058599588 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.058194221 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.059265326 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.05881569 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.060508722 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.057775895 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.058903253 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.060325253 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.058571193 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.05999661 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.058939184 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.060354093 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.060802487 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.059890989 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.060306977 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.060180015 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.058925767 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.060271852 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.061125958 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.061056092 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.058504175 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.059067999 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.05985481 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.059959979 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.060429996 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.060339095 seconds)
  done (took 115.21375136 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.061863123 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.060950834 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.061118426 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.058949941 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.059436039 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.062702979 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.059319868 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.058500756 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.060113375 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.063104635 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.060774127 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.059565058 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.061961691 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.061667018 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.061399531 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.061446487 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.061512529 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.062854844 seconds)
  done (took 39.07493856 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.062947784 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.060669497 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.060642599 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.062433208 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.062606084 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.062657318 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.06294782 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.061156111 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.062340829 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.061331404 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.061595052 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.062537136 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.0648636 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.06212152 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.061545597 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.062332612 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.063279978 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.062374674 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.061476488 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.062778067 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.062317985 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.061810125 seconds)
  done (took 47.346587567 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.063851902 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.062336351 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.077662808 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.086377685 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.085771825 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.102535685 seconds)
  done (took 14.456591189 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.063159393 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063913566 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.066333739 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.061996584 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.064042532 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.061572574 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037257599 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.061762368 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062191457 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.063834741 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063226387 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.064820776 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063631126 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.062240361 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062754573 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.06349312 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.06286362 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.057855261 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.060568525 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062424711 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.064768944 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.064286317 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063927716 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.06494355 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.063673389 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063185996 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.065078134 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.063384593 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.063951795 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.06559461 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.062907709 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.06264887 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063639863 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.062820101 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062004541 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.06341495 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.063763686 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.062860996 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.064697887 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.065298614 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.062948741 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.06522642 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063495824 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.063419295 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.056729197 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.060999134 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.06302286 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.063071144 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.061542977 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.064467842 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.063048977 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.062315954 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.064960243 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.062513208 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.055916132 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.063151422 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.062787237 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.064399901 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063227888 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.065085137 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.064670054 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.063610872 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.063637905 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.065174011 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.064771805 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.065004342 seconds)
  done (took 138.125547212 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.065350039 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.065725502 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.063755302 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.064702788 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.065087047 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.064983981 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.064841421 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.06527279 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.06610232 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.064801137 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.064996923 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.06450247 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.065543271 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.065616075 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.064344124 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.065151202 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.066970642 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.065669596 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.065144682 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.066026952 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.06706969 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.067947345 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.065276152 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.066029586 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.066854885 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.068026593 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.065603136 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.065904433 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.065944856 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.068077761 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.068064373 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.066837298 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.067335881 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.066317353 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.067257576 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.065596996 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.06657355 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.066611897 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.067094525 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.068864632 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.067697978 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.06679269 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.069242099 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.067190092 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.068053412 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.060884546 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041260906 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.067975984 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.066751467 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.066094448 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.069649392 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.0680206 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068723379 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.067888631 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.068926771 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.069361401 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068349232 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.068387419 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.068378922 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.070640499 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.068458614 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.069963592 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.069681518 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.068343626 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.070457479 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.070681146 seconds)
  done (took 138.374236363 seconds)
done (took 2819.235855824 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.114682763 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.126435107 seconds)
  done (took 16.227160011 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.235459377 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.11437305 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.226741745 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.181881133 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.072483492 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.074278171 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.069527348 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.071268133 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.165336918 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.06812756 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.103685223 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.069657467 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.074319838 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.072608751 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.073068798 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.072799489 seconds)
  done (took 55.748126441 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.075471531 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.07701165 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.074777425 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.074116399 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.085069994 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.147790735 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.084975963 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.074135906 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.088902003 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.106593717 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.092678706 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.079735375 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.081311349 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.079442005 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.161408228 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.117247543 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.130016998 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.146758046 seconds)
  done (took 39.763116802 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.155235609 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.084190504 seconds)
  done (took 11.237280045 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.079583522 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.08546661 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.099481099 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.089007609 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.074339188 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.070113253 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.082251133 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.083703944 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.080770218 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.097510121 seconds)
  done (took 72.858991526 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.075920716 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.075308563 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.380358721 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.082456858 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.081638067 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.098783151 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.075838076 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.103634141 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.075480701 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.072925556 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.082440656 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.386282044 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.082505024 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.073798648 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.511103955 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.085309509 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.081034008 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.104507155 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.105343839 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.081496196 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.079732753 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.075306112 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.239110255 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.766874512 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.073984701 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.075412273 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.082010847 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.07279724 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.072864705 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.077582586 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.077920315 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.073981659 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.07899869 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.079553707 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.081035921 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.079893698 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.568961436 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.092734826 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.082524155 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.162241191 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.119501605 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.06903174 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.860676586 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.075661703 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.075110195 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.083793362 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.766679393 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.160233763 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.078884019 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.245951923 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.411252189 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.089588314 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.240094816 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.247530267 seconds)
  done (took 144.225183546 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.075968058 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.308464789 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.227765394 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.078433953 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.331010967 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.287595038 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.077053838 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.121434292 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.077137212 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.278409028 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.325429921 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.181954022 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.076362966 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.077697157 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.071177511 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.070670195 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.225129267 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.144802616 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.080354322 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.074723094 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.101578699 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.279391702 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.197614484 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.075036593 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.101143467 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.28346236 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.197971843 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.179208794 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.85937799 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.07609309 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.138906669 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.07623469 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.077819619 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.073852308 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.229947455 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.169354043 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.163582485 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.078814004 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.049088707 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.07535936 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.750185545 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.278641831 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.173228027 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.200617019 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.323509316 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.29218457 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.690104023 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.07724429 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.70038583 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.241830106 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.283679512 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.28758882 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.198159129 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.078990206 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.633032541 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.076129567 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.076310444 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.296579315 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.295855311 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.176691639 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.081987552 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.077795628 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.074653511 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.31872631 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.080290201 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.168420247 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.081629639 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.076872902 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.17173383 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.178221642 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.303805775 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.300111215 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.110121378 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.403137732 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.566056182 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.283436062 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.142814013 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.29772823 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.081625027 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.074074101 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.158655593 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.922046445 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.331249601 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.321222438 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.278742734 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.109190572 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.730588329 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.078865609 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.266798497 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.269288344 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.311936955 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.320757009 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.313276624 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.424375694 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.079190081 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.081794928 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.383626188 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.194149171 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.030326954 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.431711171 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.308548924 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.602844206 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.107273249 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.408890692 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.207761747 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.082355892 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.72757769 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.080916723 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.284747842 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.120892897 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.083285901 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.081927032 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.269547605 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.984527082 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.080413267 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.819778948 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.140849778 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.085114242 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.286404234 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.082533683 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.323092486 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.082198738 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.313350559 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.706576827 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.110732543 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.30763567 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.324911152 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.711397695 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.323258252 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.3232122 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.195121663 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.305985963 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.896212215 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.080025041 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.344044777 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.084232941 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.082854341 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.250610865 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.087116383 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.224141367 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.08435212 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.34834334 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.101822041 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.311873712 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.083160824 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.324234346 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.113248539 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.117772331 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.0873354 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.210891715 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.087848654 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.020811934 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.241476652 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.087428345 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.04692206 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.825159965 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.081529435 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.230034447 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.308834399 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.102405345 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.153874266 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.647085574 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.078733448 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.165463983 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.104757646 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.369155644 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.085789645 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.331411242 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.062056134 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.559694339 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.07691547 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.319033956 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.267503876 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.08719869 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.079568538 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.931856439 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.085117271 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.079808369 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.240820945 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.537317038 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.987642332 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.284332803 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.084861208 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.209691358 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.086174302 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.166230362 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.428809103 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.082725923 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.083439243 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.083245646 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.086013231 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.083858339 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.3453083 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.107991969 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.517083838 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.217686181 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.343360699 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.386997504 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.286250192 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.121269466 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.084350535 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.304014033 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.086497055 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.144689208 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.086175563 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.103258184 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.312021865 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.087393278 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.291299119 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.321358873 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.966134098 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.131958613 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.087147842 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.08248762 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.987931574 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.23612045 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.172934991 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.087229843 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.062484239 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.199838871 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.208347513 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.268178653 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.905787663 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.189318655 seconds)
  done (took 948.119615828 seconds)
done (took 1290.170105399 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.087235223 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.085142188 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.086149831 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.085872527 seconds)
  done (took 30.347370764 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.085776711 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.088287214 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.088072533 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.08466676 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.087148319 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.088749527 seconds)
  done (took 14.526845962 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.087456804 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.085522867 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.083900782 seconds)
  done (took 23.259318632 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.518165679 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.496814149 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.159917058 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.228973688 seconds)
  done (took 11.4105138 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.092487692 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.087868687 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.088319027 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.085779726 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.089987108 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.090540485 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.088495938 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.089252055 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.086924465 seconds)
  done (took 20.815643756 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.219288532 seconds)
done (took 106.586898775 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.114521943 seconds)
    (2/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.082200025 seconds)
    (3/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.239343503 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.206647517 seconds)
    (5/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.481371393 seconds)
    (6/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.105953389 seconds)
    (7/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.265001747 seconds)
    (8/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.090985762 seconds)
    (9/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 3.961360807 seconds)
    (10/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.088836604 seconds)
    (11/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 5.152692035 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.234897701 seconds)
    (13/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.036499341 seconds)
    (14/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.083305084 seconds)
    (15/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.10815808 seconds)
    (16/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.217415175 seconds)
    (17/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.846112076 seconds)
    (18/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.558965132 seconds)
    (19/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.088980107 seconds)
    (20/341) benchmarking ("sort", Int8, false)...
    done (took 5.033823434 seconds)
    (21/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.477635282 seconds)
    (22/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.168504704 seconds)
    (23/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.091540855 seconds)
    (24/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.482462746 seconds)
    (25/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.101030662 seconds)
    (26/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.088143412 seconds)
    (27/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.174570042 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.481719367 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.282909843 seconds)
    (30/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.814120104 seconds)
    (31/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.253164365 seconds)
    (32/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.275192513 seconds)
    (33/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.10796724 seconds)
    (34/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.091735051 seconds)
    (35/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.869964478 seconds)
    (36/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.111642432 seconds)
    (37/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.304322011 seconds)
    (38/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.106747483 seconds)
    (39/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.099164359 seconds)
    (40/341) benchmarking ("sort", Float64, false)...
    done (took 5.803045787 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.18959484 seconds)
    (42/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.177379632 seconds)
    (43/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.086499687 seconds)
    (44/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.912970815 seconds)
    (45/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.088476349 seconds)
    (46/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.092640866 seconds)
    (47/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 3.887142133 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.172250998 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.328583011 seconds)
    (50/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.29524668 seconds)
    (51/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.094109629 seconds)
    (52/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.441719552 seconds)
    (53/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.08969159 seconds)
    (54/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.158655666 seconds)
    (55/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.254657728 seconds)
    (56/341) benchmarking ("sort", BigInt, false)...
    done (took 7.093319228 seconds)
    (57/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.49854763 seconds)
    (58/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.222549527 seconds)
    (59/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.091828372 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.222268364 seconds)
    (61/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.091810511 seconds)
    (62/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.512824353 seconds)
    (63/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.100970308 seconds)
    (64/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.241503759 seconds)
    (65/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.989123094 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.293010959 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.006871288 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.346701696 seconds)
    (69/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.722004804 seconds)
    (70/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.164583589 seconds)
    (71/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.853615005 seconds)
    (72/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.892939245 seconds)
    (73/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.238018296 seconds)
    (74/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.201961669 seconds)
    (75/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.386285407 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.805153324 seconds)
    (77/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.09803519 seconds)
    (78/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 3.947425905 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.355551695 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.109492303 seconds)
    (81/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.170128352 seconds)
    (82/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.687942343 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.225236152 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.102521207 seconds)
    (85/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.222605939 seconds)
    (86/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.093370936 seconds)
    (87/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.094841548 seconds)
    (88/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 8.58160503 seconds)
    (89/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.287761417 seconds)
    (90/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.206392297 seconds)
    (91/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.433962208 seconds)
    (92/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.187656389 seconds)
    (93/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.227368258 seconds)
    (94/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.817463571 seconds)
    (95/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.495638799 seconds)
    (96/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.360707874 seconds)
    (97/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.337603637 seconds)
    (98/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.266707922 seconds)
    (99/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.579765226 seconds)
    (100/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.207797998 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.489643813 seconds)
    (102/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.117275949 seconds)
    (103/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.224621601 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.63448341 seconds)
    (105/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.400536861 seconds)
    (106/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.369873358 seconds)
    (107/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.093637704 seconds)
    (108/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.120547143 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.101573096 seconds)
    (110/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.306062747 seconds)
    (111/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.965902101 seconds)
    (112/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.403761166 seconds)
    (113/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.387412029 seconds)
    (114/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.935650829 seconds)
    (115/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.206931048 seconds)
    (116/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.108098337 seconds)
    (117/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.172716378 seconds)
    (118/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.10650653 seconds)
    (119/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.09519056 seconds)
    (120/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.42676197 seconds)
    (121/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.379509909 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.409897992 seconds)
    (123/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.25674854 seconds)
    (124/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.414803538 seconds)
    (125/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.22477559 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.126642597 seconds)
    (127/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.212820853 seconds)
    (128/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.114818923 seconds)
    (129/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.529189001 seconds)
    (130/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.212535531 seconds)
    (131/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.097376307 seconds)
    (132/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.097801683 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.177328771 seconds)
    (134/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.898598375 seconds)
    (135/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.20636091 seconds)
    (136/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.206970852 seconds)
    (137/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.583228804 seconds)
    (138/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.398271168 seconds)
    (139/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.59800785 seconds)
    (140/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.552823935 seconds)
    (141/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.598070774 seconds)
    (142/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.210977993 seconds)
    (143/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.407083483 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.805436517 seconds)
    (145/341) benchmarking ("sort", Bool, false)...
    done (took 2.32201525 seconds)
    (146/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.096053986 seconds)
    (147/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.230416444 seconds)
    (148/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.238492828 seconds)
    (149/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.343363127 seconds)
    (150/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.631097304 seconds)
    (151/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.299421508 seconds)
    (152/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.42959446 seconds)
    (153/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.197866934 seconds)
    (154/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.304891859 seconds)
    (155/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.879522911 seconds)
    (156/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.199466966 seconds)
    (157/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.111757676 seconds)
    (158/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.011814576 seconds)
    (159/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.126913137 seconds)
    (160/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.111121942 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.425570292 seconds)
    (162/341) benchmarking ("sort", Int64, false)...
    done (took 5.739941962 seconds)
    (163/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.286925476 seconds)
    (164/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.386288758 seconds)
    (165/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.992345324 seconds)
    (166/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.512111916 seconds)
    (167/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.290900954 seconds)
    (168/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.528721239 seconds)
    (169/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.516859091 seconds)
    (170/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.312624661 seconds)
    (171/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.097313851 seconds)
    (172/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.251097014 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.867850326 seconds)
    (174/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.227877927 seconds)
    (175/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.418509556 seconds)
    (176/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.120362397 seconds)
    (177/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.107212695 seconds)
    (178/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.113558371 seconds)
    (179/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.5292387 seconds)
    (180/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.177315783 seconds)
    (181/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.214761888 seconds)
    (182/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.343242999 seconds)
    (183/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.115043159 seconds)
    (184/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.227493476 seconds)
    (185/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.245996635 seconds)
    (186/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.099880622 seconds)
    (187/341) benchmarking ("sort", Float32, false)...
    done (took 5.811561151 seconds)
    (188/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.094041107 seconds)
    (189/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.117150251 seconds)
    (190/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.10421737 seconds)
    (191/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.458975527 seconds)
    (192/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.11200457 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.096348657 seconds)
    (194/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.096631504 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.234611083 seconds)
    (196/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.891683767 seconds)
    (197/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.482792812 seconds)
    (198/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.936638534 seconds)
    (199/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.10141362 seconds)
    (200/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.237643494 seconds)
    (201/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.383790819 seconds)
    (202/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.803007998 seconds)
    (203/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.279273206 seconds)
    (204/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.097507446 seconds)
    (205/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.756930459 seconds)
    (206/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.186135614 seconds)
    (207/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.388690275 seconds)
    (208/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.383869695 seconds)
    (209/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.183908919 seconds)
    (210/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.067351166 seconds)
    (211/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.098755703 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 8.848463807 seconds)
    (213/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.136860489 seconds)
    (214/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.297502869 seconds)
    (215/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.195109759 seconds)
    (216/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.175950256 seconds)
    (217/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.119188087 seconds)
    (218/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.158598471 seconds)
    (219/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.419126171 seconds)
    (220/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.246613661 seconds)
    (221/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.241690124 seconds)
    (222/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.992407787 seconds)
    (223/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.329171131 seconds)
    (224/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.112781061 seconds)
    (225/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.38878133 seconds)
    (226/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.377883801 seconds)
    (227/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.304695997 seconds)
    (228/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.448568801 seconds)
    (229/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.362299186 seconds)
    (230/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.391802854 seconds)
    (231/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.396756264 seconds)
    (232/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.121345639 seconds)
    (233/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.385623248 seconds)
    (234/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.116351938 seconds)
    (235/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.141997162 seconds)
    (236/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.740597649 seconds)
    (237/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.397070352 seconds)
    (238/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.502904367 seconds)
    (239/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.099046497 seconds)
    (240/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.493138413 seconds)
    (241/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.300117784 seconds)
    (242/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.290822238 seconds)
    (243/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.196758349 seconds)
    (244/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.159423218 seconds)
    (245/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.120318542 seconds)
    (246/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.112713101 seconds)
    (247/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.099673162 seconds)
    (248/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.773292314 seconds)
    (249/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.360264403 seconds)
    (250/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.412417814 seconds)
    (251/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.130053512 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.177956973 seconds)
    (253/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.3544138 seconds)
    (254/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.22239546 seconds)
    (255/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.46949122 seconds)
    (256/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.115291367 seconds)
    (257/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.296283997 seconds)
    (258/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.240071088 seconds)
    (259/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.177885764 seconds)
    (260/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.098534911 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.457842354 seconds)
    (262/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.48059168 seconds)
    (263/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.249284796 seconds)
    (264/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.164676907 seconds)
    (265/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.099419169 seconds)
    (266/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.227356808 seconds)
    (267/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.329572063 seconds)
    (268/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.201844721 seconds)
    (269/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.178321123 seconds)
    (270/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.105762228 seconds)
    (271/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.412232682 seconds)
    (272/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.105273912 seconds)
    (273/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.234496939 seconds)
    (274/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.214966471 seconds)
    (275/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.495692408 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.114539411 seconds)
    (277/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.427970662 seconds)
    (278/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.911287227 seconds)
    (279/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.977101294 seconds)
    (280/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.393126311 seconds)
    (281/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.517893052 seconds)
    (282/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.246464312 seconds)
    (283/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.215512356 seconds)
    (284/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.810022489 seconds)
    (285/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.262477181 seconds)
    (286/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.105126022 seconds)
    (287/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.589191557 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.09677672 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.099380776 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.229073913 seconds)
    (291/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.102067373 seconds)
    (292/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.485840297 seconds)
    (293/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.104784697 seconds)
    (294/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.996762978 seconds)
    (295/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.546805019 seconds)
    (296/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.510462152 seconds)
    (297/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.840681831 seconds)
    (298/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.808237822 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.021776192 seconds)
    (300/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.379850766 seconds)
    (301/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.185875862 seconds)
    (302/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.112587621 seconds)
    (303/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.361225191 seconds)
    (304/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.610601254 seconds)
    (305/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.214531054 seconds)
    (306/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.044807614 seconds)
    (307/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.105966253 seconds)
    (308/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.216454338 seconds)
    (309/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.118530796 seconds)
    (310/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.423967116 seconds)
    (311/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.540930886 seconds)
    (312/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.513735089 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.403134433 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.504459305 seconds)
    (315/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.234443557 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.930248532 seconds)
    (317/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.320727719 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.007674303 seconds)
    (319/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.103605088 seconds)
    (320/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.163977089 seconds)
    (321/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.43115182 seconds)
    (322/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.328825355 seconds)
    (323/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.146778353 seconds)
    (324/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.101370153 seconds)
    (325/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 3.99231955 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.998549875 seconds)
    (327/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.325598161 seconds)
    (328/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.406452457 seconds)
    (329/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.163894281 seconds)
    (330/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.541415085 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.358730526 seconds)
    (332/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.410197205 seconds)
    (333/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.302762384 seconds)
    (334/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.106847045 seconds)
    (335/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.571676189 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.247342116 seconds)
    (337/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.317700456 seconds)
    (338/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.198487018 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.333690301 seconds)
    (340/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.251747194 seconds)
    (341/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.504059863 seconds)
  done (took 1174.106589411 seconds)
done (took 1176.204459065 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.098796911 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.103838237 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.615828853 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.111428575 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.10029714 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.10880129 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.624108257 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.133055948 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.120625438 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.6286901 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.112866771 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.105664019 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.119932037 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.138340039 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.115047736 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.120824319 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.109323941 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.130474731 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.138880501 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.109434151 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.155930746 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.1118838 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.105420645 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.156774001 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.091070176 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.121152953 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.123343932 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.156899257 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.156072525 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.105589426 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.110268791 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.471573776 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.156897018 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.109099672 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.115291748 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.119940122 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.109281181 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.120954445 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.122662736 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.120235673 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.103902905 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.114476719 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.108562475 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.107991721 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.105326936 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.106363186 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.10674765 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.230394777 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.122795684 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.452570819 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.167283071 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.125662023 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.159198989 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.108451514 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.109189352 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.110908564 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.159310426 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.113569939 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.097740651 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.454025385 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.20196968 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.120344417 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.452775011 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.169535444 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.118111103 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.116961592 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.106708121 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.125008172 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.472847872 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.675733677 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.137492392 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.126777364 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.107297741 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.107333591 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.122322198 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.62791601 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.121786787 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.697151558 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.133057265 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.12333442 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.113631635 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.109178972 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.109921618 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.123731817 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.126737332 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.108106683 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.113988756 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.113340228 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.120472093 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.471991033 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.152638065 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.618368097 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.113865182 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.129282703 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.128254418 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.697622066 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.13515864 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.127827402 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.110017601 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.470405486 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.151773404 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.128166236 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.109980026 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.120161182 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.22306737 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.126507229 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.12868323 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.106988634 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.130140209 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.116801045 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.108321012 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.125146025 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.128695646 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.143929624 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.125068837 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.108411106 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.11752691 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.114587494 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.128717842 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.119378012 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.116185465 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.122085582 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.110888422 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.161232581 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.130602021 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.126128943 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.225229546 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.115517732 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.234468511 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.125209096 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.116588487 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.10816274 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.456516421 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.155908118 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.131494834 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.117640562 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.133858372 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.132568206 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.127808736 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.112045681 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.12593798 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.113286617 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.160943097 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.111172112 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.136120155 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.162921018 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.124538494 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.116658509 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.127805991 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.145771216 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.132532497 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.11554963 seconds)
done (took 332.120537539 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.161895238 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.11348221 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.189331668 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.113261762 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.191291596 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.16410209 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.11293576 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.115542236 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.113831399 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.514099248 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.114215044 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.119573631 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.112237134 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.114162158 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.172647779 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.114825211 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.113330475 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.350441939 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.115006428 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.183024481 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.112700825 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.1162685 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.115632246 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.514595148 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.114769771 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.115426745 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.176146802 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.114578251 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.36761555 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.111555796 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.11285077 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.36126892 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.174657296 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.12691346 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.121784067 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.122259941 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.183778052 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.121653813 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.166958448 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.166258021 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.192403462 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.149200546 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.113589226 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.114220769 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.117567146 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.115534798 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.115220116 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.14651331 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.114021649 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.124003833 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.361244549 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.122558508 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.123927496 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.116676201 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.115715233 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.128085932 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.115792277 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.116714112 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.184191158 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.116675391 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.16552299 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.541929105 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.51477763 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.115187005 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.116987917 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.116518939 seconds)
  done (took 200.220217065 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.18320205 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.209434329 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.182880905 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.116591632 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.167768307 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.186339802 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.119053374 seconds)
  done (took 17.19577312 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.12360465 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.118008408 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.140918713 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.141299007 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.118003524 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.256123867 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.130136792 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.123099692 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.142984875 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.11902624 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.452279739 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.13389559 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.120773936 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.116657235 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.130467525 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.146423998 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.120342116 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.118429262 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.215553127 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.196609479 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.121505019 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.12577989 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.145609763 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.13066372 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.118164475 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.117666558 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.103341551 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.124701706 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.118744282 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.117664328 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.119350859 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.132533248 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.118547613 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.119271046 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.119274506 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.119453883 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.119269667 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.118881888 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.121009263 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.121346316 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.121528812 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.120180923 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.120461418 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.120961268 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.119749751 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.144048904 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.120043938 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.121293066 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.120390378 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.120727486 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.149438782 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.120841213 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.120307659 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.124332176 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.161641714 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.12596712 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.120272675 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.121311406 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.122860558 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.122333077 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.124002618 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.201476451 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.143529042 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.121360323 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.107826128 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.158183649 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.121555003 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.122430258 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.120822198 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.148142679 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.123769986 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.143844368 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.1232113 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.221215184 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.124601926 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.261822577 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.144449777 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.125722728 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.128453031 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.123643443 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.12979609 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.121594925 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.126077475 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.130729667 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.128714906 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.122312667 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.121304886 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.124207716 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.130794608 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.124123346 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.169367619 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.125287494 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.122600551 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.218760181 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.122910446 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.220144589 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.150055779 seconds)
  done (took 229.428969988 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.128994708 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.125076123 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.136078332 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.126501892 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.123085241 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.13090947 seconds)
  done (took 14.808377071 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.126986509 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.127803528 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.123232061 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.122660147 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.123063685 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.123581566 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.123602974 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.12643187 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.12794285 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.125636432 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.124771202 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.130655906 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.124055812 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.125880306 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.125023086 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.125089696 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.126423239 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.124365813 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.124955853 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.124431441 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.327236145 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.124355236 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.12448861 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.12815227 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.12968425 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.12433193 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.134312328 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.126596778 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.126542918 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.131997359 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.129678576 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.126497878 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.128411315 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.130354481 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.129435436 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.129880912 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.129539865 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.131697847 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.126083136 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.126835312 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.131654324 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.127827877 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.127249818 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.133020391 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.130295155 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.136941744 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.138207684 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.135415072 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.12451416 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.135017312 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.133985406 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.12640635 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.128547714 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.13512039 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.131849778 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.133554227 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.138202943 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.126191512 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.127570861 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.129424002 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.13162644 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.127392295 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.130220781 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.132856073 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.135909472 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.133926216 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.131658713 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.133667917 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.126976405 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.12724378 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.134524214 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.128834765 seconds)
  done (took 156.520040088 seconds)
done (took 620.204246255 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.175787979 seconds)
  done (took 9.216566088 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.176929295 seconds)
  done (took 9.2976015 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.791185335 seconds)
  done (took 12.837670253 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.160469648 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.173238543 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.141584673 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.133806827 seconds)
  done (took 30.664979586 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.333386527 seconds)
  done (took 9.377659331 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.143979711 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.124196307 seconds)
  done (took 16.371816206 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.160279008 seconds)
  done (took 9.20681841 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.607452124 seconds)
  done (took 9.678109769 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.143377215 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.155052607 seconds)
  done (took 16.364698353 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.132019409 seconds)
  done (took 9.178123229 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.881586396 seconds)
  done (took 9.996269509 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.134265645 seconds)
  done (took 9.196444875 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.165510244 seconds)
  done (took 9.21232314 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.194914578 seconds)
  done (took 10.242728703 seconds)
done (took 172.887210633 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.137336949 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.131276342 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.130495328 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.129584743 seconds)
  done (took 30.573576655 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.16535737 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.164348705 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.17296918 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.165295389 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.155032124 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.155262681 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.165271365 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.165316075 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.156216941 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.163516841 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.165351067 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.162962285 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.165835866 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.173855526 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.175587611 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.164592091 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.165673231 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.166403653 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.156651283 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.174844694 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.164018068 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.165215654 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.13230013 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.129815629 seconds)
  done (took 53.939305766 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.321009844 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.196299326 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.284731139 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.177254548 seconds)
  done (took 11.024263015 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.093860175 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.196506255 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.183030803 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.176333146 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.21753656 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.23536746 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.183430426 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.341972496 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.249060118 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.260313899 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.138622758 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.152063676 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.152592271 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.177813382 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.235923857 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.133734721 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.134210066 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.247858671 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.194672973 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.34501342 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.133072501 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.18775508 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.218660978 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.178453233 seconds)
  done (took 54.815472176 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.134086594 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.142957184 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.141083697 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.134181553 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.134966344 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.134502664 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.141093359 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.135532016 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.156610036 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.136475959 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.134201083 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.137946298 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.141604765 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.13545245 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.135525296 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.14961895 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.150226159 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.13592727 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.138095018 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.141433361 seconds)
  done (took 44.84198884 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.132225082 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.980459929 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.480844804 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.384219753 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.134104382 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.132984268 seconds)
  done (took 33.293728923 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.145049214 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.151313951 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.142904721 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.161345139 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.182076823 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.137848186 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.195994743 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.297023853 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.140766619 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.194565834 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.152357245 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.141914121 seconds)
  done (took 28.095050902 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.132466386 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.134204112 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.135130279 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.146567732 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.145753234 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.141810944 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.1432483 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.132472587 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.147164172 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.152042773 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.141097763 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.146565022 seconds)
  done (took 47.747552036 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.351258548 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.361434767 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.351628408 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.751086343 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.448201594 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.112296725 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.422018418 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.350820526 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.838997774 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.863891059 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.422483544 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.110285453 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.083550483 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.059739895 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.055204866 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.378975477 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135857898 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.991953431 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.389552916 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.177010583 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138918762 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.138004774 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.142414008 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.424695266 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.458451295 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.143457226 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.350595295 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.155085869 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.137654694 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.401338942 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.627394617 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.18746707 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.339464979 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.394749435 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.473861217 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.185803226 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.140681279 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.351586163 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.179582573 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.172318949 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.146404802 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.148021015 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.633807078 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.150619367 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.41018717 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139200162 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.145751012 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.138377108 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062524334 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.376867233 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.23874699 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.135614977 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.173640725 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.574554 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.258999072 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.379577419 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143516078 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.34302858 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195683021 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.310475031 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.235735219 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.140694736 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351258627 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.064526721 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.460315595 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.250625011 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.141009119 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.143290148 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.839560951 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.381509829 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.223217658 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.386219059 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.890100596 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.140958634 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.141605236 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.182374554 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.238318027 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.138428271 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.435601082 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.123866619 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.064919256 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.243072727 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.54771321 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148863105 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.141239578 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.153717014 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.989471867 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.068679213 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.241371639 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.326008634 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.454855677 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.144960011 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.142893151 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.166341246 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146780469 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.092171388 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.731543743 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.207879155 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.070098313 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.709018159 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.76428575 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.108584923 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.640772662 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.183961699 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.423393627 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.286735061 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.548937742 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.352683195 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.392677118 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.676688736 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148516103 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.760553491 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.228086878 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222227823 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.144862961 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.704564036 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.350642459 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.364360247 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.247490072 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.145016283 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.071793187 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.155515875 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.348813294 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.767241541 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.202018553 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.12880687 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.150463706 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.144909018 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.148545394 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.258205877 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161567733 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.431584313 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.212554546 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.146070069 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.081366452 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.149365212 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.423123304 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.83076766 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202005768 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.39667162 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.406368327 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.84747695 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.743153851 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.09288116 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.412335887 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.214743201 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219992501 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.728116063 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.282227436 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.244286114 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.146550666 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.277922028 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.143011683 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.14970525 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.591587223 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.557979627 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.575330124 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.19043797 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.14795726 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.099739084 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.357352086 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.387952007 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.183889673 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.1718571 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.152988012 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.235507651 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.371232707 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.147399711 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.073444094 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.401573001 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.389869448 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.434229688 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.555099219 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.17273261 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.217244562 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.159498836 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.362271565 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.232755324 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.828422258 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.696560886 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.3654751 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.74643478 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.111010944 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.787197832 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.328363951 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.517131904 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.166972698 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.599193966 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.351714715 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.863659507 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.178067389 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.676547113 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.075774835 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.155586038 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.486834172 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.10781362 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.458712169 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.209994307 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207884457 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.150869877 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.150353217 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.158299003 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.031624826 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.258943689 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.220761762 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.223800777 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.079184622 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.811781269 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.187899338 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.152922421 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.149618298 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.430105213 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.902076837 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.101498429 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.149672161 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.228004913 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.209670659 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.704695878 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.152804337 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.154485573 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.775535997 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.157551971 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.065957295 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.158364703 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.873088199 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.176413508 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.327069822 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.840223627 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.439219841 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.222316086 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226443765 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.152357562 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.152947107 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.853434446 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.161307997 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.852784991 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.432810356 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.42048072 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.588886477 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.192057642 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.363429279 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.168240776 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.148920441 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.626484627 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.174802087 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154907844 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.357089985 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.67418619 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.402885815 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.783696682 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.241006543 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.152404313 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.417343277 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.156068369 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.660465367 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.835280435 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.141195134 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.153974906 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.392630884 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.839689997 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.156123981 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.128917249 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.16085066 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.368023266 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.345953784 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.431338265 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.450088391 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.597800258 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.080296034 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.158153191 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.163687172 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.400055012 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.154608243 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.190255548 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.600640911 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.183807595 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.580310832 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.434799087 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.442038792 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.782243235 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.416265182 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.214616478 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.166959467 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.805019815 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.268146917 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.088216134 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.274417766 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.082725038 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.812750797 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.4458586 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.172820743 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.420022011 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.130975206 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.487891557 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.449060404 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.340645165 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.188961256 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.170690881 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.156526025 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.2001923 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.156524752 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.374479777 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.272060286 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.162489445 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.72767487 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.192647605 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202693742 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.162387264 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.6374212 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.174718171 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159553782 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.852860648 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.18065776 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.276515566 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.229715924 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.874072788 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.671711208 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.181057713 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.110643828 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.808913243 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.421789353 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.209626408 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.611623511 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195265304 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.563671358 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.156964765 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.371636921 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.16233333 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.760487241 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20375316 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.429661544 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.112613972 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.369360825 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.360291974 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.18690559 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.163026882 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.085423788 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.265073097 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.036675715 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.145150137 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.163991907 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.842567668 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.528114351 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.3910965 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.56142287 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.974127249 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.161936146 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.474164024 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.541770773 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.808308972 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.192647366 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161016522 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.402934082 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.280557494 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.387243822 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.39801857 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.168131584 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.186050492 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.37322649 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.286293706 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.080946574 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.642505369 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.743322472 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.860335468 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.17203593 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.364612684 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.413006334 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.470029896 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.194962782 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.233567848 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.566783153 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.425351472 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.224743342 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.087763843 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.160854578 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.559278913 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.560159909 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.257957039 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.403495706 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.475848454 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.821713348 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.657327658 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.630847769 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.518026859 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.563055598 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.558330315 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.374052024 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.528251179 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.485149799 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.051686704 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.576089733 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.374154004 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.265449297 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.43969367 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.034153949 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.875591699 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.406331238 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.168751395 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.093300936 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.370905423 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.253055757 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.520134939 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.740870092 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.412575328 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.338227696 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.627777014 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.704086674 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.377160976 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.188861094 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.129187581 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.186964076 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.184437204 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.164113023 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.647950765 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.455358091 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.178937792 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.105697437 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.835234707 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.090327328 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.378172051 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.385244641 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.191857331 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.717825812 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.342301398 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.25207055 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.455969971 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.435451283 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.198649712 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.092322199 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.887474192 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.107331032 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.19733403 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.587523395 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18124436 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.168252949 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.369426937 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.094656883 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212517987 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.171629261 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.366888855 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.74700919 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.431417291 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.287756157 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40990801 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.467083147 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.968373445 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.179679252 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.440618768 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.092774673 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.815049484 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.84697785 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.205588069 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.238165633 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.167109242 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.160021043 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.43798737 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.411328033 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.345989741 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.670073402 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.198604091 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.190207809 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.415946004 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.232949575 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.170835187 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.17244104 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.803854062 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.399158152 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.168298309 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.140843874 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.368444501 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241354587 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.365045871 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.241516872 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.681402718 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.172883588 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.978590463 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255672407 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.117167698 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.165758636 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.843791351 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.22660066 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.167705698 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.404888238 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.784686593 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.372671148 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.566263864 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.076913589 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.386232417 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207975788 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.173033234 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.235442549 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.455226587 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.466691678 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.169094469 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.435672839 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.186415721 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.174453022 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.832678319 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.138046583 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.169740986 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.824700167 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.082788267 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.901069329 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.568207918 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.173067853 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.196289871 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.172363155 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.09659992 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.168338644 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.3367936 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.158532184 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.26049065 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.438014452 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.395090954 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.244820371 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.175654566 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.170717134 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.17684129 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.38368114 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.684724343 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186623631 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.871515259 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.373647716 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.170231504 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.655214033 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.612077646 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.456691689 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.208075218 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.389550481 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.411651054 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.707213499 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.379321837 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.146055909 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.395630718 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.173372188 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.445439539 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.446929526 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.172137937 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.385707149 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.682485597 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.458299197 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.525868122 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.480492638 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.231859195 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.394265074 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.088861872 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.173481782 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.176620234 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.43432515 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.220878939 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.171833856 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.180778805 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.72983154 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.835744805 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.63808622 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.326790854 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.418111311 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.910836671 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.924673683 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.175767824 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.100776585 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.170936078 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.197633528 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.176777395 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.100357164 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.891975435 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.893145757 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.391138492 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.482649977 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.101311296 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.37801819 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.776320309 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.099888518 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.143750416 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.175238848 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.429453447 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.102878563 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.176878012 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.129360994 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.375227568 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.90997977 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.44185627 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.173304254 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.120928594 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.177573019 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.175973556 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.172770035 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.262292285 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.175272413 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.291804654 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.439849813 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.469897589 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.268190971 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.817270364 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.83867916 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.110580041 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215531539 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.736136367 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.74642126 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.377413547 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.291581385 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.83676717 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.118022537 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.178260729 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.191768088 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.43805243 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.1795073 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.178579187 seconds)
  done (took 2251.223921395 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.192690073 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.242502896 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.233172372 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.237097802 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.313565474 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.299444991 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.249437015 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.236639269 seconds)
  done (took 60.093349562 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.175221494 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.13190153 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.183521782 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.176366005 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.193703404 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.178235819 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.372818148 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.205397155 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.176138212 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.179375298 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.1780954 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.180765877 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.178580689 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.174589167 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.179093208 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.478086618 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.198374962 seconds)
  done (took 81.699005901 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.182193043 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.017649766 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.175116819 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.867767279 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.181141361 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.527834106 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.178347424 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.17831199 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.304399215 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.478400794 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.234033617 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.181844841 seconds)
  done (took 93.604761932 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.149643173 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.165972092 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.178680722 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.178293914 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.178727977 seconds)
  done (took 12.941065131 seconds)
done (took 2805.998431627 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.421569841 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.273040873 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.250383166 seconds)
  done (took 6.61465096 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.321263422 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.370486803 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.483170805 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.489940605 seconds)
  done (took 11.76348454 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.463767943 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.547910951 seconds)
  done (took 7.102491593 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.553248796 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.18001956 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.56613488 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.179483433 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.181061336 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.180105286 seconds)
  done (took 23.636932846 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.182055538 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.181937481 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.181454754 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.181758634 seconds)
  done (took 10.821887937 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.178245012 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.972726369 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.179734561 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.18818599 seconds)
  done (took 22.610412042 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.388468628 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.22414957 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.958320864 seconds)
  done (took 10.664516764 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.805671704 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.721370227 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.784162141 seconds)
  done (took 10.403195094 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.360935711 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.165191536 seconds)
  done (took 8.618261451 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.327021272 seconds)
  done (took 4.419387998 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.015952678 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.496351045 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.662336277 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.725243797 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.778932159 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.411746254 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.505183296 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.454007649 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.589648176 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.636666714 seconds)
  done (took 28.370337076 seconds)
done (took 161.84125635 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.622740752 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.205676042 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.392095112 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.562418891 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.426991138 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.392814693 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.475914955 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.550127505 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.237566422 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.222766846 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.562889668 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.422516504 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.427011783 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.208146341 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.434871647 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.208493586 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.423913914 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.643602059 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.244504663 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.488528014 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.489925891 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.208729078 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.402219022 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.225592599 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.425580873 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.3427081 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.81490641 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.207495906 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.397358538 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.829153993 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.342800101 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.640489421 seconds)
  done (took 179.559798101 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.071216326 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.180945624 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.183433468 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.182326468 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.546315262 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.18108068 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.182565579 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.181225881 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.508262686 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.487052838 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.177481159 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.521305917 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.184649425 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.183251056 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.184723371 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.182095566 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.616574885 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.108883426 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.171503251 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.182198315 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.182427353 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.428964485 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.183831135 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.460234226 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.602381383 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.183198061 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.182004455 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.183177881 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.181759558 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.183028187 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.182626106 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.185391687 seconds)
  done (took 218.454936003 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.185296436 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.183760698 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.184491365 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.184729416 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.183678771 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.182332025 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.186214396 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.239566393 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.939802362 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.929696292 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.186332935 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.187615781 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.186361118 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.184728031 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.185557464 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.186506762 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.17214157 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.186929682 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.190145431 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.189970134 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.189997714 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.062810288 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.187805235 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.107539758 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.189716831 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.193015416 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.187337437 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.188502609 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.187536675 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.186170531 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.187245552 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.19030353 seconds)
  done (took 231.413514291 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.436820873 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.191823532 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.193370156 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.198706346 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.193226762 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.190672852 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.199237626 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.436820051 seconds)
  done (took 22.145871313 seconds)
done (took 653.6687252 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.576841411 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.927333608 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.31947475 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.213577684 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.486035812 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.252007358 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.210306051 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.276306503 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.85533405 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.268913614 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.606831433 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.215325437 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.920228997 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.236052454 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.323723234 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.268616502 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.558811205 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.824053378 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.340673178 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.872432238 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.418814686 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.163944072 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.292941393 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.890898818 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.618369012 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.181231244 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.235153253 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.5661607 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.213401461 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.448146789 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.888683485 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.466681385 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.228392582 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.208627601 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.263845467 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.251243379 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.407758459 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.222078216 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.317682173 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.959184838 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.882731785 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.735876432 seconds)
  done (took 113.517727983 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.200425832 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.198247705 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.198400386 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.197977137 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.206400282 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.197966033 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.199413757 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.198935106 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.198659744 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.198441812 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.198369471 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.206704308 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.200685578 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.207697877 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.200365906 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.200989785 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.200301012 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.206743405 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.200050015 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.201321824 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.200320911 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.199881745 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.196165509 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.201331324 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.197570388 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.198836089 seconds)
  done (took 59.326703605 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.19595959 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.370812044 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.483456543 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.224321972 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.194655686 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.199242888 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.224619269 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.200731269 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.196908145 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.197699121 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.307956108 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.197004907 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.207043091 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.481001136 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.220512218 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.196137518 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.194744997 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.196514639 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.379846121 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.209252099 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.226615773 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.201716453 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.223679917 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.208472528 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.198714997 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.196351356 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.200915945 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.610254795 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.205994396 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.308444382 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.238516096 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.230724978 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.538720494 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.49264026 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.261822357 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.205302101 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.197805448 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.362346318 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.206344261 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.196556744 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.225060818 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.202838797 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.487805955 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.729047267 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.210871384 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.197269817 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.608781846 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.370587874 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.242256136 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.219842905 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.494928607 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.225791199 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.199486465 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.205542064 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.236093623 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.207908479 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.200743192 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.476858179 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.212230599 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.21964972 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.203031791 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.20086948 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.389527566 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.207397993 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.376828799 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.206552543 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.205277866 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.200958835 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.494136404 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.227157585 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.735333013 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.213002613 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.201172866 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.316143258 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.381929979 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.633131975 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.212081519 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.389972072 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.558715342 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.23705954 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.210148627 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.594565796 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.239378104 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.211694977 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.201233973 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.201927636 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.201688397 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.244176556 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.227795408 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.644698281 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.732695843 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.495009748 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.239423204 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.211162046 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.202895838 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.478394649 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.209542552 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.202970649 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.485774631 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.755533628 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.214644158 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.209448939 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.717120839 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.215357682 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.230797395 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.210425087 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.50494049 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.228991796 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.245562179 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.202622879 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.209503469 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.205301893 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.231474053 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.212004755 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.200972244 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.704926939 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.380256838 seconds)
  done (took 271.579481883 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.20603658 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.199738162 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.199952354 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.198791958 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.201889956 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.20105583 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.202342302 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.200343043 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.202262226 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.201239878 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.202863738 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.192929699 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.203042292 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.200018789 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.246822694 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.203707326 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.700170069 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.203877678 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.201799923 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.20214834 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.777648421 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.209768312 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.203037869 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.201536863 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.201703037 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.202961242 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.209845599 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.236771428 seconds)
  done (took 176.934784589 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.204026585 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.250563094 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.211063254 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.250226631 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.212716626 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.205291 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.223660813 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.219285727 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.207839236 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.204574873 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.20691871 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.232793309 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.209311868 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.278919327 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.23226665 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.280712018 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.278901329 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.209894602 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.203764868 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.204487363 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.249749718 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.214468718 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.225895548 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.259369706 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.213260609 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.252332761 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.217923505 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.205476153 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.204776106 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.293909173 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.223484478 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.233218585 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.236072993 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.219901741 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.293996514 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.293483457 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.284289345 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.233170267 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.205197412 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.205781867 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.206916345 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.207299365 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.253322897 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.215788303 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.209163406 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.295304774 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.225485956 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.205116907 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.231816341 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.195379393 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.214057183 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.21949275 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.236773712 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.303565316 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.251516257 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.238967914 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.228787643 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.221673016 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.209426795 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.27803153 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.21381403 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.295131829 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.227593406 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.207830098 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.207341671 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.210750209 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.254338626 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.23939326 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.2582649 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.214232344 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.278954947 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.260965738 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.218763606 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.208170511 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.207173302 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.256264586 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.290445022 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.25553436 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.265957774 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.240606294 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.213752996 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.207630702 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.210500273 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.235661581 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.213631972 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.296819799 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.29858244 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.214552592 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.207831581 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.208581791 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.208116614 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.231974184 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.262486124 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.245230674 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.289390434 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.243244059 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.241022401 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.211778648 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.221694229 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.209783426 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.240781713 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.213822345 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.220695258 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.56061837 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.244302713 seconds)
  done (took 237.024528734 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.56362828 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.260281516 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.275631492 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.471987694 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.577230629 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.369846457 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.239108902 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.261125808 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.264996779 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.378101858 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.318186327 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.302204859 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.243317146 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.227847347 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.254841375 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.267041134 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.288482623 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.55026277 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.362992155 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.058498774 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.248225483 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.53625535 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.552070147 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.592842845 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.297085722 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.628139927 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.871738603 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.349510369 seconds)
  done (took 71.736095939 seconds)
done (took 932.225330532 seconds)
SAVING RESULT...
DONE!
