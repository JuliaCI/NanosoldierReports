cset: moving following pidspec: 2525
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.8276889 seconds)
loading group "shootout"... done (took 1.11209302 seconds)
loading group "string"... done (took 0.664944402 seconds)
loading group "linalg"... done (took 8.58154217 seconds)
loading group "parallel"... done (took 0.16521901 seconds)
loading group "find"... done (took 3.006093602 seconds)
loading group "tuple"... done (took 2.1210191 seconds)
loading group "union"... done (took 14.799244724 seconds)
loading group "dates"... done (took 1.446053667 seconds)
loading group "micro"... done (took 0.220592785 seconds)
loading group "simd"... done (took 4.770156274 seconds)
loading group "io"... done (took 1.076957401 seconds)
loading group "random"... done (took 9.489426489 seconds)
loading group "problem"... done (took 1.516042325 seconds)
loading group "array"... done (took 25.197355403 seconds)
loading group "misc"... done (took 1.902895219 seconds)
loading group "scalar"... done (took 43.547637862 seconds)
loading group "sort"... done (took 3.324244151 seconds)
loading group "sparse"... done (took 12.724398496 seconds)
loading group "collection"... done (took 18.439229828 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.42249001 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.11365783 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.125528288 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.112138524 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.182641162 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.119044 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.126360828 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08232427 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.923249225 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.13439769 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113159584 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.423131039 seconds)
done (took 5.323287496 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167596892 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.08945399 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082086121 seconds)
  done (took 1.39446115 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.070241425 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062177972 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066059366 seconds)
  done (took 1.421670507 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064228137 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133261148 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064940793 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065127635 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065385334 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064966495 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064659486 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065018299 seconds)
  done (took 1.751217333 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070507143 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.06609806 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064421722 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.066052415 seconds)
  done (took 1.493838872 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063841404 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119805051 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06339763 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063115421 seconds)
  done (took 1.534247803 seconds)
done (took 9.058088225 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138036759 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.817373668 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.768168892 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.120666922 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.24682882 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.367547506 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122693042 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.181851223 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087514814 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073533377 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.120020051 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076269088 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.383430827 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.394786965 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069492591 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.174313933 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.649203913 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085322019 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133773287 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.453139172 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.07182753 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.086224711 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08274154 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.06976994 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.324994213 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.153184703 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.666353711 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.093775781 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066703249 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.092949097 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070311344 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076530439 seconds)
  done (took 10.578750381 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.091489614 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088600114 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066972819 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122293207 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094401845 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068354998 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073726517 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066171411 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.08718987 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.123014516 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090572815 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097445821 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.064693912 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.06761364 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.07259962 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195547362 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080045975 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079999801 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.065958565 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079848182 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104245008 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.077233565 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.077152871 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07661308 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130824288 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169148993 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.095665821 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096619451 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.065766626 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077683561 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113604203 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125908941 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066509454 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063822102 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118515768 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095384816 seconds)
  done (took 4.608126247 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.874019682 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094324431 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081217381 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072683101 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104792012 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.111882933 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121355543 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120578154 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098027293 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06723998 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152972017 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.666121841 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.155676996 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070440471 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118866125 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.354035386 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.055365158 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068779938 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066908128 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069682648 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068313195 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.110952054 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064603034 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173465777 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.583142932 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069581284 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067945472 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094817294 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064740444 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138294751 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.091519266 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068626613 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.540850867 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064361551 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062446301 seconds)
    (35/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.091544467 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.086766596 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093897672 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066026382 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066943987 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07761945 seconds)
    (41/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.083472042 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065038528 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107573517 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077689929 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.510549428 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068133095 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.577968251 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.223725872 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.071322634 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070023175 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.099609587 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062945626 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066205259 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.85891317 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.143328161 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065349532 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270752007 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068572768 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066805129 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.066963693 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.097138837 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068663756 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066806463 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071145746 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094498027 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.795618038 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088510813 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094647131 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067030597 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.404222473 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.07489421 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069097124 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067859009 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067279209 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.10428858 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064926154 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064844602 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.108768846 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093755174 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087229601 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068495804 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065783385 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064801885 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.358862933 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.15828873 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064990708 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065424961 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.474327855 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062124023 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064569801 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066342597 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.090139647 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.184840668 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063201168 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.06331718 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063750281 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098285961 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067500701 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.334877366 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065971506 seconds)
    (101/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.063271837 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.471158008 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067325388 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101559712 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118083842 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066377566 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099714723 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.067185261 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063589543 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072047589 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.06408709 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063160549 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06792829 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.06452821 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.0650672 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067711822 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066583317 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066022246 seconds)
  done (took 22.522247902 seconds)
done (took 39.811396498 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.311236808 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077582643 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077321968 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077499357 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078039505 seconds)
  done (took 1.895476014 seconds)
done (took 3.260703652 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.131275902 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073707406 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062851857 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.099216565 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.067371196 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.099899681 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.106591399 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.102754643 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.067055961 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.066886812 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.067010105 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.103286613 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.103322873 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.067164615 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.096396727 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.101993316 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.067273272 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.063089996 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.067236636 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.067033539 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.066943745 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062951553 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.06700534 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.066960322 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.097325342 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.067106001 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062738226 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09699466 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.067232863 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.096936258 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.067066557 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.06726934 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.067092359 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.098264436 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.067097735 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.097318395 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.062812431 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.067232474 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.067134124 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.067518404 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.06729666 seconds)
  done (took 4.548370821 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069564841 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080073861 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081808802 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060369442 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06998014 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08106577 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060339377 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080204865 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08976183 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081029507 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080751964 seconds)
  done (took 2.154151989 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068365213 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081491661 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082912181 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.178824385 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072043355 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081900949 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.0603772 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081865376 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084538957 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081846124 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082214386 seconds)
  done (took 2.257934968 seconds)
done (took 10.252734838 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095701343 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06410346 seconds)
  done (took 1.444722713 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.221518939 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.494286478 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.919898878 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.09094019 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070479606 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083577809 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.191862621 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065130909 seconds)
  done (took 7.609147265 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.100546986 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067684572 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065525384 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065932972 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.06794564 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066887367 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065848497 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066060171 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.067191567 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067534273 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066235508 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.067209133 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.06666507 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066554294 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.068176106 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067950188 seconds)
  done (took 2.503761496 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101583222 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067316133 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097441001 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060023877 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070056415 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060461991 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068650018 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.0708451 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068282694 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.069185109 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070460387 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.069251333 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069637841 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069548039 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071141989 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071572962 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071013381 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068668459 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071101786 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071517229 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070537713 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071146131 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071956949 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.069729285 seconds)
  done (took 3.13550998 seconds)
done (took 15.994955982 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.172613549 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073363937 seconds)
  done (took 1.540010712 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066080392 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066300826 seconds)
  done (took 1.442406916 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071151583 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058766883 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.07626722 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068481509 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059470666 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059340425 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.07535007 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059625336 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059613558 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059679295 seconds)
  done (took 1.956905295 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061237823 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.06682225 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064713071 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062721677 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065361713 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060656239 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.06341083 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.06087366 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067438945 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.060109142 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.063980128 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081097269 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063827089 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.082286238 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063549618 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064731409 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065816615 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06353382 seconds)
  done (took 2.495596531 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059360078 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060143816 seconds)
  done (took 1.437992014 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062769266 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059959297 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062309589 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062195741 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060336088 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.0597818 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060426239 seconds)
  done (took 1.740296558 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.417858364 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121487097 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.340117397 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.066762748 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074476421 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.252669556 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.061839695 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066645045 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066735431 seconds)
  done (took 2.82554776 seconds)
done (took 14.76229189 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080555127 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.178571268 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085436408 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.375311798 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.08929465 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065477158 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.111085227 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.177416474 seconds)
done (took 2.500729661 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.278909864 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.22335543 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.397094325 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.122460287 seconds)
  done (took 3.064578297 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.327723483 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077270248 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075935367 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064659734 seconds)
  done (took 1.879887958 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.062889245 seconds)
    (2/2) benchmarking "read"...
    done (took 0.06936276 seconds)
  done (took 1.460163707 seconds)
done (took 8.019067982 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069979487 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060111811 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.065353378 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062262262 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.091295721 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.061715163 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061391614 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061424547 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062179654 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.06009233 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.062374084 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.062442859 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06257434 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062065446 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062012228 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06230089 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061948684 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.060001686 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062150094 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061830478 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.059768154 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062898285 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061504758 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.06227882 seconds)
  done (took 2.877473449 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077815421 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.064113135 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064757702 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064648759 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065558284 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064921291 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064925952 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063874432 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.065091967 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063652102 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065376798 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065421901 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063349986 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065436481 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063432535 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065359492 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064885992 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064138921 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063595718 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065101671 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064898367 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063878336 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.066114924 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064940012 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065358015 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065606894 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.06363597 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.063887731 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065180456 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065547262 seconds)
  done (took 3.29906735 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064327536 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057985366 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.05833961 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068026252 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058293641 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058531631 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.05924295 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058177437 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058439468 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059621345 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058958715 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058466199 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059288142 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058099898 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058241483 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058987927 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063236108 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077499248 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058548524 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058362108 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062856862 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058340262 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058179359 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058056468 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058696559 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058127459 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058104259 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058893483 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058690809 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.058965738 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.05846848 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062617736 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.063414385 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058452767 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068585634 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063260114 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058300471 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.062582818 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059383072 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058088868 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058388663 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058147171 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058219981 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058215947 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068495953 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058534631 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059401338 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.058815451 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058676137 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058365968 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058454344 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060164326 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.066973768 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059573639 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.057803478 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059030809 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058255838 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059091843 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058339588 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.05798514 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.057924373 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062035238 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059634007 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.058916011 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.077895182 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059517007 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068461212 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058356302 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.058848442 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.061888505 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.058942447 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076008099 seconds)
  done (took 5.701931473 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.068985252 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069402284 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077404214 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068346485 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062772989 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059632899 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06310631 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0595954 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06872399 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063366884 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059850502 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063338646 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068947033 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063556532 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060562291 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068799767 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063379328 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062696141 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059545557 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063289266 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060709314 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062914253 seconds)
  done (took 2.776222477 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136834597 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064817961 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.102757734 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068108768 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06648108 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067702454 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064009625 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064286047 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064631022 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064797161 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064848075 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064425843 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066596474 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064751166 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064793059 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065116247 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064326117 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064786334 seconds)
  done (took 2.630610526 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074778901 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063895198 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.086778247 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064484529 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064070097 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063910765 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067605367 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068193655 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06384194 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064197395 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.06798178 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064046243 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063814832 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064227879 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06369166 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064223532 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063954736 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064281805 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068056943 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067687105 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067571976 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068099149 seconds)
  done (took 2.818738201 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075709737 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063005985 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080153085 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065853127 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05871531 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058486703 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064438291 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063124496 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064289676 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062973048 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063170202 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058967185 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.064737945 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063080079 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065200385 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063472344 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.062875489 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063255414 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062998373 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058943012 seconds)
  done (took 2.634247334 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069941506 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061247036 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060817865 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066059238 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060811339 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061564922 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066679973 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.061127233 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061168218 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.082251528 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061126845 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061199483 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066633253 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075487682 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06148832 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066243202 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066614992 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066670942 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061065171 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060874554 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.082849295 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061370421 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066335307 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061493604 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061210132 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.06160324 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061161 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064565327 seconds)
  done (took 3.171578404 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062578096 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061319876 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061918691 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061521211 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061512826 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061702305 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061790069 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061781162 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06170571 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062078823 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061604389 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061505628 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064289592 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061715617 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.062190037 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061789361 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061672898 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062052517 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061962795 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062153305 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061631112 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061459662 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061678807 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061992329 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062105979 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061691419 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061884802 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.061834681 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061665661 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.061822811 seconds)
  done (took 3.215527077 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071399529 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069545596 seconds)
  done (took 1.498403153 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.059940592 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075586646 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057803649 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070660522 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06646938 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062012341 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067164588 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066791355 seconds)
  done (took 1.87875975 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064948988 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088294077 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.06017783 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060663926 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063000205 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126336847 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.072410558 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071637916 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07367941 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062488644 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.06087507 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.07259248 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059852912 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073438635 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061415558 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.068979722 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067471297 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078308919 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.072916432 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058461648 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072895484 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061077125 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.058901475 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061359574 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060046256 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067301422 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.075817193 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072325518 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.06894926 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057992761 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078783732 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058669844 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06001883 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068292302 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.062748136 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.058947415 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.095808768 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059344929 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064189555 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058215878 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071173272 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080129435 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073475754 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077389261 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060591369 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.060816609 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058434392 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060977255 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.062861067 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068318699 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059197349 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066484732 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058385355 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060312929 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.069464084 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059470826 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064348155 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068449574 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07295996 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07033492 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.068013053 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.074615659 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.067947962 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.066396902 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.059766826 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.078759069 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.060724149 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.072687249 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074080502 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060228853 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072137244 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058568681 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058077495 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.058464861 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.092511122 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060807869 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060264471 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059096194 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.058899681 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06045066 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068904655 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064109459 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066855558 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062541097 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075144116 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068608876 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059222655 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065776849 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.077709772 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062875084 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059327651 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075655599 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063136063 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058847271 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076702286 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068796796 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060781915 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059807004 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062791388 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072419688 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060127556 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057607771 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067456864 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060442433 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061298153 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06363495 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067256032 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058794204 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.068937499 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063483858 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060115221 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057581334 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063190628 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059248163 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057486033 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068678926 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058543363 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072151643 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064549475 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072618617 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073269966 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068906685 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074364095 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058361867 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.056902095 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075877531 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067859495 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059289932 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075860252 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057521827 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071302704 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057411864 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.197652358 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070491538 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059463747 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062269738 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060433759 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065097992 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061374557 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061696735 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065469632 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068513081 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.07177419 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060422369 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068396967 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060008729 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075197699 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069773344 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063937492 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062730681 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060019272 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071501992 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.065840137 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.06863808 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058743792 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060129945 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059468554 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070179196 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069294732 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061127695 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.06631393 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063815271 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059800564 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059379185 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060789287 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.062941182 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062527307 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.059701581 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067325953 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068029858 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.072877561 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066152808 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068306906 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058396407 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058467748 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060789947 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.05865302 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063945435 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068472206 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074871762 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070942443 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.080197102 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059266907 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069104448 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060725937 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076512717 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072327624 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060276153 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063713531 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058278989 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060927244 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068629183 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070944726 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.073633268 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074370846 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064340127 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064075893 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059203244 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074331587 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059486324 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068128809 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068596343 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063430129 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.05953366 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.060580751 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068218364 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063759783 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059049599 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.075071142 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065203491 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058745003 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073602018 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059798797 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.070108584 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.059066281 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.063104862 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065061323 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061293352 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.069136793 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074731735 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058248298 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059755426 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075560024 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061119356 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060645673 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067540466 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074523565 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063958004 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067652379 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070034304 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069358271 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06386693 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.069360052 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059888698 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068741186 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061949469 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070914248 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059079692 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077011168 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058030463 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074110117 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059110708 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070337762 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059489546 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068824969 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059917477 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075831845 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.06074782 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059946403 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070711746 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057928718 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068255132 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058141569 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063959759 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065204272 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068218075 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059520386 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067667438 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059912929 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067234798 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06313308 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066727467 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067445436 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.062570805 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057696019 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066748431 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069222029 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066401145 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059245492 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059179224 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.20063107 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070360945 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061802488 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061933645 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068575803 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.065023656 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066152482 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061322151 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061446731 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061354906 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068526026 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069011927 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07721451 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067937174 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067267854 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069654517 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058871806 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074930593 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059600342 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069632581 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058147285 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.065314926 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068599935 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059208483 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078109254 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060782911 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067439257 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07128842 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067873203 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.062902426 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.077092016 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06211772 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.067902812 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067626003 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.063783969 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066463123 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061271337 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.067770521 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.068874843 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070473738 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060607281 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067095794 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068532034 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060974925 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.067083105 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.061156333 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.068078482 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.06095275 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058199961 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063405566 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070490817 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063635489 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064212205 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059494096 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.0581353 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059531686 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.066084165 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063693693 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068435135 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075048275 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058225174 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060021053 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058894698 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062987261 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077324336 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069092063 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067708034 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064146449 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058310638 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061013076 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061332883 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059763164 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.062438699 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.05822144 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058635873 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069805409 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.060759689 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063843676 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059255344 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.060118932 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068855463 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063810348 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059762369 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066032044 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058752592 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064409017 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058052972 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060404232 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063426167 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058046829 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062741168 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069488965 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075767754 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065735719 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067966018 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060559737 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067151835 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074392133 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066296929 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060134677 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068891043 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058213923 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077647327 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068891364 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068178513 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069076969 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060654855 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075976603 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063629846 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069426308 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074873652 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060246305 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065328616 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058584828 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074515634 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063863642 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058330722 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066793724 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066758843 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064660315 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070983105 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059432345 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067302886 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063688207 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062613465 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.060339165 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059700907 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067130342 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074190963 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.058982202 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.062243875 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.06591225 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066875442 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062773038 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070172722 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066503866 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059213275 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.060262794 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.061625652 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.058739758 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.069617162 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058446899 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.062565024 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.062597291 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.057505899 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.064729184 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074203279 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.067914137 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.06799411 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.057819108 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.057207511 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.075516307 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062176811 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.061410887 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.066506218 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.067886336 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070355979 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.067623419 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.07465521 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.058665152 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06411439 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070204506 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.058722414 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.057572042 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.061656799 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.059595262 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.066941798 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.067335351 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.065222585 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059330282 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.064538871 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.071382409 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.05896412 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.062430334 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.061915255 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.05825568 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.067502581 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.065233476 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.069092787 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.058294568 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.05637643 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.061073172 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.066388161 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.065740106 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.066398442 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.058580858 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.063336259 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.069734253 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.065002218 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060344751 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.05709214 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.05983091 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.066412103 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.060680445 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.056884887 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.061812242 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.061177629 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062277547 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.066701276 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.06243602 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.057128867 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.073932294 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.064906448 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.066588711 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.05891518 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.058545239 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.057686916 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.056283077 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.068806319 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.056791575 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.058244015 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.061689869 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.05855465 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.074527832 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.065359962 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07299957 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.058385905 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.061879332 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057131074 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.066906251 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.062564167 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.057459618 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.068066876 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.056721511 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072332192 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.069004035 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.061396322 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.057010385 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.062680918 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.065974077 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.072844728 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.067045125 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.066191894 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.060567865 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.06771112 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.058925298 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.068110562 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.057289705 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.056182825 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.067257606 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.0664639 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.069804455 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.056813151 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.067734404 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.059534002 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.066492203 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.065537807 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.059009712 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059056276 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.059270392 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.06655631 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.062504586 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.067470477 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.062406236 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.074682184 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.058628433 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.068558311 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.06701068 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.068470015 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071179891 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068975382 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.06587673 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.058620281 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.065173048 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.065578164 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.058821017 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.062779047 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.060689233 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077884476 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059072028 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.058753161 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070875479 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.062117147 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.05709369 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.062711046 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.320318058 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072200784 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062201709 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072565702 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065424736 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062065593 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067039086 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067305931 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061426107 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061988418 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062087441 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072309671 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067091267 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062343933 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081783921 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.06375573 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071027553 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073172028 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068667102 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062988169 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060136179 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.06210112 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075192035 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077368045 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064604708 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070564876 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063043246 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070874509 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060222033 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070098314 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069613893 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070197637 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060616975 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06084469 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076354096 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076858026 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065497973 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070512361 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070211784 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.061655148 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082904848 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070170479 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061872793 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072125554 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062429564 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059710696 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.059578219 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.061530633 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.071928175 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059830234 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062571943 seconds)
  done (took 40.801320687 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099241431 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06121958 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06015954 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059909335 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068009199 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060986398 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060025586 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061556046 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061148002 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062757612 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060026974 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062517563 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066198962 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072886257 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068403318 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063695235 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060059351 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060889015 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060338191 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061132295 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066422022 seconds)
  done (took 2.876116563 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.063231681 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.064134701 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064300357 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06432283 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063543841 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059961524 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064283734 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060386195 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06449767 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060817148 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064860703 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060390712 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060565826 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.060627249 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060613232 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06189345 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06454512 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063710432 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.060422864 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064301361 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061526656 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064224916 seconds)
  done (took 2.860911183 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.061328722 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.060202168 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069148805 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058956297 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058999889 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.063001508 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059294756 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064301647 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064137247 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064483382 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.06939216 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060541663 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059346456 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.06580275 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059547619 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060882342 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103895746 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061322576 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061494029 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060156572 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063234636 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069832999 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.059633703 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059906264 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064298981 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063473216 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059583456 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062543245 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060358902 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064565773 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060932285 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059521414 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.06944518 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068953291 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064345539 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.0643665 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061755797 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060951115 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060048909 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060113422 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069095959 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061313267 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.06038557 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061428181 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069164825 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.059892699 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059650849 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069331548 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059244217 seconds)
  done (took 4.600443164 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069800871 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.111984493 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.065250785 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.093372081 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.072128474 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.065386436 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065279323 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.094918671 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.060684489 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061275914 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.073514267 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.073572049 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062757265 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064306895 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065494787 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062648322 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063445584 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061726429 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065198449 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062096964 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065611992 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066634353 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.072678472 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073146112 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063536364 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061820012 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062820505 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064631716 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073036199 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066251012 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.06455325 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065269632 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073363076 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066345344 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062315576 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062505807 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.073741141 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062967961 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062624152 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060895367 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.06201895 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063424278 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067507415 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073530127 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062632161 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067199518 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062452123 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060483366 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072991174 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062255362 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.066189381 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073790197 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063765014 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063129208 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063860403 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073221402 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.06263709 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061458665 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062998219 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073265464 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.06075039 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063429573 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076050669 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062282457 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06606344 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073833275 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067431349 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063721641 seconds)
  done (took 6.226482057 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069040649 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.094866002 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075059001 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07534755 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070115435 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.070289337 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070292693 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070991914 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070101163 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073416208 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070370495 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.105203286 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066965078 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071808328 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.070223473 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070924214 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.070862995 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070492997 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070352727 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070145047 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070322079 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075771942 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070673268 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.075600994 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072682135 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066703327 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07016647 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.070293162 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075667157 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070118071 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.072361468 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070288194 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070077644 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.075514975 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.072752134 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069872266 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060930223 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070115159 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070144358 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070093097 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066598602 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075215724 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069845153 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066520537 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070003059 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069830751 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075222885 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.072523943 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072060464 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073771499 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.07050077 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075320108 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070155839 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070267851 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075558686 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077284816 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075201427 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075512796 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070171053 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07511615 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075267359 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.07773759 seconds)
  done (took 6.024306191 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072688038 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065733154 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.078602586 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059284224 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.05940604 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068649035 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059775115 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.05962876 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066527787 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.066533754 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068147739 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068753977 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071184605 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068110071 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069193074 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071500502 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069218141 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069423554 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066347064 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069364696 seconds)
  done (took 2.870384244 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.07466122 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.078241888 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.065719204 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06875787 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065360534 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068662646 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.064557278 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065454687 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065926001 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065629329 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069906207 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070104065 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065740381 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06902266 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070336658 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069127287 seconds)
  done (took 2.607166026 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062929282 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.067288827 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.066051683 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060676901 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.062940037 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059938188 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060895862 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059350719 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.062224981 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.0741166 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060709913 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.063367489 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060966166 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060249943 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060057449 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.063309107 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.062321583 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060564359 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060972056 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.064852408 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.06937207 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.061820479 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.063542199 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060394232 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063070259 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069175275 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062148616 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063282669 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060649763 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.06299138 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062640336 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.067327339 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063014058 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.061056018 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059585329 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060552705 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061041553 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.063128379 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.063307199 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060892333 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059297058 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065845443 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.061363993 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061347196 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.062058981 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.063199482 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061919766 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.066031585 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060778661 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062957708 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061022488 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062499751 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060804749 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067402482 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062458521 seconds)
  done (took 4.961988277 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076801353 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06493057 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059214228 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059100816 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.064958853 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.065167638 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064960969 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064782505 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065159319 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059264214 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065168311 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064392964 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065490742 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064697439 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06504396 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064905211 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.05947705 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064841227 seconds)
  done (took 2.683988742 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.066006921 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06497061 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064022314 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061528465 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061177968 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065746056 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059541928 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060850636 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061059554 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.061412644 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061314265 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.06098524 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060995683 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060938944 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065501349 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061665188 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060825019 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059704118 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.061438292 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059565935 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065865398 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059909719 seconds)
  done (took 2.882765257 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.087128848 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.083253704 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.126930596 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078893726 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.087497017 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070447936 seconds)
  done (took 2.052813739 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.092577171 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096563353 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064402358 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06433077 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069094833 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068048616 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067629077 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067721279 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071122191 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071504351 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067465557 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071467277 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071109142 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072789053 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069162554 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069267036 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068492332 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067739424 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064495804 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074752895 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067867121 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070633596 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067797417 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067524123 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067401073 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072770418 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071364357 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071092773 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0678762 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070863341 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068901337 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067535451 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071219684 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071569602 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064398056 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070907993 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06774792 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07503909 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068869231 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072571001 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064081053 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069269995 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070711913 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07078734 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070929099 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067642707 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070695882 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067531953 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067730264 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076229812 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069824506 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07304594 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069875316 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071159484 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07110032 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07640725 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071342682 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072864751 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069507761 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071372802 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072931134 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069932794 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072863765 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071421906 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069577203 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072849746 seconds)
  done (took 6.18744888 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102569276 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065050557 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067576087 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071035996 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072526768 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067922239 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067616277 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067874615 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068068249 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065234466 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103453598 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067891297 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072971408 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075799134 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068024861 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067701588 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068066011 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072873703 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065259407 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076236025 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067621999 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072496668 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072621912 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072519894 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070975283 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069436122 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067274575 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067473859 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067358126 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067386728 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070542688 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067632971 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072611334 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064357285 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072236618 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067722331 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06739731 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070731907 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067349879 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069292238 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072410683 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074956185 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067279388 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067335632 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071405323 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067400929 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067618873 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064727641 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067696284 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065072269 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071586548 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071484824 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0714695 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073050675 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068093269 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068120894 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067936777 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068014819 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067985069 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070066104 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072552089 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068011893 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076609613 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067922949 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068023183 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073151519 seconds)
  done (took 6.191684915 seconds)
done (took 127.660824784 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.217596529 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.188819213 seconds)
  done (took 1.913965683 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.073183362 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.164207869 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07322869 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.073291985 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106768946 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.106047109 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.074133529 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070602847 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073272651 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070718932 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.137669725 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074398752 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.071131907 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070634534 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070796967 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.070766183 seconds)
  done (took 2.908409046 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.10616122 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.18295235 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080521373 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.090045187 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.150367001 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075563977 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.07105421 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074840913 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075378992 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068777576 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106517512 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082235714 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073812543 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074824883 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070716481 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073670472 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074803323 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074892922 seconds)
  done (took 3.143325971 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101595412 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.090395749 seconds)
  done (took 1.734167687 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.158585854 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.104631782 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145221714 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.342845558 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.134203964 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138102838 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.143034683 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.140264544 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111281946 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.133556619 seconds)
  done (took 3.086243696 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103828963 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.103300008 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.30487603 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100769492 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080544806 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075404075 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073456682 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078228757 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073142783 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074517395 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120311657 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073633659 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071105786 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122381021 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.096666148 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104984038 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069565884 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076853798 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077944939 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069440567 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07407436 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078148625 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.175636252 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076585521 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.097556638 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07327539 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075379578 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072698732 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072679517 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076304013 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077217598 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.097281273 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076383978 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08085222 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074910418 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.09471379 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.06996002 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.096316566 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072347865 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070415233 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073031576 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077160537 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070151398 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076312568 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073238074 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075612969 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077862597 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.068929664 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.072832368 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.0720092 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070922337 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074555143 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073900109 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075307935 seconds)
  done (took 6.214984625 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.105503874 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106345248 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068543584 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11071838 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.103325027 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068542848 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.102548517 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.098655683 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.106320928 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068178574 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067266245 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067577534 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074601111 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.077848695 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.114765433 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.106445803 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069853796 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068341256 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.105611857 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.105466068 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067490188 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099893339 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.098147884 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104819217 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066754795 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068115955 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066694825 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.06712734 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072274516 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.073251564 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067177246 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073550309 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078634608 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073278415 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065846169 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066450784 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066419035 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07323991 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074075264 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074285496 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072673285 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066216914 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066823041 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06728712 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06769613 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066132623 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072359418 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073657959 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072420871 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066851577 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067165219 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066506652 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067447574 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073375905 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072487046 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074332339 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07394077 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066713776 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067180128 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068308614 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075270179 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075116199 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074212544 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068041766 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074849877 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066707275 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075588274 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07887238 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066806002 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067508289 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067457973 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067144426 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067844688 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072845097 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.073020372 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067572229 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067205319 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066835616 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074758545 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072488452 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066919757 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072752307 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066295307 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066854486 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067854033 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067469157 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.072408757 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.073750597 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067689963 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066909085 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066846962 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06695096 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.066141073 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.072312608 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073550397 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073840406 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.073115406 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06763474 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073266072 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073126271 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067420207 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.07278649 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066816856 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067352049 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067156451 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072730122 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072353164 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075113552 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066725394 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06659735 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072792966 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074383477 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066338394 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.071730774 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074056818 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.210629976 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067630023 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076548463 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067920166 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075054258 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067411635 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075779853 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067431952 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073136227 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067026013 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066242648 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067090236 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.07294577 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067683165 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066984146 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067385326 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067326002 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.07316381 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076378659 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067853472 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073267986 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073233211 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067794297 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073117787 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067475609 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073990574 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067355788 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067283327 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066637047 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075802817 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06712224 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066844167 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066807277 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075100886 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067235782 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075475245 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072510132 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066455365 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076585468 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074893067 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072345239 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075202019 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067501347 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066972992 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067288647 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069740413 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072733828 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073590991 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06750544 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067532239 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.072435537 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.075030171 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066488972 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072358204 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072569809 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072903827 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067210486 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067014677 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075865356 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074874874 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072868301 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072657656 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07341964 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067157617 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072326326 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072810221 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067006737 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078599532 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067179756 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077242958 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073369511 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072647819 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073284754 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074743794 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074798891 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075365453 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076736249 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066439827 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06679957 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072871643 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066861394 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066686539 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072989147 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067476023 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067287623 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077805094 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067667473 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075096426 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066583476 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073660573 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066314941 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067581785 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077532631 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067197098 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068167641 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072895763 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067287218 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072930108 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075357247 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072914575 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066919404 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06804843 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073951758 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074299059 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066979436 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066463726 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067490762 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07250448 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072153099 seconds)
  done (took 17.982899969 seconds)
done (took 38.530432268 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.166931503 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112821035 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207086573 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.195935176 seconds)
  done (took 2.321835679 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.098162705 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063909623 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.077828598 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087666214 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063740476 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.074032658 seconds)
  done (took 2.047021838 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.196708572 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.172665323 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240841156 seconds)
  done (took 2.184128484 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.364138695 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.146262214 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.213068968 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.497042641 seconds)
  done (took 2.898250644 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107835824 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097637682 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075397264 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.109398222 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082888 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060797197 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.13127892 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067938124 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097846766 seconds)
  done (took 2.472914104 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.136221082 seconds)
done (took 13.656253268 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.27130779 seconds)
    (2/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.251234376 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.235483787 seconds)
    (4/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.105673637 seconds)
    (5/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.219102873 seconds)
    (6/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.092957025 seconds)
    (7/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073217293 seconds)
    (8/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.186301221 seconds)
    (9/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.177450521 seconds)
    (10/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.423537902 seconds)
    (11/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072611323 seconds)
    (12/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.099282293 seconds)
    (13/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.189593439 seconds)
    (14/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.138728687 seconds)
    (15/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.111502032 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.118084222 seconds)
    (17/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.071964575 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074196572 seconds)
    (19/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073835054 seconds)
    (20/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.091571276 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.075736908 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.094868537 seconds)
    (23/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.09726019 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076094997 seconds)
    (25/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.153937739 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.124508407 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123119555 seconds)
    (28/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.086625156 seconds)
    (29/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.074235727 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072388493 seconds)
    (31/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.143789958 seconds)
    (32/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.072397173 seconds)
    (33/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.077223131 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.081115414 seconds)
    (35/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.090380547 seconds)
    (36/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.197955023 seconds)
    (37/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.090030961 seconds)
    (38/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.175359758 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.075083468 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074395205 seconds)
    (41/341) benchmarking ("sort", Float64, false)...
    done (took 0.135946142 seconds)
    (42/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073074028 seconds)
    (43/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.205563305 seconds)
    (44/341) benchmarking ("sort", BigInt, false)...
    done (took 0.267115979 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.093375883 seconds)
    (46/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.076571772 seconds)
    (47/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073230721 seconds)
    (48/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.171600168 seconds)
    (49/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.224292878 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.077093014 seconds)
    (51/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.072129185 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.086357721 seconds)
    (53/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079712872 seconds)
    (54/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.082719008 seconds)
    (55/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.067115051 seconds)
    (56/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.227021212 seconds)
    (57/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.071586934 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.080888044 seconds)
    (59/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.064087334 seconds)
    (60/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.064547604 seconds)
    (61/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.145431403 seconds)
    (62/341) benchmarking ("sort", Int8, false)...
    done (took 0.148223714 seconds)
    (63/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.127691047 seconds)
    (64/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.072520013 seconds)
    (65/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067571368 seconds)
    (66/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.206510518 seconds)
    (67/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.077882811 seconds)
    (68/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.074852718 seconds)
    (69/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067863038 seconds)
    (70/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.072588845 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084311403 seconds)
    (72/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.071219239 seconds)
    (73/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06462683 seconds)
    (74/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.194261041 seconds)
    (75/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.074601084 seconds)
    (76/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.192178149 seconds)
    (77/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.074708984 seconds)
    (78/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.064005935 seconds)
    (79/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.230931661 seconds)
    (80/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.221948928 seconds)
    (81/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065170573 seconds)
    (82/341) benchmarking ("sort", Float32, false)...
    done (took 0.134509733 seconds)
    (83/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.083356632 seconds)
    (84/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.223558038 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.078608132 seconds)
    (86/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066742248 seconds)
    (87/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.088027276 seconds)
    (88/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.164760934 seconds)
    (89/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.066472109 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073328055 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.083650496 seconds)
    (92/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.065034572 seconds)
    (93/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152698212 seconds)
    (94/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.139469922 seconds)
    (95/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.160581322 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.085723772 seconds)
    (97/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.146760396 seconds)
    (98/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.065113058 seconds)
    (99/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.076235798 seconds)
    (100/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.070907434 seconds)
    (101/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.06521577 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.086097104 seconds)
    (103/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.071811221 seconds)
    (104/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.140742528 seconds)
    (105/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.253291938 seconds)
    (106/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.071049415 seconds)
    (107/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.07797643 seconds)
    (108/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.07623749 seconds)
    (109/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073382407 seconds)
    (110/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.131222054 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132385037 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.086651334 seconds)
    (113/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.065111018 seconds)
    (114/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.080007798 seconds)
    (115/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.06402368 seconds)
    (116/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.178292876 seconds)
    (117/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071950907 seconds)
    (118/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.162502423 seconds)
    (119/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.071632325 seconds)
    (120/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.063447169 seconds)
    (121/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.171706066 seconds)
    (122/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071696242 seconds)
    (123/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093115241 seconds)
    (124/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065873469 seconds)
    (125/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.215081172 seconds)
    (126/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.064251988 seconds)
    (127/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.122905877 seconds)
    (128/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.064594198 seconds)
    (129/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.142404416 seconds)
    (130/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074183055 seconds)
    (131/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.066938059 seconds)
    (132/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.090576286 seconds)
    (133/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.082019967 seconds)
    (134/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.065959561 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.140801176 seconds)
    (136/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.161861995 seconds)
    (137/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.139727451 seconds)
    (138/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.064311656 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073488408 seconds)
    (140/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064249036 seconds)
    (141/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.186636036 seconds)
    (142/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.161901762 seconds)
    (143/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073108694 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084408304 seconds)
    (145/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.063691344 seconds)
    (146/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.065681991 seconds)
    (147/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.062877899 seconds)
    (148/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064660951 seconds)
    (149/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064224618 seconds)
    (150/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.08419144 seconds)
    (151/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071882303 seconds)
    (152/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.168609162 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073813107 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064286775 seconds)
    (155/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.177671441 seconds)
    (156/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.227487944 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.073667755 seconds)
    (158/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.065258371 seconds)
    (159/341) benchmarking ("sort", Bool, false)...
    done (took 0.142886963 seconds)
    (160/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.07655265 seconds)
    (161/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064493316 seconds)
    (162/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.063809654 seconds)
    (163/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065555403 seconds)
    (164/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064396153 seconds)
    (165/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.149183258 seconds)
    (166/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.063759327 seconds)
    (167/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.206305761 seconds)
    (168/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.064333549 seconds)
    (169/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.14123008 seconds)
    (170/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.062745405 seconds)
    (171/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.16921554 seconds)
    (172/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.064240932 seconds)
    (173/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071005561 seconds)
    (174/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073765643 seconds)
    (175/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.064360851 seconds)
    (176/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.160909994 seconds)
    (177/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.07112838 seconds)
    (178/341) benchmarking ("sort", Int64, false)...
    done (took 0.06536772 seconds)
    (179/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.071037908 seconds)
    (180/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.063392961 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.083829603 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.112549798 seconds)
    (183/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.067820752 seconds)
    (184/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.064581304 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.089143126 seconds)
    (186/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.070920702 seconds)
    (187/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.152148219 seconds)
    (188/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.195963285 seconds)
    (189/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.074071141 seconds)
    (190/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071192309 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063040087 seconds)
    (192/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.063598281 seconds)
    (193/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.135668819 seconds)
    (194/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072308694 seconds)
    (195/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.0635683 seconds)
    (196/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.128856047 seconds)
    (197/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.073429536 seconds)
    (198/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.06335249 seconds)
    (199/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.064031658 seconds)
    (200/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.06323442 seconds)
    (201/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.061719616 seconds)
    (202/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.081335764 seconds)
    (203/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.195535944 seconds)
    (204/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.196575687 seconds)
    (205/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.063259241 seconds)
    (206/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.148933989 seconds)
    (207/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072419797 seconds)
    (208/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.192199451 seconds)
    (209/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.062923157 seconds)
    (210/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.063776833 seconds)
    (211/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.188846735 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.139074166 seconds)
    (213/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.062852263 seconds)
    (214/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.145407108 seconds)
    (215/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.063794753 seconds)
    (216/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.064915212 seconds)
    (217/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.147935405 seconds)
    (218/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.064294369 seconds)
    (219/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067939837 seconds)
    (220/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.075569036 seconds)
    (221/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.078080773 seconds)
    (222/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.187527094 seconds)
    (223/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.079959604 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.062932034 seconds)
    (225/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.063439751 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.06324778 seconds)
    (227/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.16589674 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.083078416 seconds)
    (229/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.064836191 seconds)
    (230/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.061503807 seconds)
    (231/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.063241103 seconds)
    (232/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.063656518 seconds)
    (233/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.071270516 seconds)
    (234/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.065464985 seconds)
    (235/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.216856306 seconds)
    (236/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.06343228 seconds)
    (237/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.070135486 seconds)
    (238/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.069896796 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.141395364 seconds)
    (240/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.156965996 seconds)
    (241/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.088524512 seconds)
    (242/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.062967977 seconds)
    (243/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.063250852 seconds)
    (244/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.066224024 seconds)
    (245/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.142897853 seconds)
    (246/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.06272055 seconds)
    (247/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.062625564 seconds)
    (248/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.064584578 seconds)
    (249/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.064176346 seconds)
    (250/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.065726019 seconds)
    (251/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.061642959 seconds)
    (252/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.12803503 seconds)
    (253/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.063102414 seconds)
    (254/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.062551104 seconds)
    (255/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.063064969 seconds)
    (256/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.06130051 seconds)
    (257/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.065646987 seconds)
    (258/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.073835099 seconds)
    (259/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.072409313 seconds)
    (260/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.065812878 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.062630633 seconds)
    (262/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070022382 seconds)
    (263/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.063159024 seconds)
    (264/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07101735 seconds)
    (265/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.065391244 seconds)
    (266/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070163828 seconds)
    (267/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.06640874 seconds)
    (268/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.062903139 seconds)
    (269/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.063694523 seconds)
    (270/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.065207711 seconds)
    (271/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.062603506 seconds)
    (272/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.061268646 seconds)
    (273/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.148602913 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.149774818 seconds)
    (275/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.084526941 seconds)
    (276/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.061120601 seconds)
    (277/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.213059786 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.086735759 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.085896285 seconds)
    (280/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.063920656 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.062354476 seconds)
    (282/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.121573677 seconds)
    (283/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.061349775 seconds)
    (284/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.063297365 seconds)
    (285/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.065084315 seconds)
    (286/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.062464249 seconds)
    (287/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.087226254 seconds)
    (288/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.082902258 seconds)
    (289/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.06123661 seconds)
    (290/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.070474152 seconds)
    (291/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.062847593 seconds)
    (292/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.07358603 seconds)
    (293/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.068868661 seconds)
    (294/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.062037009 seconds)
    (295/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.063051599 seconds)
    (296/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.062678103 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.145125072 seconds)
    (298/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.190182785 seconds)
    (299/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.06339365 seconds)
    (300/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.062381347 seconds)
    (301/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.062726876 seconds)
    (302/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.062355163 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.143754139 seconds)
    (304/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.063270899 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.142917985 seconds)
    (306/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.063724328 seconds)
    (307/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.166180016 seconds)
    (308/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.065210615 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.062744706 seconds)
    (310/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.063673481 seconds)
    (311/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.069886295 seconds)
    (312/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.081724036 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.108582823 seconds)
    (314/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.06291309 seconds)
    (315/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.063696403 seconds)
    (316/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.066243341 seconds)
    (317/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.062691713 seconds)
    (318/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.06631894 seconds)
    (319/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.452706452 seconds)
    (320/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.068673435 seconds)
    (321/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067425035 seconds)
    (322/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.155995853 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079186815 seconds)
    (324/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066957807 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089463637 seconds)
    (326/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070922692 seconds)
    (327/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.069969832 seconds)
    (328/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.069712765 seconds)
    (329/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072771038 seconds)
    (330/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.068718166 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.067609437 seconds)
    (332/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.075322589 seconds)
    (333/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.07058287 seconds)
    (334/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.071646329 seconds)
    (335/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.069068722 seconds)
    (336/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.067670716 seconds)
    (337/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067933005 seconds)
    (338/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067470425 seconds)
    (339/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.066946347 seconds)
    (340/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.156809946 seconds)
    (341/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.070287932 seconds)
  done (took 36.263491322 seconds)
done (took 37.861667403 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.09408932 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079368433 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078356786 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075214812 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078290853 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076767447 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077995038 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076224383 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077341871 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077401541 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.07685341 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064693101 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073476708 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080565565 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074260769 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081222228 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077643628 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.080513647 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065738703 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079594345 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.09269693 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.07726676 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074160114 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078833457 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065214755 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073992789 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.088148509 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086249338 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071482518 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073854519 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072093448 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.08314698 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072446599 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070400421 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074023012 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070216312 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073671786 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071081404 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.087354114 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.070060837 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064666355 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076283776 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071985753 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072021122 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073159085 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076074246 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069413456 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077794319 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064015418 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075632836 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.087526412 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068951691 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070985639 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072696425 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069383401 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073651475 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.071049723 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075932003 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069462739 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075888657 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.075810509 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073073185 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064279697 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073273889 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071543994 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.0719107 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062906845 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06946395 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064499668 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06446133 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063143406 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073272143 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07107424 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068919623 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063298649 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063599609 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063108477 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075868329 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070599321 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074234498 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064600759 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069538769 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069277511 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064230245 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069132831 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075870933 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063216951 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064670466 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063467936 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078632045 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070596951 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063952089 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.075279026 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068750797 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069316566 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.063982328 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.06296708 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068729598 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072127117 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.063812001 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.062782332 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069384824 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.068791665 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.073040612 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.064249297 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068682145 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068790288 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062343971 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.072783581 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070910154 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.072591597 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.07719501 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07293669 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.076141227 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.064513862 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063201609 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073539148 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063885707 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068711056 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071601515 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069261374 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071952668 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064012209 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063085544 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068629709 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.070114763 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.064060336 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.064595069 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064313549 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.073578519 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07118829 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062419856 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063931699 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073010474 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072776393 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.063146894 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.063077561 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073050245 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.064338964 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069591655 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.069510462 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072437235 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063106474 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063736767 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062565553 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.063350648 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062944379 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.069235026 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068560035 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06451521 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072904883 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.220217349 seconds)
done (took 12.720311565 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.065388455 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.10600317 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077831107 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080129435 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076993493 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065093527 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068174836 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083037993 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.0677244 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088634692 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089314962 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.086037996 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.095095672 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063198596 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064639267 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065160316 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062908065 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076263745 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.08098274 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.08772114 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.100068627 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063990425 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080369616 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083780332 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.078585018 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082931405 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065982968 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065252837 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067372978 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.083060345 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090235875 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064074518 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065351643 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.082130784 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080042436 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073248284 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065642819 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070976888 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068230785 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064485238 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066709412 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081989625 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070571318 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.0711683 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065759632 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065767595 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064902322 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072040647 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082756065 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070529207 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076259791 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082924714 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066345338 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064628157 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063298299 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072000533 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065608204 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065649817 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065641165 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064603595 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065070674 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067304462 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069974704 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070848817 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068163648 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.071262365 seconds)
  done (took 6.566850855 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.080472644 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.09048105 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078842109 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.079329955 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064072779 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064586387 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064677445 seconds)
  done (took 2.282850443 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.065279409 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.072757644 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.077023369 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076851542 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.085927083 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.074346062 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065056204 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.096560777 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064291662 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072982898 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.080610763 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.077785517 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068205575 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077067262 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065330223 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.076806544 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065718856 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071522877 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072260989 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.078111203 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069311063 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094858837 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.07856886 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066035495 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.078258732 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.072116981 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067305432 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065889591 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065922753 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064879295 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064616755 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.08703511 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.071032379 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.077117982 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065207995 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064238372 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.069126775 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065610496 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068962326 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073517998 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.068488913 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.064688489 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.065103308 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064690166 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065795028 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068955462 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065506275 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065004031 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064644674 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.071864403 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.063864366 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.071216376 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.066925244 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069630812 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.069317606 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069495097 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071908823 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065252677 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071874446 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.071055554 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064489391 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.077025856 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076182012 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.068098347 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076327126 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.072988723 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.070909663 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.068305315 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.064432383 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063682594 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064690689 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076310773 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067721585 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066887994 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065496955 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.069452949 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.068734199 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.079583985 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079495028 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.077669872 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.067360452 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064508952 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.068330252 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.079754916 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069453187 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064459403 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065652066 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064069535 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069675347 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064772442 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069505722 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064729131 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.071368404 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.06738588 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066779917 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072544923 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064640893 seconds)
  done (took 8.586741326 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.067331073 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066619579 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065406058 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065745286 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065802154 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065487955 seconds)
  done (took 2.192370272 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.088140301 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065046414 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076399529 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065397336 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.08683881 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.071554863 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071576945 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066882493 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081586808 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075579945 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.071424366 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.074269364 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073932088 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067091369 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.0716373 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066193207 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.071350835 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068101067 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.07559537 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067332631 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081229464 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066767903 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067485718 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.07690613 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068067446 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066374929 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066147732 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.075179539 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074900942 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.06709671 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066469024 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067819539 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.073717145 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.06662463 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.071238174 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.073276572 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065191853 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070550359 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067335514 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067824279 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.073720773 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06690415 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.067185278 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070688075 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066774244 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073392922 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070416936 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068391206 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.07141012 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.0700299 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070588343 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065482363 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067949032 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070595199 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073935973 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066772256 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070463613 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070880557 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.066463473 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073349327 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.064859144 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.067982418 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067028011 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.0677773 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.069681775 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070530454 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.07373069 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067369665 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066915003 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.064614751 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071322845 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.064826453 seconds)
  done (took 6.826877579 seconds)
done (took 28.196169068 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.536356996 seconds)
  done (took 2.276058555 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.606428374 seconds)
  done (took 2.384390528 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.147428988 seconds)
  done (took 9.924999203 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.331096698 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.394456175 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.730703239 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.130165169 seconds)
  done (took 3.399731654 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.749371601 seconds)
  done (took 2.539235884 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.226346023 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.217935249 seconds)
  done (took 2.237461282 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.331930625 seconds)
  done (took 2.111936023 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.130513493 seconds)
  done (took 2.910062795 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.228507635 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159264156 seconds)
  done (took 2.177633507 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.532053749 seconds)
  done (took 2.315021219 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.253545988 seconds)
  done (took 6.043756591 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.22861607 seconds)
  done (took 2.056503201 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.225671878 seconds)
  done (took 2.019145119 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.010701257 seconds)
  done (took 3.796879691 seconds)
done (took 47.978837998 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.082313725 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084268332 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083885847 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079106498 seconds)
  done (took 2.090755206 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071936091 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.067689087 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.07139425 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071433445 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069039473 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070219798 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.07086824 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067696238 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069397507 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.067951373 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066514464 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068026307 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070577281 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.06807075 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070735006 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071467554 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068250271 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.067741407 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070490437 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.06771432 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070705185 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068053455 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066226673 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067768742 seconds)
  done (took 3.446117884 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.076022668 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.06974815 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07303253 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069101031 seconds)
  done (took 2.082630892 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.074242412 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074234761 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083105347 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087655989 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073940877 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074598495 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081236192 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081993728 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063529277 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.085006407 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065986709 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064928499 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064675338 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08338886 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080566497 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060379255 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061553537 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074935696 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074686689 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076733054 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066217493 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063555329 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074172451 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075072097 seconds)
  done (took 3.560442363 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079859628 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063229158 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078932984 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088875437 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089673772 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063438775 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076719458 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090607403 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125291329 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063240133 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.07010451 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063248769 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102216752 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063304852 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078354154 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106406687 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109863981 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.068085749 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.097186851 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.06325128 seconds)
  done (took 3.445621907 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073784193 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067350306 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068008468 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06397025 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074433371 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070944071 seconds)
  done (took 2.224815502 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066130245 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06594278 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067734161 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070121331 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065624281 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066105477 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065075577 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.063895659 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.06390083 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064551748 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.06572335 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.064783922 seconds)
  done (took 2.588226028 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.150276104 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067114473 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067744167 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064150608 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065476367 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064280291 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078775675 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066330338 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082069791 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.06484366 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065224896 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068116531 seconds)
  done (took 2.705550285 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102213114 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108734202 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142616381 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114098796 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113729372 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093926679 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123170748 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.093109544 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.157173599 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.13457191 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11481447 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091303186 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084629815 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.06741128 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097665688 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115473001 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134610729 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071804391 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11148242 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.162045128 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129467175 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.132198386 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14574808 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114497021 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087989118 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145583753 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095384666 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100030078 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121969369 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123540934 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11629291 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.095801207 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.07029416 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.068544277 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146101252 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100248455 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118024952 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090453858 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102916565 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086234542 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104912234 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067594396 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.084313955 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110660348 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083493779 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128286808 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085740151 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112595575 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079194112 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134850824 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120953884 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096921181 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0833694 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102234229 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.289629147 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110246053 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132550382 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104884857 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080933547 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116390002 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.099720041 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098366008 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105473665 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078096113 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.174559485 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086570841 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109455247 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109331595 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.092038384 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092773063 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104758006 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132980167 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122818235 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.123873026 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135613266 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09343224 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119830587 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097495189 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.127021272 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10281022 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070969365 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.118748566 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126894792 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096646493 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098648662 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127719428 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089826892 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075443368 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096906023 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.116569782 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07838411 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.11020714 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078799325 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.10653872 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130883983 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094630671 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110088302 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114489398 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075784593 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151665336 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106717886 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070980943 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11489693 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111867115 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155066242 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093908325 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074454302 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.254915042 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101888842 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.145832758 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10533222 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078195218 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108131519 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137125627 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092768303 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166607438 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093741463 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138122843 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109960378 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085374301 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073465255 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087848534 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109927762 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105010166 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109990723 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087753074 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081924343 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085406827 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110241396 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0903635 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078749052 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110960216 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.10001724 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073175151 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086767398 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077523181 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139806208 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076267294 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1355409 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122926927 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077038932 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103838473 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0956551 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105806545 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.09562418 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114743128 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13830712 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.114122659 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087882211 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091221013 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106546659 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.142090864 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125154723 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090493375 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074648208 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09821164 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109786757 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095782793 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123379518 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098241301 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106332755 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100742712 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139301672 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143062418 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099244235 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099242324 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104927407 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.280406599 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074894058 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152975072 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101835125 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115711656 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083026698 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138530948 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111933287 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08768891 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085100495 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098440952 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101563104 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103763481 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141575185 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094491002 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070568153 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090896923 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14148573 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074321119 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107507449 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088414198 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091310604 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116541934 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090822697 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079703169 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.066823639 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12544491 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.155892187 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068018155 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112292655 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.10896689 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101065606 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.118775385 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067479922 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116485878 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135878427 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115682884 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138504426 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144868734 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114121297 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116498719 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111496214 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103401083 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077750331 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123608891 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13262891 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094550803 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090630804 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132876717 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115746775 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.133299497 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.11477468 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112758787 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102862802 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.263614063 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100415255 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099014173 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141900756 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118159861 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121645496 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083485835 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103830872 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115680859 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132585395 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079856647 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139586384 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081928452 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115396866 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075410084 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1213541 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078028219 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108946231 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078142038 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097671775 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067690195 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.07192873 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138226881 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.109819595 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103909311 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097759058 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.135426973 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134001377 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079290107 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10627122 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113489212 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099003704 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11385678 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107533013 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086644372 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093123181 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106830563 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083575795 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079632519 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112469579 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092606717 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12469053 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082174876 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072975314 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138611416 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102673941 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09340671 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076047235 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105790857 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119277175 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090827564 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085730827 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112552899 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102515796 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13937855 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088666415 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095728683 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122172077 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078801316 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090492631 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067690524 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084012954 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.232579358 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.125496488 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074484579 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113647706 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067518377 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127619845 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084589083 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090780663 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099818907 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108814705 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124781587 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092706801 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137673799 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087611946 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115319464 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105708715 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092066752 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086201194 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10191894 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098554441 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.120170403 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.094259296 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120450403 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141273357 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103004814 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139730563 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089552818 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119456971 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104977365 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122138969 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110046295 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145113587 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135967445 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110773068 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110458475 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073196361 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093262246 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104015866 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110199057 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173067608 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124038684 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070077275 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103981035 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09172348 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106383765 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102533241 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080759186 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144376625 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099731652 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.08588626 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111231474 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089217789 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102518337 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074639323 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093733079 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.254843798 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092976838 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096286573 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113294681 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125057611 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11110283 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140128988 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.096796495 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.090601279 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.116426992 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108373883 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108533996 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084103819 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084653208 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136004051 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116082326 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125796439 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.097577897 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107097315 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109062732 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098280182 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122757336 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1058699 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.124937539 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078341286 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074159518 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066712336 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070367854 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120983918 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106281279 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109715805 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096680509 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070701732 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101652391 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103867999 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070199413 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087010322 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092326981 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097116951 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089584119 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10456023 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111779862 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089194358 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10245435 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097683625 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14419486 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.098302572 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087064028 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141830808 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147885725 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086849814 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090823972 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069764211 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077128773 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111334931 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147230221 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149827065 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.075844019 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084591717 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.084161182 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084829236 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.227386315 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.084217343 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087677708 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102374962 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096816253 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110431892 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102125062 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073811386 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101169489 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097243123 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090172561 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.10159338 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116217423 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122317318 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.138414186 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107996861 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105236604 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0747417 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.078383886 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074215833 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077345713 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099695671 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.077364262 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074651173 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139803052 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089968674 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102118456 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106687897 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086833645 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073808985 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131699956 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067134677 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132346726 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069345825 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080564992 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081050404 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077574629 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091825206 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13720165 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107671847 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110804526 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103985331 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102573236 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138459116 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154049686 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078475515 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140440428 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074200973 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07370479 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073856411 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111575199 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087657323 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112491949 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137818347 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089502327 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101770268 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075448309 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141449228 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.097009815 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102155024 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084953347 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077026287 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.300101904 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078181471 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078867782 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08860818 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109421591 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.070864128 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102124744 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082775 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077671414 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139668653 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.628361061 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087966228 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07330687 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094017714 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.139109692 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125269937 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092865253 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106505519 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116266508 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097865921 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093038428 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105390907 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.179685906 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072443385 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09267842 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101350588 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095724662 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100000608 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096123094 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.083166076 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090300559 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084914787 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077887444 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105971892 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08737834 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094734957 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105586854 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080884427 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084862518 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128434876 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101537557 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080249241 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086998614 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103390441 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087224585 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099705693 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067329124 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111220073 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088623507 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114771515 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092953933 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105281147 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124398212 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087755142 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1351951 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.104617222 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120917861 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085426188 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076003664 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123325082 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.086288823 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075900516 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.3028031 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092944035 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091539118 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101961343 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094494999 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111509336 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115240669 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109424664 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095674322 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07736233 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09798176 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.10001797 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083019139 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076628257 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072634241 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074356468 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104957744 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083170652 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081372475 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112270565 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086769254 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100684121 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.098342087 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120641792 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081212343 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099124071 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107170927 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091013621 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108228188 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098517713 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125912383 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172674214 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123093247 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127175652 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131883591 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074803644 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073778594 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.06677264 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113114257 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077230386 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087154748 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079284848 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131547864 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.080247618 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109626692 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.228905858 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078938947 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092171916 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094757329 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.067879618 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081442655 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105749245 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085107838 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078074375 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117216716 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081314498 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125725995 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108974429 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097385805 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093064588 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079258896 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111770147 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103067133 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126875268 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09300196 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.233121478 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112218506 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101332102 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135202176 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071184215 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07886348 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126441953 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101005833 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130018327 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078059146 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146367066 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140309228 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097890414 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131882387 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069453799 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081541501 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086946149 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12323695 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082684415 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108730163 seconds)
  done (took 66.748321095 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.147737188 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141760011 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080301169 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.10208706 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185304264 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195181235 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.118011886 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094538778 seconds)
  done (took 3.021260855 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.066187013 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081133535 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.078725933 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.203096266 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.093716648 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065211584 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.070788585 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.079269509 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065393881 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065205128 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099876589 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065369634 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065581714 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.365170158 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064577595 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.070112496 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.06527318 seconds)
  done (took 3.597118405 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.329611854 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.386940119 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.228319418 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.591570088 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.135777557 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.483053312 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074693717 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.080593605 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.564435731 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368599467 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.128830296 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.0859885 seconds)
  done (took 18.404992082 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.074592694 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.076725332 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.076484596 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072802156 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072687772 seconds)
  done (took 2.310921638 seconds)
done (took 118.036122162 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081564897 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.168609848 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.065815281 seconds)
  done (took 2.210562508 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.080039886 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.079073772 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.078821481 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076463773 seconds)
  done (took 2.267300088 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.072809498 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074519585 seconds)
  done (took 2.091108725 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.218155042 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.174377881 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.087683675 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.079915413 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077238397 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.077801091 seconds)
  done (took 2.190705247 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.069535887 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069579483 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069252568 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.070437445 seconds)
  done (took 2.219682302 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.065765029 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064464547 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.06657462 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069325142 seconds)
  done (took 2.20888988 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082787057 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083747352 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114109845 seconds)
  done (took 2.223884662 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.081226136 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.080620935 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076110908 seconds)
  done (took 2.187364031 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.10617583 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094956081 seconds)
  done (took 2.145166494 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.077923717 seconds)
  done (took 2.026936333 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.087577729 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095683201 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.136852936 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.104491561 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.137144982 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.123355062 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074975573 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.07589345 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.07145731 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071023238 seconds)
  done (took 2.923500202 seconds)
done (took 27.196576765 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076494736 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.368779977 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.357954458 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084634907 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.669561245 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354271722 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.998514226 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089055412 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.09862738 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066310503 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082939308 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.646779458 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.99200623 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.323572615 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.976797637 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.322585319 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.649405455 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066558047 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065710412 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.0662259 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.982024476 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065873463 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06661427 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066610442 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.648698507 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.372252278 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067266211 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.323111783 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066158733 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069900947 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.354742855 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067078405 seconds)
  done (took 16.427378543 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.067968264 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.119956127 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070156539 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082205356 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068208309 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067725845 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069196517 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066780909 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110117142 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066606384 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083786537 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065595977 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.06991164 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067066604 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.085618942 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.065972456 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068599247 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069634188 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066196449 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066702426 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084495075 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.0660605 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066999932 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067016644 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066890773 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079629474 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067376831 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06606971 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066754481 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070475534 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.070648494 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067307007 seconds)
  done (took 4.300830093 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.11894577 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123769873 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071324049 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106502795 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.11620257 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067927269 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.148924618 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089401672 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113841226 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066969213 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083492399 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.0664563 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102243942 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067670708 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086322681 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066407883 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.06859683 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066764214 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066143195 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066860238 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085159706 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066315675 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066844229 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067256576 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066984084 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081164179 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067211972 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066294594 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06653127 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070137276 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071808355 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067925887 seconds)
  done (took 4.572133615 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.067733118 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.06985043 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.07562492 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078835161 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064614912 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067053751 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067760434 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064741081 seconds)
  done (took 2.52237666 seconds)
done (took 29.784161155 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.077310338 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065951226 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068913299 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085536918 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072096554 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.068358237 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063010003 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072585813 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069342548 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069542678 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071386759 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06547348 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.06796122 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062637635 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069854742 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064134226 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.070283745 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.067892325 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.069155266 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.06978519 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066247581 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069336599 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072300983 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.068253092 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.069105892 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.068968335 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.072977659 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070039681 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064586301 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067059069 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.066315964 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.078795399 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.071238736 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070503291 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.063932949 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064004134 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068584607 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066544732 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070512357 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07338395 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066588733 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073602368 seconds)
  done (took 4.843034021 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.086275127 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091946182 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084254301 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079921156 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.105037369 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079448496 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088673896 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077084725 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075486235 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.088430628 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071519294 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077216062 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078760995 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.073268045 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.07612942 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072365726 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078089556 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071411792 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.07588029 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076457231 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.088814641 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069258766 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.076704136 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077204168 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071602669 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077356264 seconds)
  done (took 4.0438633 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070966466 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086600402 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.0903268 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.139296105 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.107337116 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.080457323 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080425859 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091556481 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.09878263 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.065959273 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.069929972 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.09150612 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095124065 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.072885048 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.103790791 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084243205 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078371663 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067590927 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073360368 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100811045 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088653201 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084691267 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098940574 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.085747038 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065535778 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075384011 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07354997 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082547765 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073435807 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078676912 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070750795 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069668337 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066892881 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078438327 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073095799 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.063916737 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088092717 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079214837 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.080476125 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.104254786 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.0762096 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068165608 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096495308 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132080039 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.065767733 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068301816 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070070385 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079212494 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067650326 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095897436 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084585095 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.065876133 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.084937686 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067867129 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067453528 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082249023 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.067738382 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068127705 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078596181 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.071910948 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.127805546 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071524993 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087266944 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.065650382 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077311924 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067454542 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067075784 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.064760166 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101784422 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.072800493 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117638073 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.066691575 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.063772241 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.077936381 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077360318 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072089102 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065274541 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085658211 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077975407 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069307322 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077586779 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068876114 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.068642183 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101393695 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.064865037 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.063748954 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064205671 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068107056 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069289394 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066461991 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.078785282 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065136944 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.069113999 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081240332 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.065556383 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066364674 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068102463 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.066848626 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.065279557 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.076327977 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.069351905 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067400614 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078452713 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.066965066 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069518664 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.080556372 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075423038 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.064924323 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.066390802 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.068057648 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.067606217 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070030973 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069301689 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.067844282 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072830447 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.073094947 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071526256 seconds)
  done (took 11.060700006 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.160512031 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.150852769 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.066965839 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.145342454 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.073996408 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.070605219 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.146903082 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.085787874 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066486216 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.06742245 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066129854 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.094463816 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.089831815 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.100694658 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.070850355 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.06665787 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.091383255 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.099723197 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.150244284 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.144518899 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.089706205 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074302101 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.068828781 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068141119 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.067983747 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.074951234 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082487748 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.074585311 seconds)
  done (took 4.621865121 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.072933327 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.081524888 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070721284 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090557989 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084224999 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066628156 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068000283 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067807121 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083404517 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.073544284 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066520842 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071197082 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070068331 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067106773 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067401338 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072797403 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073087983 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065280545 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.069996934 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.070891304 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.076750807 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.092181366 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071145798 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.066709171 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069007884 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066571308 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073924678 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076118289 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.06614343 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.096364675 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063378849 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070485145 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.080381207 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067363584 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066198364 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.06710482 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066532227 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066116325 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.066744317 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06442063 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064457351 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071651916 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.064833208 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072112711 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.080225052 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.073957515 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.067730665 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.07237517 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.06917572 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063189945 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.069612628 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.069950162 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.0689545 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075211173 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.069717781 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.068966903 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.067577804 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096529868 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072533654 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.065815752 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.065989554 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.064594382 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.067678085 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074841185 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.082662271 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068113511 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064688982 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.066390699 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.071149863 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080420695 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.065850876 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.071524031 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063130675 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067201204 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.068698482 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069384015 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.067845912 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.064939309 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.065691794 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.066586049 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.066591621 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.065990685 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066162142 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.068395279 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064129468 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.064680372 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.066809631 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.067376082 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072251692 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.064834794 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069112353 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.067898964 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065348089 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.068971811 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.071859315 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.06905233 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.085914746 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.074510608 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.066884123 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064263167 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.080720859 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.067941344 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.06561898 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071266469 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.070702324 seconds)
  done (took 9.426000345 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.089201583 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067350687 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086197993 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.092269321 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076000627 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071066631 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080405323 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067292079 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.082630899 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.06523066 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075101161 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064942509 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079449954 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075125827 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.06788122 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076279108 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068931907 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.086439713 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081154789 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064680251 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075198536 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.07846888 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078847515 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084632888 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.083937947 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.08497811 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078703132 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068654746 seconds)
  done (took 4.176133575 seconds)
done (took 40.128196651 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.048659785 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.211191015 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.039941256 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.295062342 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.293262074 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.069680847 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.230603098 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.035330077 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.200475569 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.09029206 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.365067959 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.386429493 seconds)
done (took 69.305921369 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.105414507 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.192152816 seconds)
    (2/2) benchmarking "String"...
    done (took 2.266984242 seconds)
  done (took 6.433634013 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.639194715 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.040008238 seconds)
    (3/3) benchmarking "different"...
    done (took 2.086833132 seconds)
  done (took 8.739678265 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.155240031 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.755362476 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.296506055 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.038614475 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.044910801 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.430984424 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.833420488 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.515408688 seconds)
  done (took 33.891244896 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.372469734 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.304563022 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.786178552 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.823983754 seconds)
  done (took 17.310562582 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.643026947 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.301165049 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.30213248 seconds)
    (4/4) benchmarking "different"...
    done (took 2.293220369 seconds)
  done (took 11.574125397 seconds)
done (took 90.284663803 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.040011114 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.436404583 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.049256923 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.196158582 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.11427542 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.074874246 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.049419801 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.085515091 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.041287769 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.041696447 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.468683168 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.04426924 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.038080342 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.077813305 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.043863538 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.064169956 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.437831968 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.058001832 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.104973688 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.57774612 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.552274706 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.055145027 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.056025186 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.100593541 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.147427294 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.086286812 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.608094311 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.050490686 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.659635833 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.057202754 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.043178026 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.038657372 seconds)
  done (took 213.47597052 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.041217362 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.128822449 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.209133326 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.070810378 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.524271871 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.239845529 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.178673 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.58916246 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.047125293 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.073789508 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.355926013 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.042875588 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.382313518 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.977571507 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.03726522 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.087216117 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.313661675 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.355199637 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.039151496 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.230450963 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.052376051 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.208700345 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.169454273 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.309684837 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.079858736 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.114837711 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.0747994 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.219570964 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.230989985 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.293796688 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.059895308 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.082445569 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.259642853 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.912551776 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.060084556 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.066073704 seconds)
  done (took 181.097360146 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.225229333 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.059674439 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.104436884 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.178110097 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.81164477 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.774997294 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.045060479 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.042219258 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.042207741 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.048938874 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.046059771 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.111851071 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.329423718 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.058440956 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.043913564 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.043745954 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.471199163 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.046621959 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.042786621 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.042531109 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.107527509 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.417660921 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.178559908 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.046261458 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.05390322 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.179300177 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.053845611 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.045253751 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.1784245 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.046781536 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.121181582 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.179957893 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.053472114 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.125519724 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.050995137 seconds)
    (35/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.043755589 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.553976909 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.045439969 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.04319779 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.045770608 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.105773572 seconds)
    (41/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.044302926 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.043780126 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.147981065 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.135958732 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.044239411 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.055112811 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.12499513 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.733538263 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.047556293 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.044838517 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.044807823 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.04520925 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.044889693 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.172973664 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.047991429 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.069622016 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.693896048 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.050006103 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.044603734 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.047191966 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.044287864 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.04588737 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.05233309 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.082096197 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.862778016 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.328690653 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.435164505 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.848409024 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.047700358 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.412442732 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.103762815 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.047978424 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.12391791 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.045386761 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.042402445 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.045833716 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.045471908 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.18096934 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.166896682 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.046853482 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.181366395 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.050290491 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.04549219 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.210124108 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.608509423 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.050928214 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.059401873 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.10254195 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.046821946 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.045965229 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.053827651 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.171347101 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.047825381 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.045699269 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.046764554 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.046280504 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.156204266 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.044635318 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.554957359 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.274034435 seconds)
    (101/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.046547994 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.118586922 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.296385867 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.317550501 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.052181331 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.046774494 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.06148785 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.048464436 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.046451121 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.057513652 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.046636979 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.048199831 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.050012428 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.048656298 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.047724806 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.050315339 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.058499332 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.047583364 seconds)
  done (took 441.046756269 seconds)
done (took 839.868738388 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.723757652 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.904015434 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.683503721 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.718718788 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.687083253 seconds)
  done (took 15.700247753 seconds)
done (took 17.682602083 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.078528792 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.063625916 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.053051804 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.112394728 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.074175341 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.059568805 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.094371497 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.094914115 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.078602312 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.060643784 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.113404059 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.065218833 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.081722662 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.083778362 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.135379385 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.088675915 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.064190523 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.057288995 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.123269334 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.065706245 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.064748815 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.061847543 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.06146212 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.113661322 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.146500393 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.074043923 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.063299674 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.110871858 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.072431706 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.107861444 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.121261597 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.08490331 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.096173276 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.135845905 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.120584752 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.142886949 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.071452294 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.131537312 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.068833946 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.149659055 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.118486642 seconds)
  done (took 87.751909279 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.060505772 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.194727784 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.27525934 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.090754891 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.059711983 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.274660477 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.114685442 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.18422304 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.208851579 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.27498284 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.301245006 seconds)
  done (took 26.029146344 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.058578384 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.194250609 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.271021738 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.093464903 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.081017177 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.277637981 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.121973423 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.198349477 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.194998132 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.277871251 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.284429046 seconds)
  done (took 26.047774821 seconds)
done (took 141.812639208 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.443679861 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.081835042 seconds)
  done (took 6.511917781 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.055176928 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.077997388 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.204488377 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.054792759 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.056242316 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.055426151 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.054909561 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.056894838 seconds)
  done (took 18.602753957 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.053970891 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.053681597 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.05452371 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.054208253 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.05404544 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.053639637 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.05423731 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.053472453 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.053983297 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.053974865 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.053959534 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.054216158 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.054661652 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.054146857 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.054979238 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.05436438 seconds)
  done (took 34.853781558 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.054779988 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.054742008 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.053890875 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.054382754 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.054511268 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.055067034 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.057018354 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.055264845 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.05480001 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.055138477 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.055608947 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.054334224 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.054868274 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.054964173 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.054984678 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.055481118 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.05430799 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.056116334 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.056391557 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.055851835 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.055188397 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.055122882 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.060199607 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.055545773 seconds)
  done (took 51.31733241 seconds)
done (took 113.280857918 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.225937705 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.697465299 seconds)
  done (took 8.913226598 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.053974508 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.051241328 seconds)
  done (took 6.151361934 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.038403212 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.053861502 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.055588961 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.056643461 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.056898074 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.057030043 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.057400896 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.057368435 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.05656519 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.056650725 seconds)
  done (took 22.528661416 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.057035282 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.057351809 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.056120518 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.057558285 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.057188083 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.056929191 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.057545611 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.057139529 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.05766501 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.057317274 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.057184645 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.057615259 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.057387158 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.057418218 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.057934977 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.057269879 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.057306953 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.057500711 seconds)
  done (took 39.022278903 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.057995721 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.057900056 seconds)
  done (took 6.106749538 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.057745639 seconds)
    (2/7) benchmarking "second"...
    done (took 2.058586476 seconds)
    (3/7) benchmarking "month"...
    done (took 2.057970895 seconds)
    (4/7) benchmarking "year"...
    done (took 2.058326542 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.05834781 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.058719079 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.058169722 seconds)
  done (took 16.398694909 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.058859133 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.215222119 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.26709869 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.660199998 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.058839563 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.060026963 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.922706395 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.061405286 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.061708266 seconds)
  done (took 22.357389468 seconds)
done (took 123.468096713 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.854277122 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.058867604 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.332639444 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.185830048 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.080230224 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.353387376 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.066885025 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.603247642 seconds)
done (took 44.52691758 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.174000774 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.056951606 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.085822911 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.086995201 seconds)
  done (took 23.222094785 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.059898293 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.351437029 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.077546919 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.996625355 seconds)
  done (took 23.492510486 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.40906908 seconds)
    (2/2) benchmarking "read"...
    done (took 2.389522231 seconds)
  done (took 6.795062726 seconds)
done (took 62.677740472 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.059462367 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.060196385 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.057264318 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.051583824 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.060472402 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.059634783 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.060391637 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.059892943 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.059951108 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.059609563 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.059983303 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.060697922 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.060702217 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.059389245 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.060157318 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.060691302 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.060306222 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.060235657 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.059282482 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.060195214 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.060428001 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.060761973 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.060934422 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.06037316 seconds)
  done (took 51.425708757 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.059665043 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.060920243 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.060358632 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.060490107 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.060619911 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.060923443 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.061170881 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.060457825 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.06136715 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.060412728 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.061176245 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.061022604 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.060936663 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.061592684 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.060551129 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.061333564 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.061231093 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.060500792 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.060429117 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.061964231 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.061059045 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.061134595 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.061215116 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.061380509 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.060433817 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.062865224 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.061643641 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.061249052 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.061686202 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.061374828 seconds)
  done (took 63.826072789 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.062180261 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.062072863 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.062458917 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.061957621 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.061659533 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.062467084 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.062537016 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.062836059 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.063052152 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.062395954 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.062334098 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.06305042 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.062127621 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.063071536 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.062864784 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.063481057 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.063518512 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.063306617 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.062870557 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.063119217 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.062536423 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.063634755 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.063017844 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.063348321 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.063456435 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.062805139 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.063376632 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.063234771 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.063534553 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.063674061 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.063872404 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.063943513 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.063293758 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.064033515 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.064027698 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.064601682 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.064380312 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.063371278 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.064722934 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.064257566 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.063880988 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.063659699 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.064158067 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.064428389 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.063859821 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.063407938 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.064563009 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.064619021 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.064253877 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.064078445 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.064754431 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.06397149 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.063346181 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.063811983 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.065240424 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.064974717 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.065083819 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.064327326 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.064862786 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.064510588 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.065733092 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.064405213 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.065501061 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.065278806 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.065478296 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.065136305 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.06481718 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.065429818 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.066349884 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.068271889 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.065714265 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.065605455 seconds)
  done (took 150.597581728 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.064500777 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.06647674 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.065247599 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.06692997 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.066035206 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.06598488 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.066425894 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.065388555 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.066738157 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.065703349 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.067581425 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.066182675 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.066563011 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.066324612 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.066419046 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.067322505 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.066972176 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.066565349 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.066309676 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.066347658 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.066651023 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.066924954 seconds)
  done (took 47.458232182 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.067325742 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.066682836 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.066763577 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.066624387 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.067779619 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.067004425 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.066821457 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.067442015 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.066821036 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.067967741 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.067632458 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.066197197 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.066633123 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.0671688 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.067641281 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.066928669 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.067483281 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.067868033 seconds)
  done (took 39.208774065 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.066558759 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.068019865 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.06767219 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.067554711 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.068162288 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.067720557 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.067700446 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.067835589 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.066886882 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.067352089 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.069081743 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.068293044 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.068222162 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.068362243 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.067949426 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.068491614 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.06907919 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.06841334 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.068357061 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.067776146 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.068945352 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.068522815 seconds)
  done (took 47.498557169 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.067841126 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.068856529 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.06828887 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.068931086 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.069421289 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.069092 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.068950028 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.068595787 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.068061057 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.069053735 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.068374835 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.069119226 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.069500246 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.069171225 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.070009295 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.068790897 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.069410958 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.06944986 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.069346435 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.069944113 seconds)
  done (took 43.381481053 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.070242038 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.070988468 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.071384961 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.071147441 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.070830345 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.070378958 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.070886093 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.070906821 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.070445045 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.070413919 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.070758531 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.070969429 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.070884036 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.071303874 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.072056546 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.071280121 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.070668578 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.071589508 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.071029596 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.071480706 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.071142898 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.070807911 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.0716773 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.072069108 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.070928269 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.071579571 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.071486264 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.071528851 seconds)
  done (took 59.994684476 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.070993562 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.071356079 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.071115666 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.071802402 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.071790212 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.071261654 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.071815034 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.071792841 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.07236636 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.071629978 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.071659214 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.071364532 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.071249248 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.070890857 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.071195649 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.07274685 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.071232323 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.072396811 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.072581022 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.071808384 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.072673738 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.072000326 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.073019888 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.072075809 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.071846767 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.071948082 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.072382572 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.072851946 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.072964915 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.072115358 seconds)
  done (took 64.162163253 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.090880506 seconds)
    (2/2) benchmarking "in"...
    done (took 2.091394457 seconds)
  done (took 6.187220539 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.072833453 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.072259577 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.073126028 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.073343699 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.073269905 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.07303603 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.075460875 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.073528434 seconds)
  done (took 18.592431631 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.073485865 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.077088842 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.073534873 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.073822215 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.074058392 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.080417265 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.074746953 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.074752228 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.075897955 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.074399769 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.079646771 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.078202825 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.083449338 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.078147597 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.073740308 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.075618401 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.07606136 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.077153017 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.076545159 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.073472351 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.077884668 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.075199638 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.074245788 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.075413192 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.074002943 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.077329379 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.084674983 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.075914609 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.075689437 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.073774431 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.08183339 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.074656884 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.075816207 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.076631813 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.076359294 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.074582704 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.082014042 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.075573784 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.076429688 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.075454038 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.078008208 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.077899646 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.079450564 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.082479425 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.076427583 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.077046239 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.075321233 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.076889988 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.075610677 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.079584017 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.084434058 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.07693582 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.076430663 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.076589523 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.079043524 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.076813276 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.077507994 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.079217337 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.083839959 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.083244403 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.080334507 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.097858592 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.086029424 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.07714858 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.077923439 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.086624533 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.101853657 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.079132173 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.079249457 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.076027446 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.084680352 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.07679638 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.07770427 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.077229642 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.090154203 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.085874764 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.077489839 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.077203398 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.07789042 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.077504107 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.078753076 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.078149919 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.078880878 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.078307984 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.088762739 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.103879125 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.079391659 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.07882265 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.081526262 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.079446006 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.083333721 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.081143364 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.078010797 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.078103668 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.080008619 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.08082717 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.078398476 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.079457719 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.078213362 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.087195402 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.078851757 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.078469182 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.083020518 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.088526141 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.079697913 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.079660141 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.080401774 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.079049049 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.086664045 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.079835828 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.079833746 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.07858748 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.080553966 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.084588944 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.079453897 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.082964049 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.088516458 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.086535845 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.081385536 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.083762742 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.084120726 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.082421588 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.090560538 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.104770154 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.079709643 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.083201578 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.086768428 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.093104619 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.08500972 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.079855189 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.083501817 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.079446156 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.080064653 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.0700768 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.079813597 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.081007524 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.060863627 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.080198438 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.080830413 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.080159772 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.083194305 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.081704724 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.083279076 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.081341578 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.067734913 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.081857164 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.083414128 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.088752841 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.081438133 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.08086939 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.080675772 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.08336922 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.07011143 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.081169616 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.080519227 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.081243574 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.081699895 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.08211549 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.083783912 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.082904781 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.081886959 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.08236604 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.085939298 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.083025018 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.082933149 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.082270352 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.083247375 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.082220959 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.084226647 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.083995775 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.085050377 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.083041432 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.087500149 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.082751676 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.081464944 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.082082389 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.082381119 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.082072073 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.086400377 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.094410542 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.086849669 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.093376027 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.081950879 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.089754407 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.0835537 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.084907201 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.084531002 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.083727013 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.083961322 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.083590677 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.083219197 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.074107321 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.105120348 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.094759471 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.085333025 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.084850427 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.089527728 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.080013535 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.087583067 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.083507029 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.085689711 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.085852279 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.084605174 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.084392622 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.083744245 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.08795749 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.084608704 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.083771437 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.087924016 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.085614286 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.083861069 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.085529153 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.084362696 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.086660926 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.084368713 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.0834945 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.085025031 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.087330358 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.092121826 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.087419176 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.084864685 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.086129659 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.086765427 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.085694562 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.084995565 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.085936125 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.088393973 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.084704348 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.087389111 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.092788051 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.086328435 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.085899072 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.084603043 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.085981888 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.087558033 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.086381361 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.089233675 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.093950526 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.089117058 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.086114773 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.091779081 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.085779625 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.088920244 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.086826425 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.087992409 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.086991551 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.087978197 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.08666946 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.086461587 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.09417931 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.0858674 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.08728519 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.086453592 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.089610865 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.087427404 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.089100965 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.087671357 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.090758787 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.096252633 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.09288441 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.087794652 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.089732932 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.089759 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.087965663 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.091082746 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.087113983 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.100910391 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.098192653 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.087626754 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.087732868 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.087312954 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.09100287 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.087361124 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.088102922 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.095090197 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.088647833 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.088473516 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.092464304 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.0881462 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.08858838 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.09453417 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.089592091 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.091018984 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.08990363 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.089453682 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.089046675 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.088226973 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.090738723 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.088821238 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.09045137 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.093030763 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.088118525 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.089935136 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.088835653 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.096404238 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.08748055 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.090615246 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.095872509 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.091022236 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.089516324 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.09077531 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.088528658 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.090424446 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.090506072 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.08857724 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.090209533 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.089880665 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.093930784 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.100929106 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.093370696 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.098951443 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.092679455 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.099584837 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.090484343 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.089882649 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.090240263 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.093967094 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.098307812 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.090165947 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.089237777 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.097240447 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.090710444 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.092078846 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.095459794 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.090197014 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.090275389 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.090600206 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.092070731 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.096846912 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.092885186 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.090199737 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.090830444 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.09017745 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.090472608 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.093874458 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.092600475 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.091819738 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.091564997 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.090702231 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.091650668 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.090813257 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.091785973 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.091302099 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.090780807 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.090319504 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.098247488 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.091832572 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.092516381 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.096835313 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.091979789 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.100781908 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.092558146 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.092351981 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.093235608 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.092043661 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.094808882 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.090951989 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.092567804 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.092854726 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.091782265 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.093829247 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.104540546 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.100280892 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.095676854 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.093719178 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.092716376 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.094109675 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.102248473 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.117565605 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.092729459 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.095215896 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.097132768 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.098863934 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.095819088 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.098977252 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.096149807 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.101372848 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.094044311 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.092506923 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.097544686 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.106995373 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.093439776 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.092704555 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.092744361 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.097083342 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.095234207 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.09286537 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.093969023 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.096182891 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.094222246 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.105650803 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.092927938 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.095121917 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.094268636 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.093153056 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.095046182 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.094164258 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.096028249 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.095583923 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.09396492 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.094189553 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.096241581 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.100576203 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.093382069 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.098389176 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.104517969 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.094982551 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.094934922 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.096287391 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.094568099 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.093604575 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.094786621 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.093933804 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.096830903 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.094388086 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.094924537 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.098990157 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.104087499 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.09739394 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.095059858 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.094833634 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.098945372 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.095278558 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.095965622 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.09778079 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.103520548 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.099182112 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.107939087 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.106080059 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.095843603 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.097055493 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.103462559 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.104479152 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.095770246 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.095514011 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.095969033 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.098288988 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.098414548 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.097039655 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.097951911 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.097626944 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.102327062 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.096117485 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.096595699 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.097023409 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.095890101 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.098572385 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.098671346 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.102959939 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.096635987 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.096026289 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.0963666 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.097175769 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.097545247 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.099593383 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.097592328 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.096865951 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.099780125 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.09920652 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.10103324 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.097171393 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.097516472 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.09917759 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.098174848 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.097114644 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.098136866 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.09765863 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.097897288 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.102140319 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.106258092 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.097257336 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.099995326 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.098996531 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.102017742 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.09885012 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.098435091 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.098478584 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.098158252 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.105340967 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.097174215 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.098840092 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.099035143 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.09799046 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.104092552 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.100205455 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.102969985 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.098564448 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.098830982 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.098080301 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.103318968 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.108879561 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.103914615 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.103442534 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.106841897 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.102803549 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.101319506 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.099167993 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.098336417 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.099888187 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.099554397 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.102335209 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.10039602 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.102410671 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.099598275 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.101062622 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.100301447 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.101845753 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.099215635 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.100385563 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.103925334 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.109881938 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.107962965 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.09950511 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.101693592 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.100315706 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.10455441 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.111943986 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.100467701 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.09935288 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.100662438 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.101598365 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.10216722 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.108512035 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.109526654 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.103863095 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.100991338 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.105436346 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.119240201 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.103246201 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.111110267 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.132895126 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.102889456 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.101694653 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.102059213 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.101582574 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.101821836 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.103865002 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.101558761 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.107143078 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.101577801 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.101026572 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.108378566 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.10148622 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.10154549 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.101846867 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.103205502 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.108408591 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.102260935 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.109471685 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.101645502 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.101720954 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.101295189 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.104227715 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.10101338 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.101763947 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.101934799 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.103710221 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.101635641 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.102301313 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.111058741 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.103324243 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.103441938 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.115449012 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.114188773 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.103013152 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.1018253 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.103573593 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.108328574 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.105191728 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.10246047 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.106482652 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.110987251 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.108041815 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.111241623 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.104937825 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.104516269 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.104313492 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.102548676 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.10378474 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.116152033 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.114161788 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.103166678 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.103764329 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.111210401 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.103334762 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.109356332 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.109768082 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.106506825 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.106752315 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.104577964 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.097590215 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.102248514 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.104046788 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.108070512 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.112301854 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.10434704 seconds)
  done (took 1248.475081905 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.104544208 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.104298853 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.104010026 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.104057523 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.104273453 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.104250577 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.104135966 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.104477186 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.104887631 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.104339816 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.103627358 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.10483199 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.104556439 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.103966715 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.104708468 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.10425074 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.104823689 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.104563268 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.104678507 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.104737546 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.104771637 seconds)
  done (took 46.228729677 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.104833881 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.105248903 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.104787155 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.105401597 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.105047304 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.105424404 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.104925784 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.105879242 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.105563309 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.105356411 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.104954751 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.105068571 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.104945115 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.105748635 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.106086179 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.105405089 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.105294859 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.105429847 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.105969838 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.105221481 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.106524291 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.105988625 seconds)
  done (took 48.356305603 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.107131603 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.107425204 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.107326107 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.107978556 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.108132958 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.108052933 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.107610389 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.109653704 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.107567443 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.10873635 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.114876151 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.116940934 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.108165639 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.111761559 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.108935363 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.107525234 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.254734828 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.108168955 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.107872991 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.10687453 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.107066664 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.112728261 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.107013552 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.106977358 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.107439598 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.107753443 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.107709543 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.107430113 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.108623843 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.108845116 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.112546161 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.106576602 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.109262735 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.110739806 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.107874402 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.109375081 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.1132971 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.10843239 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.107699861 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.107908512 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.119043424 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.132878314 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.108588383 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.108859114 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.115807173 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.107656209 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.107819039 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.112697105 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.116399595 seconds)
  done (took 105.569396066 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.107159095 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.109352078 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.107727544 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.108160067 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.108425765 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.107938578 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.108451625 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.108155571 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.109051186 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.107492108 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.108141933 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.108489686 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.108711766 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.109481666 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.096532476 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.090474815 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.108837934 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.108771501 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.108364553 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.108545299 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.108802863 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.108485514 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.108583189 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.109619549 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.110089539 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.108961224 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.109803894 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.109156792 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.109045847 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.105022038 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.081479196 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.103364714 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.110103341 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.109488559 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.098251166 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.109661043 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.109623245 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.109523579 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.097309999 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.110604615 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.110592151 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.110336672 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.10971472 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.110488466 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.109946437 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.109965608 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.11055484 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.110588369 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.110741547 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.110903422 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.111273318 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.110275936 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.11043863 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.111767908 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.110394819 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.110423691 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.110716725 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.110937623 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.111362241 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.112138957 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.111022285 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.111317103 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.11156206 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.111024565 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.111595951 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.111493323 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.111858357 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.111620369 seconds)
  done (took 145.411577085 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.112685984 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.11204704 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.112784429 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.111546119 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.111883828 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.111727185 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.11286424 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.112759532 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.112169448 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.112035249 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.112963901 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.112162359 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.113104245 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.112117197 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.112398341 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.113035043 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.1123801 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.112693475 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.112408118 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.113114508 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.10057254 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.113640418 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.101891717 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.113612139 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.113672681 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.113666957 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.112969078 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.112620985 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.112753466 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.112753431 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.113180172 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.113301546 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.113741455 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.113212464 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.11378831 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.113764783 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.113079129 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.113595395 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.113702547 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.114183432 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.094236515 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.103085179 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.113499869 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.11399112 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.114361067 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.114104444 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.11460396 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.115133488 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.114308185 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.114758012 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.114639521 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.114191595 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.115133528 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.114764573 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.114554481 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.114836354 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.113996489 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.115099282 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.114806844 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.115095693 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.115250391 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.114660863 seconds)
  done (took 133.027706813 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.114221037 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.115714544 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.114719723 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.114326051 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.114885243 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.115280836 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.1159209 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.115575221 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.115363119 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.115289429 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.11501579 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.115850006 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.116913976 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.115987209 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.107282307 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.114088976 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.115510036 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.116035405 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.116345492 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.116508483 seconds)
  done (took 44.346933123 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.115390446 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.115756043 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.115884494 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.115492928 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.116008583 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.115986213 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.115878572 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.116877345 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.115971841 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.116477315 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.116696346 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.116925194 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.116757753 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.116697311 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.116556107 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.116567169 seconds)
  done (took 35.906860825 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.117361574 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.116974165 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.116583417 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.11715171 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.117168226 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.117248998 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.116765457 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.115990376 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.116586614 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.11762583 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.117045616 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.116794375 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.116981854 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.11744575 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.11717667 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.117355103 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.117224369 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.117647705 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.117523631 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.118077376 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.118328135 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.117503228 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.118823514 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.11839902 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.117612029 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.117840483 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.117903264 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.118109838 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.118349447 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.117159944 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.117919579 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.118391343 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.118213053 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.118733942 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.117519115 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.118467522 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.118138362 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.1185049 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.118358235 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.118311838 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.117769565 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.11760985 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.119171049 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.118603474 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.119168127 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.119028873 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.119417566 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.11933299 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.119551154 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.119698099 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.119361876 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.119466731 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.11907892 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.119442979 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.118946096 seconds)
  done (took 118.540530696 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.119126452 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.119013785 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.119672463 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.119977596 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.119813599 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.119196361 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.119927174 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.119036483 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.119373903 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.120015488 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.119556948 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.119775436 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.120330668 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.119834875 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.120367365 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.119743587 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.120028762 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.119888258 seconds)
  done (took 40.205461602 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.120273928 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.120664021 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.120234322 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.120596125 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.120313805 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.120423797 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.120173231 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.121101369 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.12003568 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.120400102 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.120293786 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.120801333 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.120714907 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.120707472 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.121318037 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.120416087 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.120785617 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.120384956 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.12064682 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.121904938 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.121148585 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.121142494 seconds)
  done (took 48.706070615 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.12175559 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.122600076 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.136350463 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.145151392 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.142559017 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.161274029 seconds)
  done (took 14.881466622 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.122212929 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.121380282 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.123702647 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.120973258 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122973069 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.121432593 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121817829 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121530749 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122129887 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.122172357 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12230686 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.12226722 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.121722964 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.121965591 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122197053 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122351895 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123019605 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.12166665 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122971003 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122381648 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.122669168 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122360498 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.122638407 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.122719258 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.12273623 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.122844296 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123106993 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.12324099 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123219558 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122733357 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.122793096 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.122435124 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123198247 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.122676252 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122915461 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123346308 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.122338529 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123935853 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124415633 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124308749 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.123605189 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123688185 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.122885369 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.122896947 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.123811889 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123454459 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124568383 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.123643226 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.123840189 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124414606 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.12409483 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.123873015 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123365105 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.122942942 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124062312 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.12369276 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124667439 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.123990118 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123919298 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124710916 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124631315 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.12402293 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124446835 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.124889431 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124406074 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124669816 seconds)
  done (took 142.181457103 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125520844 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.117856497 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.118443231 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.118362366 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.118221103 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.117243492 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.117958454 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.094913584 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.110888665 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.11784942 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.118403786 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.117975901 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.119069454 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.117959514 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.118252815 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.11840959 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.118150849 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119055451 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.119311757 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.118995239 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.118655077 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.119311678 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.119219641 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.119484643 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.119797318 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.118735188 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119150793 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.119785064 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.086697369 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.119651235 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.119691562 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.118667924 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119730148 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.11906802 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.118734851 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.119142763 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.119969531 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120305768 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.119279034 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.119774203 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.119879115 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.118657794 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.120133884 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.119962822 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.120102115 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.120429148 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.119856635 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.119933581 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.109750793 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.120392088 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.120508339 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.120326868 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.121042428 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120142712 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.120126995 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120294987 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.120310044 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.120789443 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.097551354 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.114885822 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.102272965 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.121013357 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.121357568 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.121233799 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.120369029 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.121062737 seconds)
  done (took 141.828238431 seconds)
done (took 2907.999427398 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.220177517 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.254463235 seconds)
  done (took 16.527141434 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.277355832 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.149662787 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.298119361 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.238230481 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.133432753 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.124088576 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.124339903 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.124127145 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.215780404 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.123871186 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.158659611 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.124358713 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.123940428 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.124041047 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.123735905 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.124467804 seconds)
  done (took 56.641519543 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.126682977 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.128971583 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.113340314 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.124705483 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.135699629 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.199333724 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.14785797 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.12865941 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.13863802 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.159600847 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.142953277 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.132221575 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.131903399 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.11778417 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.213971661 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.17130107 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.184554556 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.202153748 seconds)
  done (took 40.753619585 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.207171702 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.137613635 seconds)
  done (took 11.406367302 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.148652083 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.137227384 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.130486198 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.12960667 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.148862851 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.1585437 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.163231523 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.116525848 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.137444335 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.130807804 seconds)
  done (took 73.472903977 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.129002142 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.130450392 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.40572652 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.127559541 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.134782873 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.14016388 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.128603775 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.156762223 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.129222786 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.124952686 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.13810613 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.408717837 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.137838053 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.127903883 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.473049785 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.140704911 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.133412833 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.157960501 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.158696779 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.132604271 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.133772449 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.129411991 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.289337736 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.831510587 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.129164727 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.132356673 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.134235662 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.124841919 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.125266229 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.127864378 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.130966177 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.126899176 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.129707848 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.126189574 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.135271315 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.131943084 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.623508103 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.146525609 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.135142133 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.205199238 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.173375167 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.135562038 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.963167969 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.130532334 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.125149075 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.134190907 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.830924827 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.209332137 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.129496039 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.287089503 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.492897015 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.144950986 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.292213789 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.290262891 seconds)
  done (took 147.060707492 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.12379401 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.368104672 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.27915141 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.128311824 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.384406703 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.339776398 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.128513661 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.171570287 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.128881796 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.329677425 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.383410641 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.231510686 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.129519158 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.125593409 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.125590667 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.126797249 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.2756908 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.195480692 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.129139131 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.125839876 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.151230216 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.32976938 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.24956482 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.130141181 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.152610963 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.33531074 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.249701513 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.230908318 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.085357184 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.126284736 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.189820487 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.129987035 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.127146379 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.126629333 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.279612822 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.222076634 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.215760315 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.129655102 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.127394906 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.127331076 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.808093546 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.328760856 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.22383659 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.252781395 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.376764145 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.345111875 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.822284509 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.127011564 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.755593468 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.292295576 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.334045212 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.33670504 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.247249059 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.132099448 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.699168732 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.128174747 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.127146752 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.350668337 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.348390271 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.228370042 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.13086098 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.129787895 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.127478742 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.366649325 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.131238181 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.219902831 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.131103469 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.128854187 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.220723055 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.231737727 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.355577587 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.351344268 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.161281979 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.458822776 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.652850229 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.331650019 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.195723615 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.350499028 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.132678332 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.12865596 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.208719183 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.96724764 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.381564304 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.371672422 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.329765001 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.160564445 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.785529056 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.129258382 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.31618243 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.321429223 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.364393851 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.376034069 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.366977339 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.729807266 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.129637501 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.129260866 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.485583269 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.247835544 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.133215084 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.48993942 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.359095072 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.634460702 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.156576929 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.416493693 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.260738027 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.134570389 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.778215112 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.13204474 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.33642752 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.170583971 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.132425982 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.13211367 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.321134566 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.040931605 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.132178872 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.106351199 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.190859041 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.136930858 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.334581874 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.134346989 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.376063104 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.134942064 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.363661724 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.757714406 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.162605091 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.358624207 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.376502879 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.800102702 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.426364563 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.370002999 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.235722894 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.386669519 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.135837307 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.132584288 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.368917373 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.13325194 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.132103839 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.29909975 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.137159863 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.276439472 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.136756826 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.39854291 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.154579643 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.362525434 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.136966421 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.371222409 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.165901986 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.183617095 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.136115671 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.258934699 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.135136712 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.080211145 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.290658236 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.136349073 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.133645581 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.887803473 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.133636328 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.284446222 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.359683747 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.15579835 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.203936014 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.705540922 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.133223487 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.221195472 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.157742209 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.41634397 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.134549733 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.382153968 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.13453464 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.619393063 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.132963097 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.368683749 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.370263311 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.136297724 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.135220779 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.976507703 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.134527218 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.133390385 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.285557669 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.568196132 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.058339217 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.323437776 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.63360304 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.258244172 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.132802524 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.466741637 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.476689892 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.130137692 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.13179862 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.131468338 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.130735239 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.131467669 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.393415097 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.157050204 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.56681026 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.266422671 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.384886879 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.436480278 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.298908984 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.171629455 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.136607046 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.354130531 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.135620607 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.193147125 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.134334963 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.150379509 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.362179778 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.135218672 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.337646653 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.366411741 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.192794485 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.17840964 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.134546646 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.131155879 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.057760585 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.274804679 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.218494735 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.135512939 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.131829562 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.245188066 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.252438765 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.31632035 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.983693413 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.293220963 seconds)
  done (took 961.829936536 seconds)
done (took 1309.746702847 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.132647262 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.132499305 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.134534043 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.133577 seconds)
  done (took 30.596271746 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.134716239 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.133930042 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.135533076 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.135823018 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.1343503 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.136916929 seconds)
  done (took 14.876155093 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.132388163 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.133138565 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.133809002 seconds)
  done (took 23.46225625 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.570774374 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.552006901 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.210462146 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.278241847 seconds)
  done (took 11.6748596 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.140224068 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.136397702 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.135381238 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.135958748 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.136176146 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.136670394 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.137451366 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.136721355 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.135836177 seconds)
  done (took 21.303472238 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.309586035 seconds)
done (took 108.286175585 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.510221268 seconds)
    (2/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.616150037 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.262372957 seconds)
    (4/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.406565835 seconds)
    (5/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.338822832 seconds)
    (6/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.895033241 seconds)
    (7/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.147418085 seconds)
    (8/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.284220509 seconds)
    (9/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.395506333 seconds)
    (10/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.911906572 seconds)
    (11/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.163450861 seconds)
    (12/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.149466923 seconds)
    (13/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.287469554 seconds)
    (14/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.24514542 seconds)
    (15/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.735239667 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.238666929 seconds)
    (17/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.151765352 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.148100605 seconds)
    (19/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.143931423 seconds)
    (20/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.146495157 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.149824085 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.133528361 seconds)
    (23/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.2292278 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.157342641 seconds)
    (25/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.263512407 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.13386387 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.881080888 seconds)
    (28/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.137075142 seconds)
    (29/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.844293086 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.251334795 seconds)
    (31/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.263225433 seconds)
    (32/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.276609298 seconds)
    (33/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.136932224 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.237259431 seconds)
    (35/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.139135761 seconds)
    (36/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 4.11104076 seconds)
    (37/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.849411806 seconds)
    (38/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.535909479 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.367033096 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.223895487 seconds)
    (41/341) benchmarking ("sort", Float64, false)...
    done (took 5.816880028 seconds)
    (42/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.148892547 seconds)
    (43/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.134304114 seconds)
    (44/341) benchmarking ("sort", BigInt, false)...
    done (took 7.137646675 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.850997819 seconds)
    (46/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.278301822 seconds)
    (47/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.714189175 seconds)
    (48/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.323246611 seconds)
    (49/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.548214796 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.553928564 seconds)
    (51/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.145513903 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.452146404 seconds)
    (53/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.96979836 seconds)
    (54/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.400156076 seconds)
    (55/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.925772517 seconds)
    (56/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.496338327 seconds)
    (57/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.285163566 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.383860352 seconds)
    (59/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.843734964 seconds)
    (60/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.401314005 seconds)
    (61/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.331944215 seconds)
    (62/341) benchmarking ("sort", Int8, false)...
    done (took 5.075773539 seconds)
    (63/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.256032172 seconds)
    (64/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.251577294 seconds)
    (65/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.186443482 seconds)
    (66/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.964386676 seconds)
    (67/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.908583513 seconds)
    (68/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.721228806 seconds)
    (69/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.32176826 seconds)
    (70/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.816209941 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.124790598 seconds)
    (72/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.44044935 seconds)
    (73/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.126130326 seconds)
    (74/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.367504727 seconds)
    (75/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.128430899 seconds)
    (76/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.557627999 seconds)
    (77/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.125500885 seconds)
    (78/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.97278943 seconds)
    (79/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.007491653 seconds)
    (80/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.519296372 seconds)
    (81/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.836583059 seconds)
    (82/341) benchmarking ("sort", Float32, false)...
    done (took 5.795053688 seconds)
    (83/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.964684024 seconds)
    (84/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.127630385 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.185432713 seconds)
    (86/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.52014552 seconds)
    (87/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.468467753 seconds)
    (88/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.321694358 seconds)
    (89/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.124522857 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 4.211698809 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.387424897 seconds)
    (92/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.442920949 seconds)
    (93/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.123002056 seconds)
    (94/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.19567287 seconds)
    (95/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.583420554 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.316720391 seconds)
    (97/341) benchmarking ("map", abs, BigInt, false)...
    done (took 8.671249029 seconds)
    (98/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.367882648 seconds)
    (99/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.914215813 seconds)
    (100/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.205886816 seconds)
    (101/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.112951761 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 4.25388102 seconds)
    (103/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.364921288 seconds)
    (104/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.207289662 seconds)
    (105/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.118307864 seconds)
    (106/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.122254544 seconds)
    (107/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.11196023 seconds)
    (108/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.189272001 seconds)
    (109/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.168648379 seconds)
    (110/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.211672355 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.211369974 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.494819493 seconds)
    (113/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.567422425 seconds)
    (114/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.246022029 seconds)
    (115/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.231820699 seconds)
    (116/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.328529 seconds)
    (117/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.122592771 seconds)
    (118/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.252951527 seconds)
    (119/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.233639614 seconds)
    (120/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.305992934 seconds)
    (121/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.114958036 seconds)
    (122/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.242470998 seconds)
    (123/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.151490047 seconds)
    (124/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.021933232 seconds)
    (125/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.629467466 seconds)
    (126/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.189278692 seconds)
    (127/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.116453973 seconds)
    (128/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.794007092 seconds)
    (129/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.303906414 seconds)
    (130/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.419171942 seconds)
    (131/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.387911984 seconds)
    (132/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.11113374 seconds)
    (133/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.266820532 seconds)
    (134/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.21446094 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.24280982 seconds)
    (136/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.224186944 seconds)
    (137/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.347353453 seconds)
    (138/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.114591747 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.19685235 seconds)
    (140/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.535009194 seconds)
    (141/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.109519635 seconds)
    (142/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.397900641 seconds)
    (143/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.127907767 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.004879634 seconds)
    (145/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.498676441 seconds)
    (146/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.113079932 seconds)
    (147/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 3.806665321 seconds)
    (148/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.108968122 seconds)
    (149/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 4.216309762 seconds)
    (150/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.110664512 seconds)
    (151/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.216141111 seconds)
    (152/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.10783836 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.352981534 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.501781233 seconds)
    (155/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.11287007 seconds)
    (156/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.423701452 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.338870644 seconds)
    (158/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.107565267 seconds)
    (159/341) benchmarking ("sort", Bool, false)...
    done (took 2.330867545 seconds)
    (160/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.885154681 seconds)
    (161/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.876906901 seconds)
    (162/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.517990729 seconds)
    (163/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.111884995 seconds)
    (164/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 8.630988269 seconds)
    (165/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.649734381 seconds)
    (166/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.311835892 seconds)
    (167/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.550418907 seconds)
    (168/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.22866708 seconds)
    (169/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.392846359 seconds)
    (170/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.188759057 seconds)
    (171/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.569010493 seconds)
    (172/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.295660313 seconds)
    (173/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.135896058 seconds)
    (174/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.122846004 seconds)
    (175/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.533567957 seconds)
    (176/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.199047033 seconds)
    (177/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.264808637 seconds)
    (178/341) benchmarking ("sort", Int64, false)...
    done (took 5.756959536 seconds)
    (179/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.529259311 seconds)
    (180/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.219555931 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.316966116 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.24223449 seconds)
    (183/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.187372285 seconds)
    (184/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.083594714 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.052185534 seconds)
    (186/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.1400733 seconds)
    (187/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.998541376 seconds)
    (188/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.534452203 seconds)
    (189/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.111213112 seconds)
    (190/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.277675385 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.318732368 seconds)
    (192/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.482214551 seconds)
    (193/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.238209466 seconds)
    (194/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.115367964 seconds)
    (195/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.190198075 seconds)
    (196/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.230303561 seconds)
    (197/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.239598035 seconds)
    (198/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.761473881 seconds)
    (199/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.331433455 seconds)
    (200/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.408835315 seconds)
    (201/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.253732002 seconds)
    (202/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.478910917 seconds)
    (203/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.425168053 seconds)
    (204/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.445801163 seconds)
    (205/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.300448255 seconds)
    (206/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.122821135 seconds)
    (207/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.132506633 seconds)
    (208/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.424759114 seconds)
    (209/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.329816426 seconds)
    (210/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.33050796 seconds)
    (211/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.11235982 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.248689155 seconds)
    (213/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.19538206 seconds)
    (214/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.113409936 seconds)
    (215/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.832405144 seconds)
    (216/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.199337996 seconds)
    (217/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.132191257 seconds)
    (218/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.117809984 seconds)
    (219/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.228147077 seconds)
    (220/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.1081415 seconds)
    (221/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.248517871 seconds)
    (222/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.117512404 seconds)
    (223/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.360376659 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.42705873 seconds)
    (225/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.31919857 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.368504419 seconds)
    (227/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.324861159 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.110185005 seconds)
    (229/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.036022596 seconds)
    (230/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.138511758 seconds)
    (231/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.493933555 seconds)
    (232/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.858822867 seconds)
    (233/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.192359019 seconds)
    (234/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.186265974 seconds)
    (235/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.112713687 seconds)
    (236/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.289982415 seconds)
    (237/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.261414306 seconds)
    (238/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.127417911 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.112170039 seconds)
    (240/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.237301207 seconds)
    (241/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.891206179 seconds)
    (242/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.419321834 seconds)
    (243/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.396869871 seconds)
    (244/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.193354942 seconds)
    (245/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.112237284 seconds)
    (246/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.562429919 seconds)
    (247/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.191069863 seconds)
    (248/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.442460617 seconds)
    (249/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.11937848 seconds)
    (250/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.336580855 seconds)
    (251/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.202345141 seconds)
    (252/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.112112726 seconds)
    (253/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.113062039 seconds)
    (254/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.600787383 seconds)
    (255/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.437036562 seconds)
    (256/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.262679634 seconds)
    (257/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.244032719 seconds)
    (258/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.756934197 seconds)
    (259/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.405445437 seconds)
    (260/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.174419658 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.433001294 seconds)
    (262/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.133315304 seconds)
    (263/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.584839558 seconds)
    (264/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.125769741 seconds)
    (265/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.939885736 seconds)
    (266/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.268634178 seconds)
    (267/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.191006587 seconds)
    (268/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.437217373 seconds)
    (269/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.886219721 seconds)
    (270/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.212713095 seconds)
    (271/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.503296505 seconds)
    (272/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.193961686 seconds)
    (273/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.216669593 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.15402165 seconds)
    (275/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.126854226 seconds)
    (276/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.192551328 seconds)
    (277/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.419285195 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.013397606 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.052670327 seconds)
    (280/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.360704672 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.243262907 seconds)
    (282/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.92737013 seconds)
    (283/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.219534507 seconds)
    (284/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.265453813 seconds)
    (285/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.035258091 seconds)
    (286/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.257567983 seconds)
    (287/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.891490485 seconds)
    (288/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.143844311 seconds)
    (289/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.211518329 seconds)
    (290/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.126204745 seconds)
    (291/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.316064938 seconds)
    (292/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.719690374 seconds)
    (293/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.138985024 seconds)
    (294/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.383958904 seconds)
    (295/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.40914629 seconds)
    (296/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.321113775 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.114983676 seconds)
    (298/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.337934746 seconds)
    (299/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.404719553 seconds)
    (300/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.28520955 seconds)
    (301/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.27276025 seconds)
    (302/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.200299803 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.139259872 seconds)
    (304/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.418011593 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.146652951 seconds)
    (306/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.40524692 seconds)
    (307/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.036573912 seconds)
    (308/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.8340371 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.466894262 seconds)
    (310/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.521211068 seconds)
    (311/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.12908592 seconds)
    (312/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.581996412 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.240698717 seconds)
    (314/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.409983651 seconds)
    (315/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.117246238 seconds)
    (316/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.384625151 seconds)
    (317/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.510561429 seconds)
    (318/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.225430491 seconds)
    (319/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.120214083 seconds)
    (320/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.314224213 seconds)
    (321/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.458529366 seconds)
    (322/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.123113696 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.981735763 seconds)
    (324/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.376414171 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.554059987 seconds)
    (326/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.177032034 seconds)
    (327/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.023376912 seconds)
    (328/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.499188127 seconds)
    (329/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.3073979 seconds)
    (330/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.565339529 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.469502077 seconds)
    (332/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.125302342 seconds)
    (333/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.305357789 seconds)
    (334/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.398607536 seconds)
    (335/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.120073664 seconds)
    (336/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.665570776 seconds)
    (337/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.119072329 seconds)
    (338/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.470299326 seconds)
    (339/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.427497701 seconds)
    (340/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.118760355 seconds)
    (341/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.361245138 seconds)
  done (took 1178.362566368 seconds)
done (took 1180.769159001 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.13930415 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.120023248 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.619508623 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.131457466 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.119162154 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.122520698 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.630253257 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.151344343 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.136111701 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.63180829 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.130679463 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.119675626 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.135661311 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.15478852 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.130333544 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.133778292 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.125543023 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.145680434 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.155499351 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.125748832 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.171509436 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.125855859 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.11960329 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.171714118 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.120246998 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.135627346 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.139722272 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.171321822 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.171538902 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.123401654 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.127196012 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.46517505 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.173103632 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.125371084 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.13284917 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.136359276 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.127130606 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.136661159 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.139114164 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.136178261 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.121507877 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.132700232 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.125667445 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.123644588 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.120481846 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.120748708 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.122655122 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.24627707 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.135162984 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.460916601 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.183627076 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.140133503 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.173107815 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.123940481 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.123407609 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.124321835 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.172180654 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.128106953 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.126157895 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.462444316 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.218339113 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.137112566 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.460259995 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.18579544 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.134246943 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.131989523 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.121569809 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.140600095 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.479853373 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.676656138 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.154754573 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.143092006 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.123134643 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.124568698 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.137132439 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.632255872 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.138703426 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.700660015 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.152225607 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.138378526 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.128266676 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.125902776 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.124861385 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.140393627 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.142132374 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.122736832 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.129559067 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.129120036 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.138583381 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.479857215 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.168212264 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.621747657 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.132878786 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.142782392 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.141933614 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.70242579 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.155048085 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.142089557 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.126203331 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.478913687 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.167890761 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.143845109 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.126245686 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.136064962 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.238317678 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.141667382 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.143582463 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.123497472 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.145069311 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.131114154 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.124278768 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.138657479 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.144781053 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.159025618 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.14177456 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.123485796 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.135018367 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.130962562 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.142689844 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.132753507 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.132408913 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.136990358 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.125713923 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.178487095 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.143719864 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.14141175 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.24024777 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.131841744 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.2507957 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.140419427 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.132373475 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.124523072 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.46388317 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.172534192 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.147890744 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.132665778 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.150103409 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.14859386 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.141828795 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.128779745 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.140811283 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.129235802 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.177738673 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.125972439 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.151302441 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.179250312 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.140886336 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.132451609 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.143715383 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.161576003 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.147516161 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.130674871 seconds)
done (took 334.434874027 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.172722844 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.125185878 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.20018832 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.126187842 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.193124861 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.17972334 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.126094143 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.125835408 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.12611064 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.509609614 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.126197783 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.130945672 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.124317218 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.126177495 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.175214843 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.12626562 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.126784372 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.361397193 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.127197454 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.185309073 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.124694306 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.127151143 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.126765202 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.515054662 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.126026795 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.126779612 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.186499923 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.127110333 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.367745699 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.126726721 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.126971023 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.369996913 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.186553332 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.139562385 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.134624384 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.134176206 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.194813685 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.137860308 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.174187615 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.17444002 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.202497923 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.164409166 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.128650827 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.127780792 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.131133097 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.128797397 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.127806175 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.161319531 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.130433983 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.13344669 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.359851625 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.129686522 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.136095252 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.129051994 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.128446545 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.143962716 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.117073579 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.129487228 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.188279583 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.102866081 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.175075059 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.517336528 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.511395599 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.117020338 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.128195394 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.129275595 seconds)
  done (took 200.858773652 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.195294071 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.216148452 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.197252813 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.134089237 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.180914526 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.197446325 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.135044966 seconds)
  done (took 17.313578001 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.135517153 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.128862606 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.151967319 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.152760855 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.129183699 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.266853352 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.141165224 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.135194073 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.154993654 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.133105052 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.465454945 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.15194677 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.136696429 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.130163493 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.141013432 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.158128321 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.131901714 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.130131543 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.227518687 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.208230518 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.134097419 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.137099608 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.159699297 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.140955834 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.129872979 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.133612645 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.12998066 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.136727124 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.118285233 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.131326362 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.130574767 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.143764432 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.118979211 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.130509587 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.13144739 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.131746154 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.130186014 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.131978605 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.13062486 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.130654116 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.131715699 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.131403133 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.130709116 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.131195052 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.131146935 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.153389833 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.13089622 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.131021064 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.130771372 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.132033158 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.159510211 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.132271881 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.131740182 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.13583593 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.172714122 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.138804897 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.131977385 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.131277097 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.130783699 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.131660849 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.131431857 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.211412437 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.154842364 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.11989011 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.154927085 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.169465814 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.123607431 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.118905747 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.117078723 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.142460912 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.124853053 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.154221375 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.131158232 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.22963256 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.132722987 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.27277626 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.155087127 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.135570157 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.126125793 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.133456837 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.13974236 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.132215513 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.1130602 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.127545296 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.11105448 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.133073462 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.132517417 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.134255571 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.140501395 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.133529151 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.176645005 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.132659411 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.133573311 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.231814654 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.133656588 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.230776896 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.1598383 seconds)
  done (took 230.40121755 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.139108834 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.135161387 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.148470663 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.134809385 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.134176863 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.139068058 seconds)
  done (took 14.892880399 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.135652363 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.136300566 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.133355295 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.133606695 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.133809354 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.135390097 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.134048525 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.135126703 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.138737719 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.133641473 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.135322517 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.135356601 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.13405538 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.134204283 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.13520948 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.134159894 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.135051901 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.134329342 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.133973114 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.13463056 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.378745604 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.134807707 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.134608087 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.13825406 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.137889757 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.134244963 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.143335592 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.134737833 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.13473348 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.140944706 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.139623327 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.135761636 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.13892243 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.142733966 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.121696542 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.128267779 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.138793799 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.136669672 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.135534304 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.136102327 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.136691427 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.136317537 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.135003216 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.136765213 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.137391548 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.142514021 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.140629586 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.144545874 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.135452827 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.137304909 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.136722982 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.135376022 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.136811241 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.137918771 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.14062165 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.141681852 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.140189669 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.137020803 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.136750807 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.139347166 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.140435762 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.136596097 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.138103726 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.140757596 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.144544037 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.13862682 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.139342224 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.140614358 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.136552574 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.136373565 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.137840952 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.137555508 seconds)
  done (took 157.159201112 seconds)
done (took 622.682350684 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.166423364 seconds)
  done (took 9.231246135 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.310648106 seconds)
  done (took 9.455615607 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.394852324 seconds)
  done (took 12.447744492 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.15649192 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.217692624 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.138940107 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.145138492 seconds)
  done (took 30.739433547 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.314527457 seconds)
  done (took 9.380667419 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.146713974 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.136552515 seconds)
  done (took 16.407326514 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.181673292 seconds)
  done (took 9.248753398 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.151085405 seconds)
  done (took 9.242314966 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.154136694 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.143976822 seconds)
  done (took 16.380769612 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.139728962 seconds)
  done (took 9.206033494 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.948237035 seconds)
  done (took 10.083059503 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.150141105 seconds)
  done (took 9.233917956 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.209898674 seconds)
  done (took 9.276750202 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.013227931 seconds)
  done (took 10.079928951 seconds)
done (took 172.451756805 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.145908691 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.138652121 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.139849543 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.139790792 seconds)
  done (took 30.631237239 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.17446512 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.173799031 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.182322024 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.172382822 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.164348765 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.164191898 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.166678155 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.171194283 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.164197432 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.170825557 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.173865309 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.170588155 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.173148985 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.182502929 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.183312056 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.171534352 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.174339314 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.174041293 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.165146723 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.182553744 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.171686674 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.173837241 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.139693835 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.139900837 seconds)
  done (took 54.148184744 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.330245318 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.206710243 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.293843657 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.18661885 seconds)
  done (took 11.085555595 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.139137995 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.204766989 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.19091745 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.185524389 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.19070313 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.244267 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.192855701 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.27633909 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.268102022 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.265590123 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.146847834 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.161813581 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.165110931 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.184922019 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.242843895 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.139428889 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.140029246 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.254835251 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.201966432 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.399584231 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.141186797 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.195808979 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.191636694 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.193104114 seconds)
  done (took 54.986389412 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.141604622 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.136643803 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.148097829 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.141844393 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.142282679 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.142023739 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.14844676 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.143359383 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.16389281 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.143985448 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.141895875 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.142140579 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.148747284 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.142558263 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.141906571 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.125382253 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.156069041 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.142367454 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.145997494 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.143564742 seconds)
  done (took 44.952093006 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.140259636 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.958007363 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.488537403 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.393988495 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.140189476 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.143814631 seconds)
  done (took 33.330170889 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.155847755 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.160017787 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.149146939 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.168951589 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.191421991 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.154055039 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.203797281 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.310262354 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.155360895 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.202771125 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.167490805 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.148520531 seconds)
  done (took 28.238452494 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.141707179 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.142380327 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.143911469 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.154950178 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.153830535 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.150914182 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.137602705 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.140856575 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.15651631 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.161757689 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.150094715 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.15532275 seconds)
  done (took 47.861135263 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.357421978 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.369638117 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.349098249 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.780195931 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.466680223 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.116164044 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.416950483 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.356221788 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.785307673 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.809911445 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.437299916 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.114613668 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.09749673 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.069866457 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.041100367 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.386017635 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.14590194 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.003693514 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.394167818 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.183883206 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137234379 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.14524019 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.147926523 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.430316364 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.470875217 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.154389364 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.348137023 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162701275 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.146713829 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.399761727 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.796948062 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.208667193 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.349853717 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.403767413 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.507663738 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.193637317 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.151641045 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.380652321 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.200717899 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.182108106 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.156654258 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.157868899 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.685048068 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.159390713 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.419915783 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.147663348 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.150067554 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.132725337 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.076625938 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.342929085 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247601632 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.149357467 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.182774036 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.579114509 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.267667524 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.391083271 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.15304114 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.374124089 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212760301 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.303433659 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.242982006 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.153804938 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.36090514 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073979162 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.451977352 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.257737535 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.149712122 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.153686813 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.848694343 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.392316764 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.229363979 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.370411435 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.895650231 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.149727332 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.151621945 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.161940801 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.239079147 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.126996495 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.44318034 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.15013639 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.075768722 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.247776591 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.544239217 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141500117 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.132569361 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.157294004 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.003841786 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.07524599 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.24671537 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.301008387 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.459482992 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.15036565 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.151056942 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.172324479 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.152546844 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.095632011 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.759939391 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.230203611 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.076795859 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.715285235 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.787950444 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.123273582 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.659099709 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.200378135 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.430285852 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.298929076 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.555469033 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.359572925 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.396131147 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.68324759 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.156149557 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.711140228 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.232599757 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227845764 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151485068 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.749478083 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.384430274 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.351086521 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.252694624 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.150844483 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.067520888 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.160738648 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.355242517 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.791044283 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.211961359 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151781887 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.156991761 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.151533538 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.155312571 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.261594721 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.168017648 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.450605281 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.214777235 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.153229312 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.088883183 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.157948327 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.432227165 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.879445496 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217496758 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.413597469 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.41038242 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.853585012 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.753040989 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.254594311 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.417140233 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.217320703 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227163171 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.718904084 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.275336408 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.227298591 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.153490386 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.277899601 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.159584952 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.155276357 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.616435726 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.569133127 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.579291302 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.197955361 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.153733379 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.108358415 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.382921643 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.401484527 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.173900009 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.183150193 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.158308904 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.23906762 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.380194289 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.154671478 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.079832329 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.390460178 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.388939724 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.441207221 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.550877659 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.164614879 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.223790567 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.163682579 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.365570932 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.236679972 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.813167648 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.700894808 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.364474113 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.769549358 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.123624739 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.79524526 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.315342524 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.521955983 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.169757614 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.605873597 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.382462648 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.903619813 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.189766494 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.681487523 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.08150539 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159754557 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.48257046 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.103582841 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.46937292 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.207663185 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17253531 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.155940057 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.156630937 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162704393 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.005192683 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.259367576 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.224444851 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227882528 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.081838835 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.856062065 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.20037289 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.15739952 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.156147354 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.415194544 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.91329943 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.107856377 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.15490148 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232123697 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.923851981 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.707626166 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.160401704 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.159040709 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.76298746 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.162009281 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.070244206 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.163618548 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.864524629 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.180561029 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.318201502 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.846334865 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.443838382 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.222814182 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232740098 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.154945961 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.164973936 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.857439682 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.165420547 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.857641137 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.439306508 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.420740313 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.593532721 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.210946447 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.36631596 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.171345554 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.159313094 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.630663327 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.179489097 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.158589506 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.361030637 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.677692304 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.407267535 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.107717437 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.239594992 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.158207517 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.421753824 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.155988698 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.788965286 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.847856441 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.148558613 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.157725514 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.41599037 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.843412629 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.159333664 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.093444136 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.166396999 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.372078956 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.362816859 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.422329248 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.438663622 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.601489544 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.064983158 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.163289099 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.183891538 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.402124425 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.158660016 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.195817874 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.658462095 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.181617317 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.584261293 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.437775069 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.467986525 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.779169956 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.428067564 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.214713792 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.171107199 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.805936552 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.274421835 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.092422385 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.277486438 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.085994665 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.795119562 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.438083604 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.178231811 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.422911291 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.131766432 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.519457236 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.448258986 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.317660361 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.17693214 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.176350903 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.158939294 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.185983248 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.147362927 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.374298416 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.270929539 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.166390365 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.744489762 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205060499 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.205916613 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.16493314 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.618749061 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.179383389 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1636861 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.854511744 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.186640831 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.278976866 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232209602 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.873802434 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.863240766 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.194423419 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.096231182 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.810643652 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.423447183 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.209231495 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.606543037 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.191411524 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.565064389 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.16118747 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.363109487 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.167285329 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.789253057 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212981191 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.427994816 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.110290666 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.374104043 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.355253546 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.170356525 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.168287124 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.088135192 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.272021554 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.042700645 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.148006624 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.164725803 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.843248999 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.526310203 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.427327739 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.56085188 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.980929002 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.164125529 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.461356623 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.538616084 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.835228588 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.200914132 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.164544779 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.39109724 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.283567203 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.376650221 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.442047548 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.17132672 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.188646819 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.376132706 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.288959303 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.081492544 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.647272136 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.750916181 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.863751616 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.174499928 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.355602076 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.402806061 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.498766264 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.205061933 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.241982348 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.567792354 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.426553516 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.225020175 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.089927865 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.164425959 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.559930869 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.559880463 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.261673579 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.404981181 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.462112345 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.859632925 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.823546525 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.650487829 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.525463735 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.644537948 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.56547687 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.381585348 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.513422609 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.482472379 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.048940839 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.576493056 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.377071311 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.254229504 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.433394713 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.027433626 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.873663442 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.409564692 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.168912901 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.089867729 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.372486224 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.229575301 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.637436095 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.694000347 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.415010799 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.330170416 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.670068703 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.706909329 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.40715626 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.195822625 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.133307779 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.189155279 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.18719651 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.165432661 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.64779542 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.458215053 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.179689492 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.107442169 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.826560697 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.09199819 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.379872223 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.418798113 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.207680407 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.722814112 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.329321507 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.238466747 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.44314108 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.459352967 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.208483903 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09257848 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.813377666 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.112830652 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.203308044 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.591185654 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183497059 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.170010826 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.369923996 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.095614523 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213091764 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.172161372 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.365010095 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.742412074 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.435543005 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284707334 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.414744754 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.461240935 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.972093519 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.187850228 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.440490545 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.094252844 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.873433025 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.871587312 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.210116045 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.238633037 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.168639448 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.17148494 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.439827967 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.408943979 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.303427953 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.859812623 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.205505182 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.191701016 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.407630608 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.253270522 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.169879271 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.173831207 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.698388395 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.407361064 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.168871546 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.144487549 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.381512263 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252807496 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.364390985 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.241415201 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.683147343 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.173740911 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.972474002 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.262092698 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.11903509 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.169048746 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.874043676 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.231939332 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.169048174 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.436272556 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.781336432 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.373111273 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.565382235 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.043004353 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.420272882 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.216969842 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.172978616 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.220372963 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.456156313 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.466196871 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.170349339 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.442800046 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.211769019 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.175516265 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.834015979 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.140788973 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.171152006 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.822438498 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.065069219 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.901327928 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.565686194 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.181649905 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.174865706 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.17425285 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.096758985 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.170983365 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.341565009 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.174087076 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.22844927 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.447215403 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.39167922 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.25460159 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.179396706 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.171814023 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.176997168 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.383776367 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.686243722 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.187012121 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.871748629 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.375260118 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.179457868 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.653947668 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.612037617 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.475261732 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.216223518 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.411430741 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.420602774 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.703989416 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.417317885 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.145598291 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.398971499 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.173369003 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.442737755 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.445501847 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.172656321 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.380494988 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.800770126 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.464486029 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.525041343 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.480899068 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.228541327 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.420946028 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.093366636 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.143235224 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.177264609 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.44225148 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219225075 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.172131817 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.180947389 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.801312645 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.832096528 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.636376252 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.320503742 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.412132522 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.968100278 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.927153927 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.175003278 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.098739925 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.17223073 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.199176439 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.176302278 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.100114363 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.895811451 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.896599194 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.385883865 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.483023546 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.100411378 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.377167392 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.772718569 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.099797413 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.142775136 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.187075465 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.418498464 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.103747872 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.17591167 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.128625504 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.367456178 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.929212452 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.44856865 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.17471984 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119185793 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.178812658 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.178141191 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.173438265 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.259943138 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.175373759 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.29192532 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.443674676 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.453687001 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.2676825 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.81451092 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.816233234 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.111128936 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.218158584 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.789577982 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.744755189 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.358766793 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.291026921 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.82029399 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.118806424 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.180580723 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.191465774 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.404137405 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.181174125 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.178615327 seconds)
  done (took 2254.781330663 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.186183287 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.241558943 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.222210073 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.234209835 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.242256625 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.212414784 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.234623676 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.235900752 seconds)
  done (took 59.912500981 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.175650834 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.133570763 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.184546658 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.176492293 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.177728428 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.205500458 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.36548092 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.206410564 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.176478456 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.181076584 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.177400645 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.181147987 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.178082817 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.175449089 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.184017515 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.468241348 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.215280351 seconds)
  done (took 81.69737599 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.241442613 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.004819737 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.183420576 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.889175433 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.235624633 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.543355807 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.178128338 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.179598581 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.309988174 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.478887791 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.215262761 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.195998215 seconds)
  done (took 93.787743974 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.180261827 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.180370034 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.180099057 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.180354594 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.180170653 seconds)
  done (took 13.008704068 seconds)
done (took 2810.549371381 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.472811185 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.273147584 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.254634314 seconds)
  done (took 6.635274908 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.324562971 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.371812613 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.484566688 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.491193488 seconds)
  done (took 11.783118904 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.467617594 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.5787772 seconds)
  done (took 7.152134561 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.547638313 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.190747412 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.565940228 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.181817575 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.180902876 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.180974807 seconds)
  done (took 23.654496622 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.179686267 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.181670892 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.181096063 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.181727109 seconds)
  done (took 10.830990822 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.18120404 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.984464759 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.1797136 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.191681015 seconds)
  done (took 22.645558489 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.385221964 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.213762696 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.948062274 seconds)
  done (took 10.653814618 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.802827974 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.666810184 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.793093214 seconds)
  done (took 10.371220477 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.320253972 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.018955114 seconds)
  done (took 8.447506785 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.319081468 seconds)
  done (took 4.426954165 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.015012428 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.494112288 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.651203348 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.677150977 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.749987051 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.388793552 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.504141195 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.459167736 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.571014802 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.558990933 seconds)
  done (took 28.178271818 seconds)
done (took 161.665106987 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.623424438 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.204747763 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.431234752 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.549642875 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.43109277 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.398237916 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.480333555 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.541218473 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.23013829 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.215191109 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.556237022 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.424092293 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.424277264 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.206421447 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.43127171 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.206495989 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.422616493 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.651071312 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.240084341 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.4839772 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.483399466 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.200759726 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.395890607 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.217108986 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.42526963 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.347230623 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.81789862 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.207312849 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.386454078 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.832955131 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.349047852 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.621331345 seconds)
  done (took 179.546772385 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.18353519 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.18277416 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.184938805 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.183083772 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.532386558 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.183056848 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.184998521 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.183884701 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.482865679 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.469392386 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.183447599 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.522863003 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.185007265 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.182947893 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.185588756 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.18369663 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.598108034 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.183973551 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.183803812 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.184431421 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.186277023 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.394073179 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.183595451 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.401497943 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.589156626 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.183825053 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.183707658 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.173316913 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.18449489 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.184393628 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.184111938 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.184325046 seconds)
  done (took 218.509107609 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.186402475 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.187446682 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.18771888 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.187181731 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.187461015 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.185133849 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.173494301 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.184848802 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.025660677 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.033577428 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.187239022 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.186328274 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.188333751 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.185719752 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.188231798 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.18569572 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.184375437 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.185735398 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.189066214 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.191214297 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.18676409 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.894854107 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.186117815 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.93145727 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.186745876 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.190371119 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.186155801 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.186647478 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.188187406 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.189469808 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.185591437 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.186102453 seconds)
  done (took 231.223259069 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.429844685 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.186114671 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.187726132 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.196072484 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.188067539 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.18627533 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.192303712 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.438712371 seconds)
  done (took 22.120546285 seconds)
done (took 653.502358389 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.577394883 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.936136157 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.319426 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.211818083 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.473272934 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.253324676 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.205732925 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.272708211 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.847192632 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.282199 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.624630989 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.215307799 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.943469262 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.235707394 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.323058405 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.269537455 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.577780133 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.830023415 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.343694301 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.873218651 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.406649168 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.156265797 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.28864062 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.885991432 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.634871498 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.178093342 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.220467212 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.583132936 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.212405731 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.437939564 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.90009022 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.46297395 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.221596984 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.207859761 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.263566268 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.249751509 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.399998395 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.217599574 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.319560413 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.950105829 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.879903076 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.730576959 seconds)
  done (took 113.537373131 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.196419253 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.193400023 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.193144028 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.193906773 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.201484625 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.193300359 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.194001435 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.194697369 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.194268793 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.193606873 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.194067272 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.202141745 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.194615424 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.201843847 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.193698305 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.194917515 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.194146534 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.202920935 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.194649871 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.195283763 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.194200763 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.193492468 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.190552567 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.193790673 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.193837731 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.194322324 seconds)
  done (took 59.200312203 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.189711485 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.340907259 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.47832538 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.223452963 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.190694453 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.194021828 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.22067853 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.198020202 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.193657019 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.192970877 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.301289279 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.195939404 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.202826015 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.4741397 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.222766483 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.192656165 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.192171893 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.192978625 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.350390066 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.207230312 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.223674551 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.201353521 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.223104207 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.208935943 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.195803936 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.194301619 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.196650418 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.608511218 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.207085453 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.304364229 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.238772609 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.227415067 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.595873389 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.489624642 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.262873405 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.199596652 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.192846587 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.351778082 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.207630014 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.194526353 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.222555506 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.203023977 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.483598124 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.717388837 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.208981221 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.193747682 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.605770368 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.362263214 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.243151183 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.208550499 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.489899656 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.225901639 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.194387675 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.195212096 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.231085209 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.208331416 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.193605008 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.485529349 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.210454483 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.222328707 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.201075335 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.194624874 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.357866544 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.203372441 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.347666606 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.203349723 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.19966012 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.195936642 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.483954892 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.225561505 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.712795194 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.209851596 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.194945642 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.306543984 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.353318677 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.630932263 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.210066189 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.359222084 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.611586162 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.235180588 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.209398066 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.595009528 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.238546522 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.208294663 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.196900719 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.196546597 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.19682498 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.243167954 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.224335556 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.635983269 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.718575254 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.492948183 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.237928809 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.212245154 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.198589704 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.475672324 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.208890513 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.197687529 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.479842678 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.743375672 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.213012889 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.204702499 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.69970112 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.213621387 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.227986764 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.210141413 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.494572779 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.230380783 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.241911645 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.197833664 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.203543869 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.201066716 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.228130378 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.209540297 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.197745578 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.688288524 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.369513337 seconds)
  done (took 271.08575665 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.20222515 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.199254728 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.198173208 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.198311023 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.197696346 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.198930539 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.196566824 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.19844423 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.198285722 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.19743087 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.198090769 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.198171647 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.199728036 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.204896434 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.23223249 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.200277712 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.685704784 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.197724999 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.196694396 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.173942948 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.767423844 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.204130909 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.196541417 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.199001522 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.197325087 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.199986623 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.199407764 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.219170213 seconds)
  done (took 176.788032559 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.197721709 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.24574346 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.213618093 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.24569104 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.214490644 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.198059261 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.220124344 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.216112064 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.205023043 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.198540148 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.198730668 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.227226975 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.207522563 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.273354646 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.228900784 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.229432624 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.27823008 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.205815041 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.198941866 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.199432985 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.246435603 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.215794626 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.226226475 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.255399989 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.215493538 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.247666542 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.215518434 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.19918322 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.199916845 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.290186723 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.207286498 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.228648047 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.236277911 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.21938239 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.293920506 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.293137352 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.28154853 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.228075694 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.204062984 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.187851181 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.200194505 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.202981541 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.248634768 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.215259033 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.20236556 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.292215425 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.2198633 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.200254316 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.220258779 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.200966311 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.212655684 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.217679288 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.233696552 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.302274639 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.247419714 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.227725764 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.222424126 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.219587302 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.201707287 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.275026604 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.209154107 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.291193259 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.221544278 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.203229016 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.202420419 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.205013252 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.249047057 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.239158038 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.279903066 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.209910484 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.275773105 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.2569892 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.216742791 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.203416393 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.201669673 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.250576903 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.291591107 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.257526524 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.265169873 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.239219976 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.212752629 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.201461448 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.204152815 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.229897818 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.21042308 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.291435228 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.29649362 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.209369788 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.203393988 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.203313779 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.203062621 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.225808558 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.259444163 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.245631867 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.287624983 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.23970635 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.238969765 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.2109167 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.215488061 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.206976907 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.233893025 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.211357153 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.21580769 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.546181697 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.239495371 seconds)
  done (took 236.59823887 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.58323516 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.253842436 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.272576525 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.481124472 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.603839705 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.322560244 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.242277963 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.255645057 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.262339408 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.368303963 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.311472598 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.297733792 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.241732526 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.22496033 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.250876952 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.262875373 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.279732914 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.560641949 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.348176423 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.974271846 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.244176549 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.528817734 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.526195739 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.605845591 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.289890417 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.626185792 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.893341492 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.324183537 seconds)
  done (took 71.570834778 seconds)
done (took 930.895188864 seconds)
SAVING RESULT...
DONE!
