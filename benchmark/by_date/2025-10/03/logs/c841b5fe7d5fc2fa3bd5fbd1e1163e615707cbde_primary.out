cset: moving following pidspec: 2130640
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "find"... done (took 2.556221025 seconds)
loading group "problem"... done (took 1.527605262 seconds)
loading group "io"... done (took 1.489328879 seconds)
loading group "simd"... done (took 1.082147512 seconds)
loading group "sparse"... done (took 0.53859046 seconds)
loading group "micro"... done (took 0.045274862 seconds)
loading group "parallel"... done (took 0.019206443 seconds)
loading group "dates"... done (took 0.182139133 seconds)
loading group "scalar"... done (took 1.135232436 seconds)
loading group "misc"... done (took 0.421153633 seconds)
loading group "union"... done (took 2.771262506 seconds)
loading group "alloc"... done (took 0.016116833 seconds)
loading group "random"... done (took 2.097642089 seconds)
loading group "shootout"... done (took 0.61837894 seconds)
loading group "broadcast"... done (took 0.594025028 seconds)
loading group "sort"... done (took 0.302926841 seconds)
loading group "array"... done (took 2.249620347 seconds)
loading group "string"... done (took 0.199707002 seconds)
loading group "linalg"... done (took 2.595873945 seconds)
loading group "tuple"... done (took 0.57138072 seconds)
loading group "collection"... done (took 5.422949732 seconds)
loading group "inference"... done (took 2.609693444 seconds)
loading group "frontend"... done (took 0.003623927 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.091325497 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 0.037094232 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039639586 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.4288e-5 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039934985 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.053040935 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040350628 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052813892 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.03985345 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 1.6167e-5 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039061091 seconds)
  done (took 1.141939959 seconds)
  (2/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.085100649 seconds)
    (2/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.0956e-5 seconds)
    (3/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.085155167 seconds)
    (4/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.05049641 seconds)
    (5/41) benchmarking ("BitVector", "10-90")...
    done (took 0.018833706 seconds)
    (6/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.5541e-5 seconds)
    (7/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.084474411 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.3391e-5 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08177532 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086437369 seconds)
    (11/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.085923915 seconds)
    (12/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.082565039 seconds)
    (13/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.089364451 seconds)
    (14/41) benchmarking ("BitVector", "50-50")...
    done (took 1.8766e-5 seconds)
    (15/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.0820259 seconds)
    (16/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.8623e-5 seconds)
    (17/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.4928e-5 seconds)
    (18/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 8.92e-6 seconds)
    (19/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.080751386 seconds)
    (20/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.6356e-5 seconds)
    (21/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080059231 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.6827e-5 seconds)
    (23/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 8.076e-6 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.3502e-5 seconds)
    (25/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.1265e-5 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 9.33e-6 seconds)
    (27/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08088008 seconds)
    (28/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.3997e-5 seconds)
    (29/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.415e-5 seconds)
    (30/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.503e-5 seconds)
    (31/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.1742e-5 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.0906e-5 seconds)
    (33/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080751451 seconds)
    (34/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.5124e-5 seconds)
    (35/41) benchmarking ("BitVector", "90-10")...
    done (took 1.1521e-5 seconds)
    (36/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.1249e-5 seconds)
    (37/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.0524e-5 seconds)
    (38/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081213506 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.2662e-5 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 7.064e-6 seconds)
    (41/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.0104e-5 seconds)
  done (took 1.916449615 seconds)
  (3/3) benchmarking "findprev"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030081251 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 0.026703839 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039705548 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.596e-5 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.03959967 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.050921908 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039741713 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.04994099 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039621002 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 1.9597e-5 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039905827 seconds)
  done (took 1.044309069 seconds)
done (took 4.84985834 seconds)
(2/23) benchmarking "problem"...
  (1/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.252859581 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.203850264 seconds)
  done (took 1.13888017 seconds)
  (2/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.265119632 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.220788941 seconds)
  done (took 1.175247801 seconds)
  (3/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.239976981 seconds)
  done (took 0.932311983 seconds)
  (4/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.074841871 seconds)
  done (took 1.767665233 seconds)
  (5/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.321013073 seconds)
  done (took 1.009607269 seconds)
  (6/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.354801079 seconds)
  done (took 2.046427091 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.670349052 seconds)
  done (took 1.369254971 seconds)
  (8/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.673449849 seconds)
    (2/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.076135848 seconds)
    (3/4) benchmarking "laplace_iter_devec"...
    done (took 0.150208667 seconds)
    (4/4) benchmarking "laplace_iter_sub"...
    done (took 1.14227557 seconds)
  done (took 3.754773606 seconds)
  (9/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.732052983 seconds)
  done (took 5.44715219 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.424680772 seconds)
  done (took 1.137494939 seconds)
  (11/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.955483467 seconds)
  done (took 1.676354115 seconds)
  (12/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.050008821 seconds)
  done (took 0.764828455 seconds)
  (13/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.970658756 seconds)
  done (took 1.690186723 seconds)
  (14/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.526053017 seconds)
  done (took 2.24113805 seconds)
done (took 26.837801392 seconds)
(3/23) benchmarking "io"...
  (1/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.83059565 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.892643043 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.737012882 seconds)
  done (took 4.176837493 seconds)
  (2/4) benchmarking "read"...
    (1/2) benchmarking "read"...
    done (took 0.033084167 seconds)
    (2/2) benchmarking "readstring"...
    done (took 0.02177524 seconds)
  done (took 0.802067498 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.865934412 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.133305229 seconds)
    (3/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.020858462 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.037618273 seconds)
  done (took 1.780341788 seconds)
  (4/4) benchmarking "skipchars"...
  done (took 0.248383275 seconds)
done (took 7.744811454 seconds)
(4/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.196839923 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.088383708 seconds)
  (3/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.04298822 seconds)
  (4/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 0.081717254 seconds)
  (5/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.046113535 seconds)
  (6/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.107313906 seconds)
  (7/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.063775312 seconds)
  (8/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.094508443 seconds)
  (9/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 0.074933771 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.023976484 seconds)
  (11/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 0.052130069 seconds)
  (12/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031371943 seconds)
  (13/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 0.082005468 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.0559384 seconds)
  (15/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.084322133 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.07869238 seconds)
  (17/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.061680636 seconds)
  (18/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.031482436 seconds)
  (19/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.057632219 seconds)
  (20/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.051083069 seconds)
  (21/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.06367817 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.060745157 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.064526197 seconds)
  (24/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.023771951 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.050960193 seconds)
  (26/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.060053102 seconds)
  (27/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.2198e-5 seconds)
  (28/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.072571009 seconds)
  (29/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.077953153 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 0.070262682 seconds)
  (31/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.070227522 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.059896069 seconds)
  (33/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.040022741 seconds)
  (34/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.056811 seconds)
  (35/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032786996 seconds)
  (36/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.030724524 seconds)
  (37/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 0.071053509 seconds)
  (38/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.071323535 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.079485127 seconds)
  (40/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.027907628 seconds)
  (41/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 3.038e-5 seconds)
  (42/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.057608615 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.062689391 seconds)
  (44/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.045172369 seconds)
  (45/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 0.065851633 seconds)
  (46/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.057184728 seconds)
  (47/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.077055844 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.046624134 seconds)
  (49/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.4604e-5 seconds)
  (50/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.055153921 seconds)
  (51/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 0.072912792 seconds)
  (52/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.081247917 seconds)
  (53/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.096e-5 seconds)
  (54/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 1.8739e-5 seconds)
  (55/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 0.058236392 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.050350194 seconds)
  (57/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 3.3585e-5 seconds)
  (58/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.06582469 seconds)
  (59/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.1288e-5 seconds)
  (60/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.048082762 seconds)
  (61/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 0.074616865 seconds)
  (62/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.054550773 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.07279864 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.066868312 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.03152643 seconds)
  (66/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.06902737 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.6849e-5 seconds)
  (68/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.065882959 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.6185e-5 seconds)
  (70/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.040416108 seconds)
  (71/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 4.4498e-5 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.055501286 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.038886851 seconds)
  (74/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.6109e-5 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 0.066993951 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 0.070129817 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.066410829 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.07335757 seconds)
  (79/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.027855177 seconds)
  (80/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.078001825 seconds)
  (81/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.040399388 seconds)
  (82/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.0526e-5 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 4.3918e-5 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.069396499 seconds)
  (85/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.3318e-5 seconds)
  (86/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.031818471 seconds)
  (87/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.053856496 seconds)
  (88/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.06110231 seconds)
  (89/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.0901e-5 seconds)
  (90/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 3.7191e-5 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.058423659 seconds)
  (92/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.055220685 seconds)
  (93/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.057492822 seconds)
  (94/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.064618866 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.074297301 seconds)
  (96/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.0321e-5 seconds)
  (97/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.034845974 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.7995e-5 seconds)
  (99/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.074212892 seconds)
  (100/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031521883 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.062085332 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.048089847 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.0722208 seconds)
  (104/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.070831851 seconds)
  (105/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.029414289 seconds)
  (106/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.031679179 seconds)
  (107/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.964e-5 seconds)
  (108/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 0.04512089 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.039686286 seconds)
  (110/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.5349e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.060017944 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.066359713 seconds)
  (113/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.046811569 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.039430519 seconds)
  (115/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.812e-5 seconds)
  (116/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 3.153e-5 seconds)
  (117/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.0947e-5 seconds)
  (118/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.1097e-5 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 0.071994057 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 0.066886702 seconds)
  (121/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.032017825 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 4.335e-5 seconds)
  (123/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 0.05769057 seconds)
  (124/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 3.3518e-5 seconds)
  (125/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.9721e-5 seconds)
  (126/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.06834554 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.062825919 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.7237e-5 seconds)
  (129/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 0.046762466 seconds)
  (130/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 0.028284425 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.471e-5 seconds)
  (132/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.029350472 seconds)
  (133/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.0399423 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.077177111 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.077752474 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 3.1012e-5 seconds)
  (137/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.050093812 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.2685e-5 seconds)
  (139/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.3508e-5 seconds)
  (140/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.048900065 seconds)
  (141/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.3941e-5 seconds)
  (142/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.231e-5 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.6825e-5 seconds)
  (144/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.068625302 seconds)
  (145/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.039063281 seconds)
  (146/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 0.045909433 seconds)
  (147/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.059186372 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.064326041 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.7643e-5 seconds)
  (150/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.047984364 seconds)
  (151/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 3.1396e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.06307798 seconds)
  (153/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.067588358 seconds)
  (154/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 3.5389e-5 seconds)
  (155/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.3787e-5 seconds)
  (156/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.5859e-5 seconds)
  (157/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.05007002 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.533e-5 seconds)
  (159/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.0674921 seconds)
  (160/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 0.06314267 seconds)
  (161/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.6657e-5 seconds)
  (162/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.9007e-5 seconds)
  (163/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.073099831 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 0.07619291 seconds)
  (165/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 6.0475e-5 seconds)
  (166/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.063764289 seconds)
  (167/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 3.7068e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 0.053758763 seconds)
  (169/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.04814653 seconds)
  (170/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.05764792 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 9.4445e-5 seconds)
  (172/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.988e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.1915e-5 seconds)
  (174/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.8642e-5 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.0739e-5 seconds)
  (176/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.062496026 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.6143e-5 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.072180493 seconds)
  (179/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.7098e-5 seconds)
  (180/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.1277e-5 seconds)
  (181/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.028312298 seconds)
  (182/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.3196e-5 seconds)
  (183/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.063496164 seconds)
  (184/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.032139691 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 3.8637e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 0.06778783 seconds)
  (187/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.031588209 seconds)
  (188/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.5843e-5 seconds)
  (189/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 3.4257e-5 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.3109e-5 seconds)
  (191/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.6013e-5 seconds)
  (192/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.056878884 seconds)
  (193/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.029654654 seconds)
  (194/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 3.3967e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.3299e-5 seconds)
  (196/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.4004e-5 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.8866e-5 seconds)
  (198/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 9.795e-6 seconds)
  (199/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.070707556 seconds)
  (200/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.3075e-5 seconds)
  (201/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.5682e-5 seconds)
  (202/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.4632e-5 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.7438e-5 seconds)
  (204/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.036472901 seconds)
  (205/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.2845e-5 seconds)
  (206/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.857e-5 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.045685759 seconds)
  (208/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.080321907 seconds)
  (209/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.063711623 seconds)
  (210/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.2418e-5 seconds)
  (211/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 5.1415e-5 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.6587e-5 seconds)
  (213/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.0913e-5 seconds)
  (214/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.039852655 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 4.3878e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 0.031124149 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 3.8352e-5 seconds)
  (218/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.7983e-5 seconds)
  (219/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.055513051 seconds)
  (220/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.049058042 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.073e-5 seconds)
  (222/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.2278e-5 seconds)
  (223/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.6501e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.0289e-5 seconds)
  (225/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.304e-5 seconds)
  (226/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.080500623 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.039744765 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.068443411 seconds)
  (229/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.0726e-5 seconds)
  (230/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.0604e-5 seconds)
  (231/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.0307e-5 seconds)
  (232/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.3437e-5 seconds)
  (233/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.889e-5 seconds)
  (234/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.8025e-5 seconds)
  (235/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.7167e-5 seconds)
  (236/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.7748e-5 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.036313424 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.059682532 seconds)
  (239/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.4948e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.545e-5 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.6285e-5 seconds)
  (242/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.3815e-5 seconds)
  (243/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.6033e-5 seconds)
  (244/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 0.061245949 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.049899306 seconds)
  (246/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 3.3311e-5 seconds)
  (247/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 1.9694e-5 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.86e-5 seconds)
  (249/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.7473e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.067869481 seconds)
  (251/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 7.4713e-5 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.9685e-5 seconds)
  (253/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.34e-5 seconds)
  (254/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.117335684 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.066809823 seconds)
  (256/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.4333e-5 seconds)
  (257/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.5618e-5 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.7109e-5 seconds)
  (259/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.3942e-5 seconds)
  (260/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.066577988 seconds)
  (261/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.3725e-5 seconds)
  (262/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.2667e-5 seconds)
  (263/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 0.034697662 seconds)
  (264/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.5699e-5 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.063749602 seconds)
  (266/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.1317e-5 seconds)
  (267/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.5783e-5 seconds)
  (268/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.063977449 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 4.4317e-5 seconds)
  (270/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 3.0096e-5 seconds)
  (271/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.8136e-5 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.8103e-5 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.9168e-5 seconds)
  (274/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.1394e-5 seconds)
  (275/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.9738e-5 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.862e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.3606e-5 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.7767e-5 seconds)
  (279/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.074490038 seconds)
  (280/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 8.5421e-5 seconds)
  (281/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.071806591 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 3.6308e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.8919e-5 seconds)
  (284/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.011079784 seconds)
  (285/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.6612e-5 seconds)
  (286/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.4209e-5 seconds)
  (287/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.7194e-5 seconds)
  (288/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.05456651 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.7989e-5 seconds)
  (290/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.05552377 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.071605266 seconds)
  (292/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.5375e-5 seconds)
  (293/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.0995e-5 seconds)
  (294/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.3381e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.060571791 seconds)
  (296/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.4535e-5 seconds)
  (297/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.9548e-5 seconds)
  (298/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.054251447 seconds)
  (299/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.8516e-5 seconds)
  (300/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.6026e-5 seconds)
  (301/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.4431e-5 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.063651844 seconds)
  (303/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 4.2671e-5 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 3.3022e-5 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.922e-5 seconds)
  (306/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.028441457 seconds)
  (307/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 4.0959e-5 seconds)
  (308/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.2895e-5 seconds)
  (309/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 9.771e-6 seconds)
  (310/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.9722e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.7136e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.6466e-5 seconds)
  (313/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.9202e-5 seconds)
  (314/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.4483e-5 seconds)
  (315/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.4104e-5 seconds)
  (316/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 0.031352577 seconds)
  (317/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.6793e-5 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.06144533 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 4.2308e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 0.039270157 seconds)
  (321/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.050006467 seconds)
  (322/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 3.4741e-5 seconds)
  (323/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 1.8882e-5 seconds)
  (324/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.1743e-5 seconds)
  (325/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.5417e-5 seconds)
  (326/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.7314e-5 seconds)
  (327/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.070982749 seconds)
  (328/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 3.1801e-5 seconds)
  (329/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.4642e-5 seconds)
  (330/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.6853e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.908e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.051376572 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.5135e-5 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.7723e-5 seconds)
  (335/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.7991e-5 seconds)
  (336/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 3.8592e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.809e-5 seconds)
  (338/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.9165e-5 seconds)
  (339/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.8264e-5 seconds)
  (340/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.1454e-5 seconds)
  (341/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.882e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.2714e-5 seconds)
  (343/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.5242e-5 seconds)
  (344/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.0716e-5 seconds)
  (345/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.3512e-5 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.2967e-5 seconds)
  (347/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.4703e-5 seconds)
  (348/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.6022e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.1328e-5 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.0754e-5 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.5539e-5 seconds)
  (352/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.011001139 seconds)
  (353/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 3.1744e-5 seconds)
  (354/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 3.4137e-5 seconds)
  (355/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.7651e-5 seconds)
  (356/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 1.6706e-5 seconds)
  (357/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.0767e-5 seconds)
  (358/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.8154e-5 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.1235e-5 seconds)
  (360/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.3675e-5 seconds)
  (361/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.9173e-5 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.0127e-5 seconds)
  (363/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.4691e-5 seconds)
  (364/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.6605e-5 seconds)
  (365/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.5181e-5 seconds)
  (366/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 5.4346e-5 seconds)
  (367/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.4466e-5 seconds)
  (368/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.1446e-5 seconds)
  (369/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.3007e-5 seconds)
  (370/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.0425e-5 seconds)
  (371/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.031490967 seconds)
  (372/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.028799696 seconds)
  (373/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.1997e-5 seconds)
  (374/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.827e-5 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.4907e-5 seconds)
  (376/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.1463e-5 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.062736432 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.7903e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.0967e-5 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.5986e-5 seconds)
  (381/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.8752e-5 seconds)
  (382/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.0099e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.2747e-5 seconds)
  (384/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.0218e-5 seconds)
  (385/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.8232e-5 seconds)
  (386/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.3696e-5 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.8822e-5 seconds)
  (388/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 9.252e-6 seconds)
  (389/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.8791e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.9838e-5 seconds)
  (391/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.726e-5 seconds)
  (392/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.1509e-5 seconds)
  (393/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.7386e-5 seconds)
  (394/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.4778e-5 seconds)
  (395/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.2741e-5 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.382e-5 seconds)
  (397/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.0868e-5 seconds)
  (398/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.8051e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.4117e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.8261e-5 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.9778e-5 seconds)
  (402/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.7334e-5 seconds)
  (403/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.4049e-5 seconds)
  (404/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.8126e-5 seconds)
  (405/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.5291e-5 seconds)
  (406/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.1892e-5 seconds)
  (407/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.036683082 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.538e-5 seconds)
  (409/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.7344e-5 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 3.0842e-5 seconds)
  (411/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.8386e-5 seconds)
  (412/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.7835e-5 seconds)
  (413/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 1.8799e-5 seconds)
  (414/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.7811e-5 seconds)
  (415/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 3.4546e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.6345e-5 seconds)
  (417/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.0136e-5 seconds)
  (418/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.3859e-5 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.365e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.2861e-5 seconds)
  (421/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.8979e-5 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.0665e-5 seconds)
  (423/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.3164e-5 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.077548359 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.4707e-5 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.6189e-5 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.5114e-5 seconds)
  (428/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.9798e-5 seconds)
  (429/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.2924e-5 seconds)
  (430/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.1067e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.5395e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.5006e-5 seconds)
  (433/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.028058552 seconds)
  (434/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 3.857e-5 seconds)
  (435/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.6856e-5 seconds)
  (436/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.8835e-5 seconds)
  (437/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.4433e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.8387e-5 seconds)
  (439/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.8274e-5 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.3787e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.035845547 seconds)
  (442/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.8511e-5 seconds)
  (443/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 3.1522e-5 seconds)
  (444/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.1756e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.5232e-5 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.0592e-5 seconds)
  (447/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.4281e-5 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.9131e-5 seconds)
  (449/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.060548728 seconds)
  (450/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.1592e-5 seconds)
  (451/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.4235e-5 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.1442e-5 seconds)
  (453/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.3388e-5 seconds)
  (454/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.8648e-5 seconds)
  (455/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.2063e-5 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.8531e-5 seconds)
  (457/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.8168e-5 seconds)
  (458/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.7635e-5 seconds)
  (459/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.6683e-5 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 0.06729271 seconds)
  (461/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.7862e-5 seconds)
  (462/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.0879e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 1.9321e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.1522e-5 seconds)
  (465/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.0081e-5 seconds)
  (466/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.9289e-5 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 3.2732e-5 seconds)
  (468/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.9077e-5 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.1524e-5 seconds)
  (470/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.2304e-5 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.081e-5 seconds)
  (472/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.8095e-5 seconds)
  (473/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.1991e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 1.9853e-5 seconds)
  (475/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.3119e-5 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.4481e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.4059e-5 seconds)
  (478/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.704e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.4172e-5 seconds)
  (480/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.6396e-5 seconds)
  (481/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.5257e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.3557e-5 seconds)
  (483/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.7013e-5 seconds)
  (484/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.011039717 seconds)
  (485/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.8833e-5 seconds)
  (486/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.6573e-5 seconds)
  (487/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.8947e-5 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.9587e-5 seconds)
  (489/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.2176e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.802e-5 seconds)
  (491/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.5473e-5 seconds)
  (492/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.0777e-5 seconds)
  (493/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.3347e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.6433e-5 seconds)
  (495/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.8101e-5 seconds)
  (496/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.353e-5 seconds)
  (497/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.9573e-5 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.6193e-5 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.5655e-5 seconds)
  (500/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.8305e-5 seconds)
  (501/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.253e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.4938e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.557e-5 seconds)
  (504/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.8384e-5 seconds)
  (505/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.2822e-5 seconds)
  (506/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 4.881e-5 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.8791e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.2987e-5 seconds)
  (509/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.4475e-5 seconds)
  (510/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.8321e-5 seconds)
  (511/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.2846e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.7017e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 1.9981e-5 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.3228e-5 seconds)
  (515/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.7536e-5 seconds)
  (516/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.25e-5 seconds)
  (517/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 9.498e-6 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.7278e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.4695e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.7846e-5 seconds)
  (521/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.4247e-5 seconds)
  (522/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.029678892 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.6154e-5 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.383e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.4252e-5 seconds)
  (526/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.0497e-5 seconds)
  (527/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.5934e-5 seconds)
  (528/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.9965e-5 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.9991e-5 seconds)
  (530/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.9525e-5 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.2133e-5 seconds)
  (532/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 9.294e-6 seconds)
  (533/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.6756e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 3.1504e-5 seconds)
  (535/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.8955e-5 seconds)
  (536/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.1182e-5 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.1283e-5 seconds)
  (538/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.0991e-5 seconds)
  (539/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 4.7437e-5 seconds)
  (540/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.9013e-5 seconds)
  (541/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.1599e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.3915e-5 seconds)
  (543/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.8845e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 0.051782074 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.5031e-5 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.3539e-5 seconds)
  (547/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 3.3866e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.1482e-5 seconds)
  (549/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.8004e-5 seconds)
  (550/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.3123e-5 seconds)
  (551/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.3465e-5 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.4514e-5 seconds)
  (553/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.3601e-5 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.4781e-5 seconds)
  (555/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.0036e-5 seconds)
  (556/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.9575e-5 seconds)
  (557/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.1435e-5 seconds)
  (558/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.011406373 seconds)
  (559/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 3.0926e-5 seconds)
  (560/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 3.0416e-5 seconds)
  (561/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.0082e-5 seconds)
  (562/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.8772e-5 seconds)
  (563/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.66e-5 seconds)
  (564/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.2365e-5 seconds)
  (565/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.6523e-5 seconds)
  (566/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.9401e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.7809e-5 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.0172e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.2653e-5 seconds)
  (570/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.0525e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.4219e-5 seconds)
  (572/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.6195e-5 seconds)
  (573/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.8491e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.8176e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.1186e-5 seconds)
  (576/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.0778e-5 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.7094e-5 seconds)
  (578/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.2375e-5 seconds)
  (579/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.7863e-5 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.8754e-5 seconds)
  (581/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.8234e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.8672e-5 seconds)
  (583/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.4496e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.9068e-5 seconds)
  (585/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.0114e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.5796e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.6001e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.4436e-5 seconds)
  (589/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.8271e-5 seconds)
  (590/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.3656e-5 seconds)
  (591/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 1.9868e-5 seconds)
  (592/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.8188e-5 seconds)
  (593/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.5698e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.8162e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.1276e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.1285e-5 seconds)
  (597/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.769e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 1.976e-5 seconds)
  (599/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.725e-5 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.2911e-5 seconds)
  (601/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.0301e-5 seconds)
  (602/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.6887e-5 seconds)
  (603/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.6552e-5 seconds)
  (604/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.414e-5 seconds)
  (605/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 1.5843e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.7971e-5 seconds)
  (607/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.0320532 seconds)
  (608/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 4.2494e-5 seconds)
  (609/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.4133e-5 seconds)
  (610/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.2311e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.5957e-5 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.7638e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 5.2999e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.1385e-5 seconds)
  (615/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.8785e-5 seconds)
  (616/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.068e-5 seconds)
  (617/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 3.6296e-5 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.0e-5 seconds)
  (619/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.5217e-5 seconds)
  (620/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 1.8855e-5 seconds)
  (621/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.9771e-5 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.9799e-5 seconds)
  (623/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.0306e-5 seconds)
  (624/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.000161279 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.3149e-5 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.5929e-5 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.8615e-5 seconds)
  (628/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.3134e-5 seconds)
  (629/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.7945e-5 seconds)
  (630/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.3036e-5 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.7803e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 1.4918e-5 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.5462e-5 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 1.8348e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.8843e-5 seconds)
  (636/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.6899e-5 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.3789e-5 seconds)
  (638/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.4398e-5 seconds)
  (639/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.4406e-5 seconds)
  (640/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 4.1207e-5 seconds)
  (641/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.316e-5 seconds)
  (642/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.0677e-5 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 1.8867e-5 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.7175e-5 seconds)
  (645/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.3322e-5 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.6429e-5 seconds)
  (647/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.2245e-5 seconds)
  (648/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.9034e-5 seconds)
  (649/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.5143e-5 seconds)
  (650/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.9535e-5 seconds)
  (651/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.6874e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.9037e-5 seconds)
  (653/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 9.468e-6 seconds)
  (654/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.2921e-5 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.7743e-5 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.6868e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 1.9676e-5 seconds)
  (658/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.5575e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.7697e-5 seconds)
  (660/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.5806e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.3639e-5 seconds)
  (662/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.1677e-5 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.7879e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.9972e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.4252e-5 seconds)
  (666/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.01e-5 seconds)
  (667/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.5037e-5 seconds)
  (668/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.241e-5 seconds)
  (669/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.4128e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.5057e-5 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.3936e-5 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.3392e-5 seconds)
  (673/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.6304e-5 seconds)
  (674/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 9.97e-6 seconds)
  (675/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.2239e-5 seconds)
  (676/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.1335e-5 seconds)
  (677/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 1.9914e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.6817e-5 seconds)
  (679/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.8286e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.2509e-5 seconds)
done (took 11.451601402 seconds)
(5/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.538753996 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.470439147 seconds)
  done (took 1.757994392 seconds)
  (2/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.397094057 seconds)
    (2/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.097641291 seconds)
    (3/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.409991929 seconds)
    (4/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.075383075 seconds)
    (5/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072859381 seconds)
    (6/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.16594324 seconds)
    (7/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.00014858 seconds)
    (8/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.084763262 seconds)
    (9/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001356494 seconds)
    (10/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.141999412 seconds)
    (11/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079811854 seconds)
    (12/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.141174982 seconds)
    (13/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.078838576 seconds)
    (14/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.029084986 seconds)
    (15/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.034341952 seconds)
    (16/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.077451365 seconds)
    (17/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000848113 seconds)
    (18/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.5323e-5 seconds)
    (19/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000139546 seconds)
    (20/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.03392397 seconds)
    (21/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034370172 seconds)
    (22/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002864556 seconds)
    (23/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.030846557 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.042963358 seconds)
    (25/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.004965067 seconds)
    (26/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.5176e-5 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000215841 seconds)
    (28/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001634741 seconds)
    (29/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 9.3463e-5 seconds)
    (30/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08483998 seconds)
    (31/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 8.9449e-5 seconds)
    (32/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000131346 seconds)
    (33/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.00357277 seconds)
    (34/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.026694594 seconds)
    (35/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 8.9374e-5 seconds)
    (36/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002358579 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.029944162 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.076618442 seconds)
    (39/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001550247 seconds)
    (40/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.035361467 seconds)
    (41/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000113691 seconds)
    (42/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.029310977 seconds)
    (43/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000131311 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.033882282 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.8484e-5 seconds)
    (46/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000119829 seconds)
    (47/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000147916 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000201947 seconds)
    (49/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 8.2231e-5 seconds)
    (50/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.00012669 seconds)
    (51/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 5.1421e-5 seconds)
    (52/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.2322e-5 seconds)
    (53/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.003233286 seconds)
    (54/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.001753149 seconds)
    (55/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002582544 seconds)
    (56/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.029979462 seconds)
    (57/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000252868 seconds)
    (58/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.007448936 seconds)
    (59/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002704795 seconds)
    (60/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.001040206 seconds)
    (61/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003446714 seconds)
    (62/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000250092 seconds)
    (63/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001376321 seconds)
    (64/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035053493 seconds)
    (65/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001479444 seconds)
    (66/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000238091 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.036325376 seconds)
    (68/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003433677 seconds)
    (69/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008447445 seconds)
    (70/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000102622 seconds)
    (71/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002050073 seconds)
    (72/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 6.4311e-5 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002874135 seconds)
    (74/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.003064907 seconds)
    (75/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 5.9102e-5 seconds)
    (76/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.006545083 seconds)
    (77/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002789231 seconds)
    (78/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.292e-5 seconds)
    (79/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001738413 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000123747 seconds)
    (81/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000199275 seconds)
    (82/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000904457 seconds)
    (83/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000108939 seconds)
    (84/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003590728 seconds)
    (85/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.002499208 seconds)
    (86/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 8.0941e-5 seconds)
    (87/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.012116623 seconds)
    (88/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000129383 seconds)
    (89/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000193419 seconds)
    (90/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001490586 seconds)
    (91/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.012301888 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 5.6071e-5 seconds)
    (93/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.001396837 seconds)
    (94/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.001431891 seconds)
    (95/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002443484 seconds)
    (96/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.003457247 seconds)
    (97/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000141337 seconds)
    (98/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 4.9056e-5 seconds)
    (99/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.00010111 seconds)
    (100/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000107319 seconds)
    (101/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.02975128 seconds)
    (102/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000136125 seconds)
    (103/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001339665 seconds)
    (104/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.2507e-5 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 4.8463e-5 seconds)
    (106/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000203116 seconds)
    (107/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.001804788 seconds)
    (108/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.9518e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000243829 seconds)
    (110/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000122598 seconds)
    (111/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001611931 seconds)
    (112/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002318895 seconds)
    (113/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011782078 seconds)
    (114/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000254496 seconds)
    (115/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.6381e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001725667 seconds)
    (117/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000367218 seconds)
    (118/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.8163e-5 seconds)
    (119/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001471066 seconds)
    (120/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002247873 seconds)
    (121/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002941192 seconds)
    (122/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000114582 seconds)
    (123/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000499244 seconds)
    (124/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.6165e-5 seconds)
    (125/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000106149 seconds)
    (126/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.4133e-5 seconds)
    (127/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.1092e-5 seconds)
    (128/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000142995 seconds)
    (129/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000167946 seconds)
    (130/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000259289 seconds)
    (131/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002084073 seconds)
    (132/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.008598899 seconds)
    (133/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000249787 seconds)
    (134/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001918914 seconds)
    (135/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002808626 seconds)
    (136/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000111382 seconds)
    (137/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013092478 seconds)
    (138/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.004034631 seconds)
    (139/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.000103161 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008014263 seconds)
    (141/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000176855 seconds)
    (142/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000176252 seconds)
    (143/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.4844e-5 seconds)
    (144/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 9.8234e-5 seconds)
    (145/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.000637141 seconds)
    (146/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.009423091 seconds)
    (147/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005184858 seconds)
    (148/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001794248 seconds)
    (149/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.001748899 seconds)
    (150/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 8.176e-5 seconds)
    (151/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004735528 seconds)
    (152/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.00025758 seconds)
    (153/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002392289 seconds)
    (154/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.001431944 seconds)
    (155/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 6.8189e-5 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.02019222 seconds)
    (157/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.001884916 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000101121 seconds)
    (159/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004286025 seconds)
    (160/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013378123 seconds)
    (161/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 7.2737e-5 seconds)
    (162/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000179015 seconds)
    (163/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000101275 seconds)
    (164/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000117564 seconds)
    (165/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001748415 seconds)
    (166/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.9601e-5 seconds)
    (167/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.5329e-5 seconds)
    (168/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005284164 seconds)
    (169/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002045398 seconds)
    (170/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008729448 seconds)
    (171/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000153087 seconds)
    (172/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001567314 seconds)
    (173/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.0816e-5 seconds)
    (174/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000486184 seconds)
    (175/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000121574 seconds)
    (176/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.3636e-5 seconds)
    (177/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.002941981 seconds)
    (178/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000119926 seconds)
    (179/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.00070301 seconds)
    (180/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001530495 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000128945 seconds)
    (182/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.4191e-5 seconds)
    (183/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 8.5119e-5 seconds)
    (184/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000118151 seconds)
    (185/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.0674e-5 seconds)
    (186/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005255813 seconds)
    (187/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.006814732 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002248902 seconds)
    (189/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000383669 seconds)
    (190/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008103485 seconds)
    (191/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.00217479 seconds)
    (192/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.004166246 seconds)
    (193/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.017264968 seconds)
    (194/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003420738 seconds)
    (195/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.002466924 seconds)
    (196/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000776342 seconds)
    (197/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000147442 seconds)
    (198/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.00135086 seconds)
    (199/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002401414 seconds)
    (200/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001810013 seconds)
    (201/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.011882427 seconds)
    (202/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 7.9841e-5 seconds)
    (203/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000159897 seconds)
    (204/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000233488 seconds)
    (205/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000134633 seconds)
    (206/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.565e-5 seconds)
    (207/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000220509 seconds)
    (208/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.5193e-5 seconds)
    (209/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012602903 seconds)
    (210/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000208287 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 7.1336e-5 seconds)
    (212/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.0012998 seconds)
    (213/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 5.1501e-5 seconds)
    (214/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.009472864 seconds)
    (215/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000134177 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 5.8991e-5 seconds)
    (217/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002924185 seconds)
    (218/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000125556 seconds)
    (219/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000235892 seconds)
    (220/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014265119 seconds)
    (221/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004817428 seconds)
    (222/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000158647 seconds)
    (223/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000114189 seconds)
    (224/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.009793509 seconds)
  done (took 3.653152018 seconds)
  (3/7) benchmarking "transpose"...
    (1/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.23755489 seconds)
    (2/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.02509275 seconds)
    (3/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.312474469 seconds)
    (4/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 1.024016321 seconds)
    (5/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.00017839 seconds)
    (6/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000195599 seconds)
    (7/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.124446191 seconds)
    (8/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.270340814 seconds)
    (9/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000205279 seconds)
    (10/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.00010484 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.000202448 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.052442345 seconds)
    (13/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.300967703 seconds)
    (14/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.000160684 seconds)
    (15/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.719523077 seconds)
    (16/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.084458644 seconds)
  done (took 3.912322539 seconds)
  (4/7) benchmarking "constructors"...
    (1/18) benchmarking ("IV", 100)...
    done (took 0.228341408 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.127946423 seconds)
    (3/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.1867e-5 seconds)
    (4/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.5038e-5 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 0.000159005 seconds)
    (6/18) benchmarking ("IJV", 1000)...
    done (took 0.058395339 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 0.155937972 seconds)
    (8/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.111824099 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.111800398 seconds)
    (10/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.8916e-5 seconds)
    (11/18) benchmarking ("Diagonal", 1000)...
    done (took 4.1412e-5 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 1.5947e-5 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 7.748e-6 seconds)
    (14/18) benchmarking ("IV", 10)...
    done (took 1.1834e-5 seconds)
    (15/18) benchmarking ("IJV", 100)...
    done (took 1.2726e-5 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.3989e-5 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 3.1841e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.2588e-5 seconds)
  done (took 1.601906127 seconds)
  (5/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.222433066 seconds)
    (2/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.099126137 seconds)
    (3/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.058210998 seconds)
    (4/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.2638e-5 seconds)
    (5/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.106256345 seconds)
    (6/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.044649904 seconds)
    (7/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.000730377 seconds)
    (8/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.067391088 seconds)
    (9/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000700658 seconds)
    (10/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.1766e-5 seconds)
    (11/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.05898403 seconds)
    (12/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.034361266 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.053060642 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.081537275 seconds)
    (15/54) benchmarking ("spmat", "array", 10)...
    done (took 0.02938644 seconds)
    (16/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.049549666 seconds)
    (17/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.054786444 seconds)
    (18/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.109110668 seconds)
    (19/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.0374e-5 seconds)
    (20/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.002615578 seconds)
    (21/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.0345e-5 seconds)
    (22/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.051691243 seconds)
    (23/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.086234726 seconds)
    (24/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.7988e-5 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 7.3124e-5 seconds)
    (26/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000932302 seconds)
    (27/54) benchmarking ("spmat", "range", 100)...
    done (took 6.1656e-5 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.037754143 seconds)
    (29/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.001706603 seconds)
    (30/54) benchmarking ("spvec", "array", 1000)...
    done (took 9.0753e-5 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 4.6157e-5 seconds)
    (32/54) benchmarking ("spmat", "range", 10)...
    done (took 1.1855e-5 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.066701699 seconds)
    (34/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.6492e-5 seconds)
    (35/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000717841 seconds)
    (36/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 5.5463e-5 seconds)
    (37/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 8.877e-6 seconds)
    (38/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001078125 seconds)
    (39/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.000696003 seconds)
    (40/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.4919e-5 seconds)
    (41/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 4.4331e-5 seconds)
    (42/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.355e-5 seconds)
    (43/54) benchmarking ("spvec", "logical", 1000)...
    done (took 3.4502e-5 seconds)
    (44/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.000720644 seconds)
    (45/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000139783 seconds)
    (46/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.884e-5 seconds)
    (47/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.1328e-5 seconds)
    (48/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.0079e-5 seconds)
    (49/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 7.786e-6 seconds)
    (50/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.000994143 seconds)
    (51/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.3555e-5 seconds)
    (52/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.5938e-5 seconds)
    (53/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.203e-5 seconds)
    (54/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.2162e-5 seconds)
  done (took 2.125973708 seconds)
  (6/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.059550185 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.178003375 seconds)
  done (took 1.009134305 seconds)
  (7/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (default), vector rhs"...
    done (took 2.471530816 seconds)
    (2/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.225474611 seconds)
    (3/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.4115195 seconds)
    (4/10) benchmarking "square system (default), vector rhs"...
    done (took 0.228878371 seconds)
    (5/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.109419387 seconds)
    (6/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.377858965 seconds)
    (7/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.102484765 seconds)
    (8/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.109461252 seconds)
    (9/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.106572933 seconds)
    (10/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.126960611 seconds)
  done (took 5.056166439 seconds)
done (took 19.879619742 seconds)
(6/23) benchmarking "micro"...
  (1/8) benchmarking "mandel"...
  done (took 0.101906557 seconds)
  (2/8) benchmarking "randmatmul"...
  done (took 0.124472839 seconds)
  (3/8) benchmarking "fib"...
  done (took 0.02279141 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.649115347 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.059015196 seconds)
  (6/8) benchmarking "parseint"...
  done (took 0.037673003 seconds)
  (7/8) benchmarking "quicksort"...
  done (took 0.038378307 seconds)
  (8/8) benchmarking "printfd"...
  done (took 0.164181331 seconds)
done (took 1.983183996 seconds)
(7/23) benchmarking "parallel"...
done (took 0.801541394 seconds)
(8/23) benchmarking "dates"...
  (1/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "DateFormat")...
    done (took 0.440218574 seconds)
    (2/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.0252558 seconds)
    (3/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.104464621 seconds)
    (4/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.319967652 seconds)
    (5/9) benchmarking "Date"...
    done (took 0.020903915 seconds)
    (6/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.146737334 seconds)
    (7/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024605729 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024757002 seconds)
    (9/9) benchmarking "DateTime"...
    done (took 0.020703015 seconds)
  done (took 1.939998562 seconds)
  (2/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.02419114 seconds)
    (2/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022712952 seconds)
    (3/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021410576 seconds)
    (4/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021860029 seconds)
    (5/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.024694277 seconds)
    (6/18) benchmarking ("dayofweek", "Date")...
    done (took 0.019805745 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.021954159 seconds)
    (8/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020134144 seconds)
    (9/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022347202 seconds)
    (10/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.020793992 seconds)
    (11/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019752128 seconds)
    (12/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.025945315 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.02977585 seconds)
    (14/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020931769 seconds)
    (15/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.030561093 seconds)
    (16/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021159466 seconds)
    (17/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020120947 seconds)
    (18/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.020780102 seconds)
  done (took 1.209136756 seconds)
  (3/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.033933168 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.02877664 seconds)
  done (took 0.857537276 seconds)
  (4/7) benchmarking "accessor"...
    (1/7) benchmarking "millisecond"...
    done (took 0.02006946 seconds)
    (2/7) benchmarking "month"...
    done (took 0.018587879 seconds)
    (3/7) benchmarking "second"...
    done (took 0.020506447 seconds)
    (4/7) benchmarking "day"...
    done (took 0.018737355 seconds)
    (5/7) benchmarking "year"...
    done (took 0.018861467 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.020701841 seconds)
    (7/7) benchmarking "hour"...
    done (took 0.020802701 seconds)
  done (took 0.933077424 seconds)
  (5/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.124154674 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.019227216 seconds)
  done (took 0.937892471 seconds)
  (6/7) benchmarking "conversion"...
    (1/2) benchmarking "DateTime -> Date"...
    done (took 0.020462278 seconds)
    (2/2) benchmarking "Date -> DateTime"...
    done (took 0.019187411 seconds)
  done (took 0.835557855 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020536465 seconds)
    (2/10) benchmarking ("DateTime", "Month")...
    done (took 0.035812978 seconds)
    (3/10) benchmarking ("Date", "Day")...
    done (took 0.02007744 seconds)
    (4/10) benchmarking ("Date", "Month")...
    done (took 0.032359907 seconds)
    (5/10) benchmarking ("DateTime", "Year")...
    done (took 0.03285431 seconds)
    (6/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.01977048 seconds)
    (7/10) benchmarking ("DateTime", "Second")...
    done (took 0.020330148 seconds)
    (8/10) benchmarking ("Date", "Year")...
    done (took 0.0298362 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020396834 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.020145008 seconds)
  done (took 1.048035499 seconds)
done (took 8.544456081 seconds)
(9/23) benchmarking "scalar"...
  (1/25) benchmarking "floatexp"...
    (1/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.023029839 seconds)
    (2/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.068e-5 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.021872832 seconds)
    (4/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.01873862 seconds)
    (5/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.018256822 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018337903 seconds)
    (7/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.2512e-5 seconds)
    (8/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.023320488 seconds)
    (9/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.02039157 seconds)
    (10/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018488334 seconds)
    (11/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020164984 seconds)
    (12/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.3505e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 6.926e-6 seconds)
    (14/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 8.802e-6 seconds)
    (15/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 9.937e-6 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 7.698e-6 seconds)
    (17/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 6.09e-6 seconds)
    (18/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.021755149 seconds)
    (19/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.4466e-5 seconds)
    (20/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 5.972e-6 seconds)
    (21/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 8.544e-6 seconds)
    (22/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 8.433e-6 seconds)
    (23/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 7.199e-6 seconds)
    (24/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 7.036e-6 seconds)
    (25/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 6.693e-6 seconds)
    (26/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.020174322 seconds)
    (27/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.191e-5 seconds)
    (28/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 9.556e-6 seconds)
    (29/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 9.328e-6 seconds)
    (30/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 6.905e-6 seconds)
    (31/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 5.314e-6 seconds)
    (32/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 6.075e-6 seconds)
    (33/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 7.31e-6 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 5.156e-6 seconds)
    (35/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 5.261e-6 seconds)
    (36/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 7.202e-6 seconds)
    (37/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 5.552e-6 seconds)
    (38/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 6.521e-6 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.477e-6 seconds)
    (40/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 5.049e-6 seconds)
    (41/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 6.984e-6 seconds)
    (42/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 6.32e-6 seconds)
    (43/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.401e-5 seconds)
    (44/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 6.255e-6 seconds)
    (45/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 5.872e-6 seconds)
    (46/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 4.957e-6 seconds)
    (47/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 5.423e-6 seconds)
    (48/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 5.517e-6 seconds)
    (49/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.267e-6 seconds)
    (50/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.020126105 seconds)
    (51/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.1765e-5 seconds)
    (52/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.0968e-5 seconds)
    (53/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 8.254e-6 seconds)
    (54/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 8.036e-6 seconds)
    (55/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 6.81e-6 seconds)
  done (took 1.040474379 seconds)
  (2/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.054592138 seconds)
    (2/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.041943424 seconds)
    (3/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.043170259 seconds)
    (4/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.036396471 seconds)
    (5/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026230378 seconds)
    (6/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.040771781 seconds)
  done (took 1.039954477 seconds)
  (3/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.019045324 seconds)
    (2/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020653601 seconds)
    (3/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.3089e-5 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 6.783e-6 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.035e-5 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.001e-6 seconds)
    (7/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.446e-6 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.405e-6 seconds)
    (9/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.033e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.404e-6 seconds)
    (11/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.168e-5 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.569e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.924e-6 seconds)
    (14/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 4.996e-6 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.442e-6 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.28e-6 seconds)
    (17/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.162e-6 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.215e-6 seconds)
    (19/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.432e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 5.334e-6 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.268e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 4.946e-6 seconds)
  done (took 0.836800676 seconds)
  (4/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.018964833 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 9.61e-6 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 6.102e-6 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.267e-6 seconds)
    (5/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018611131 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 9.985e-6 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 6.54e-6 seconds)
    (8/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 6.263e-6 seconds)
    (9/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 7.021e-6 seconds)
    (10/30) benchmarking ("zero", "Float64")...
    done (took 1.0876e-5 seconds)
    (11/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.045e-5 seconds)
    (12/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 9.22e-6 seconds)
    (13/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.022e-6 seconds)
    (14/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 5.839e-6 seconds)
    (15/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 5.816e-6 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 5.845e-6 seconds)
    (17/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 5.739e-6 seconds)
    (18/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 6.044e-6 seconds)
    (19/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.664e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.946e-6 seconds)
    (21/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.696e-6 seconds)
    (22/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.675e-6 seconds)
    (23/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.996e-6 seconds)
    (24/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.767e-6 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.901e-6 seconds)
    (26/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 6.026e-6 seconds)
    (27/30) benchmarking ("zero", "Float32")...
    done (took 5.733e-6 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 6.302e-6 seconds)
    (29/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.862e-6 seconds)
    (30/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 6.266e-6 seconds)
  done (took 0.833868854 seconds)
  (5/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.036119186 seconds)
    (2/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.025411161 seconds)
    (3/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.01005657 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.7413e-5 seconds)
    (5/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.1681e-5 seconds)
    (6/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 9.831e-6 seconds)
    (7/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 6.52e-6 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 5.98e-6 seconds)
    (9/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 5.713e-6 seconds)
    (10/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 6.535e-6 seconds)
    (11/68) benchmarking ("x one", "Float64")...
    done (took 2.0862e-5 seconds)
    (12/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.2552e-5 seconds)
    (13/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 7.362e-6 seconds)
    (14/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 6.64e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 6.907e-6 seconds)
    (16/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.112e-6 seconds)
    (17/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 6.243e-6 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.033e-6 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.409e-6 seconds)
    (20/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 6.019e-6 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 5.894e-6 seconds)
    (22/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 6.234e-6 seconds)
    (23/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.0112553 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 3.622e-5 seconds)
    (25/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 9.727e-6 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.075e-5 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 6.825e-6 seconds)
    (28/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 6.144e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 5.879e-6 seconds)
    (30/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 6.482e-6 seconds)
    (31/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.303e-6 seconds)
    (32/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 5.875e-6 seconds)
    (33/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.076e-6 seconds)
    (34/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.2102e-5 seconds)
    (35/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 7.1e-6 seconds)
    (36/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 7.057e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 6.137e-6 seconds)
    (38/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.172e-6 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.202e-6 seconds)
    (40/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 5.896e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 6.019e-6 seconds)
    (42/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 8.316e-6 seconds)
    (43/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.7444e-5 seconds)
    (44/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 6.921e-6 seconds)
    (45/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 6.274e-6 seconds)
    (46/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 5.818e-6 seconds)
    (47/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 6.131e-6 seconds)
    (48/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.759e-6 seconds)
    (49/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 6.306e-6 seconds)
    (50/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.889e-6 seconds)
    (51/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.824e-6 seconds)
    (52/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.879e-6 seconds)
    (53/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 6.124e-6 seconds)
    (54/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 5.776e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 5.84e-6 seconds)
    (56/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.947e-6 seconds)
    (57/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.541e-6 seconds)
    (58/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 5.78e-6 seconds)
    (59/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 5.927e-6 seconds)
    (60/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 6.075e-6 seconds)
    (61/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 7.384e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 7.583e-6 seconds)
    (63/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 6.125e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 6.19e-6 seconds)
    (65/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 5.98e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.383e-6 seconds)
    (67/68) benchmarking ("x one", "Float32")...
    done (took 1.2179e-5 seconds)
    (68/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 7.357e-6 seconds)
  done (took 0.96993876 seconds)
  (6/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015761302 seconds)
    (2/72) benchmarking ("isodd", "BigInt")...
    done (took 0.019845588 seconds)
    (3/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015422897 seconds)
    (4/72) benchmarking ("isless", "Int64")...
    done (took 0.018866568 seconds)
    (5/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.019531533 seconds)
    (6/72) benchmarking ("isnan", "Float32")...
    done (took 0.018732257 seconds)
    (7/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019365864 seconds)
    (8/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019875185 seconds)
    (9/72) benchmarking ("isequal", "Int64")...
    done (took 0.018791438 seconds)
    (10/72) benchmarking ("isequal", "Float32")...
    done (took 0.019336161 seconds)
    (11/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015186766 seconds)
    (12/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.019714564 seconds)
    (13/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015419603 seconds)
    (14/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.0281933 seconds)
    (15/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022173951 seconds)
    (16/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.019887481 seconds)
    (17/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015301513 seconds)
    (18/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019026709 seconds)
    (19/72) benchmarking ("isequal", "UInt64")...
    done (took 0.018677264 seconds)
    (20/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019091699 seconds)
    (21/72) benchmarking ("isinteger", "Float32")...
    done (took 0.018579826 seconds)
    (22/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019512696 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 0.0187292 seconds)
    (24/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020491665 seconds)
    (25/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018831222 seconds)
    (26/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015283486 seconds)
    (27/72) benchmarking ("isless", "UInt64")...
    done (took 0.018956056 seconds)
    (28/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019483779 seconds)
    (29/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015173119 seconds)
    (30/72) benchmarking ("isless", "Float32")...
    done (took 0.020442196 seconds)
    (31/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.02042567 seconds)
    (32/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.01531309 seconds)
    (33/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.023995267 seconds)
    (34/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019025351 seconds)
    (35/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.018977588 seconds)
    (36/72) benchmarking ("isnan", "Int64")...
    done (took 0.015384731 seconds)
    (37/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015324313 seconds)
    (38/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019084805 seconds)
    (39/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015435676 seconds)
    (40/72) benchmarking ("isinf", "Float32")...
    done (took 0.018738063 seconds)
    (41/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015242071 seconds)
    (42/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.019634059 seconds)
    (43/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019566455 seconds)
    (44/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020276172 seconds)
    (45/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019508315 seconds)
    (46/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.01539976 seconds)
    (47/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.01897873 seconds)
    (48/72) benchmarking ("isequal", "Float64")...
    done (took 0.019236292 seconds)
    (49/72) benchmarking ("isnan", "Float64")...
    done (took 0.018445642 seconds)
    (50/72) benchmarking ("isinf", "Float64")...
    done (took 0.018789851 seconds)
    (51/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015573703 seconds)
    (52/72) benchmarking ("isinf", "Int64")...
    done (took 0.015424568 seconds)
    (53/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015224033 seconds)
    (54/72) benchmarking ("isless", "BigInt")...
    done (took 0.020045437 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.020906704 seconds)
    (56/72) benchmarking ("isless", "BigFloat")...
    done (took 0.022763856 seconds)
    (57/72) benchmarking ("isfinite", "Float64")...
    done (took 0.018714024 seconds)
    (58/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015125793 seconds)
    (59/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019007299 seconds)
    (60/72) benchmarking ("isequal", "BigInt")...
    done (took 0.01970033 seconds)
    (61/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.019591915 seconds)
    (62/72) benchmarking ("iseven", "Int64")...
    done (took 0.019025014 seconds)
    (63/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015470496 seconds)
    (64/72) benchmarking ("iseven", "UInt64")...
    done (took 0.01890192 seconds)
    (65/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.019543847 seconds)
    (66/72) benchmarking ("isinteger", "Int64")...
    done (took 0.01524039 seconds)
    (67/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.018845592 seconds)
    (68/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019472395 seconds)
    (69/72) benchmarking ("isless", "Float64")...
    done (took 0.020210476 seconds)
    (70/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015316879 seconds)
    (71/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015178363 seconds)
    (72/72) benchmarking ("isodd", "UInt64")...
    done (took 0.018633594 seconds)
  done (took 2.129722776 seconds)
  (7/25) benchmarking "tan"...
    (1/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.01713797 seconds)
    (2/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018292288 seconds)
    (3/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018610107 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.000147668 seconds)
    (5/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.01706021 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.975e-5 seconds)
    (7/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 6.6572e-5 seconds)
    (8/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.017033509 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.0909e-5 seconds)
    (10/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.772e-6 seconds)
    (11/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.081e-5 seconds)
    (12/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.016985231 seconds)
    (13/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 6.9826e-5 seconds)
    (14/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 9.749e-6 seconds)
    (15/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.23e-6 seconds)
    (16/18) benchmarking ("zero", "Float32")...
    done (took 1.1086e-5 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.118e-6 seconds)
    (18/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.49e-5 seconds)
  done (took 0.905091054 seconds)
  (8/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019114672 seconds)
    (2/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 9.533e-6 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.6625e-5 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.634e-6 seconds)
    (5/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.445e-6 seconds)
    (6/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.21e-6 seconds)
    (7/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.529e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.226e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.631e-6 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.36e-6 seconds)
    (11/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 7.809e-6 seconds)
    (12/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.406e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.076e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.238e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 4.95e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.71e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 4.988e-6 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.058e-6 seconds)
    (19/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.677e-6 seconds)
    (20/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.069e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.846e-6 seconds)
  done (took 0.818460565 seconds)
  (9/25) benchmarking "cbrt"...
    (1/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018559818 seconds)
    (2/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 9.45e-6 seconds)
    (3/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018492082 seconds)
    (4/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 9.118e-6 seconds)
    (5/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.11e-6 seconds)
    (6/20) benchmarking ("zero", "Float64")...
    done (took 1.0722e-5 seconds)
    (7/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 9.203e-6 seconds)
    (8/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.959e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.954e-6 seconds)
    (10/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.147e-6 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 8.787e-6 seconds)
    (12/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.695e-6 seconds)
    (13/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.254e-6 seconds)
    (14/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.41e-6 seconds)
    (15/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.598e-6 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 5.286e-6 seconds)
    (17/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.768e-6 seconds)
    (18/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 8.549e-6 seconds)
    (19/20) benchmarking ("one", "Float32")...
    done (took 6.119e-6 seconds)
    (20/20) benchmarking ("one", "Float64")...
    done (took 5.41e-6 seconds)
  done (took 0.837406394 seconds)
  (10/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.051186358 seconds)
    (2/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.0288e-5 seconds)
    (3/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 7.359e-6 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.326e-6 seconds)
    (5/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 6.27e-6 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 6.04e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 6.272e-6 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.921e-6 seconds)
    (9/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.791e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.88e-6 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 8.808e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 6.242e-6 seconds)
    (13/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.503e-6 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.86e-6 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 6.069e-6 seconds)
    (16/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.748e-6 seconds)
    (17/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.766e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.774e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.993e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.79e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 6.11e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.668e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.633e-6 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.766e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.923e-6 seconds)
    (26/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.967e-6 seconds)
    (27/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.205e-6 seconds)
    (28/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.122e-6 seconds)
  done (took 0.851066677 seconds)
  (11/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018718425 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 9.989e-6 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.986e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018541201 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 9.958e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.27e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.645e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.737e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.417e-6 seconds)
    (10/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.406e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 8.73e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.439e-6 seconds)
    (13/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.2436e-5 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.635e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.334e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 8.587e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.268e-6 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.482e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 4.942e-6 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.739e-6 seconds)
    (21/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.269e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.668e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.649e-6 seconds)
    (24/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.28e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.018e-6 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.746e-6 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.036e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.478e-6 seconds)
    (29/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.243e-6 seconds)
    (30/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.578e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.479e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.217e-6 seconds)
    (33/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.245e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.993e-6 seconds)
    (35/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 5.464e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.181e-6 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.506e-6 seconds)
    (38/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.786e-6 seconds)
    (39/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.421e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.249e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.152e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.413e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.7476e-5 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.976e-6 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.711e-6 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.646e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.085e-6 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.658e-6 seconds)
    (49/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.102e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.43e-6 seconds)
    (51/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 4.988e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.262e-6 seconds)
    (53/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.177e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.209e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 4.96e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 6.007e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.444e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.284e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 4.963e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.4e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.47e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.454e-6 seconds)
    (63/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.127e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.143e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.033e-6 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.514e-6 seconds)
  done (took 0.838389324 seconds)
  (12/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018615217 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 0.01878071 seconds)
    (3/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017020883 seconds)
    (4/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.1567e-5 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.9248e-5 seconds)
    (6/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.324e-6 seconds)
    (7/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.753e-6 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 6.017e-6 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 6.587e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.888e-6 seconds)
    (11/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 6.287e-5 seconds)
    (12/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 7.147e-6 seconds)
    (13/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 6.351e-6 seconds)
    (14/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 6.121e-6 seconds)
    (15/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.941e-6 seconds)
    (16/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.639e-6 seconds)
    (17/20) benchmarking ("zero", "Float32")...
    done (took 1.0007e-5 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.114e-6 seconds)
    (19/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.687e-6 seconds)
    (20/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 6.067e-6 seconds)
  done (took 0.855019738 seconds)
  (13/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.021345275 seconds)
    (2/49) benchmarking ("add", "ComplexF64")...
    done (took 0.019322796 seconds)
    (3/49) benchmarking ("div", "Float32")...
    done (took 0.018693808 seconds)
    (4/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019816162 seconds)
    (5/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.025789186 seconds)
    (6/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.025280428 seconds)
    (7/49) benchmarking ("add", "Float64")...
    done (took 0.018621581 seconds)
    (8/49) benchmarking ("add", "BigInt")...
    done (took 0.019509535 seconds)
    (9/49) benchmarking ("sub", "Int64")...
    done (took 0.019033198 seconds)
    (10/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019327637 seconds)
    (11/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.01967697 seconds)
    (12/49) benchmarking ("div", "BigFloat")...
    done (took 0.019802301 seconds)
    (13/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.019715752 seconds)
    (14/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.019604515 seconds)
    (15/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.019828627 seconds)
    (16/49) benchmarking ("div", "UInt64")...
    done (took 0.019475812 seconds)
    (17/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.020951477 seconds)
    (18/49) benchmarking ("sub", "UInt64")...
    done (took 0.019033476 seconds)
    (19/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.025731307 seconds)
    (20/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.019956551 seconds)
    (21/49) benchmarking ("div", "Float64")...
    done (took 0.018644431 seconds)
    (22/49) benchmarking "13786"...
    done (took 0.03397023 seconds)
    (23/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.031683052 seconds)
    (24/49) benchmarking ("add", "ComplexF32")...
    done (took 0.019603161 seconds)
    (25/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.020896332 seconds)
    (26/49) benchmarking ("mul", "Float64")...
    done (took 0.018817835 seconds)
    (27/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.025118182 seconds)
    (28/49) benchmarking ("mul", "Int64")...
    done (took 0.018765749 seconds)
    (29/49) benchmarking ("sub", "Float64")...
    done (took 0.018673865 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019464376 seconds)
    (31/49) benchmarking ("div", "ComplexF64")...
    done (took 0.019924722 seconds)
    (32/49) benchmarking ("add", "BigFloat")...
    done (took 0.01974526 seconds)
    (33/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.020355343 seconds)
    (34/49) benchmarking ("mul", "Float32")...
    done (took 0.018606727 seconds)
    (35/49) benchmarking ("div", "BigInt")...
    done (took 0.020674947 seconds)
    (36/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.045843942 seconds)
    (37/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.019764168 seconds)
    (38/49) benchmarking ("add", "Float32")...
    done (took 0.018559141 seconds)
    (39/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.019650512 seconds)
    (40/49) benchmarking ("add", "Int64")...
    done (took 0.018969044 seconds)
    (41/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019806862 seconds)
    (42/49) benchmarking ("mul", "UInt64")...
    done (took 0.019023379 seconds)
    (43/49) benchmarking ("add", "UInt64")...
    done (took 0.018694329 seconds)
    (44/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021094081 seconds)
    (45/49) benchmarking ("sub", "BigInt")...
    done (took 0.019487842 seconds)
    (46/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020376686 seconds)
    (47/49) benchmarking ("sub", "Float32")...
    done (took 0.018347497 seconds)
    (48/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.020206409 seconds)
    (49/49) benchmarking ("div", "Int64")...
    done (took 0.019029578 seconds)
  done (took 1.837321461 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020346235 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018704807 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.0445e-5 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 9.165e-6 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.0053e-5 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.86e-6 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.703e-6 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.856e-6 seconds)
    (9/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.606e-6 seconds)
    (10/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 4.943e-6 seconds)
    (11/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 9.805e-6 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.89e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.719e-6 seconds)
    (14/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.258e-6 seconds)
    (15/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.101e-6 seconds)
    (16/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.26e-6 seconds)
    (17/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.008e-6 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.536e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 5.391e-6 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 5.177e-6 seconds)
    (21/22) benchmarking ("zero", "Float32")...
    done (took 5.626e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.532e-6 seconds)
  done (took 0.847013042 seconds)
  (15/25) benchmarking "sinh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0186114 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020402396 seconds)
    (3/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.0797e-5 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.2011e-5 seconds)
    (5/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.697e-6 seconds)
    (6/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 6.908e-6 seconds)
    (7/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.1043e-5 seconds)
    (8/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 6.236e-6 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.469e-6 seconds)
    (10/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.972e-6 seconds)
    (11/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.0628e-5 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 6.583e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 6.73e-6 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.022e-6 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.426e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 6.178e-6 seconds)
    (17/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.86e-6 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 6.009e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 6.564e-6 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 6.519e-6 seconds)
    (21/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.134e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 6.081e-6 seconds)
  done (took 0.841478197 seconds)
  (16/25) benchmarking "exp2"...
    (1/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018648389 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 9.157e-6 seconds)
    (3/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018612022 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 9.438e-6 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 9.706e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 9.654e-6 seconds)
    (7/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 7.484e-6 seconds)
    (8/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.483e-6 seconds)
    (9/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 4.963e-6 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.487e-6 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 8.515e-6 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.649e-6 seconds)
    (13/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 5.034e-6 seconds)
    (14/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.046e-6 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.673e-6 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.391e-6 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.687e-6 seconds)
    (18/24) benchmarking ("zero", "Float32")...
    done (took 5.831e-6 seconds)
    (19/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.439e-6 seconds)
    (20/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.198e-6 seconds)
    (21/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 5.368e-6 seconds)
    (22/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.198e-6 seconds)
    (23/24) benchmarking ("one", "Float32")...
    done (took 5.591e-6 seconds)
    (24/24) benchmarking ("one", "Float64")...
    done (took 5.398e-6 seconds)
  done (took 0.840506178 seconds)
  (17/25) benchmarking "iteration"...
    (1/2) benchmarking "in"...
    done (took 0.019688645 seconds)
    (2/2) benchmarking "indexed"...
    done (took 0.019676186 seconds)
  done (took 0.843513804 seconds)
  (18/25) benchmarking "acosh"...
    (1/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.018457371 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.0312e-5 seconds)
    (3/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018535286 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.0871e-5 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 7.327e-6 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 9.86e-6 seconds)
    (7/8) benchmarking ("one", "Float64")...
    done (took 1.1651e-5 seconds)
    (8/8) benchmarking ("one", "Float32")...
    done (took 6.126e-6 seconds)
  done (took 0.840218361 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020715396 seconds)
    (2/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020478461 seconds)
    (3/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.3983e-5 seconds)
    (4/16) benchmarking ("zero", "Float64")...
    done (took 1.1303e-5 seconds)
    (5/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 9.15e-6 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 6.533e-6 seconds)
    (7/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.515e-6 seconds)
    (8/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 6.478e-6 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.422e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 6.079e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 9.831e-6 seconds)
    (12/16) benchmarking ("zero", "Float32")...
    done (took 6.558e-6 seconds)
    (13/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.777e-6 seconds)
    (14/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 5.96e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 6.124e-6 seconds)
    (16/16) benchmarking ("one", "Float32")...
    done (took 6.076e-6 seconds)
  done (took 0.844335551 seconds)
  (20/25) benchmarking "expm1"...
    (1/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018438255 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.0857e-5 seconds)
    (3/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018424654 seconds)
    (4/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.0153e-5 seconds)
    (5/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.81e-6 seconds)
    (6/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.969e-6 seconds)
    (7/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.323e-6 seconds)
    (8/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 8.854e-6 seconds)
    (9/30) benchmarking ("zero", "Float64")...
    done (took 9.413e-6 seconds)
    (10/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.912e-6 seconds)
    (11/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.016e-5 seconds)
    (12/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.863e-6 seconds)
    (13/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 4.919e-6 seconds)
    (14/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.155e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 9.835e-6 seconds)
    (16/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.843e-6 seconds)
    (17/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.027e-6 seconds)
    (18/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.301e-6 seconds)
    (19/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.292e-6 seconds)
    (20/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.56e-6 seconds)
    (21/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.495e-6 seconds)
    (22/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 4.897e-6 seconds)
    (23/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 5.619e-6 seconds)
    (24/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 5.193e-6 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.935e-6 seconds)
    (26/30) benchmarking ("zero", "Float32")...
    done (took 6.106e-6 seconds)
    (27/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.598e-6 seconds)
    (28/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.385e-6 seconds)
    (29/30) benchmarking ("one", "Float32")...
    done (took 5.06e-6 seconds)
    (30/30) benchmarking ("one", "Float64")...
    done (took 5.0e-6 seconds)
  done (took 0.84095702 seconds)
  (21/25) benchmarking "sin"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018676803 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 9.55e-6 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.412e-6 seconds)
    (4/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018504511 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.236e-5 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.242e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.989e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.37e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.184e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.285e-6 seconds)
    (11/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.2373e-5 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.911e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.427e-6 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.194e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.124e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.838e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 8.527e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.989e-6 seconds)
    (19/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.297e-6 seconds)
    (20/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.2488e-5 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.445e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.315e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.995e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.468e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.151e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.093e-6 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.944e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.353e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.726e-6 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.923e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.597e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.885e-6 seconds)
    (33/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.32e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.226e-6 seconds)
    (35/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.206e-6 seconds)
    (36/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.102e-6 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.094e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.1e-6 seconds)
    (39/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.485e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.043e-6 seconds)
    (41/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.544e-6 seconds)
    (42/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.931e-6 seconds)
    (43/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.7144e-5 seconds)
    (44/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.512e-6 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.62e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.48e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.654e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.439e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.083e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.193e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.278e-6 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.275e-6 seconds)
    (53/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 5.299e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.032e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.021e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.232e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 4.946e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.512e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 4.943e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.041e-6 seconds)
    (61/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.457e-6 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.574e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.158e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.306e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.036e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.405e-6 seconds)
  done (took 0.841300926 seconds)
  (22/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.018725339 seconds)
    (2/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.0257e-5 seconds)
    (3/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018248201 seconds)
    (4/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.2401e-5 seconds)
    (5/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 7.71e-6 seconds)
    (6/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 7.308e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 6.469e-6 seconds)
    (8/22) benchmarking ("zero", "Float64")...
    done (took 1.1794e-5 seconds)
    (9/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 7.107e-6 seconds)
    (10/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 7.097e-6 seconds)
    (11/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.0504e-5 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.058e-6 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 5.96e-6 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.249e-6 seconds)
    (15/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 6.078e-6 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.722e-6 seconds)
    (17/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 6.179e-6 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.075e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 6.419e-6 seconds)
    (20/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 6.283e-6 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.755e-6 seconds)
    (22/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 6.037e-6 seconds)
  done (took 0.840938088 seconds)
  (23/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.019327332 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019081321 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.4623e-5 seconds)
    (4/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 7.719e-6 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 6.092e-6 seconds)
    (6/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 6.44e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 6.788e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 6.452e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 6.999e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 6.794e-6 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 8.901e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 6.462e-6 seconds)
    (13/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 6.385e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.949e-6 seconds)
    (15/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 6.315e-6 seconds)
    (16/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 6.074e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.922e-6 seconds)
    (18/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.219e-6 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.641e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.131e-6 seconds)
    (21/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.816e-6 seconds)
    (22/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.13e-6 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 6.139e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.909e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.874e-6 seconds)
    (26/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.979e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 6.319e-6 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.894e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 6.088e-6 seconds)
    (30/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 6.05e-6 seconds)
    (31/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 6.251e-6 seconds)
    (32/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.962e-6 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.659e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 7.916e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 6.247e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.773e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.756e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 6.372e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.363e-6 seconds)
    (40/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 6.12e-6 seconds)
    (41/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.975e-6 seconds)
    (42/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 6.139e-6 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.5967e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 6.542e-6 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 6.67e-6 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.864e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 6.194e-6 seconds)
    (48/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.627e-6 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.422e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 6.412e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.377e-6 seconds)
    (52/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 6.083e-6 seconds)
    (53/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.669e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.987e-6 seconds)
    (55/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.851e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 6.095e-6 seconds)
    (57/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 6.161e-6 seconds)
    (58/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.855e-6 seconds)
    (59/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.229e-6 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.345e-6 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 6.238e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.62e-6 seconds)
  done (took 0.843328269 seconds)
  (24/25) benchmarking "acos"...
    (1/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.017181045 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018334469 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.018384472 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.9072e-5 seconds)
    (5/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 7.593e-6 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 7.234e-6 seconds)
    (7/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.49e-6 seconds)
    (8/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.6391e-5 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 6.293e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.766e-6 seconds)
    (11/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.0287e-5 seconds)
    (12/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 6.091e-6 seconds)
    (13/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.751e-6 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.545e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 6.282e-6 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.975e-6 seconds)
    (17/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.712e-6 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.00014841 seconds)
  done (took 0.857819049 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.022714742 seconds)
    (2/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.027060831 seconds)
    (3/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.021808734 seconds)
    (4/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.020598284 seconds)
    (5/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020333343 seconds)
    (6/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022099271 seconds)
    (7/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022066065 seconds)
    (8/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020359633 seconds)
    (9/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.019892802 seconds)
    (10/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.028850123 seconds)
    (11/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.018830138 seconds)
    (12/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.022352244 seconds)
    (13/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.020971995 seconds)
    (14/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021782963 seconds)
    (15/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020314731 seconds)
    (16/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.019728586 seconds)
    (17/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020358768 seconds)
    (18/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026240252 seconds)
    (19/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.020331579 seconds)
    (20/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.019880546 seconds)
    (21/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.018390199 seconds)
    (22/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020901662 seconds)
    (23/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021460635 seconds)
    (24/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.019511494 seconds)
    (25/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020915054 seconds)
    (26/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.019848932 seconds)
    (27/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.023456932 seconds)
    (28/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.026499268 seconds)
    (29/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.021933578 seconds)
    (30/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.02092584 seconds)
    (31/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020677196 seconds)
    (32/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020510945 seconds)
    (33/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.026964277 seconds)
    (34/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.02251653 seconds)
    (35/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018937654 seconds)
    (36/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021372019 seconds)
    (37/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.021952715 seconds)
    (38/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.019899661 seconds)
    (39/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.020279724 seconds)
    (40/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.02058205 seconds)
    (41/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022122 seconds)
    (42/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.020364804 seconds)
    (43/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020207094 seconds)
    (44/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.022437689 seconds)
    (45/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.020682243 seconds)
    (46/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019483652 seconds)
    (47/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020563897 seconds)
    (48/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019282838 seconds)
    (49/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020080364 seconds)
    (50/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021753209 seconds)
    (51/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.018693362 seconds)
    (52/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020153359 seconds)
    (53/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020156982 seconds)
    (54/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021335428 seconds)
    (55/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.021571139 seconds)
    (56/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.022129111 seconds)
    (57/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.021984633 seconds)
    (58/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.021376926 seconds)
    (59/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.022349887 seconds)
    (60/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020700251 seconds)
    (61/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.019614008 seconds)
    (62/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.0198489 seconds)
    (63/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021933686 seconds)
    (64/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.0213028 seconds)
    (65/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021671448 seconds)
    (66/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020065028 seconds)
    (67/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.020729942 seconds)
    (68/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.020609372 seconds)
    (69/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021279815 seconds)
    (70/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.023589897 seconds)
    (71/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022158392 seconds)
    (72/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.008560376 seconds)
    (73/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.030655496 seconds)
    (74/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.019287062 seconds)
    (75/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.021010456 seconds)
    (76/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019286114 seconds)
    (77/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020044148 seconds)
    (78/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020137589 seconds)
    (79/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.026399499 seconds)
    (80/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020199284 seconds)
    (81/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.02017315 seconds)
    (82/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020390564 seconds)
    (83/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.020637939 seconds)
    (84/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020836488 seconds)
    (85/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026049358 seconds)
    (86/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.019760031 seconds)
    (87/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.018782929 seconds)
    (88/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019702526 seconds)
    (89/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.019838196 seconds)
    (90/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021490086 seconds)
    (91/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020713527 seconds)
    (92/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026451595 seconds)
    (93/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.026088268 seconds)
    (94/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020271032 seconds)
    (95/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021524232 seconds)
    (96/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.02715766 seconds)
    (97/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020266902 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021610196 seconds)
    (99/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.019756151 seconds)
    (100/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.022809299 seconds)
    (101/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.018936478 seconds)
    (102/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.021481535 seconds)
    (103/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.018844311 seconds)
    (104/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.02080118 seconds)
    (105/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.020622471 seconds)
    (106/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020660941 seconds)
    (107/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.021548156 seconds)
    (108/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019217756 seconds)
    (109/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.018818574 seconds)
    (110/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021997137 seconds)
    (111/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.021268175 seconds)
    (112/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.01835901 seconds)
    (113/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.018795339 seconds)
    (114/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.020750325 seconds)
    (115/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021342868 seconds)
    (116/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019367081 seconds)
    (117/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020832128 seconds)
    (118/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020490991 seconds)
    (119/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.018676268 seconds)
    (120/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020064733 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.021514451 seconds)
    (122/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022343772 seconds)
    (123/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023538879 seconds)
    (124/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.021234878 seconds)
    (125/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026385682 seconds)
    (126/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020399651 seconds)
    (127/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.022651808 seconds)
    (128/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.021152161 seconds)
    (129/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.01897864 seconds)
    (130/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019581469 seconds)
    (131/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.022042762 seconds)
    (132/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.023057542 seconds)
    (133/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021781337 seconds)
    (134/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008446768 seconds)
    (135/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.018775316 seconds)
    (136/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02038872 seconds)
    (137/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.021628319 seconds)
    (138/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020469028 seconds)
    (139/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.020743536 seconds)
    (140/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.021989362 seconds)
    (141/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021193178 seconds)
    (142/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003006278 seconds)
    (143/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.018988063 seconds)
    (144/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.02687248 seconds)
    (145/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020191128 seconds)
    (146/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.022751426 seconds)
    (147/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.018786146 seconds)
    (148/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022632829 seconds)
    (149/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020355267 seconds)
    (150/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026656987 seconds)
    (151/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.020721325 seconds)
    (152/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023168895 seconds)
    (153/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020176777 seconds)
    (154/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021000929 seconds)
    (155/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021284824 seconds)
    (156/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.019623082 seconds)
    (157/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020212097 seconds)
    (158/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.019772418 seconds)
    (159/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.020713624 seconds)
    (160/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020548515 seconds)
    (161/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020694635 seconds)
    (162/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.01865628 seconds)
    (163/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.019681988 seconds)
    (164/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022177598 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.020391253 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019237143 seconds)
    (167/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.018584364 seconds)
    (168/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020488486 seconds)
    (169/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.02050804 seconds)
    (170/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021371327 seconds)
    (171/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026072373 seconds)
    (172/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.018873943 seconds)
    (173/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.018765725 seconds)
    (174/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.019399289 seconds)
    (175/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019819706 seconds)
    (176/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.022349254 seconds)
    (177/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023533475 seconds)
    (178/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022403413 seconds)
    (179/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.020281069 seconds)
    (180/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019347832 seconds)
    (181/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022296309 seconds)
    (182/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.022460638 seconds)
    (183/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.019663199 seconds)
    (184/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.02006147 seconds)
    (185/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022519243 seconds)
    (186/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.018571269 seconds)
    (187/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.019379393 seconds)
    (188/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.019579593 seconds)
    (189/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026738993 seconds)
    (190/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026168391 seconds)
    (191/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.020544177 seconds)
    (192/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.019341527 seconds)
    (193/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.025935936 seconds)
    (194/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.019978679 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.020738259 seconds)
    (196/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019418199 seconds)
    (197/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020793536 seconds)
    (198/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.021658432 seconds)
    (199/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.018621856 seconds)
    (200/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026352315 seconds)
    (201/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022723958 seconds)
    (202/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.022004438 seconds)
    (203/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022110494 seconds)
    (204/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020171863 seconds)
    (205/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.019725592 seconds)
    (206/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01971143 seconds)
    (207/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026749516 seconds)
    (208/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.025501929 seconds)
    (209/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.021246401 seconds)
    (210/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.020931683 seconds)
    (211/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.02207441 seconds)
    (212/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020208813 seconds)
    (213/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.00326444 seconds)
    (214/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.019996261 seconds)
    (215/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019590486 seconds)
    (216/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.020465795 seconds)
    (217/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.021529972 seconds)
    (218/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020104455 seconds)
    (219/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.02033591 seconds)
    (220/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020735653 seconds)
    (221/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.0223732 seconds)
    (222/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020394813 seconds)
    (223/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020099323 seconds)
    (224/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020107278 seconds)
    (225/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.020457278 seconds)
    (226/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021602611 seconds)
    (227/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019007183 seconds)
    (228/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.022397908 seconds)
    (229/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.022146117 seconds)
    (230/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021603886 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019379436 seconds)
    (232/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.01920375 seconds)
    (233/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019569893 seconds)
    (234/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.021515953 seconds)
    (235/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021690002 seconds)
    (236/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.021657757 seconds)
    (237/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.021806966 seconds)
    (238/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.021458172 seconds)
    (239/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.003229137 seconds)
    (240/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020379262 seconds)
    (241/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.019498158 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019340823 seconds)
    (243/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.020665965 seconds)
    (244/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018635304 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.0207789 seconds)
    (246/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.01921671 seconds)
    (247/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02016858 seconds)
    (248/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.0211046 seconds)
    (249/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.020512995 seconds)
    (250/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.023384172 seconds)
    (251/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02151845 seconds)
    (252/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019973368 seconds)
    (253/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.018822506 seconds)
    (254/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.020424326 seconds)
    (255/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.018861559 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.020898601 seconds)
    (257/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021680884 seconds)
    (258/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.020720479 seconds)
    (259/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003480717 seconds)
    (260/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.020716534 seconds)
    (261/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.020940299 seconds)
    (262/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.022665862 seconds)
    (263/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021057688 seconds)
    (264/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.019976061 seconds)
    (265/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.021413148 seconds)
    (266/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.019880835 seconds)
    (267/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.020057849 seconds)
    (268/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020096594 seconds)
    (269/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027345303 seconds)
    (270/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.02588082 seconds)
    (271/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.022250415 seconds)
    (272/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020075581 seconds)
    (273/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.020886405 seconds)
    (274/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.02149838 seconds)
    (275/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023043156 seconds)
    (276/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.020988308 seconds)
    (277/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.021679119 seconds)
    (278/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02073765 seconds)
    (279/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.020228671 seconds)
    (280/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.020206001 seconds)
    (281/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019742033 seconds)
    (282/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.018800867 seconds)
    (283/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.018884991 seconds)
    (284/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.019472482 seconds)
    (285/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019167592 seconds)
    (286/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.02021775 seconds)
    (287/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.019805542 seconds)
    (288/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020031229 seconds)
    (289/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021640105 seconds)
    (290/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.019812851 seconds)
    (291/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.021012193 seconds)
    (292/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025286758 seconds)
    (293/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022026022 seconds)
    (294/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019056764 seconds)
    (295/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.02192438 seconds)
    (296/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022071414 seconds)
    (297/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.019572039 seconds)
    (298/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020070971 seconds)
    (299/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021727642 seconds)
    (300/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020734161 seconds)
    (301/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.018698898 seconds)
    (302/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.021121053 seconds)
    (303/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021041786 seconds)
    (304/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.022239916 seconds)
    (305/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.020927818 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.020695067 seconds)
    (307/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.019650483 seconds)
    (308/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020319178 seconds)
    (309/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021744611 seconds)
    (310/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020431222 seconds)
    (311/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.021873311 seconds)
    (312/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.020879356 seconds)
    (313/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020628696 seconds)
    (314/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.018588803 seconds)
    (315/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019005697 seconds)
    (316/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.02117179 seconds)
    (317/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.019634753 seconds)
    (318/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020020876 seconds)
    (319/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019796571 seconds)
    (320/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02601491 seconds)
    (321/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019464139 seconds)
    (322/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.020707633 seconds)
    (323/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.021586337 seconds)
    (324/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021347309 seconds)
    (325/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022396114 seconds)
    (326/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.027028628 seconds)
    (327/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.020951811 seconds)
    (328/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019727754 seconds)
    (329/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.019625751 seconds)
    (330/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.019758982 seconds)
    (331/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019520772 seconds)
    (332/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021365588 seconds)
    (333/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.019936136 seconds)
    (334/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.019657338 seconds)
    (335/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021437486 seconds)
    (336/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019823897 seconds)
    (337/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020099459 seconds)
    (338/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02611426 seconds)
    (339/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.019905489 seconds)
    (340/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.019806256 seconds)
    (341/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021066397 seconds)
    (342/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.018458757 seconds)
    (343/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.021390024 seconds)
    (344/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021150047 seconds)
    (345/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.020153115 seconds)
    (346/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020437402 seconds)
    (347/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.022606635 seconds)
    (348/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.019813889 seconds)
    (349/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.019418896 seconds)
    (350/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.020613825 seconds)
    (351/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020007914 seconds)
    (352/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.018422587 seconds)
    (353/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021452387 seconds)
    (354/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.01972754 seconds)
    (355/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022205831 seconds)
    (356/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.020015177 seconds)
    (357/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.019510508 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020272115 seconds)
    (359/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025810272 seconds)
    (360/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021475207 seconds)
    (361/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.025960304 seconds)
    (362/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022050189 seconds)
    (363/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.022104795 seconds)
    (364/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.025507367 seconds)
    (365/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.025626031 seconds)
    (366/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003025229 seconds)
    (367/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.018511523 seconds)
    (368/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.020257078 seconds)
    (369/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021211583 seconds)
    (370/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.020354387 seconds)
    (371/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019423672 seconds)
    (372/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021231988 seconds)
    (373/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.0213788 seconds)
    (374/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.020393002 seconds)
    (375/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019559524 seconds)
    (376/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.02017769 seconds)
    (377/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020523269 seconds)
    (378/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.019913903 seconds)
    (379/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.020865461 seconds)
    (380/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018704366 seconds)
    (381/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020023867 seconds)
    (382/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021316006 seconds)
    (383/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026006614 seconds)
    (384/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.019392945 seconds)
    (385/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.021026317 seconds)
    (386/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.021296484 seconds)
    (387/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.008763387 seconds)
    (388/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.019612647 seconds)
    (389/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.019581589 seconds)
    (390/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019269529 seconds)
    (391/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021181203 seconds)
    (392/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025688299 seconds)
    (393/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.020176264 seconds)
    (394/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.019690639 seconds)
    (395/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021158211 seconds)
    (396/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.021307255 seconds)
    (397/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.018546561 seconds)
    (398/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.020263913 seconds)
    (399/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.019189747 seconds)
    (400/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.018371583 seconds)
    (401/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.020936328 seconds)
    (402/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.025803924 seconds)
    (403/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.019809418 seconds)
    (404/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019467083 seconds)
    (405/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.019733372 seconds)
    (406/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022543293 seconds)
    (407/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.02114064 seconds)
    (408/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019677335 seconds)
    (409/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.021151048 seconds)
    (410/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.022059151 seconds)
    (411/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.019231831 seconds)
    (412/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.021382827 seconds)
    (413/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.019237287 seconds)
    (414/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.020138546 seconds)
    (415/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.021509236 seconds)
    (416/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019119093 seconds)
    (417/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021035419 seconds)
    (418/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.020790962 seconds)
    (419/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.019958703 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.019639811 seconds)
    (421/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.023014474 seconds)
    (422/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.019636116 seconds)
    (423/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.019875132 seconds)
    (424/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.020807209 seconds)
    (425/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004066198 seconds)
    (426/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.019466301 seconds)
    (427/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019114789 seconds)
    (428/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.021443827 seconds)
    (429/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020425552 seconds)
    (430/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.020707794 seconds)
    (431/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022122348 seconds)
    (432/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.018795402 seconds)
    (433/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025516031 seconds)
    (434/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.020038484 seconds)
    (435/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.019479115 seconds)
    (436/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020323784 seconds)
    (437/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021004441 seconds)
    (438/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021388828 seconds)
    (439/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.021483328 seconds)
    (440/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.019450499 seconds)
    (441/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020517303 seconds)
    (442/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.0214591 seconds)
    (443/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.018384395 seconds)
    (444/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020103974 seconds)
    (445/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.02151882 seconds)
    (446/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.019658746 seconds)
    (447/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.02013308 seconds)
    (448/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022180074 seconds)
    (449/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019696525 seconds)
    (450/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.019971821 seconds)
    (451/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.019816539 seconds)
    (452/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020272667 seconds)
    (453/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.020137267 seconds)
    (454/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021339879 seconds)
    (455/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.02021834 seconds)
    (456/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02169184 seconds)
    (457/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019489241 seconds)
    (458/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.020475783 seconds)
    (459/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.022599712 seconds)
    (460/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003033594 seconds)
    (461/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021088539 seconds)
    (462/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021689535 seconds)
    (463/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.021467953 seconds)
    (464/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003643266 seconds)
    (465/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.020625756 seconds)
    (466/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019494585 seconds)
    (467/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.022460809 seconds)
    (468/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.01949187 seconds)
    (469/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.021114541 seconds)
    (470/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.020387195 seconds)
    (471/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.004479384 seconds)
    (472/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.01980683 seconds)
    (473/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.019288994 seconds)
    (474/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.021215814 seconds)
    (475/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.021874279 seconds)
    (476/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.01893693 seconds)
    (477/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.01910391 seconds)
    (478/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019312995 seconds)
    (479/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.018637876 seconds)
    (480/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.01861672 seconds)
    (481/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019484432 seconds)
    (482/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.01952873 seconds)
    (483/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.0207813 seconds)
    (484/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.025413262 seconds)
    (485/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020103513 seconds)
    (486/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.019982331 seconds)
    (487/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.021902637 seconds)
    (488/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.019822393 seconds)
    (489/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.02092319 seconds)
    (490/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.020915318 seconds)
    (491/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.021383346 seconds)
    (492/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.019419429 seconds)
    (493/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.018551749 seconds)
    (494/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018520171 seconds)
    (495/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019374733 seconds)
    (496/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019686984 seconds)
    (497/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019266323 seconds)
    (498/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.019876896 seconds)
    (499/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019303185 seconds)
    (500/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.020538847 seconds)
    (501/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.019226162 seconds)
    (502/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.019936654 seconds)
    (503/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.020743918 seconds)
    (504/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.019748784 seconds)
    (505/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.025635567 seconds)
    (506/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.024827008 seconds)
    (507/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020044823 seconds)
    (508/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018412857 seconds)
    (509/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004078137 seconds)
    (510/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.019403591 seconds)
    (511/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02225133 seconds)
    (512/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.019923963 seconds)
    (513/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020356957 seconds)
    (514/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.021662105 seconds)
    (515/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.01948564 seconds)
    (516/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023222042 seconds)
    (517/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.020681291 seconds)
    (518/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.022606962 seconds)
    (519/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019513634 seconds)
    (520/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.018787028 seconds)
    (521/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.01927942 seconds)
    (522/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.018939884 seconds)
    (523/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.025558997 seconds)
    (524/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.01999217 seconds)
    (525/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.020648801 seconds)
    (526/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021909727 seconds)
    (527/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020051895 seconds)
    (528/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.021930006 seconds)
    (529/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022394845 seconds)
    (530/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019177371 seconds)
    (531/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.019307919 seconds)
    (532/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.019510506 seconds)
    (533/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024887448 seconds)
    (534/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.020277705 seconds)
    (535/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.018914584 seconds)
    (536/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.019274789 seconds)
    (537/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.025517005 seconds)
    (538/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020006647 seconds)
    (539/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.021188424 seconds)
    (540/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.019548816 seconds)
    (541/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.020553347 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.021318626 seconds)
    (543/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.0248913 seconds)
    (544/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.01987633 seconds)
    (545/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.018464023 seconds)
    (546/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020438762 seconds)
    (547/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.019739469 seconds)
    (548/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018267417 seconds)
    (549/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.019618357 seconds)
    (550/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.018665735 seconds)
    (551/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.019627229 seconds)
    (552/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022073177 seconds)
    (553/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.020644148 seconds)
    (554/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.020952202 seconds)
    (555/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.020672328 seconds)
    (556/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.021195518 seconds)
    (557/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.019477904 seconds)
    (558/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022335471 seconds)
    (559/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021345134 seconds)
    (560/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.01934942 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019051056 seconds)
    (562/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.019958174 seconds)
    (563/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.019890921 seconds)
    (564/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.019452656 seconds)
    (565/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003647347 seconds)
    (566/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021132115 seconds)
    (567/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.018328757 seconds)
    (568/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.019766197 seconds)
    (569/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019534378 seconds)
    (570/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.018708137 seconds)
    (571/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.025107622 seconds)
    (572/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.0186589 seconds)
    (573/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.01926169 seconds)
    (574/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020155388 seconds)
    (575/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019266872 seconds)
    (576/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027092727 seconds)
    (577/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.02056064 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020440202 seconds)
    (579/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.021899926 seconds)
    (580/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.018760276 seconds)
    (581/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.020722737 seconds)
    (582/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.021926087 seconds)
    (583/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.019172919 seconds)
    (584/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.02091925 seconds)
    (585/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.019356894 seconds)
    (586/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.019393979 seconds)
    (587/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.020880487 seconds)
    (588/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.020955071 seconds)
    (589/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025175774 seconds)
    (590/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003368721 seconds)
    (591/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.021901975 seconds)
    (592/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.022017848 seconds)
    (593/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.019416933 seconds)
    (594/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.020882088 seconds)
    (595/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.020599398 seconds)
    (596/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.019934172 seconds)
  done (took 13.049194323 seconds)
done (took 36.920225867 seconds)
(10/23) benchmarking "misc"...
  (1/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt", "UInt")...
    done (took 0.021723014 seconds)
    (2/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.021538796 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.021698722 seconds)
    (4/4) benchmarking ("Int", "UInt")...
    done (took 0.021450109 seconds)
  done (took 0.924254732 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.204877987 seconds)
  (3/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.119412589 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 6.123e-5 seconds)
  done (took 0.985764136 seconds)
  (4/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.033156083 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.03455942 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.038232841 seconds)
  done (took 0.949584998 seconds)
  (5/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.058971666 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.053481946 seconds)
  done (took 0.957248761 seconds)
  (6/15) benchmarking "fastmath many args"...
  done (took 0.058450955 seconds)
  (7/15) benchmarking "23042"...
    (1/4) benchmarking "Float32"...
    done (took 0.064490347 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.052890061 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.022798902 seconds)
    (4/4) benchmarking "Float64"...
    done (took 0.027057512 seconds)
  done (took 1.011751669 seconds)
  (8/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.039196015 seconds)
  done (took 0.883931419 seconds)
  (9/15) benchmarking "18129"...
  done (took 0.168661796 seconds)
  (10/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.263044137 seconds)
    (2/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.138081031 seconds)
    (3/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.079400884 seconds)
  done (took 1.328730616 seconds)
  (11/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.090763925 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.035817688 seconds)
  done (took 0.97849481 seconds)
  (12/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.06372198 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.059841632 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.056940676 seconds)
  done (took 1.029730357 seconds)
  (13/15) benchmarking "20517"...
  done (took 0.059357665 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.08016601 seconds)
    (2/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.14623801 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.035598653 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.4816e-5 seconds)
    (5/10) benchmarking "zip(1:1000)"...
    done (took 0.08036741 seconds)
    (6/10) benchmarking "zip(1:1)"...
    done (took 1.0768e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.4135e-5 seconds)
    (8/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.086178994 seconds)
    (9/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.107527337 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.5821e-5 seconds)
  done (took 1.392352186 seconds)
  (15/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "nested")...
    done (took 0.030456283 seconds)
    (2/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.043280865 seconds)
    (3/4) benchmarking ("parse", "function")...
    done (took 0.019058388 seconds)
    (4/4) benchmarking ("parse", "array")...
    done (took 0.019777002 seconds)
  done (took 0.969882841 seconds)
done (took 12.759776539 seconds)
(11/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.117833995 seconds)
    (2/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.03723989 seconds)
    (3/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.2285314 seconds)
    (4/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.03306194 seconds)
    (5/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026791798 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.055296031 seconds)
    (7/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.111681055 seconds)
    (8/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.176761672 seconds)
    (9/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.068825581 seconds)
    (10/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.108782375 seconds)
    (11/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.036703471 seconds)
    (12/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.029053899 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029102908 seconds)
    (14/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.114468271 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.052191813 seconds)
    (16/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.024520066 seconds)
    (17/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.034384714 seconds)
    (18/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.113595902 seconds)
    (19/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.070725146 seconds)
    (20/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.03612124 seconds)
    (21/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.032067409 seconds)
    (22/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.02866068 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.028751 seconds)
    (24/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028643508 seconds)
    (25/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.028925925 seconds)
    (26/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.029666373 seconds)
    (27/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028766366 seconds)
    (28/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.185711825 seconds)
    (29/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.269835196 seconds)
    (30/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.031772945 seconds)
    (31/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.038565821 seconds)
    (32/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 8.9956e-5 seconds)
    (33/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.037242229 seconds)
    (34/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.198375894 seconds)
    (35/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.037355533 seconds)
    (36/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.117084721 seconds)
    (37/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.092564939 seconds)
    (38/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.023674323 seconds)
    (39/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.060548199 seconds)
    (40/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.032583993 seconds)
    (41/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.106882465 seconds)
    (42/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025622265 seconds)
    (43/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.170942995 seconds)
    (44/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.108193823 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.037046626 seconds)
    (46/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.03184302 seconds)
    (47/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.097055569 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.034510567 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.029129321 seconds)
    (50/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.030275882 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.044031469 seconds)
    (52/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.1751426 seconds)
    (53/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.141089845 seconds)
    (54/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.02948798 seconds)
    (55/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.039631617 seconds)
    (56/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.034206845 seconds)
    (57/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.24701303 seconds)
    (58/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029344451 seconds)
    (59/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.105087733 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.049660814 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023990496 seconds)
    (62/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.029265649 seconds)
    (63/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029551385 seconds)
    (64/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.155660921 seconds)
    (65/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 6.1303e-5 seconds)
    (66/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.16271917 seconds)
    (67/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.032233087 seconds)
    (68/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.030197179 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.068447905 seconds)
    (70/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.111176238 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 6.5127e-5 seconds)
    (72/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.027443423 seconds)
    (73/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.028645106 seconds)
    (74/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.13097686 seconds)
    (75/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.107912832 seconds)
    (76/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.028796042 seconds)
    (77/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.087017831 seconds)
    (78/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.107164463 seconds)
    (79/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.108692365 seconds)
    (80/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.030442899 seconds)
    (81/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 8.121e-5 seconds)
    (82/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.094375643 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066306161 seconds)
    (84/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.028930521 seconds)
    (85/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000980906 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.043408186 seconds)
    (87/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.063507745 seconds)
    (88/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.028642989 seconds)
    (89/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.027296713 seconds)
    (90/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.110193944 seconds)
    (91/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029051762 seconds)
    (92/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.02909478 seconds)
    (93/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028535208 seconds)
    (94/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.001058384 seconds)
    (95/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.034792952 seconds)
    (96/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 6.8978e-5 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.035675644 seconds)
    (98/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.026825327 seconds)
    (99/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.8031e-5 seconds)
    (100/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.028046667 seconds)
    (101/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.13097535 seconds)
    (102/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.086702423 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.8895e-5 seconds)
    (104/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028266248 seconds)
    (105/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.028947526 seconds)
    (106/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.111163021 seconds)
    (107/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.029666113 seconds)
    (108/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.084377243 seconds)
    (109/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.029030469 seconds)
    (110/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.17422443 seconds)
    (111/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.12877385 seconds)
    (112/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.034955728 seconds)
    (113/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 4.6057e-5 seconds)
    (114/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.024691387 seconds)
    (115/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.127927735 seconds)
    (116/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.120586157 seconds)
    (117/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.025151119 seconds)
    (118/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.028205286 seconds)
    (119/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.02841906 seconds)
    (120/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.029923156 seconds)
    (121/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 7.7628e-5 seconds)
    (122/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.00075232 seconds)
    (123/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.08338066 seconds)
    (124/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.039307274 seconds)
    (125/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.087802278 seconds)
    (126/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.146431244 seconds)
    (127/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.02875578 seconds)
    (128/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.211775799 seconds)
    (129/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.135113824 seconds)
    (130/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 7.5296e-5 seconds)
    (131/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.000109498 seconds)
    (132/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025405545 seconds)
    (133/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.045332251 seconds)
    (134/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.03324916 seconds)
    (135/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.035032923 seconds)
    (136/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 4.0926e-5 seconds)
    (137/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.236556078 seconds)
    (138/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.032769939 seconds)
    (139/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025308613 seconds)
    (140/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.084841851 seconds)
    (141/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000759772 seconds)
    (142/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.087417605 seconds)
    (143/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.036842914 seconds)
    (144/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027104148 seconds)
    (145/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.028962765 seconds)
    (146/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.029880731 seconds)
    (147/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.037598648 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.208784742 seconds)
    (149/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.028102234 seconds)
    (150/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.5821e-5 seconds)
    (151/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.001901223 seconds)
    (152/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.178528385 seconds)
    (153/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.026498778 seconds)
    (154/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.02988916 seconds)
    (155/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 6.6365e-5 seconds)
    (156/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.02928766 seconds)
    (157/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.138018602 seconds)
    (158/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.331323445 seconds)
    (159/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.99327557 seconds)
    (160/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.034437597 seconds)
    (161/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.032314396 seconds)
    (162/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.029170637 seconds)
    (163/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.029385216 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.042426509 seconds)
    (165/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.0023003 seconds)
    (166/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.048001787 seconds)
    (167/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 8.25e-5 seconds)
    (168/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035554142 seconds)
    (169/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 3.8089e-5 seconds)
    (170/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.028294478 seconds)
    (171/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.03349873 seconds)
    (172/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.031073174 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.224112522 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.044880796 seconds)
    (175/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 3.662e-5 seconds)
    (176/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.053481202 seconds)
    (177/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.026041126 seconds)
    (178/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.027920102 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.093524875 seconds)
    (180/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.032720286 seconds)
    (181/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029218304 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.032996443 seconds)
    (183/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.030337019 seconds)
    (184/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.033365195 seconds)
    (185/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.043037096 seconds)
    (186/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.000113064 seconds)
    (187/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.029286043 seconds)
    (188/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.034848404 seconds)
    (189/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 8.1967e-5 seconds)
    (190/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.01965558 seconds)
    (191/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.900135015 seconds)
    (192/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.196521878 seconds)
    (193/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 7.8899e-5 seconds)
    (194/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 6.0548e-5 seconds)
    (195/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.032368261 seconds)
    (196/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.090683756 seconds)
    (197/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 4.7766e-5 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.4183e-5 seconds)
    (199/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.000101153 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.2083e-5 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.033186044 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.485282748 seconds)
    (203/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.040839371 seconds)
    (204/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.137477789 seconds)
    (205/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.151878703 seconds)
    (206/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.093716059 seconds)
    (207/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.027807013 seconds)
    (208/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.031067851 seconds)
    (209/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 4.5259e-5 seconds)
    (210/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001473137 seconds)
    (211/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027927423 seconds)
    (212/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.08720513 seconds)
    (213/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.03352334 seconds)
    (214/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 4.7356e-5 seconds)
    (215/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.031872488 seconds)
    (216/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.02935305 seconds)
    (217/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 3.5279e-5 seconds)
    (218/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 6.3835e-5 seconds)
    (219/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.03199465 seconds)
    (220/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.043778219 seconds)
    (221/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.033235325 seconds)
    (222/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.07214298 seconds)
    (223/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.178504433 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.001940047 seconds)
    (225/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.170315332 seconds)
    (226/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.026812122 seconds)
    (227/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.033420122 seconds)
    (228/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.000221118 seconds)
    (229/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 3.0731e-5 seconds)
    (230/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.4346e-5 seconds)
    (231/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.03207634 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.035237178 seconds)
    (233/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.041653728 seconds)
    (234/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.299722915 seconds)
    (235/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.035786582 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 9.5641e-5 seconds)
    (237/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.030257603 seconds)
    (238/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.183002772 seconds)
    (239/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.113053015 seconds)
    (240/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.00177373 seconds)
    (241/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 7.2817e-5 seconds)
    (242/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.062347143 seconds)
    (243/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.030207343 seconds)
    (244/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 4.2155e-5 seconds)
    (245/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.001411805 seconds)
    (246/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000113531 seconds)
    (247/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.002615693 seconds)
    (248/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.030888822 seconds)
    (249/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.132067602 seconds)
    (250/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.027391984 seconds)
    (251/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.6187e-5 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.035665689 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.027793889 seconds)
    (254/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.028208107 seconds)
    (255/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.7826e-5 seconds)
    (256/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.028194467 seconds)
    (257/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.074104362 seconds)
    (258/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 8.1756e-5 seconds)
    (259/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.035767338 seconds)
    (260/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.919542728 seconds)
    (261/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 9.4023e-5 seconds)
    (262/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001648249 seconds)
    (263/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.108093821 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 6.2311e-5 seconds)
    (265/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.136777491 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.027491611 seconds)
    (267/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.003077528 seconds)
    (268/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.03103024 seconds)
    (269/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001155168 seconds)
    (270/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.034999097 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.032560235 seconds)
    (272/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 3.6147e-5 seconds)
    (273/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 3.4759e-5 seconds)
    (274/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000123999 seconds)
    (275/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 8.5455e-5 seconds)
    (276/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 7.0394e-5 seconds)
    (277/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 6.6132e-5 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.04215775 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 8.1496e-5 seconds)
    (280/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 7.0946e-5 seconds)
    (281/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.028573251 seconds)
    (282/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.00011775 seconds)
    (283/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035913048 seconds)
    (284/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.5127e-5 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.026443439 seconds)
    (286/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.000233655 seconds)
    (287/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.031368901 seconds)
    (288/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.032054253 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.044456994 seconds)
    (290/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 3.7219e-5 seconds)
    (291/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.028790363 seconds)
    (292/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 6.4089e-5 seconds)
    (293/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.027971768 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.030895124 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026535023 seconds)
    (296/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002042277 seconds)
    (297/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.149040886 seconds)
    (298/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.035574636 seconds)
    (299/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029078179 seconds)
    (300/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.134467865 seconds)
    (301/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.7142e-5 seconds)
    (302/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028492194 seconds)
    (303/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 8.7043e-5 seconds)
    (304/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.107373243 seconds)
    (305/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.029210517 seconds)
    (306/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.043053775 seconds)
    (307/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.032893812 seconds)
    (308/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.027300506 seconds)
    (309/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 6.6401e-5 seconds)
    (310/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.7829e-5 seconds)
    (311/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.02929825 seconds)
    (312/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.743e-5 seconds)
    (313/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.9758e-5 seconds)
    (314/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002292912 seconds)
    (315/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.028543799 seconds)
    (316/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000109509 seconds)
    (317/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023644224 seconds)
    (318/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.033412987 seconds)
    (319/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.00171855 seconds)
    (320/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.064422204 seconds)
    (321/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.036747019 seconds)
    (322/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 4.9779e-5 seconds)
    (323/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 8.2272e-5 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.086749005 seconds)
    (325/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001691126 seconds)
    (326/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.035610839 seconds)
    (327/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.1662e-5 seconds)
    (328/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.032727766 seconds)
    (329/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 3.9064e-5 seconds)
    (330/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.246788133 seconds)
    (331/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.033075278 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 7.1492e-5 seconds)
    (333/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.090048147 seconds)
    (334/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.5914e-5 seconds)
    (335/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.001198371 seconds)
    (336/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.030770658 seconds)
    (337/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.7278e-5 seconds)
    (338/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.107040737 seconds)
    (339/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001726091 seconds)
    (340/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.0699e-5 seconds)
    (341/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.02806651 seconds)
    (342/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.370189612 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.027097728 seconds)
    (344/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 7.5073e-5 seconds)
    (345/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 6.9972e-5 seconds)
    (346/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.8125e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.032638248 seconds)
    (348/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 1.013000335 seconds)
    (349/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001833937 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.028726569 seconds)
    (351/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.039889163 seconds)
    (352/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 3.9037e-5 seconds)
    (353/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.0799e-5 seconds)
    (354/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.044575838 seconds)
    (355/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.7527e-5 seconds)
    (356/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 6.7586e-5 seconds)
    (357/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.034981864 seconds)
    (358/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.0363444 seconds)
    (359/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.034901193 seconds)
    (360/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 6.691e-5 seconds)
    (361/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.037341726 seconds)
    (362/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.02908665 seconds)
    (363/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 8.8227e-5 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 9.9591e-5 seconds)
    (365/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.025488129 seconds)
    (366/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 4.7458e-5 seconds)
    (367/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.037265011 seconds)
    (368/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.038339266 seconds)
    (369/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.5132e-5 seconds)
    (370/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.002180321 seconds)
    (371/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.029401671 seconds)
    (372/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 7.5026e-5 seconds)
    (373/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 3.2271e-5 seconds)
    (374/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.034110814 seconds)
    (375/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 3.1129e-5 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 8.3341e-5 seconds)
    (377/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 3.0277e-5 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 3.3646e-5 seconds)
    (379/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.3527e-5 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 4.4552e-5 seconds)
    (381/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 9.1168e-5 seconds)
    (382/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.066307394 seconds)
    (383/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.0001079 seconds)
    (384/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.024e-5 seconds)
    (385/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 9.0688e-5 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.039604561 seconds)
    (387/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 8.1139e-5 seconds)
    (388/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.000916781 seconds)
    (389/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.029469019 seconds)
    (390/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.3492e-5 seconds)
    (391/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027225721 seconds)
    (392/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.029588899 seconds)
    (393/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 3.3079e-5 seconds)
    (394/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.029076604 seconds)
    (395/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.029163091 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.027728887 seconds)
    (397/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.2597e-5 seconds)
    (398/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.47152251 seconds)
    (399/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.7105e-5 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.038465106 seconds)
    (401/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002120166 seconds)
    (402/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.0064e-5 seconds)
    (403/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.030976083 seconds)
    (404/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.9893e-5 seconds)
    (405/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 8.4113e-5 seconds)
    (406/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 7.3346e-5 seconds)
    (407/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.000104403 seconds)
    (408/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.7141e-5 seconds)
    (409/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.036036203 seconds)
    (410/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.068062534 seconds)
    (411/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.031326904 seconds)
    (412/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.7811e-5 seconds)
    (413/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 8.898e-5 seconds)
    (414/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.030486435 seconds)
    (415/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.028900948 seconds)
    (416/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.4496e-5 seconds)
    (417/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 6.6662e-5 seconds)
    (418/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 8.5808e-5 seconds)
    (419/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.7833e-5 seconds)
    (420/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 6.9886e-5 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.027138648 seconds)
    (422/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 7.8966e-5 seconds)
    (423/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.553e-5 seconds)
    (424/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.031942545 seconds)
    (425/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.7517e-5 seconds)
    (426/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 5.6418e-5 seconds)
    (427/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000124729 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.03432975 seconds)
    (429/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.000112927 seconds)
    (430/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.056e-5 seconds)
    (431/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.0405e-5 seconds)
    (432/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.03685248 seconds)
    (433/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.9108e-5 seconds)
    (434/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.110770467 seconds)
  done (took 23.725776264 seconds)
done (took 24.582349151 seconds)
(12/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.099072421 seconds)
  (2/4) benchmarking "grow_array"...
  done (took 0.030705488 seconds)
  (3/4) benchmarking "arrays"...
  done (took 0.05360608 seconds)
  (4/4) benchmarking "structs"...
  done (took 0.061417264 seconds)
done (took 1.211095838 seconds)
(13/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.035490081 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.063555438 seconds)
    (3/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037228043 seconds)
    (4/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.039750413 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.041275209 seconds)
    (6/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.039208325 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.048284749 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.044625762 seconds)
    (9/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.042439058 seconds)
    (10/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.035534331 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.02558397 seconds)
    (12/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.039309242 seconds)
    (13/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.03542772 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.5444e-5 seconds)
    (15/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.047957638 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.02661976 seconds)
    (17/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.043145743 seconds)
    (18/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.035039639 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.042046468 seconds)
    (20/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.052670864 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.002494416 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.6603e-5 seconds)
    (23/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.025107538 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001084723 seconds)
    (25/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.1635e-5 seconds)
    (26/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 6.4806e-5 seconds)
    (27/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.031320513 seconds)
    (28/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.034885239 seconds)
    (29/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.025386242 seconds)
    (30/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.2742e-5 seconds)
    (31/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.1831e-5 seconds)
    (32/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.096e-5 seconds)
    (33/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 8.029e-6 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 9.363e-6 seconds)
    (35/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.029198098 seconds)
    (36/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.040937622 seconds)
    (37/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 1.6752e-5 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.04096117 seconds)
    (39/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.038797661 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.029388695 seconds)
    (41/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.0406012 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.6543e-5 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.035655949 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001093139 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.030262935 seconds)
    (46/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002531471 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.03516627 seconds)
    (48/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 6.979e-5 seconds)
    (49/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.8614e-5 seconds)
    (50/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 9.446e-6 seconds)
    (51/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 8.733e-6 seconds)
    (52/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 5.8369e-5 seconds)
    (53/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.038046433 seconds)
    (54/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.653e-5 seconds)
    (55/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.03035449 seconds)
    (56/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.4633e-5 seconds)
    (57/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.042934587 seconds)
    (58/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.8939e-5 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.023907538 seconds)
    (60/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.8878e-5 seconds)
    (61/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 7.9069e-5 seconds)
    (62/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.001085282 seconds)
    (63/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 9.645e-6 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.0722e-5 seconds)
    (65/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 8.503e-6 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 6.547e-6 seconds)
  done (took 2.305363958 seconds)
  (2/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.037969967 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.020805252 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.033502764 seconds)
    (4/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034923872 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.031348279 seconds)
    (6/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.022033773 seconds)
    (7/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.6576e-5 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.023842505 seconds)
    (9/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.1149e-5 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 9.03e-6 seconds)
    (11/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.020906754 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.025401361 seconds)
    (13/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.023879654 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.024062032 seconds)
    (15/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.5654e-5 seconds)
    (16/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.020601816 seconds)
    (17/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.03489011 seconds)
    (18/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.036926753 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.023617388 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.5687e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.051532925 seconds)
    (22/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.021944731 seconds)
    (23/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.5689e-5 seconds)
    (24/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 7.673e-6 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.020779435 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.023754641 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.020163762 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.6639e-5 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.6456e-5 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.0489e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.0822e-5 seconds)
    (32/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 6.627e-6 seconds)
    (33/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 6.976e-6 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.1255e-5 seconds)
    (35/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.024403616 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.7182e-5 seconds)
    (37/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.0452e-5 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.020294961 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.2863e-5 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.6459e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 7.894e-6 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.023848347 seconds)
    (43/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 4.3521e-5 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.1041e-5 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.1681e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.020438689 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.020738369 seconds)
    (48/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.4863e-5 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.0449e-5 seconds)
    (50/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.2142e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.3787e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.0735e-5 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.023818826 seconds)
    (54/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025073548 seconds)
    (55/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022300946 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.5872e-5 seconds)
    (57/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.8667e-5 seconds)
    (58/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 6.696e-6 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 9.333e-6 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 9.33e-6 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 9.956e-6 seconds)
    (62/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 6.102e-6 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 5.927e-6 seconds)
    (64/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.021188493 seconds)
    (65/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.2703e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.1316e-5 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 6.395e-6 seconds)
    (68/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 9.561e-6 seconds)
    (69/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 9.425e-6 seconds)
    (70/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 5.053e-6 seconds)
    (71/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.0536e-5 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.023701307 seconds)
  done (took 1.734517255 seconds)
  (3/5) benchmarking "sequences"...
    (1/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.042289769 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.069964438 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.034437712 seconds)
    (4/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019961603 seconds)
    (5/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021214182 seconds)
    (6/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.031707063 seconds)
    (7/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.021184255 seconds)
  done (took 1.194253165 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.03879335 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.029045977 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024250057 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.019518976 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.023952783 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.023647373 seconds)
  done (took 1.11432514 seconds)
  (5/5) benchmarking "types"...
    (1/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020554434 seconds)
    (2/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.02362379 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.021369666 seconds)
    (4/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.04978582 seconds)
    (5/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023391136 seconds)
    (6/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.021558786 seconds)
    (7/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.027849594 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.02396872 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020435829 seconds)
    (10/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031132382 seconds)
    (11/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.021868835 seconds)
    (12/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.05377276 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.031591312 seconds)
    (14/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.039428099 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.033860684 seconds)
    (16/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020354781 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.052684773 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064071544 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023984069 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.033761384 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021344669 seconds)
    (22/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.044026294 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.02987785 seconds)
    (24/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.022957688 seconds)
    (25/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023693657 seconds)
    (26/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019337922 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020994791 seconds)
    (28/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.020680685 seconds)
    (29/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.036526819 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029137059 seconds)
    (31/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024782788 seconds)
    (32/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.022781279 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.02387152 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.02102493 seconds)
    (35/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021309711 seconds)
    (36/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.02220563 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029537572 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.034940037 seconds)
    (39/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.023837191 seconds)
    (40/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.033366356 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.021621279 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.039533638 seconds)
    (43/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.027450557 seconds)
    (44/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021090005 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021707341 seconds)
    (46/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.032057047 seconds)
    (47/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.020943003 seconds)
    (48/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.023622375 seconds)
    (49/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021471667 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.021089776 seconds)
    (51/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019497605 seconds)
    (52/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021145448 seconds)
    (53/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.033360471 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.029791022 seconds)
    (55/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.029675163 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.030265442 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.02106884 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021077685 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021200119 seconds)
    (60/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020761662 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.02166177 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.034845512 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.033638688 seconds)
    (64/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032703021 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.024051304 seconds)
    (66/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.028660514 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021227608 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023004856 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.049685525 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021202942 seconds)
    (71/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024496428 seconds)
    (72/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.023774298 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.020704126 seconds)
    (74/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020849475 seconds)
    (75/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.020794171 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.021764151 seconds)
    (77/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021029815 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.032975974 seconds)
    (79/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.023365166 seconds)
    (80/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.021692319 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.023258052 seconds)
    (82/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.030011852 seconds)
    (83/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.018643447 seconds)
    (84/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.024497985 seconds)
    (85/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022213661 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.023487424 seconds)
    (87/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.03352737 seconds)
    (88/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.02451628 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.033152719 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022553713 seconds)
    (91/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.022100799 seconds)
    (92/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022114751 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.024800175 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021411607 seconds)
    (95/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.024560441 seconds)
    (96/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.022970238 seconds)
    (97/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021874006 seconds)
  done (took 3.560591609 seconds)
done (took 10.857677487 seconds)
(14/23) benchmarking "shootout"...
  (1/12) benchmarking "fasta"...
  done (took 0.12114977 seconds)
  (2/12) benchmarking "k_nucleotide"...
  done (took 0.527206182 seconds)
  (3/12) benchmarking "revcomp"...
  done (took 0.074113565 seconds)
  (4/12) benchmarking "spectralnorm"...
  done (took 0.103149051 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.065566892 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.097594037 seconds)
  (7/12) benchmarking "meteor_contest"...
  done (took 2.826943621 seconds)
  (8/12) benchmarking "pidigits"...
  done (took 0.123914739 seconds)
  (9/12) benchmarking "nbody_vec"...
  done (took 0.410223415 seconds)
  (10/12) benchmarking "nbody"...
  done (took 0.077299056 seconds)
  (11/12) benchmarking "regex_dna"...
  done (took 0.055068557 seconds)
  (12/12) benchmarking "fannkuch"...
  done (took 0.123510699 seconds)
done (took 5.570756734 seconds)
(15/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.096208845 seconds)
    (2/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.235847348 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.068608618 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.116369005 seconds)
  done (took 1.482133778 seconds)
  (2/6) benchmarking "26942"...
  done (took 0.058431977 seconds)
  (3/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.295249709 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 0.119011762 seconds)
    (3/4) benchmarking ("(10000000,)", 2)...
    done (took 0.16362164 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.159787763 seconds)
  done (took 1.716072231 seconds)
  (4/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.037209373 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.036114044 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.020172243 seconds)
    (4/9) benchmarking (5, "scal_tup")...
    done (took 0.025687916 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.028899109 seconds)
    (6/9) benchmarking (3, "scal_tup")...
    done (took 0.025134703 seconds)
    (7/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.0291654 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.020319594 seconds)
    (9/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.089903853 seconds)
  done (took 1.327821041 seconds)
  (5/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 0.061152142 seconds)
    (2/6) benchmarking ("tuple", 10)...
    done (took 0.046401512 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.037031669 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 1.7226e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 6.356e-6 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.033342818 seconds)
  done (took 1.161991496 seconds)
  (6/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.270331052 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.181717154 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.27824719 seconds)
  done (took 1.711809986 seconds)
done (took 8.432056412 seconds)
(16/23) benchmarking "sort"...
  (1/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.040305004 seconds)
    (2/13) benchmarking "small Float64 view"...
    done (took 0.176571457 seconds)
    (3/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.205411737 seconds)
    (4/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.035635897 seconds)
    (5/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.267975974 seconds)
    (6/13) benchmarking "small Int view"...
    done (took 0.097001444 seconds)
    (7/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.22648145 seconds)
    (8/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.404084373 seconds)
    (9/13) benchmarking "Float16"...
    done (took 0.996022581 seconds)
    (10/13) benchmarking "sort(rand(10^8))"...
    done (took 8.640476875 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 7.980505626 seconds)
    (12/13) benchmarking "inplace sorting of a view"...
    done (took 0.91058195 seconds)
    (13/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.949445611 seconds)
  done (took 22.912666705 seconds)
  (2/11) benchmarking "length = 10"...
    (1/17) benchmarking "all same"...
    done (took 0.031064434 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 0.02853305 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.327145622 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 9.32e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.094069009 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.022372597 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 0.131692763 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.026650826 seconds)
    (9/17) benchmarking "descending"...
    done (took 0.035162733 seconds)
    (10/17) benchmarking "ascending"...
    done (took 0.030299612 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 0.023911177 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.4127e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.5478e-5 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.025124393 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.11389529 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.3186e-5 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.573031213 seconds)
  done (took 9.500642861 seconds)
  (3/11) benchmarking "issorted"...
    (1/8) benchmarking ("reverse", "ascending")...
    done (took 0.056610799 seconds)
    (2/8) benchmarking ("forwards", "ascending")...
    done (took 0.029018566 seconds)
    (3/8) benchmarking ("forwards", "descending")...
    done (took 0.034522455 seconds)
    (4/8) benchmarking ("reverse", "random")...
    done (took 0.060812954 seconds)
    (5/8) benchmarking ("reverse", "ones")...
    done (took 0.030426754 seconds)
    (6/8) benchmarking ("forwards", "random")...
    done (took 0.0321688 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.029908486 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.025418638 seconds)
  done (took 1.36458586 seconds)
  (4/11) benchmarking "length = 30"...
    (1/17) benchmarking "all same"...
    done (took 2.4446e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 9.111e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 1.7783e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.456e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 6.37e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.4855e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 1.1142e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 8.447e-6 seconds)
    (9/17) benchmarking "descending"...
    done (took 7.248e-6 seconds)
    (10/17) benchmarking "ascending"...
    done (took 6.322e-6 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 1.2426e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.962e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.918e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.485e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 1.2185e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.878e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.0115108 seconds)
  done (took 1.055378038 seconds)
  (5/11) benchmarking "quicksort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.15793943 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.15473828 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.056747302 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.12985083 seconds)
  done (took 1.542485391 seconds)
  (6/11) benchmarking "length = 100"...
    (1/17) benchmarking "all same"...
    done (took 2.5289e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 1.4507e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 1.9876e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.903e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 6.093e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.8321e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.0412e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.4265e-5 seconds)
    (9/17) benchmarking "descending"...
    done (took 1.3696e-5 seconds)
    (10/17) benchmarking "ascending"...
    done (took 1.0648e-5 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 1.6538e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 7.538e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 9.519e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.638e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.1099e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.181e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.000421185 seconds)
  done (took 1.051670085 seconds)
  (7/11) benchmarking "length = 10000"...
    (1/17) benchmarking "all same"...
    done (took 6.5233e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 0.000549058 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000363416 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.00034384 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 1.2996e-5 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000363069 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 0.000957845 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000532373 seconds)
    (9/17) benchmarking "descending"...
    done (took 0.000594675 seconds)
    (10/17) benchmarking "ascending"...
    done (took 0.000552134 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 0.001035316 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000340189 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000375241 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.1504e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.000894692 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000312113 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.016878517 seconds)
  done (took 1.06946414 seconds)
  (8/11) benchmarking "mergesort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.2088824 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.199978293 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.0580942 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.074764075 seconds)
  done (took 1.582974642 seconds)
  (9/11) benchmarking "length = 1000"...
    (1/17) benchmarking "all same"...
    done (took 3.6328e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 6.5606e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.2869e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.6121e-5 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 6.957e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.5621e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 9.567e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.6538e-5 seconds)
    (9/17) benchmarking "descending"...
    done (took 4.7466e-5 seconds)
    (10/17) benchmarking "ascending"...
    done (took 4.1639e-5 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 8.9536e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.5043e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.1843e-5 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.295e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 8.2471e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.0463e-5 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.00183424 seconds)
  done (took 1.053582687 seconds)
  (10/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.069970201 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.084807258 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.051176374 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.0661696 seconds)
  done (took 1.316302424 seconds)
  (11/11) benchmarking "length = 3"...
    (1/17) benchmarking "all same"...
    done (took 2.2964e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 6.036e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 7.842e-6 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.554e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 6.042e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.3959e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 9.017e-6 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 6.316e-6 seconds)
    (9/17) benchmarking "descending"...
    done (took 4.738e-6 seconds)
    (10/17) benchmarking "ascending"...
    done (took 4.412e-6 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 7.52e-6 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 3.72e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.277e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 3.587e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 8.983e-6 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 3.94e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.8151e-5 seconds)
  done (took 1.048924608 seconds)
done (took 44.488525191 seconds)
(17/23) benchmarking "array"...
  (1/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 0.170597017 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.021999797 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 0.016247795 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 0.043652899 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.014874055 seconds)
  done (took 1.309112818 seconds)
  (2/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.60942835 seconds)
    (2/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.932776192 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.016613106 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.814197704 seconds)
    (5/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.170141306 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.643451836 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.005528666 seconds)
    (8/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142114769 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.508285292 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.311698503 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009298499 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.097119201 seconds)
  done (took 27.312101615 seconds)
  (3/13) benchmarking "index"...
    (1/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.090681889 seconds)
    (2/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.099163077 seconds)
    (3/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.271921505 seconds)
    (4/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101059348 seconds)
    (5/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.214475126 seconds)
    (6/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.19704567 seconds)
    (7/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.306312786 seconds)
    (8/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.177190054 seconds)
    (9/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.316327115 seconds)
    (10/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.513391109 seconds)
    (11/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.040043295 seconds)
    (12/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056177584 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022940415 seconds)
    (14/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.204508509 seconds)
    (15/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065086088 seconds)
    (16/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087864077 seconds)
    (17/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.347335166 seconds)
    (18/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.037727069 seconds)
    (19/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060409579 seconds)
    (20/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.142065516 seconds)
    (21/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.00036819 seconds)
    (22/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019230327 seconds)
    (23/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168834482 seconds)
    (24/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.064595345 seconds)
    (25/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.087296967 seconds)
    (26/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111089013 seconds)
    (27/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.215587715 seconds)
    (28/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041978957 seconds)
    (29/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000125868 seconds)
    (30/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037846326 seconds)
    (31/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043323064 seconds)
    (32/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04131213 seconds)
    (33/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073876087 seconds)
    (34/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064759134 seconds)
    (35/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086282333 seconds)
    (36/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042696361 seconds)
    (37/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023547994 seconds)
    (38/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000124827 seconds)
    (39/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034249436 seconds)
    (40/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031446682 seconds)
    (41/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040414552 seconds)
    (42/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051918302 seconds)
    (43/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.019644656 seconds)
    (44/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.048207896 seconds)
    (45/608) benchmarking ("sum", "3darray")...
    done (took 0.048432839 seconds)
    (46/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030808027 seconds)
    (47/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092886264 seconds)
    (48/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.012706977 seconds)
    (49/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043383839 seconds)
    (50/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.033138988 seconds)
    (51/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.059836768 seconds)
    (52/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030091685 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.234661972 seconds)
    (54/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136449839 seconds)
    (55/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03970887 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034201501 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037077337 seconds)
    (58/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044886509 seconds)
    (59/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119200363 seconds)
    (60/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.037562613 seconds)
    (61/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016190852 seconds)
    (62/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.000113428 seconds)
    (63/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000301587 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028606345 seconds)
    (65/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037491883 seconds)
    (66/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.32278546 seconds)
    (67/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.1085e-5 seconds)
    (68/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02455357 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014767044 seconds)
    (70/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087234754 seconds)
    (71/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02370044 seconds)
    (72/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.051766359 seconds)
    (73/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051666252 seconds)
    (74/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021738825 seconds)
    (75/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.1083e-5 seconds)
    (76/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031281549 seconds)
    (77/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040496368 seconds)
    (78/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042380709 seconds)
    (79/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.064033304 seconds)
    (80/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041080546 seconds)
    (81/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052556189 seconds)
    (82/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084513283 seconds)
    (83/608) benchmarking "6d"...
    done (took 0.264369683 seconds)
    (84/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.025757985 seconds)
    (85/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.6202e-5 seconds)
    (86/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.041351086 seconds)
    (87/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000218772 seconds)
    (88/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093071674 seconds)
    (89/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094649289 seconds)
    (90/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057542813 seconds)
    (91/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.038586441 seconds)
    (92/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04032325 seconds)
    (93/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062721145 seconds)
    (94/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.040047514 seconds)
    (95/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159731614 seconds)
    (96/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025254124 seconds)
    (97/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036603972 seconds)
    (98/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.022223301 seconds)
    (99/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.9114e-5 seconds)
    (100/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022609112 seconds)
    (101/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024602117 seconds)
    (102/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101876127 seconds)
    (103/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060021547 seconds)
    (104/608) benchmarking "ind2sub"...
    done (took 0.067912056 seconds)
    (105/608) benchmarking "5d"...
    done (took 0.138884722 seconds)
    (106/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.011865482 seconds)
    (107/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055473415 seconds)
    (108/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.040933403 seconds)
    (109/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046061688 seconds)
    (110/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025527284 seconds)
    (111/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032275857 seconds)
    (112/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024577192 seconds)
    (113/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056035317 seconds)
    (114/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047911394 seconds)
    (115/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048825154 seconds)
    (116/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.022813672 seconds)
    (117/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.021277473 seconds)
    (118/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078816022 seconds)
    (119/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.023517607 seconds)
    (120/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.05452022 seconds)
    (121/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.4576e-5 seconds)
    (122/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055474005 seconds)
    (123/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027402804 seconds)
    (124/608) benchmarking "3d"...
    done (took 0.064828979 seconds)
    (125/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039393513 seconds)
    (126/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.040514665 seconds)
    (127/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04468905 seconds)
    (128/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.036253603 seconds)
    (129/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067405634 seconds)
    (130/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080561503 seconds)
    (131/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062958366 seconds)
    (132/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027711479 seconds)
    (133/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.029318025 seconds)
    (134/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020162351 seconds)
    (135/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.02896639 seconds)
    (136/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.042547386 seconds)
    (137/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091350864 seconds)
    (138/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000163363 seconds)
    (139/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068080288 seconds)
    (140/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02653208 seconds)
    (141/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.0003228 seconds)
    (142/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.068693069 seconds)
    (143/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033938176 seconds)
    (144/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023789453 seconds)
    (145/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.03671791 seconds)
    (146/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032456828 seconds)
    (147/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055136642 seconds)
    (148/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079491966 seconds)
    (149/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000220358 seconds)
    (150/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082126384 seconds)
    (151/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 6.949e-5 seconds)
    (152/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.806e-5 seconds)
    (153/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02885949 seconds)
    (154/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 9.8187e-5 seconds)
    (155/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.4502e-5 seconds)
    (156/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037855407 seconds)
    (157/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029955467 seconds)
    (158/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.9536e-5 seconds)
    (159/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.059869913 seconds)
    (160/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047214727 seconds)
    (161/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.028003197 seconds)
    (162/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049141661 seconds)
    (163/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044695801 seconds)
    (164/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.022754012 seconds)
    (165/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.021074001 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036865874 seconds)
    (167/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053468412 seconds)
    (168/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039537126 seconds)
    (169/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072777716 seconds)
    (170/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033825888 seconds)
    (171/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.01764489 seconds)
    (172/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013391276 seconds)
    (173/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015586289 seconds)
    (174/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.024277869 seconds)
    (175/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038828801 seconds)
    (176/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072318685 seconds)
    (177/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056895884 seconds)
    (178/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.1287e-5 seconds)
    (179/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063316691 seconds)
    (180/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.028266038 seconds)
    (181/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068107836 seconds)
    (182/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053750585 seconds)
    (183/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.032722688 seconds)
    (184/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.00043201 seconds)
    (185/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044012573 seconds)
    (186/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046025599 seconds)
    (187/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025234972 seconds)
    (188/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084690048 seconds)
    (189/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064788034 seconds)
    (190/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048505547 seconds)
    (191/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057995667 seconds)
    (192/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020804867 seconds)
    (193/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.346130483 seconds)
    (194/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022354623 seconds)
    (195/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.1329e-5 seconds)
    (196/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04390812 seconds)
    (197/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.3167e-5 seconds)
    (198/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05774222 seconds)
    (199/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097105826 seconds)
    (200/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022320771 seconds)
    (201/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033427657 seconds)
    (202/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.016511425 seconds)
    (203/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.018977111 seconds)
    (204/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.016653948 seconds)
    (205/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.041897195 seconds)
    (206/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7907e-5 seconds)
    (207/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000563448 seconds)
    (208/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024709546 seconds)
    (209/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.036991094 seconds)
    (210/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019999537 seconds)
    (211/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056456484 seconds)
    (212/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021984866 seconds)
    (213/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05939165 seconds)
    (214/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065124318 seconds)
    (215/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.0446e-5 seconds)
    (216/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059155803 seconds)
    (217/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047634039 seconds)
    (218/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062058169 seconds)
    (219/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041764685 seconds)
    (220/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052880785 seconds)
    (221/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.025662207 seconds)
    (222/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040237686 seconds)
    (223/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000308561 seconds)
    (224/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000552598 seconds)
    (225/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034791842 seconds)
    (226/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023870114 seconds)
    (227/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050349678 seconds)
    (228/608) benchmarking "7d"...
    done (took 0.265364332 seconds)
    (229/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066454212 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026297915 seconds)
    (231/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.012867452 seconds)
    (232/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041468683 seconds)
    (233/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.040890451 seconds)
    (234/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.050517238 seconds)
    (235/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017854102 seconds)
    (236/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.079739362 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.01808283 seconds)
    (238/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055550524 seconds)
    (239/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041668256 seconds)
    (240/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.01622145 seconds)
    (241/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.021176772 seconds)
    (242/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022062038 seconds)
    (243/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.060058958 seconds)
    (244/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060841404 seconds)
    (245/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2157e-5 seconds)
    (246/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.039467409 seconds)
    (247/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.017840324 seconds)
    (248/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048302446 seconds)
    (249/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.031566494 seconds)
    (250/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0196293 seconds)
    (251/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061171949 seconds)
    (252/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 8.0475e-5 seconds)
    (253/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.021047599 seconds)
    (254/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.026550157 seconds)
    (255/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018489083 seconds)
    (256/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.025913523 seconds)
    (257/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.031157114 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.000205209 seconds)
    (259/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07174206 seconds)
    (260/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054237155 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022819443 seconds)
    (262/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.1159e-5 seconds)
    (263/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.011001814 seconds)
    (264/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052952882 seconds)
    (265/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043495474 seconds)
    (266/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066470247 seconds)
    (267/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035139569 seconds)
    (268/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.0287304 seconds)
    (269/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043099633 seconds)
    (270/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.013858532 seconds)
    (271/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018543987 seconds)
    (272/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04214046 seconds)
    (273/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08022177 seconds)
    (274/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051983726 seconds)
    (275/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078542062 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063044771 seconds)
    (277/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.754e-5 seconds)
    (278/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000313079 seconds)
    (279/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0648001 seconds)
    (280/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032373631 seconds)
    (281/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052081059 seconds)
    (282/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046733016 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04864393 seconds)
    (284/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033580653 seconds)
    (285/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080318642 seconds)
    (286/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031725115 seconds)
    (287/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.0695e-5 seconds)
    (288/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038262179 seconds)
    (289/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055042978 seconds)
    (290/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054495442 seconds)
    (291/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026211883 seconds)
    (292/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.070588296 seconds)
    (293/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047006617 seconds)
    (294/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026374061 seconds)
    (295/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034732897 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060127277 seconds)
    (297/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016996565 seconds)
    (298/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028173365 seconds)
    (299/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051146791 seconds)
    (300/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042248 seconds)
    (301/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057101168 seconds)
    (302/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.042908008 seconds)
    (303/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.044087783 seconds)
    (304/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.072221041 seconds)
    (305/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.016632664 seconds)
    (306/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.018534836 seconds)
    (307/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.04104521 seconds)
    (308/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046471949 seconds)
    (309/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085117395 seconds)
    (310/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039855811 seconds)
    (311/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022458695 seconds)
    (312/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039490383 seconds)
    (313/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092988977 seconds)
    (314/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045057288 seconds)
    (315/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042704145 seconds)
    (316/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027238105 seconds)
    (317/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046273813 seconds)
    (318/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000163268 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020024959 seconds)
    (320/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015823346 seconds)
    (321/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.033756532 seconds)
    (322/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073410804 seconds)
    (323/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.014465848 seconds)
    (324/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033577982 seconds)
    (325/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.01871013 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028920961 seconds)
    (327/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043100239 seconds)
    (328/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 6.9159e-5 seconds)
    (329/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050277252 seconds)
    (330/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066323768 seconds)
    (331/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054920117 seconds)
    (332/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027955765 seconds)
    (333/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044606434 seconds)
    (334/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.014915827 seconds)
    (335/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048070464 seconds)
    (336/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061822062 seconds)
    (337/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.039347163 seconds)
    (338/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000486322 seconds)
    (339/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000348486 seconds)
    (340/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.035617967 seconds)
    (341/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.057209816 seconds)
    (342/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065562527 seconds)
    (343/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02435464 seconds)
    (344/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046345361 seconds)
    (345/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.4296e-5 seconds)
    (346/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071383942 seconds)
    (347/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070652732 seconds)
    (348/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047799592 seconds)
    (349/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086724798 seconds)
    (350/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050333254 seconds)
    (351/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070748588 seconds)
    (352/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.017283601 seconds)
    (353/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092867258 seconds)
    (354/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000121002 seconds)
    (355/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 6.3324e-5 seconds)
    (356/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018100256 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074823271 seconds)
    (358/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025136719 seconds)
    (359/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.029121008 seconds)
    (360/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.0845e-5 seconds)
    (361/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030622315 seconds)
    (362/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023471483 seconds)
    (363/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.016782619 seconds)
    (364/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067668068 seconds)
    (365/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018531451 seconds)
    (366/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000150218 seconds)
    (367/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092515414 seconds)
    (368/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062550531 seconds)
    (369/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0614804 seconds)
    (370/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.019652089 seconds)
    (371/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000126112 seconds)
    (372/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045497018 seconds)
    (373/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.2748e-5 seconds)
    (374/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015299926 seconds)
    (375/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03407853 seconds)
    (376/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.0140702 seconds)
    (377/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.033265979 seconds)
    (378/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05106774 seconds)
    (379/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04618726 seconds)
    (380/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.011086875 seconds)
    (381/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.015674076 seconds)
    (382/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038863824 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03203506 seconds)
    (384/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04412625 seconds)
    (385/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.208841662 seconds)
    (386/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 2.3504e-5 seconds)
    (387/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028436029 seconds)
    (388/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023102738 seconds)
    (389/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024750813 seconds)
    (390/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000485483 seconds)
    (391/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042661421 seconds)
    (392/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.02541409 seconds)
    (393/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.02658783 seconds)
    (394/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039824811 seconds)
    (395/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010720533 seconds)
    (396/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08064627 seconds)
    (397/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010088667 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.016049476 seconds)
    (399/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088600925 seconds)
    (400/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047662158 seconds)
    (401/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.053245155 seconds)
    (402/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021511967 seconds)
    (403/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.1641e-5 seconds)
    (404/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.070380904 seconds)
    (405/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078425824 seconds)
    (406/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022251173 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 7.0788e-5 seconds)
    (408/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02224089 seconds)
    (409/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013107464 seconds)
    (410/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029007278 seconds)
    (411/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044166725 seconds)
    (412/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028250781 seconds)
    (413/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044977783 seconds)
    (414/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061540681 seconds)
    (415/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059958535 seconds)
    (416/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040160697 seconds)
    (417/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082054892 seconds)
    (418/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054483519 seconds)
    (419/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051210183 seconds)
    (420/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.2449e-5 seconds)
    (421/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.7156e-5 seconds)
    (422/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.595e-5 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011718606 seconds)
    (424/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023842101 seconds)
    (425/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081836762 seconds)
    (426/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070935123 seconds)
    (427/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012410579 seconds)
    (428/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.016579697 seconds)
    (429/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079675729 seconds)
    (430/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.054546263 seconds)
    (431/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058308521 seconds)
    (432/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027772157 seconds)
    (433/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035346874 seconds)
    (434/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.018190104 seconds)
    (435/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018739949 seconds)
    (436/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021181696 seconds)
    (437/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046244139 seconds)
    (438/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.0486e-5 seconds)
    (439/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014337003 seconds)
    (440/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04174492 seconds)
    (441/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163361111 seconds)
    (442/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015771573 seconds)
    (443/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061967324 seconds)
    (444/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07624407 seconds)
    (445/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.00016165 seconds)
    (446/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.021364578 seconds)
    (447/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046452288 seconds)
    (448/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02420653 seconds)
    (449/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.035039232 seconds)
    (450/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039127299 seconds)
    (451/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015559098 seconds)
    (452/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.249329821 seconds)
    (453/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059545818 seconds)
    (454/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063404547 seconds)
    (455/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055494457 seconds)
    (456/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.039724272 seconds)
    (457/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.020555497 seconds)
    (458/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.9842e-5 seconds)
    (459/608) benchmarking ("sumvector", "1:100000")...
    done (took 1.5841e-5 seconds)
    (460/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029342564 seconds)
    (461/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.02187986 seconds)
    (462/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.016726064 seconds)
    (463/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077972761 seconds)
    (464/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019987348 seconds)
    (465/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.011990771 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064402565 seconds)
    (467/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053245129 seconds)
    (468/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022601177 seconds)
    (469/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012458493 seconds)
    (470/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.013736916 seconds)
    (471/608) benchmarking "sub2ind"...
    done (took 0.300288394 seconds)
    (472/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061614599 seconds)
    (473/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046128454 seconds)
    (474/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067821029 seconds)
    (475/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.020445932 seconds)
    (476/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 5.8554e-5 seconds)
    (477/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.031376165 seconds)
    (478/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000332712 seconds)
    (479/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000302813 seconds)
    (480/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048439437 seconds)
    (481/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.0531e-5 seconds)
    (482/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.022200097 seconds)
    (483/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044614295 seconds)
    (484/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034402374 seconds)
    (485/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016556821 seconds)
    (486/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.2678e-5 seconds)
    (487/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046906973 seconds)
    (488/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046834088 seconds)
    (489/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016802329 seconds)
    (490/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094194894 seconds)
    (491/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027703636 seconds)
    (492/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.635e-5 seconds)
    (493/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026685433 seconds)
    (494/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018073494 seconds)
    (495/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03328868 seconds)
    (496/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7476e-5 seconds)
    (497/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051193362 seconds)
    (498/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.000369501 seconds)
    (499/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070497073 seconds)
    (500/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.357436657 seconds)
    (501/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044903265 seconds)
    (502/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026505903 seconds)
    (503/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.015826812 seconds)
    (504/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.020293722 seconds)
    (505/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041825984 seconds)
    (506/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.6127e-5 seconds)
    (507/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045977975 seconds)
    (508/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015130122 seconds)
    (509/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054884449 seconds)
    (510/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023973476 seconds)
    (511/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043825234 seconds)
    (512/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023598894 seconds)
    (513/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061450803 seconds)
    (514/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.044401775 seconds)
    (515/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067892682 seconds)
    (516/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.054860699 seconds)
    (517/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073003057 seconds)
    (518/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018364292 seconds)
    (519/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038484842 seconds)
    (520/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063207429 seconds)
    (521/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.022604879 seconds)
    (522/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.022566811 seconds)
    (523/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055964576 seconds)
    (524/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014807214 seconds)
    (525/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.033350144 seconds)
    (526/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066898969 seconds)
    (527/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.1991e-5 seconds)
    (528/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157853787 seconds)
    (529/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.019880748 seconds)
    (530/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023661543 seconds)
    (531/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034828212 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.038004613 seconds)
    (533/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.058050901 seconds)
    (534/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.054115694 seconds)
    (535/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026071239 seconds)
    (536/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062954592 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.019889471 seconds)
    (538/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062034316 seconds)
    (539/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044816235 seconds)
    (540/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.01560255 seconds)
    (541/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062340935 seconds)
    (542/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031753093 seconds)
    (543/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.022175456 seconds)
    (544/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01915921 seconds)
    (545/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.5439e-5 seconds)
    (546/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038460659 seconds)
    (547/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032620199 seconds)
    (548/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05863015 seconds)
    (549/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054018927 seconds)
    (550/608) benchmarking "4d"...
    done (took 0.092463128 seconds)
    (551/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075114249 seconds)
    (552/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000108685 seconds)
    (553/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.01785103 seconds)
    (554/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018143858 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08335169 seconds)
    (556/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014504938 seconds)
    (557/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061578024 seconds)
    (558/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000120321 seconds)
    (559/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028607882 seconds)
    (560/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044674025 seconds)
    (561/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063433123 seconds)
    (562/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013476201 seconds)
    (563/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046138784 seconds)
    (564/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067659862 seconds)
    (565/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.03870912 seconds)
    (566/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027295128 seconds)
    (567/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016152704 seconds)
    (568/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011661555 seconds)
    (569/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.057988935 seconds)
    (570/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.015007617 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028546155 seconds)
    (572/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030293912 seconds)
    (573/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040518401 seconds)
    (574/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019159474 seconds)
    (575/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014870847 seconds)
    (576/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050397417 seconds)
    (577/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098437237 seconds)
    (578/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014143213 seconds)
    (579/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058618224 seconds)
    (580/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072831231 seconds)
    (581/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.346e-5 seconds)
    (582/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 1.8442e-5 seconds)
    (583/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044188783 seconds)
    (584/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05386601 seconds)
    (585/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070566088 seconds)
    (586/608) benchmarking "2d"...
    done (took 0.052223177 seconds)
    (587/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063251757 seconds)
    (588/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060015124 seconds)
    (589/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039654158 seconds)
    (590/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05736801 seconds)
    (591/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011388245 seconds)
    (592/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045937153 seconds)
    (593/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034195416 seconds)
    (594/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.029397609 seconds)
    (595/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.059352297 seconds)
    (596/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.6385e-5 seconds)
    (597/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.245743778 seconds)
    (598/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 7.4869e-5 seconds)
    (599/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027533012 seconds)
    (600/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.4914e-5 seconds)
    (601/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 1.4388e-5 seconds)
    (602/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044898704 seconds)
    (603/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042789427 seconds)
    (604/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055830665 seconds)
    (605/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.020220995 seconds)
    (606/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052926651 seconds)
    (607/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017982922 seconds)
    (608/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088999428 seconds)
  done (took 29.412001778 seconds)
  (4/13) benchmarking "convert"...
    (1/4) benchmarking ("Float64", "Int")...
    done (took 0.136882151 seconds)
    (2/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.123961841 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.096985173 seconds)
    (4/4) benchmarking ("Int", "Float64")...
    done (took 0.032154545 seconds)
  done (took 1.550266006 seconds)
  (5/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.05654932 seconds)
    (2/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024767391 seconds)
    (3/6) benchmarking "boolarray_true_load!"...
    done (took 0.024374953 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.025214101 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.045070257 seconds)
    (6/6) benchmarking "bitarray_true_load!"...
    done (took 0.0348817 seconds)
  done (took 1.363756345 seconds)
  (6/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate", "Float64")...
    done (took 0.049689495 seconds)
    (2/12) benchmarking ("cumsum", "Int")...
    done (took 0.03834782 seconds)
    (3/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.100646565 seconds)
    (4/12) benchmarking ("accumulate!", "Int")...
    done (took 0.045347266 seconds)
    (5/12) benchmarking ("cumsum", "Float64")...
    done (took 0.028253819 seconds)
    (6/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.026741492 seconds)
    (7/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.043137217 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.090605883 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.037112097 seconds)
    (10/12) benchmarking ("accumulate", "Int")...
    done (took 0.031351654 seconds)
    (11/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.02763519 seconds)
    (12/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.043453203 seconds)
  done (took 1.711832853 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 0.038608821 seconds)
    (2/12) benchmarking ("push_multiple!", 256)...
    done (took 3.0117e-5 seconds)
    (3/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.5538e-5 seconds)
    (4/12) benchmarking ("prerend!", 8)...
    done (took 0.043660406 seconds)
    (5/12) benchmarking ("prerend!", 256)...
    done (took 2.4343e-5 seconds)
    (6/12) benchmarking ("push_single!", 256)...
    done (took 0.03128526 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 0.042634135 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 2.6373e-5 seconds)
    (9/12) benchmarking ("prerend!", 2048)...
    done (took 2.4467e-5 seconds)
    (10/12) benchmarking ("append!", 8)...
    done (took 7.29e-6 seconds)
    (11/12) benchmarking ("push_single!", 2048)...
    done (took 1.8558e-5 seconds)
    (12/12) benchmarking ("push_single!", 8)...
    done (took 6.265e-6 seconds)
  done (took 1.314246203 seconds)
  (8/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.056863482 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063321574 seconds)
    (3/20) benchmarking ("sumabs", "Float64")...
    done (took 0.058106886 seconds)
    (4/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.055984232 seconds)
    (5/20) benchmarking ("norminf", "Float64")...
    done (took 0.210568753 seconds)
    (6/20) benchmarking ("sum", "Float64")...
    done (took 0.040436613 seconds)
    (7/20) benchmarking ("norm", "Float64")...
    done (took 0.039082031 seconds)
    (8/20) benchmarking ("sum", "Int64")...
    done (took 0.039632091 seconds)
    (9/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.051242012 seconds)
    (10/20) benchmarking ("norminf", "Int64")...
    done (took 0.220117534 seconds)
    (11/20) benchmarking ("norm", "Int64")...
    done (took 0.03423613 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.039851773 seconds)
    (13/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.025016798 seconds)
    (14/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.059565501 seconds)
    (15/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051888147 seconds)
    (16/20) benchmarking ("mean", "Float64")...
    done (took 0.033348276 seconds)
    (17/20) benchmarking ("norm1", "Int64")...
    done (took 0.086049669 seconds)
    (18/20) benchmarking ("mean", "Int64")...
    done (took 0.073068545 seconds)
    (19/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.051059687 seconds)
    (20/20) benchmarking ("sumabs", "Int64")...
    done (took 0.051799864 seconds)
  done (took 2.494905919 seconds)
  (9/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.046970404 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.052894434 seconds)
    (3/4) benchmarking "rev_load_slow!"...
    done (took 0.049564615 seconds)
    (4/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.052758666 seconds)
  done (took 1.364049707 seconds)
  (10/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.045913576 seconds)
    (2/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.040229395 seconds)
    (3/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038416531 seconds)
    (4/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.027661558 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.047054599 seconds)
    (6/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.04196792 seconds)
    (7/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.022641104 seconds)
    (8/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038653191 seconds)
    (9/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.035295724 seconds)
    (10/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.046203834 seconds)
    (11/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.04029212 seconds)
    (12/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.034303116 seconds)
    (13/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.038441514 seconds)
    (14/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.045598155 seconds)
    (15/24) benchmarking ("any", "BitArray")...
    done (took 0.027185071 seconds)
    (16/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.040181456 seconds)
    (17/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.040824048 seconds)
    (18/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.02229473 seconds)
    (19/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.033592676 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.03389521 seconds)
    (21/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026128067 seconds)
    (22/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023306851 seconds)
    (23/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.022398659 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.028910417 seconds)
  done (took 1.998305444 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.033355963 seconds)
    (2/17) benchmarking ("vcat", 500)...
    done (took 0.083246921 seconds)
    (3/17) benchmarking ("hcat", 5)...
    done (took 1.5231e-5 seconds)
    (4/17) benchmarking ("vcat_setind", 5)...
    done (took 0.049433086 seconds)
    (5/17) benchmarking ("catnd_setind", 5)...
    done (took 0.191861422 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.05171216 seconds)
    (7/17) benchmarking ("hvcat", 5)...
    done (took 0.033003767 seconds)
    (8/17) benchmarking ("hcat_setind", 500)...
    done (took 0.074317014 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.002550819 seconds)
    (10/17) benchmarking ("catnd", 5)...
    done (took 0.54849639 seconds)
    (11/17) benchmarking "4467"...
    done (took 0.028506552 seconds)
    (12/17) benchmarking ("vcat", 5)...
    done (took 3.1705e-5 seconds)
    (13/17) benchmarking ("catnd", 500)...
    done (took 0.004659989 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 0.004056559 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 1.4155e-5 seconds)
    (16/17) benchmarking ("vcat_setind", 500)...
    done (took 0.00242967 seconds)
    (17/17) benchmarking ("catnd_setind", 500)...
    done (took 0.003357989 seconds)
  done (took 2.270924959 seconds)
  (12/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.263935254 seconds)
    (2/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.133946424 seconds)
    (3/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.3170283 seconds)
    (4/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.49271445 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.112810317 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.202580442 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.29950471 seconds)
    (8/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.191204941 seconds)
  done (took 3.184712082 seconds)
  (13/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.040203162 seconds)
    (2/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.053049364 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.052547801 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.063600051 seconds)
    (5/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.039955385 seconds)
    (6/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.046548114 seconds)
    (7/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.056186826 seconds)
    (8/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.04509891 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031767353 seconds)
    (10/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.036137044 seconds)
    (11/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.044161576 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.041110371 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.032073942 seconds)
    (14/24) benchmarking ("==", "BitArray")...
    done (took 0.030709168 seconds)
    (15/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.024893623 seconds)
    (16/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.042595382 seconds)
    (17/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.049998224 seconds)
    (18/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030605987 seconds)
    (19/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.051907385 seconds)
    (20/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.034928056 seconds)
    (21/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.019953435 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.046384149 seconds)
    (23/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.050732162 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.047702578 seconds)
  done (took 2.181634373 seconds)
done (took 78.512908635 seconds)
(18/23) benchmarking "string"...
  (1/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "different"...
    done (took 0.040818412 seconds)
    (2/4) benchmarking "identical"...
    done (took 0.021201442 seconds)
    (3/4) benchmarking "equal"...
    done (took 2.0207e-5 seconds)
    (4/4) benchmarking "different length"...
    done (took 1.5506e-5 seconds)
  done (took 1.221448057 seconds)
  (2/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat str len 1"...
    done (took 0.021143964 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024552795 seconds)
    (3/4) benchmarking "repeat char 2"...
    done (took 0.036782384 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.020964335 seconds)
  done (took 1.268363464 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "different"...
    done (took 0.022862819 seconds)
    (2/3) benchmarking "equal"...
    done (took 7.909e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 4.243e-6 seconds)
  done (took 1.190819649 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020358208 seconds)
  (5/7) benchmarking "findfirst"...
    (1/2) benchmarking "String"...
    done (took 0.023407363 seconds)
    (2/2) benchmarking "Char"...
    done (took 0.022986516 seconds)
  done (took 1.212219596 seconds)
  (6/7) benchmarking "join"...
  done (took 0.271580382 seconds)
  (7/7) benchmarking "readuntil"...
    (1/7) benchmarking "barbarian backtrack"...
    done (took 0.13694635 seconds)
    (2/7) benchmarking "target length 1"...
    done (took 8.965e-6 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 4.983e-6 seconds)
    (4/7) benchmarking "target length 1000"...
    done (took 8.35e-6 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.000215722 seconds)
    (6/7) benchmarking "no backtracking"...
    done (took 0.000566896 seconds)
    (7/7) benchmarking "backtracking"...
    done (took 0.000967919 seconds)
  done (took 1.32265477 seconds)
done (took 7.673552258 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "symm!"...
    done (took 0.149055371 seconds)
    (2/36) benchmarking "symv"...
    done (took 0.042587373 seconds)
    (3/36) benchmarking "dotu"...
    done (took 0.025081261 seconds)
    (4/36) benchmarking "sbmv!"...
    done (took 0.041127854 seconds)
    (5/36) benchmarking "scal!"...
    done (took 0.031299521 seconds)
    (6/36) benchmarking "gemm!"...
    done (took 0.121733997 seconds)
    (7/36) benchmarking "trmv"...
    done (took 0.04168656 seconds)
    (8/36) benchmarking "asum"...
    done (took 0.022925878 seconds)
    (9/36) benchmarking "gemm"...
    done (took 0.11925693 seconds)
    (10/36) benchmarking "gbmv!"...
    done (took 0.03968686 seconds)
    (11/36) benchmarking "trsm"...
    done (took 0.107566332 seconds)
    (12/36) benchmarking "ger!"...
    done (took 0.041970245 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.041516938 seconds)
    (14/36) benchmarking "syr!"...
    done (took 0.044689748 seconds)
    (15/36) benchmarking "gbmv"...
    done (took 0.02571145 seconds)
    (16/36) benchmarking "symm"...
    done (took 0.118080712 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.029539442 seconds)
    (18/36) benchmarking "scal"...
    done (took 0.028898242 seconds)
    (19/36) benchmarking "trmm"...
    done (took 0.080031968 seconds)
    (20/36) benchmarking "trmv!"...
    done (took 0.028613814 seconds)
    (21/36) benchmarking "trmm!"...
    done (took 0.082499245 seconds)
    (22/36) benchmarking "dotc"...
    done (took 0.023115949 seconds)
    (23/36) benchmarking "syrk!"...
    done (took 0.090717616 seconds)
    (24/36) benchmarking "syrk"...
    done (took 0.088935097 seconds)
    (25/36) benchmarking "gemv"...
    done (took 0.024821964 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.024142216 seconds)
    (27/36) benchmarking "nrm2"...
    done (took 0.022078563 seconds)
    (28/36) benchmarking "sbmv"...
    done (took 0.024770422 seconds)
    (29/36) benchmarking "trsv!"...
    done (took 0.028015771 seconds)
    (30/36) benchmarking "axpy!"...
    done (took 0.037279579 seconds)
    (31/36) benchmarking "trsm!"...
    done (took 0.08819058 seconds)
    (32/36) benchmarking "her!"...
    done (took 0.048099386 seconds)
    (33/36) benchmarking "herk"...
    done (took 0.247965866 seconds)
    (34/36) benchmarking "dot"...
    done (took 0.022235923 seconds)
    (35/36) benchmarking "herk!"...
    done (took 0.230072418 seconds)
    (36/36) benchmarking "symv!"...
    done (took 0.028544585 seconds)
  done (took 3.455322501 seconds)
  (2/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.170597508 seconds)
    (2/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.146649586 seconds)
    (3/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.291628387 seconds)
    (4/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.020565483 seconds)
    (5/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.082374397 seconds)
    (6/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.49457704 seconds)
    (7/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.23091859 seconds)
    (8/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.073372139 seconds)
    (9/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020325483 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.051232905 seconds)
    (11/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.051551718 seconds)
    (12/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.032683017 seconds)
    (13/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.062114656 seconds)
    (14/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.023846469 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.111827359 seconds)
    (16/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.076705415 seconds)
    (17/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019630284 seconds)
    (18/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.091847354 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 8.0124e-5 seconds)
    (20/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.05404001 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.08600911 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.034612882 seconds)
    (23/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.126436809 seconds)
    (24/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 2.428041811 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.000119949 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.125967981 seconds)
    (27/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.163255333 seconds)
    (28/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025931286 seconds)
    (29/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.108639993 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.425871922 seconds)
    (31/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 3.952193732 seconds)
    (32/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 3.8657e-5 seconds)
    (33/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021303954 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.000112835 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.7059e-5 seconds)
    (36/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.042875067 seconds)
    (37/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007528917 seconds)
    (38/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.183920799 seconds)
    (39/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.441184665 seconds)
    (40/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.04433568 seconds)
    (41/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.127250444 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.085438284 seconds)
    (43/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.020764773 seconds)
    (44/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.5559e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.083229368 seconds)
    (46/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.111252306 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.103420595 seconds)
    (48/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.00162935 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066421212 seconds)
    (50/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.5503e-5 seconds)
    (51/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.014021436 seconds)
    (52/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.086417471 seconds)
    (53/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.101139639 seconds)
    (54/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.117903645 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000673942 seconds)
    (56/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.3078e-5 seconds)
    (57/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.113928614 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.8275e-5 seconds)
    (59/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001262583 seconds)
    (60/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.064175982 seconds)
    (61/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.02105647 seconds)
    (62/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 3.8124e-5 seconds)
    (63/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.01979837 seconds)
    (64/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.143494251 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.05168324 seconds)
    (66/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.9148e-5 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.741013703 seconds)
    (68/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.114769427 seconds)
    (69/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.001339493 seconds)
    (70/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.020286662 seconds)
    (71/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020149526 seconds)
    (72/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.6478e-5 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.034389595 seconds)
    (74/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.059521063 seconds)
    (75/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000114094 seconds)
    (76/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025776733 seconds)
    (77/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.2652e-5 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.5527e-5 seconds)
    (79/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.000139759 seconds)
    (80/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.004185494 seconds)
    (81/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 4.5575e-5 seconds)
    (82/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.7559e-5 seconds)
    (83/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.243e-5 seconds)
    (84/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.00150109 seconds)
    (85/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.000109139 seconds)
    (86/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.138348703 seconds)
    (87/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001716116 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.171852186 seconds)
    (89/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.090317264 seconds)
    (90/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.6954e-5 seconds)
    (91/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000653861 seconds)
    (92/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.207128895 seconds)
    (93/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.0421e-5 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.007422534 seconds)
    (95/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.038161611 seconds)
    (96/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.2717e-5 seconds)
    (97/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 3.9112e-5 seconds)
    (98/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.8207e-5 seconds)
    (99/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.053445633 seconds)
    (100/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.3297e-5 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.3845e-5 seconds)
    (102/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.064949903 seconds)
    (103/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.8362e-5 seconds)
    (104/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001584284 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000583631 seconds)
    (106/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.001615003 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.7347e-5 seconds)
    (108/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.343862787 seconds)
    (109/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.040066719 seconds)
    (110/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.4856e-5 seconds)
    (111/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 3.2522e-5 seconds)
    (112/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.184654762 seconds)
    (113/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 4.4323e-5 seconds)
    (114/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007652468 seconds)
    (115/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.0839e-5 seconds)
    (116/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.6627e-5 seconds)
    (117/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.002511031 seconds)
    (118/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.955997967 seconds)
  done (took 20.175250795 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.623198767 seconds)
  (4/4) benchmarking "factorization"...
    (1/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.070793135 seconds)
    (2/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.326907908 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.257659883 seconds)
    (4/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.599015431 seconds)
    (5/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.045944103 seconds)
    (6/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.154910329 seconds)
    (7/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.292820399 seconds)
    (8/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.032327718 seconds)
    (9/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.022570685 seconds)
    (10/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.037187212 seconds)
    (11/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.004020633 seconds)
    (12/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.365740023 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.172482075 seconds)
    (14/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.426597576 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.791766893 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.022259274 seconds)
    (17/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.149882523 seconds)
    (18/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.245760656 seconds)
    (19/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.30646164 seconds)
    (20/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.032674979 seconds)
    (21/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 4.3051e-5 seconds)
    (22/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.011837523 seconds)
    (23/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.001388722 seconds)
    (24/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.008277888 seconds)
    (25/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.617232528 seconds)
    (26/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000582953 seconds)
    (27/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000232841 seconds)
    (28/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.003637754 seconds)
    (29/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003582273 seconds)
    (30/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.034003675 seconds)
    (31/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 7.4391e-5 seconds)
    (32/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.089198059 seconds)
  done (took 13.334171891 seconds)
done (took 38.755082868 seconds)
(20/23) benchmarking "tuple"...
  (1/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.237872682 seconds)
    (2/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.141016824 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.142087641 seconds)
    (4/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.312584863 seconds)
    (5/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.037929086 seconds)
    (6/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.021865477 seconds)
    (7/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.081307744 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022329145 seconds)
  done (took 4.194434025 seconds)
  (2/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021233361 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.044964732 seconds)
  done (took 1.280055256 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021980078 seconds)
    (2/24) benchmarking ("sum", "(4,)")...
    done (took 0.022790049 seconds)
    (3/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023506003 seconds)
    (4/24) benchmarking ("minimum", "(8,)")...
    done (took 0.021453336 seconds)
    (5/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.022527588 seconds)
    (6/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.024818107 seconds)
    (7/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.021853896 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.022945149 seconds)
    (9/24) benchmarking ("minimum", "(2,)")...
    done (took 0.019841831 seconds)
    (10/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022620584 seconds)
    (11/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021205334 seconds)
    (12/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023339754 seconds)
    (13/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026194593 seconds)
    (14/24) benchmarking ("minimum", "(16,)")...
    done (took 0.021983826 seconds)
    (15/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.02152902 seconds)
    (16/24) benchmarking ("sum", "(8,)")...
    done (took 0.022454511 seconds)
    (17/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.022437747 seconds)
    (18/24) benchmarking ("sum", "(2,)")...
    done (took 0.021986386 seconds)
    (19/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021067177 seconds)
    (20/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.019779822 seconds)
    (21/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.021542103 seconds)
    (22/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.022668868 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026265979 seconds)
    (24/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.023893311 seconds)
  done (took 1.754726484 seconds)
  (4/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.072185942 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022087736 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.02060557 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.022902031 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022534616 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022977775 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021659184 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021094987 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.020971883 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020317672 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020323127 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020333023 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.021606531 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020489413 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.020626639 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.021853978 seconds)
  done (took 1.639225635 seconds)
done (took 10.067332728 seconds)
(21/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.021669951 seconds)
    (2/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.021956491 seconds)
    (3/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.038479548 seconds)
    (4/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.022262174 seconds)
    (5/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065147815 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.4884e-5 seconds)
    (7/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.028295419 seconds)
    (8/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.026431766 seconds)
    (9/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003313214 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.02664012 seconds)
    (11/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011442004 seconds)
    (12/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.036338222 seconds)
    (13/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.039272441 seconds)
    (14/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.024406881 seconds)
    (15/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.0298169 seconds)
    (16/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.012929515 seconds)
    (17/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.023983144 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.028548196 seconds)
    (19/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.03551413 seconds)
    (20/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003358701 seconds)
    (21/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.027444961 seconds)
    (22/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.028751405 seconds)
    (23/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.038007853 seconds)
    (24/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005872004 seconds)
    (25/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.007826743 seconds)
    (26/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008657906 seconds)
    (27/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.004903183 seconds)
    (28/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.013254868 seconds)
    (29/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.6708e-5 seconds)
    (30/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005451717 seconds)
    (31/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.026573811 seconds)
    (32/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020256276 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.004862742 seconds)
    (34/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.024079295 seconds)
    (35/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.005032562 seconds)
    (36/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.011462849 seconds)
    (37/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.030148077 seconds)
    (38/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.011665441 seconds)
    (39/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.011841919 seconds)
    (40/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.0054854 seconds)
    (41/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.2666e-5 seconds)
    (42/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.012978611 seconds)
  done (took 2.00720671 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028066035 seconds)
    (2/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.028141344 seconds)
    (3/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.029050073 seconds)
    (4/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023391373 seconds)
    (5/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029933327 seconds)
    (6/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029541752 seconds)
    (7/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.02199652 seconds)
    (8/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.02700315 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026678236 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024860415 seconds)
    (11/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022568536 seconds)
    (12/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.025672128 seconds)
    (13/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028229565 seconds)
    (14/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028394512 seconds)
    (15/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026461737 seconds)
    (16/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027849012 seconds)
    (17/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.023350077 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.022114371 seconds)
    (19/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.03071147 seconds)
    (20/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028102717 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.025958621 seconds)
    (22/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028140038 seconds)
    (23/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027875788 seconds)
    (24/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027837233 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.024174213 seconds)
    (26/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.025972241 seconds)
  done (took 1.905494865 seconds)
  (3/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.038216535 seconds)
    (2/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.049553466 seconds)
    (3/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.065458484 seconds)
    (4/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.032040471 seconds)
    (5/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.03629829 seconds)
    (6/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.041365783 seconds)
    (7/28) benchmarking ("Set", "String", "filter")...
    done (took 0.045100994 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.031669404 seconds)
    (9/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.031638165 seconds)
    (10/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.04353231 seconds)
    (11/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.045790392 seconds)
    (12/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.032046941 seconds)
    (13/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.032806612 seconds)
    (14/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.050738726 seconds)
    (15/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037338569 seconds)
    (16/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.051851197 seconds)
    (17/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.05516177 seconds)
    (18/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.040347628 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.040064546 seconds)
    (20/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.048851303 seconds)
    (21/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.035450314 seconds)
    (22/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.042109027 seconds)
    (23/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.03764903 seconds)
    (24/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.035539406 seconds)
    (25/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037820891 seconds)
    (26/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.03458363 seconds)
    (27/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.034905734 seconds)
    (28/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.03685745 seconds)
  done (took 2.360416727 seconds)
  (4/6) benchmarking "set operations"...
    (1/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.01938092 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.060097081 seconds)
    (3/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.103333275 seconds)
    (4/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.053460249 seconds)
    (5/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.0309145 seconds)
    (6/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.022758664 seconds)
    (7/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026165557 seconds)
    (8/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.026707758 seconds)
    (9/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.059539344 seconds)
    (10/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.098135758 seconds)
    (11/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.032566326 seconds)
    (12/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.060687903 seconds)
    (13/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.020135015 seconds)
    (14/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.056071291 seconds)
    (15/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.07083639 seconds)
    (16/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.032857983 seconds)
    (17/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026168735 seconds)
    (18/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020829446 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020007573 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020206011 seconds)
    (21/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.026522612 seconds)
    (22/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.027697731 seconds)
    (23/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020030672 seconds)
    (24/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.019472767 seconds)
    (25/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.046108834 seconds)
    (26/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.020621954 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.019529294 seconds)
    (28/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.020818454 seconds)
    (29/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.025590118 seconds)
    (30/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.045354552 seconds)
    (31/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025532129 seconds)
    (32/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033111539 seconds)
    (33/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026561156 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.026915242 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.065781701 seconds)
    (36/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.029704582 seconds)
    (37/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.018911193 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020125978 seconds)
    (39/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.034303248 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022855781 seconds)
    (41/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 3.0795e-5 seconds)
    (42/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026683962 seconds)
    (43/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.038148358 seconds)
    (44/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.034893636 seconds)
    (45/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031222998 seconds)
    (46/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.05811153 seconds)
    (47/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 3.5874e-5 seconds)
    (48/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.079963747 seconds)
    (49/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.02707763 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.028736537 seconds)
    (51/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.025671325 seconds)
    (52/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.127913135 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.020104231 seconds)
    (54/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.018879844 seconds)
    (55/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.028175485 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041161474 seconds)
    (57/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031904052 seconds)
    (58/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027221752 seconds)
    (59/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.049867267 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036124584 seconds)
    (61/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.141444047 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019693878 seconds)
    (63/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.028852028 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.024932276 seconds)
    (65/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.038687076 seconds)
    (66/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037287755 seconds)
    (67/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.030651531 seconds)
    (68/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.036213612 seconds)
    (69/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.058467023 seconds)
    (70/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.9563e-5 seconds)
    (71/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.040614557 seconds)
    (72/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029224253 seconds)
    (73/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034826656 seconds)
    (74/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.1988e-5 seconds)
    (75/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.031226833 seconds)
    (76/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.025396573 seconds)
    (77/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.5577e-5 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.03403217 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.025825298 seconds)
    (80/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.02702414 seconds)
    (81/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.020690363 seconds)
    (82/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.040491697 seconds)
    (83/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032719424 seconds)
    (84/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029509706 seconds)
    (85/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.027487526 seconds)
    (86/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.042015818 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.031899272 seconds)
    (88/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027003557 seconds)
    (89/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.025646247 seconds)
    (90/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.038503583 seconds)
    (91/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.044326555 seconds)
    (92/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039600553 seconds)
    (93/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.027655917 seconds)
    (94/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.030630351 seconds)
    (95/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019137981 seconds)
    (96/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.043623402 seconds)
    (97/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.02952807 seconds)
    (98/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020093273 seconds)
    (99/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.02494511 seconds)
    (100/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029184145 seconds)
    (101/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.036291353 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.019962054 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.029512352 seconds)
    (104/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.0241289 seconds)
    (105/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.045203963 seconds)
    (106/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.5965e-5 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.020540047 seconds)
    (108/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.01893707 seconds)
    (109/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.053470804 seconds)
    (110/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.8464e-5 seconds)
    (111/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.021776256 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.025414877 seconds)
    (113/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.04439373 seconds)
    (114/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026953466 seconds)
    (115/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 3.2375e-5 seconds)
    (116/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.037624988 seconds)
    (117/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.022202668 seconds)
  done (took 5.10820146 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.030142075 seconds)
    (2/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.034441609 seconds)
    (3/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.025201059 seconds)
    (4/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027317662 seconds)
    (5/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.029304065 seconds)
    (6/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019534319 seconds)
    (7/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021624333 seconds)
    (8/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.042732794 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.021013851 seconds)
    (10/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.031846622 seconds)
    (11/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.033689108 seconds)
    (12/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.042737143 seconds)
    (13/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.027831155 seconds)
    (14/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.028353046 seconds)
    (15/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.022019161 seconds)
    (16/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.02202039 seconds)
    (17/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023827099 seconds)
    (18/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024011961 seconds)
    (19/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019652042 seconds)
    (20/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 3.1663e-5 seconds)
    (21/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025447173 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.0996e-5 seconds)
    (23/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.021909944 seconds)
    (24/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.025510469 seconds)
    (25/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.024554198 seconds)
    (26/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 4.2543e-5 seconds)
    (27/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.022342416 seconds)
    (28/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.036906082 seconds)
    (29/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.029911232 seconds)
    (30/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.027853189 seconds)
    (31/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.039837364 seconds)
    (32/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.6938e-5 seconds)
    (33/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.030024687 seconds)
    (34/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.033628933 seconds)
    (35/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.028879862 seconds)
    (36/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.038852626 seconds)
    (37/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021746503 seconds)
    (38/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.0350478 seconds)
    (39/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.02079746 seconds)
    (40/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.9541e-5 seconds)
    (41/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019166554 seconds)
    (42/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.02727997 seconds)
    (43/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.031769521 seconds)
    (44/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.038496652 seconds)
    (45/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.028135951 seconds)
    (46/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022049594 seconds)
    (47/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024397782 seconds)
    (48/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021819485 seconds)
    (49/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 3.1558e-5 seconds)
    (50/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.037123131 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.031871705 seconds)
    (52/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.5609e-5 seconds)
    (53/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.1452e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.022189452 seconds)
    (55/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.027021026 seconds)
    (56/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.042251942 seconds)
    (57/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.023107942 seconds)
    (58/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.039824592 seconds)
    (59/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022382065 seconds)
    (60/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 3.2229e-5 seconds)
    (61/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.022293585 seconds)
    (62/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.038569956 seconds)
    (63/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.033513188 seconds)
    (64/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.6159e-5 seconds)
    (65/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.6994e-5 seconds)
    (66/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026423304 seconds)
    (67/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.0663e-5 seconds)
    (68/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.027066204 seconds)
    (69/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.8353e-5 seconds)
    (70/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.1467e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.020825217 seconds)
    (72/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020889028 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.039239688 seconds)
    (74/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.037693516 seconds)
    (75/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.033271016 seconds)
    (76/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 4.5365e-5 seconds)
    (77/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.032075477 seconds)
    (78/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.022005013 seconds)
    (79/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.028516038 seconds)
    (80/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.030580267 seconds)
    (81/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.021051909 seconds)
    (82/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 4.9469e-5 seconds)
    (83/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.021184988 seconds)
    (84/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.2006e-5 seconds)
    (85/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 3.7624e-5 seconds)
    (86/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.5575e-5 seconds)
    (87/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.2381e-5 seconds)
    (88/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.023235472 seconds)
    (89/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.027852528 seconds)
    (90/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 3.9553e-5 seconds)
    (91/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.01932589 seconds)
    (92/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.1018e-5 seconds)
    (93/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025234154 seconds)
    (94/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 3.7672e-5 seconds)
    (95/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021589127 seconds)
    (96/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.022319774 seconds)
    (97/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.0918e-5 seconds)
    (98/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.5351e-5 seconds)
    (99/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.9997e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.02645299 seconds)
    (101/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.1805e-5 seconds)
    (102/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.022649857 seconds)
    (103/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023882384 seconds)
    (104/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 4.6047e-5 seconds)
    (105/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000149355 seconds)
  done (took 3.430462709 seconds)
  (6/6) benchmarking "optimizations"...
    (1/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.053309056 seconds)
    (2/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.032022167 seconds)
    (3/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.135746955 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.095547771 seconds)
    (5/27) benchmarking ("BitSet", "Int8")...
    done (took 0.045885059 seconds)
    (6/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.096966961 seconds)
    (7/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.08859377 seconds)
    (8/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.101192091 seconds)
    (9/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.06040684 seconds)
    (10/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.095621213 seconds)
    (11/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.058814383 seconds)
    (12/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.090949265 seconds)
    (13/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.061873232 seconds)
    (14/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.025435948 seconds)
    (15/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022631447 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.04526323 seconds)
    (17/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.045026267 seconds)
    (18/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.096872209 seconds)
    (19/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022984094 seconds)
    (20/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071589699 seconds)
    (21/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.043235308 seconds)
    (22/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.037142221 seconds)
    (23/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.024120117 seconds)
    (24/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.025541559 seconds)
    (25/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022796693 seconds)
    (26/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.027219717 seconds)
    (27/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.070572546 seconds)
  done (took 2.935110399 seconds)
done (took 18.953236151 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "optimization"...
    (1/12) benchmarking "many_const_calls"...
    done (took 16.743872891 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.580174507 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.445308945 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.414045039 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.312504695 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.95264792 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.083642945 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.594056436 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.115327181 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.389127633 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 10.240460684 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.294157129 seconds)
  done (took 42.471834369 seconds)
  (2/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "many_const_calls"...
    done (took 2.151903911 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.87780147 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.097159408 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.058688993 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.159177236 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.108728994 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.045387588 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.374123656 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.041615852 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.151031923 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.980861772 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.389182627 seconds)
  done (took 10.288627548 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "many_const_calls"...
    done (took 0.102935575 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.558344796 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.248550788 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.394294154 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.297998782 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.834333263 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.077903853 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.566032134 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.104208284 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.37334977 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.321014715 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.48120735 seconds)
  done (took 24.41042825 seconds)
done (took 78.490902298 seconds)
(23/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.028249129 seconds)
done (took 2.499540569 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.666362553 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 2.916606443 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.620632033 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.49966563 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.624214815 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.530846475 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.52848424 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.624927978 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.630676836 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.514925936 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.535054385 seconds)
  done (took 31.049155574 seconds)
  (2/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.392605009 seconds)
    (2/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.394818797 seconds)
    (3/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.406513524 seconds)
    (4/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.459402316 seconds)
    (5/41) benchmarking ("BitVector", "10-90")...
    done (took 5.016678315 seconds)
    (6/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.407231523 seconds)
    (7/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.409951518 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.414915002 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.571596933 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.479496935 seconds)
    (11/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.410610438 seconds)
    (12/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.454923112 seconds)
    (13/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.519989209 seconds)
    (14/41) benchmarking ("BitVector", "50-50")...
    done (took 4.148230262 seconds)
    (15/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.482730143 seconds)
    (16/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.48012407 seconds)
    (17/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.515691125 seconds)
    (18/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.40110692 seconds)
    (19/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.460684163 seconds)
    (20/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.486360396 seconds)
    (21/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.462562531 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.486965796 seconds)
    (23/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.42935859 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.523108494 seconds)
    (25/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.478797063 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.497019193 seconds)
    (27/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.490713316 seconds)
    (28/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.408922909 seconds)
    (29/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.476330978 seconds)
    (30/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.539088289 seconds)
    (31/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.539740616 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.42025893 seconds)
    (33/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.481440957 seconds)
    (34/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.488495452 seconds)
    (35/41) benchmarking ("BitVector", "90-10")...
    done (took 2.813252152 seconds)
    (36/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.732443381 seconds)
    (37/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.489239397 seconds)
    (38/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.459422983 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.44585391 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.425916957 seconds)
    (41/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.416619948 seconds)
  done (took 108.176741713 seconds)
  (3/3) benchmarking "findprev"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 4.637919119 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 3.268491345 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.62874116 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.575160147 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.624491061 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.539625339 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.527923296 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.628118161 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.626903733 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.646998532 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.541523312 seconds)
  done (took 33.615452765 seconds)
done (took 175.274058304 seconds)
(2/23) benchmarking "problem"...
  (1/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.359649133 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.365350632 seconds)
  done (took 17.084525996 seconds)
  (2/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.427541804 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.394729809 seconds)
  done (took 17.18311146 seconds)
  (3/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.384584351 seconds)
  done (took 9.744060776 seconds)
  (4/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.821049973 seconds)
  done (took 10.182314417 seconds)
  (5/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.509936947 seconds)
  done (took 9.870919524 seconds)
  (6/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.818807862 seconds)
  done (took 10.186176214 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.562945823 seconds)
  done (took 9.929906294 seconds)
  (8/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.407571036 seconds)
    (2/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.368766396 seconds)
    (3/4) benchmarking "laplace_iter_devec"...
    done (took 7.37862877 seconds)
    (4/4) benchmarking "laplace_iter_sub"...
    done (took 7.420475342 seconds)
  done (took 31.944661899 seconds)
  (9/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.339251212 seconds)
  done (took 11.704988611 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.365963442 seconds)
  done (took 9.733868407 seconds)
  (11/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.62793914 seconds)
  done (took 9.998291366 seconds)
  (12/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.373041028 seconds)
  done (took 9.738558918 seconds)
  (13/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.802016734 seconds)
  done (took 10.165942339 seconds)
  (14/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.683737655 seconds)
  done (took 10.047558712 seconds)
done (took 179.872960981 seconds)
(3/23) benchmarking "io"...
  (1/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.914676932 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 8.087674181 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 8.055167899 seconds)
  done (took 26.41800394 seconds)
  (2/4) benchmarking "read"...
    (1/2) benchmarking "read"...
    done (took 2.912093716 seconds)
    (2/2) benchmarking "readstring"...
    done (took 2.859092251 seconds)
  done (took 8.162020611 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.369486644 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.817647743 seconds)
    (3/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.829717271 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.366307622 seconds)
  done (took 27.748251034 seconds)
  (4/4) benchmarking "skipchars"...
  done (took 7.524043413 seconds)
done (took 72.212428372 seconds)
(4/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.416437409 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.384230587 seconds)
  (3/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.372229814 seconds)
  (4/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.424438149 seconds)
  (5/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.386483292 seconds)
  (6/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.393273816 seconds)
  (7/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.383996263 seconds)
  (8/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.380847033 seconds)
  (9/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.38714214 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.38023 seconds)
  (11/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.395772228 seconds)
  (12/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.384023667 seconds)
  (13/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.400687817 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.387090626 seconds)
  (15/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.388492511 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.38717773 seconds)
  (17/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.394721162 seconds)
  (18/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.384790961 seconds)
  (19/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.389849505 seconds)
  (20/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.381786291 seconds)
  (21/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.396702137 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.405878837 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.392912468 seconds)
  (24/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.372498186 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.385374942 seconds)
  (26/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.383578284 seconds)
  (27/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.385505585 seconds)
  (28/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.384719723 seconds)
  (29/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.397942031 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.380243394 seconds)
  (31/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.388170081 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.387164208 seconds)
  (33/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.381025951 seconds)
  (34/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.389599294 seconds)
  (35/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.392167376 seconds)
  (36/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.387835535 seconds)
  (37/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.389015059 seconds)
  (38/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.419258898 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.411509564 seconds)
  (40/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.381214512 seconds)
  (41/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.385756911 seconds)
  (42/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.393459229 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.387943617 seconds)
  (44/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.39212891 seconds)
  (45/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.389160339 seconds)
  (46/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.387927837 seconds)
  (47/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.388763266 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.39257013 seconds)
  (49/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.399456387 seconds)
  (50/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.389777475 seconds)
  (51/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.397220398 seconds)
  (52/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.445171595 seconds)
  (53/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.384272864 seconds)
  (54/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.397362984 seconds)
  (55/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.389268884 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.383387539 seconds)
  (57/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.391388848 seconds)
  (58/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.389097965 seconds)
  (59/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.389572985 seconds)
  (60/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.387605991 seconds)
  (61/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.395357748 seconds)
  (62/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.524268367 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.427849328 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.405860287 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.376067597 seconds)
  (66/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.393902101 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.392472033 seconds)
  (68/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.381542382 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.389143369 seconds)
  (70/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.497420273 seconds)
  (71/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.424086166 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.391008757 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.383910882 seconds)
  (74/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.38795901 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.383695254 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.386630762 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.387117447 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.411805571 seconds)
  (79/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.373764316 seconds)
  (80/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.388778869 seconds)
  (81/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.392568214 seconds)
  (82/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.416277188 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.497538464 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.391782764 seconds)
  (85/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.383486734 seconds)
  (86/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.376570341 seconds)
  (87/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.407621146 seconds)
  (88/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.388740161 seconds)
  (89/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.37990238 seconds)
  (90/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.406769146 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.599860673 seconds)
  (92/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.489201346 seconds)
  (93/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.401910641 seconds)
  (94/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.410504843 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.421416712 seconds)
  (96/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.374662342 seconds)
  (97/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.378741481 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.380507177 seconds)
  (99/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.407866786 seconds)
  (100/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.379610187 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.400855994 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.385608251 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.410620709 seconds)
  (104/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.380970066 seconds)
  (105/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.3719426 seconds)
  (106/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.378535564 seconds)
  (107/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.389711613 seconds)
  (108/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.383436635 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.499200747 seconds)
  (110/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.396317314 seconds)
  (111/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.397067824 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.39083581 seconds)
  (113/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.386892222 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.387993937 seconds)
  (115/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.387147332 seconds)
  (116/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.39787534 seconds)
  (117/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.396084574 seconds)
  (118/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.396862652 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.402208092 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.402913439 seconds)
  (121/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.38935725 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.409411168 seconds)
  (123/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.396504089 seconds)
  (124/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.402951579 seconds)
  (125/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.396725889 seconds)
  (126/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.392955374 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.400511469 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.413249403 seconds)
  (129/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.385699901 seconds)
  (130/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.377387149 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.389723272 seconds)
  (132/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.391758171 seconds)
  (133/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.393750039 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.398959303 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.402931087 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.387286954 seconds)
  (137/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.385347214 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.398114914 seconds)
  (139/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.406289159 seconds)
  (140/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.41388034 seconds)
  (141/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.397212768 seconds)
  (142/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.446368112 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.38667785 seconds)
  (144/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.415444301 seconds)
  (145/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.426498745 seconds)
  (146/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.398500891 seconds)
  (147/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.541904243 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.417831793 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.404749023 seconds)
  (150/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.391233813 seconds)
  (151/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.394486955 seconds)
  (152/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.408010776 seconds)
  (153/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.39649945 seconds)
  (154/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.403276185 seconds)
  (155/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.398910355 seconds)
  (156/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.38591705 seconds)
  (157/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.385928445 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.410703675 seconds)
  (159/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.388420424 seconds)
  (160/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.385310251 seconds)
  (161/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.379176612 seconds)
  (162/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.383255679 seconds)
  (163/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.423526653 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.397446588 seconds)
  (165/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.543107159 seconds)
  (166/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.390165926 seconds)
  (167/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.411098592 seconds)
  (168/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.410398656 seconds)
  (169/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.397866464 seconds)
  (170/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.384878173 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.420762536 seconds)
  (172/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.396529662 seconds)
  (173/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.399448476 seconds)
  (174/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.413371179 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.390930362 seconds)
  (176/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.388303335 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.390939169 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.413800918 seconds)
  (179/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.394380477 seconds)
  (180/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.40095976 seconds)
  (181/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.384323912 seconds)
  (182/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.38630824 seconds)
  (183/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.391453101 seconds)
  (184/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.390314278 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.39890437 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.385973789 seconds)
  (187/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.380910713 seconds)
  (188/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.395127467 seconds)
  (189/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.41325701 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.388187 seconds)
  (191/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.384960643 seconds)
  (192/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.613705187 seconds)
  (193/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.377238123 seconds)
  (194/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.38825906 seconds)
  (195/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.398357609 seconds)
  (196/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.405181484 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.390584547 seconds)
  (198/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.375203087 seconds)
  (199/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.401772995 seconds)
  (200/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.387351908 seconds)
  (201/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.399516988 seconds)
  (202/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.42003957 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.385106223 seconds)
  (204/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.377068252 seconds)
  (205/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.38725189 seconds)
  (206/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.419373112 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.421304662 seconds)
  (208/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.430674457 seconds)
  (209/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.400543407 seconds)
  (210/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.391825962 seconds)
  (211/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.484431661 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.382950274 seconds)
  (213/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.380136172 seconds)
  (214/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.394515979 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.415177312 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.390298827 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.39068819 seconds)
  (218/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.387444334 seconds)
  (219/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.38103058 seconds)
  (220/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.387231307 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.381212856 seconds)
  (222/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.402558377 seconds)
  (223/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.386478576 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.408370566 seconds)
  (225/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.387437536 seconds)
  (226/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.419080927 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.388473872 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.407434509 seconds)
  (229/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.383678421 seconds)
  (230/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.389365656 seconds)
  (231/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.402363628 seconds)
  (232/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.380767044 seconds)
  (233/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.386426835 seconds)
  (234/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.390314133 seconds)
  (235/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.391733195 seconds)
  (236/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.383987373 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.384789924 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.421801837 seconds)
  (239/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.379677149 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.378934681 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.401581729 seconds)
  (242/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.397813944 seconds)
  (243/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.382942016 seconds)
  (244/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.387662576 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.391006805 seconds)
  (246/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.406620603 seconds)
  (247/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.39285977 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.400473055 seconds)
  (249/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.424725374 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.394830092 seconds)
  (251/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.602437547 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.391018838 seconds)
  (253/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.394068415 seconds)
  (254/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.548919742 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.416513244 seconds)
  (256/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.421512272 seconds)
  (257/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.427006271 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.387457893 seconds)
  (259/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.387350168 seconds)
  (260/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.408014968 seconds)
  (261/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.395177291 seconds)
  (262/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.398408682 seconds)
  (263/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.385600691 seconds)
  (264/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.395828144 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.396047915 seconds)
  (266/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.384975695 seconds)
  (267/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.383941938 seconds)
  (268/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.388955954 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.433109831 seconds)
  (270/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.431065743 seconds)
  (271/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.38622357 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.403291611 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.392476383 seconds)
  (274/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.384363603 seconds)
  (275/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.392179746 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.400236597 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.422430443 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.390858824 seconds)
  (279/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.427534614 seconds)
  (280/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.615543264 seconds)
  (281/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.402604076 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.409370034 seconds)
  (283/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.401035558 seconds)
  (284/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.384823923 seconds)
  (285/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.397236129 seconds)
  (286/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.379369354 seconds)
  (287/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.396529255 seconds)
  (288/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.487437324 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.404125759 seconds)
  (290/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.523042962 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.421406545 seconds)
  (292/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.397177055 seconds)
  (293/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.38394022 seconds)
  (294/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.380562815 seconds)
  (295/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.39904444 seconds)
  (296/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.394050812 seconds)
  (297/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.400068168 seconds)
  (298/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.39022954 seconds)
  (299/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.399531056 seconds)
  (300/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.418191774 seconds)
  (301/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.391376396 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.389072671 seconds)
  (303/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.444494715 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.402210378 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.393897297 seconds)
  (306/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.380129298 seconds)
  (307/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.42461289 seconds)
  (308/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.395833194 seconds)
  (309/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.378103928 seconds)
  (310/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.411938888 seconds)
  (311/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.438142983 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.422271841 seconds)
  (313/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.395386374 seconds)
  (314/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.397118832 seconds)
  (315/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.383847463 seconds)
  (316/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.38836355 seconds)
  (317/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.390889359 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.402681917 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.403774278 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.393157487 seconds)
  (321/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.386936693 seconds)
  (322/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.394595479 seconds)
  (323/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.398086733 seconds)
  (324/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.393461346 seconds)
  (325/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.385477544 seconds)
  (326/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.423629869 seconds)
  (327/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.40576931 seconds)
  (328/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.430360541 seconds)
  (329/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.413793326 seconds)
  (330/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.386441282 seconds)
  (331/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.3953982 seconds)
  (332/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.401356762 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.399731343 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.390653749 seconds)
  (335/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.375487965 seconds)
  (336/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.426004838 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.389634878 seconds)
  (338/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.438820578 seconds)
  (339/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.399206231 seconds)
  (340/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.395613209 seconds)
  (341/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.397305966 seconds)
  (342/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.387213884 seconds)
  (343/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.386424291 seconds)
  (344/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.404465571 seconds)
  (345/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.387319158 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.412900666 seconds)
  (347/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.391267226 seconds)
  (348/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.389307161 seconds)
  (349/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.406021344 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.384456696 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.396004127 seconds)
  (352/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.382294981 seconds)
  (353/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.431198144 seconds)
  (354/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.390488089 seconds)
  (355/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.434361674 seconds)
  (356/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.391414891 seconds)
  (357/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.406587437 seconds)
  (358/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.382496311 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.400802473 seconds)
  (360/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.401009605 seconds)
  (361/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.392309123 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.392595826 seconds)
  (363/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.424058355 seconds)
  (364/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.394880703 seconds)
  (365/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.396176561 seconds)
  (366/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.550295309 seconds)
  (367/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.386241939 seconds)
  (368/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.384203261 seconds)
  (369/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.401832775 seconds)
  (370/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.412171202 seconds)
  (371/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.379853981 seconds)
  (372/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.394592596 seconds)
  (373/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.388328424 seconds)
  (374/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.406544761 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.414562219 seconds)
  (376/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.391914705 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.408433059 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.407834372 seconds)
  (379/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.395193132 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.390807575 seconds)
  (381/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.397841292 seconds)
  (382/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.408694621 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.395710426 seconds)
  (384/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.383144942 seconds)
  (385/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.39836918 seconds)
  (386/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.386330278 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.397759381 seconds)
  (388/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.380235734 seconds)
  (389/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.399455419 seconds)
  (390/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.404920573 seconds)
  (391/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.389457803 seconds)
  (392/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.388454324 seconds)
  (393/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.4009321 seconds)
  (394/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.442383986 seconds)
  (395/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.38978362 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.390480333 seconds)
  (397/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.407528325 seconds)
  (398/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.397236336 seconds)
  (399/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.405702827 seconds)
  (400/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.406004972 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.389639489 seconds)
  (402/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.382273022 seconds)
  (403/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.387490941 seconds)
  (404/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.397657574 seconds)
  (405/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.388031771 seconds)
  (406/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.385180953 seconds)
  (407/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.387712439 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.403722783 seconds)
  (409/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.385430192 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.402363067 seconds)
  (411/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.395218678 seconds)
  (412/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.397295018 seconds)
  (413/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.399278597 seconds)
  (414/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.394571353 seconds)
  (415/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.414799057 seconds)
  (416/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.388635879 seconds)
  (417/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.401500974 seconds)
  (418/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.409648985 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.388993744 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.423616934 seconds)
  (421/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.395576826 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.397846149 seconds)
  (423/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.398356851 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.407055417 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.397937093 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.395876535 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.411075142 seconds)
  (428/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.431562684 seconds)
  (429/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.41607654 seconds)
  (430/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.398881962 seconds)
  (431/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.413634603 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.390669071 seconds)
  (433/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.378718819 seconds)
  (434/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.405130826 seconds)
  (435/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.396152126 seconds)
  (436/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.383927289 seconds)
  (437/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.416895152 seconds)
  (438/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.393796189 seconds)
  (439/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.399689471 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.397442871 seconds)
  (441/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.391649517 seconds)
  (442/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.406958779 seconds)
  (443/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.403215471 seconds)
  (444/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.3994661 seconds)
  (445/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.392570128 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.396070961 seconds)
  (447/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.416722374 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.399401288 seconds)
  (449/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.407827708 seconds)
  (450/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.403394101 seconds)
  (451/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.416591853 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.3983955 seconds)
  (453/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.399659427 seconds)
  (454/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.389502143 seconds)
  (455/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.405807283 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.414614507 seconds)
  (457/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.402850198 seconds)
  (458/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.40048141 seconds)
  (459/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.391044475 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.389990472 seconds)
  (461/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.41438133 seconds)
  (462/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.397227754 seconds)
  (463/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.399430509 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.39506504 seconds)
  (465/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.397928826 seconds)
  (466/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.39612785 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.401391986 seconds)
  (468/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.388858014 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.402736256 seconds)
  (470/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.383833379 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.39846 seconds)
  (472/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.392377098 seconds)
  (473/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.404021096 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.410527533 seconds)
  (475/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.393126753 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.425782959 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.397453134 seconds)
  (478/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.395469164 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.471954952 seconds)
  (480/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.393867505 seconds)
  (481/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.393525455 seconds)
  (482/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.389466498 seconds)
  (483/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.398407062 seconds)
  (484/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.386414987 seconds)
  (485/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.410901754 seconds)
  (486/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.391488944 seconds)
  (487/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.386688057 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.394715031 seconds)
  (489/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.397697076 seconds)
  (490/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.390857542 seconds)
  (491/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.389756476 seconds)
  (492/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.395885943 seconds)
  (493/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.389684763 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.390529789 seconds)
  (495/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.400192729 seconds)
  (496/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.386710411 seconds)
  (497/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.38712847 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.389540206 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.379299506 seconds)
  (500/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.403383724 seconds)
  (501/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.398631023 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.395174806 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.404114307 seconds)
  (504/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.397963343 seconds)
  (505/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.387447196 seconds)
  (506/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.493964371 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.401851704 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.391394086 seconds)
  (509/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.390012118 seconds)
  (510/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.402488483 seconds)
  (511/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.389645648 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.39833949 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.413274909 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.388241856 seconds)
  (515/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.398032814 seconds)
  (516/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.396503959 seconds)
  (517/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.385564129 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.406892192 seconds)
  (519/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.38973348 seconds)
  (520/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.413676607 seconds)
  (521/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.391689751 seconds)
  (522/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.382530565 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.406314289 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.406632404 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.403236811 seconds)
  (526/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.400140151 seconds)
  (527/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.390446807 seconds)
  (528/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.400191899 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.433556652 seconds)
  (530/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.402075731 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.421318342 seconds)
  (532/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.381718819 seconds)
  (533/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.406520961 seconds)
  (534/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.541900926 seconds)
  (535/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.595863055 seconds)
  (536/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.599285338 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.51306367 seconds)
  (538/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.405324184 seconds)
  (539/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.563877762 seconds)
  (540/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.408151136 seconds)
  (541/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.385267748 seconds)
  (542/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.397955358 seconds)
  (543/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.419915918 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.414165874 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.399879921 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.401259337 seconds)
  (547/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.417008559 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.394247017 seconds)
  (549/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.395256612 seconds)
  (550/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.476646346 seconds)
  (551/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.391713798 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.403544748 seconds)
  (553/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.38883706 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.389933548 seconds)
  (555/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.400680942 seconds)
  (556/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.391652485 seconds)
  (557/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.428891612 seconds)
  (558/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.396078624 seconds)
  (559/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.4086121 seconds)
  (560/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.396606015 seconds)
  (561/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.409223104 seconds)
  (562/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.39159213 seconds)
  (563/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.40115614 seconds)
  (564/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.382531999 seconds)
  (565/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.408821636 seconds)
  (566/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.396627895 seconds)
  (567/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.405859477 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.395937852 seconds)
  (569/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.417400254 seconds)
  (570/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.406739902 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.413662551 seconds)
  (572/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.398744211 seconds)
  (573/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.398276637 seconds)
  (574/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.398457566 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.420533018 seconds)
  (576/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.406569151 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.412590641 seconds)
  (578/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.389313905 seconds)
  (579/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.402455249 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.391399207 seconds)
  (581/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.392148469 seconds)
  (582/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.410920547 seconds)
  (583/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.38865806 seconds)
  (584/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.405111908 seconds)
  (585/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.417103689 seconds)
  (586/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.421908869 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.434950943 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.398032683 seconds)
  (589/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.414384032 seconds)
  (590/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.408947266 seconds)
  (591/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.42490311 seconds)
  (592/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.394924389 seconds)
  (593/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.403141237 seconds)
  (594/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.40386177 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.439110307 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.487613336 seconds)
  (597/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.396413352 seconds)
  (598/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.412814265 seconds)
  (599/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.401903489 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.398002498 seconds)
  (601/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.410190719 seconds)
  (602/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.399844575 seconds)
  (603/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.395311983 seconds)
  (604/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.404256009 seconds)
  (605/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.415371127 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.401777481 seconds)
  (607/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.418219237 seconds)
  (608/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.395483039 seconds)
  (609/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.392922833 seconds)
  (610/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.430151465 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.422399045 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.393157725 seconds)
  (613/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.602679386 seconds)
  (614/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.410353288 seconds)
  (615/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.397622358 seconds)
  (616/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.382095997 seconds)
  (617/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.494272855 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.416366756 seconds)
  (619/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.389256708 seconds)
  (620/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.411363263 seconds)
  (621/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.40271181 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.444890268 seconds)
  (623/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.383826746 seconds)
  (624/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.409457873 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.405289565 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.403592839 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.417074724 seconds)
  (628/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.395002971 seconds)
  (629/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.395124583 seconds)
  (630/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.390226518 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.393629465 seconds)
  (632/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.400554078 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.396004455 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.396603402 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.393282667 seconds)
  (636/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.399507373 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.397292493 seconds)
  (638/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.389663872 seconds)
  (639/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.397561737 seconds)
  (640/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.506828278 seconds)
  (641/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.386570405 seconds)
  (642/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.407887711 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.411611708 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.400941638 seconds)
  (645/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.388712681 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.402481439 seconds)
  (647/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.404717396 seconds)
  (648/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.418838436 seconds)
  (649/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.396069753 seconds)
  (650/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.418594134 seconds)
  (651/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.400090983 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.393824146 seconds)
  (653/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.381756027 seconds)
  (654/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.395960701 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.403791093 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.396087243 seconds)
  (657/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.477720322 seconds)
  (658/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.444051429 seconds)
  (659/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.44040585 seconds)
  (660/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.393943597 seconds)
  (661/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.441891734 seconds)
  (662/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.394302424 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.423406298 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.401387002 seconds)
  (665/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.39289852 seconds)
  (666/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.382600649 seconds)
  (667/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.397333635 seconds)
  (668/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.401430157 seconds)
  (669/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.392462115 seconds)
  (670/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.403225899 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.398241169 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.423589449 seconds)
  (673/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.404575543 seconds)
  (674/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.393979615 seconds)
  (675/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.428818554 seconds)
  (676/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.393368718 seconds)
  (677/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.436560087 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.419353215 seconds)
  (679/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.397120981 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.392525329 seconds)
done (took 1637.177216114 seconds)
(5/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.529805692 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.565873883 seconds)
  done (took 17.469499951 seconds)
  (2/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.971703484 seconds)
    (2/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.380986024 seconds)
    (3/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.133105344 seconds)
    (4/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.472714865 seconds)
    (5/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.445307161 seconds)
    (6/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.565690288 seconds)
    (7/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.036580492 seconds)
    (8/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.393321231 seconds)
    (9/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.374857582 seconds)
    (10/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.936870585 seconds)
    (11/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.390647201 seconds)
    (12/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.64074122 seconds)
    (13/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.416089828 seconds)
    (14/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.385060694 seconds)
    (15/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.593941495 seconds)
    (16/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.478053046 seconds)
    (17/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.37394693 seconds)
    (18/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 3.013837881 seconds)
    (19/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.022572332 seconds)
    (20/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.853115917 seconds)
    (21/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.387097154 seconds)
    (22/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.375645504 seconds)
    (23/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.374290941 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.384817862 seconds)
    (25/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.376592368 seconds)
    (26/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.815745628 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.193821559 seconds)
    (28/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.382791748 seconds)
    (29/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.608037127 seconds)
    (30/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.392778566 seconds)
    (31/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.614521138 seconds)
    (32/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.932999701 seconds)
    (33/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.382684639 seconds)
    (34/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.374284854 seconds)
    (35/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.680940837 seconds)
    (36/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.382801689 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.375091435 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.375410047 seconds)
    (39/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.382315831 seconds)
    (40/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.165909633 seconds)
    (41/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.920863174 seconds)
    (42/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.383171441 seconds)
    (43/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.853392514 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.934654313 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.717735678 seconds)
    (46/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.880690739 seconds)
    (47/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.14710858 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.206107912 seconds)
    (49/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 3.023019442 seconds)
    (50/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.93626282 seconds)
    (51/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.812265008 seconds)
    (52/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.835882275 seconds)
    (53/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.378249564 seconds)
    (54/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.375186813 seconds)
    (55/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.374965267 seconds)
    (56/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.375233654 seconds)
    (57/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.216910117 seconds)
    (58/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.383686328 seconds)
    (59/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.375024484 seconds)
    (60/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 6.945142053 seconds)
    (61/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.375809227 seconds)
    (62/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.300322887 seconds)
    (63/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.378135008 seconds)
    (64/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.75302834 seconds)
    (65/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.383760673 seconds)
    (66/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.332224066 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.769295837 seconds)
    (68/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.389005371 seconds)
    (69/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.384802569 seconds)
    (70/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.665580772 seconds)
    (71/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.384228087 seconds)
    (72/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.873344762 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.386977097 seconds)
    (74/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.371774938 seconds)
    (75/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.702011723 seconds)
    (76/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.402540284 seconds)
    (77/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.378060972 seconds)
    (78/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.169935981 seconds)
    (79/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.409337198 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.764733566 seconds)
    (81/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.179579827 seconds)
    (82/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.871008279 seconds)
    (83/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.804975863 seconds)
    (84/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.382197065 seconds)
    (85/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.378746614 seconds)
    (86/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.921611458 seconds)
    (87/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.392403651 seconds)
    (88/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.815149915 seconds)
    (89/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.078744136 seconds)
    (90/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.387455549 seconds)
    (91/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.384382953 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.667898448 seconds)
    (93/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.164958236 seconds)
    (94/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.091016396 seconds)
    (95/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.374769572 seconds)
    (96/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.375488142 seconds)
    (97/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.91003599 seconds)
    (98/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.953904244 seconds)
    (99/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.852204092 seconds)
    (100/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.83962948 seconds)
    (101/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.385191949 seconds)
    (102/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.953002046 seconds)
    (103/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.376345682 seconds)
    (104/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.888973857 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.570121677 seconds)
    (106/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.199027933 seconds)
    (107/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.384184292 seconds)
    (108/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.872287157 seconds)
    (109/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.478038475 seconds)
    (110/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.933289137 seconds)
    (111/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.378514379 seconds)
    (112/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.376084027 seconds)
    (113/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.391473767 seconds)
    (114/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.36909812 seconds)
    (115/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.945166969 seconds)
    (116/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.376125735 seconds)
    (117/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.275401835 seconds)
    (118/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.80799503 seconds)
    (119/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.379432024 seconds)
    (120/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.374295813 seconds)
    (121/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.377407891 seconds)
    (122/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.86518479 seconds)
    (123/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.131926751 seconds)
    (124/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.600727976 seconds)
    (125/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.849929754 seconds)
    (126/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.864941563 seconds)
    (127/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.565420426 seconds)
    (128/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.774668065 seconds)
    (129/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.100209843 seconds)
    (130/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.353499194 seconds)
    (131/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.377339961 seconds)
    (132/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.381813487 seconds)
    (133/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.148508071 seconds)
    (134/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.378826167 seconds)
    (135/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.373818022 seconds)
    (136/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.729384235 seconds)
    (137/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.392328643 seconds)
    (138/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.379261432 seconds)
    (139/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.815309491 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.396011431 seconds)
    (141/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.017294027 seconds)
    (142/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.074626668 seconds)
    (143/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.847228063 seconds)
    (144/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.805381162 seconds)
    (145/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.630328069 seconds)
    (146/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.380503581 seconds)
    (147/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.37653666 seconds)
    (148/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.382419954 seconds)
    (149/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.375231517 seconds)
    (150/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.637720021 seconds)
    (151/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.389562114 seconds)
    (152/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.321056438 seconds)
    (153/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.380908475 seconds)
    (154/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.376343656 seconds)
    (155/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.887834534 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.385309929 seconds)
    (157/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.37655076 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.7509091 seconds)
    (159/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.387638935 seconds)
    (160/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.393995132 seconds)
    (161/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.879978649 seconds)
    (162/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.098493554 seconds)
    (163/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.864671143 seconds)
    (164/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.906481172 seconds)
    (165/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.378857827 seconds)
    (166/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.969458245 seconds)
    (167/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.875549932 seconds)
    (168/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.381279315 seconds)
    (169/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.374204478 seconds)
    (170/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.377829329 seconds)
    (171/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.955074196 seconds)
    (172/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.380133073 seconds)
    (173/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.870291984 seconds)
    (174/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.870894641 seconds)
    (175/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.882749373 seconds)
    (176/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.874781756 seconds)
    (177/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.379352028 seconds)
    (178/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.892897643 seconds)
    (179/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.639325546 seconds)
    (180/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.377603714 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.885563417 seconds)
    (182/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.852854455 seconds)
    (183/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.699612045 seconds)
    (184/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.875748891 seconds)
    (185/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.608965186 seconds)
    (186/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.396751151 seconds)
    (187/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.390279295 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.377699929 seconds)
    (189/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.456637895 seconds)
    (190/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.382890598 seconds)
    (191/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.374848188 seconds)
    (192/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.376050777 seconds)
    (193/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.395468929 seconds)
    (194/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.380080042 seconds)
    (195/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.358222529 seconds)
    (196/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.921635201 seconds)
    (197/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.875906019 seconds)
    (198/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.387596561 seconds)
    (199/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.375428033 seconds)
    (200/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.376883317 seconds)
    (201/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.39005432 seconds)
    (202/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.939182443 seconds)
    (203/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.891831649 seconds)
    (204/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.319386301 seconds)
    (205/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.744223898 seconds)
    (206/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.679994866 seconds)
    (207/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.265030554 seconds)
    (208/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.967034822 seconds)
    (209/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.392497012 seconds)
    (210/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.137088 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.618530672 seconds)
    (212/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.395433906 seconds)
    (213/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.788567364 seconds)
    (214/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.385016536 seconds)
    (215/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.908321975 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.873253572 seconds)
    (217/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.377773894 seconds)
    (218/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.789903883 seconds)
    (219/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.477202463 seconds)
    (220/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.382869761 seconds)
    (221/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.382820704 seconds)
    (222/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.918997874 seconds)
    (223/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.891740343 seconds)
    (224/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.389989509 seconds)
  done (took 1132.733272551 seconds)
  (3/7) benchmarking "transpose"...
    (1/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.718908997 seconds)
    (2/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.654757046 seconds)
    (3/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.548202971 seconds)
    (4/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 8.205300878 seconds)
    (5/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.968464247 seconds)
    (6/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.270785232 seconds)
    (7/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.444673538 seconds)
    (8/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.56457071 seconds)
    (9/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.16438409 seconds)
    (10/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.788402223 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.222118849 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.420150553 seconds)
    (13/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.63780285 seconds)
    (14/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.893902064 seconds)
    (15/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.645026109 seconds)
    (16/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.458451469 seconds)
  done (took 87.983998251 seconds)
  (4/7) benchmarking "constructors"...
    (1/18) benchmarking ("IV", 100)...
    done (took 2.765719752 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.534226607 seconds)
    (3/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.341114466 seconds)
    (4/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.852264586 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 2.607768373 seconds)
    (6/18) benchmarking ("IJV", 1000)...
    done (took 2.675469594 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.739613613 seconds)
    (8/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.434640182 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.303352055 seconds)
    (10/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.96722504 seconds)
    (11/18) benchmarking ("Diagonal", 1000)...
    done (took 2.759272137 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 2.974436105 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.626395965 seconds)
    (14/18) benchmarking ("IV", 10)...
    done (took 2.982201433 seconds)
    (15/18) benchmarking ("IJV", 100)...
    done (took 2.916437503 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.604860927 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.888811301 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.936907452 seconds)
  done (took 61.284615247 seconds)
  (5/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.555869159 seconds)
    (2/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.329500369 seconds)
    (3/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.567066511 seconds)
    (4/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.465031953 seconds)
    (5/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 6.8862609 seconds)
    (6/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.596426163 seconds)
    (7/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.23381317 seconds)
    (8/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.293287003 seconds)
    (9/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.172741726 seconds)
    (10/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.065282857 seconds)
    (11/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.6718375 seconds)
    (12/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.987479618 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.184625011 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.450156765 seconds)
    (15/54) benchmarking ("spmat", "array", 10)...
    done (took 2.477864417 seconds)
    (16/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.391649814 seconds)
    (17/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.385819408 seconds)
    (18/54) benchmarking ("spmat", "range", 1000)...
    done (took 6.967768673 seconds)
    (19/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.169472971 seconds)
    (20/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.479014234 seconds)
    (21/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.536453855 seconds)
    (22/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.937524711 seconds)
    (23/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.472667696 seconds)
    (24/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.559679786 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.701698914 seconds)
    (26/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.351097243 seconds)
    (27/54) benchmarking ("spmat", "range", 100)...
    done (took 2.783590917 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.331515148 seconds)
    (29/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.375096247 seconds)
    (30/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.689603559 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.575025835 seconds)
    (32/54) benchmarking ("spmat", "range", 10)...
    done (took 4.053505184 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.142728957 seconds)
    (34/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.773428823 seconds)
    (35/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.189542406 seconds)
    (36/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.78677596 seconds)
    (37/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.027418774 seconds)
    (38/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.37462519 seconds)
    (39/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.373957824 seconds)
    (40/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.478258926 seconds)
    (41/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.733703577 seconds)
    (42/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.61059958 seconds)
    (43/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.645799832 seconds)
    (44/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.118496647 seconds)
    (45/54) benchmarking ("spmat", "array", 100)...
    done (took 2.866855127 seconds)
    (46/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.306677616 seconds)
    (47/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.566261047 seconds)
    (48/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.499137906 seconds)
    (49/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.110744401 seconds)
    (50/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.451829315 seconds)
    (51/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.215865692 seconds)
    (52/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.596172512 seconds)
    (53/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.156725762 seconds)
    (54/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.581178931 seconds)
  done (took 233.692046639 seconds)
  (6/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.840465808 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.476899295 seconds)
  done (took 12.719622101 seconds)
  (7/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.451847095 seconds)
    (2/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.440603875 seconds)
    (3/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.452739037 seconds)
    (4/10) benchmarking "square system (default), vector rhs"...
    done (took 7.444144733 seconds)
    (5/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.443142521 seconds)
    (6/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.453231029 seconds)
    (7/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.443549545 seconds)
    (8/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.435764416 seconds)
    (9/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.425154243 seconds)
    (10/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.479375162 seconds)
  done (took 76.8455042 seconds)
done (took 1625.102067319 seconds)
(6/23) benchmarking "micro"...
  (1/8) benchmarking "mandel"...
  done (took 3.795142021 seconds)
  (2/8) benchmarking "randmatmul"...
  done (took 7.427163991 seconds)
  (3/8) benchmarking "fib"...
  done (took 2.768820438 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.396111998 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.403241783 seconds)
  (6/8) benchmarking "parseint"...
  done (took 3.318053031 seconds)
  (7/8) benchmarking "quicksort"...
  done (took 5.450142364 seconds)
  (8/8) benchmarking "printfd"...
  done (took 7.377240431 seconds)
done (took 47.309215551 seconds)
(7/23) benchmarking "parallel"...
done (took 2.403267619 seconds)
(8/23) benchmarking "dates"...
  (1/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "DateFormat")...
    done (took 2.414282452 seconds)
    (2/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 3.032081019 seconds)
    (3/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.829063069 seconds)
    (4/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.1992219 seconds)
    (5/9) benchmarking "Date"...
    done (took 2.836538709 seconds)
    (6/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.431559706 seconds)
    (7/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.191813748 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.127845129 seconds)
    (9/9) benchmarking "DateTime"...
    done (took 3.050759562 seconds)
  done (took 28.489622029 seconds)
  (2/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.545816182 seconds)
    (2/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.441249438 seconds)
    (3/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.422840886 seconds)
    (4/18) benchmarking ("dayofyear", "Date")...
    done (took 2.574190501 seconds)
    (5/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.615278512 seconds)
    (6/18) benchmarking ("dayofweek", "Date")...
    done (took 2.41655204 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.436626106 seconds)
    (8/18) benchmarking ("isleapyear", "Date")...
    done (took 2.500110231 seconds)
    (9/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.567786399 seconds)
    (10/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.423484587 seconds)
    (11/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.55448321 seconds)
    (12/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.618561475 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.592380569 seconds)
    (14/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.582185654 seconds)
    (15/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.722500738 seconds)
    (16/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.433526506 seconds)
    (17/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.548825867 seconds)
    (18/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.591831305 seconds)
  done (took 47.964911279 seconds)
  (3/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.401291897 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.397313468 seconds)
  done (took 7.175877574 seconds)
  (4/7) benchmarking "accessor"...
    (1/7) benchmarking "millisecond"...
    done (took 2.418138709 seconds)
    (2/7) benchmarking "month"...
    done (took 2.515407743 seconds)
    (3/7) benchmarking "second"...
    done (took 2.428364038 seconds)
    (4/7) benchmarking "day"...
    done (took 2.537543447 seconds)
    (5/7) benchmarking "year"...
    done (took 2.501220549 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.433920023 seconds)
    (7/7) benchmarking "hour"...
    done (took 2.42713822 seconds)
  done (took 19.641408147 seconds)
  (5/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.449810513 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.613377435 seconds)
  done (took 9.439267883 seconds)
  (6/7) benchmarking "conversion"...
    (1/2) benchmarking "DateTime -> Date"...
    done (took 2.414767696 seconds)
    (2/2) benchmarking "Date -> DateTime"...
    done (took 2.407275443 seconds)
  done (took 7.278066477 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Hour")...
    done (took 2.41330726 seconds)
    (2/10) benchmarking ("DateTime", "Month")...
    done (took 2.911887421 seconds)
    (3/10) benchmarking ("Date", "Day")...
    done (took 2.411360615 seconds)
    (4/10) benchmarking ("Date", "Month")...
    done (took 2.735585462 seconds)
    (5/10) benchmarking ("DateTime", "Year")...
    done (took 2.842148432 seconds)
    (6/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.412364046 seconds)
    (7/10) benchmarking ("DateTime", "Second")...
    done (took 2.41065961 seconds)
    (8/10) benchmarking ("Date", "Year")...
    done (took 2.676677313 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.411704907 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.412090643 seconds)
  done (took 28.01394543 seconds)
done (took 150.375907005 seconds)
(9/23) benchmarking "scalar"...
  (1/25) benchmarking "floatexp"...
    (1/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.779281007 seconds)
    (2/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.419210741 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.416751349 seconds)
    (4/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.439597828 seconds)
    (5/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.424258436 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.424853831 seconds)
    (7/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.447724575 seconds)
    (8/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.42432881 seconds)
    (9/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.417495057 seconds)
    (10/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.439951996 seconds)
    (11/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.414243188 seconds)
    (12/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.440410001 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.440667639 seconds)
    (14/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.896541209 seconds)
    (15/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.417854608 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.44691853 seconds)
    (17/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.447220019 seconds)
    (18/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.423567672 seconds)
    (19/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.447954895 seconds)
    (20/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.422534535 seconds)
    (21/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.415161828 seconds)
    (22/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.439568101 seconds)
    (23/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.899058561 seconds)
    (24/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.422242508 seconds)
    (25/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.447586133 seconds)
    (26/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.415087036 seconds)
    (27/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.420218814 seconds)
    (28/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.439634924 seconds)
    (29/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.447117822 seconds)
    (30/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.414759216 seconds)
    (31/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.446735522 seconds)
    (32/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.414118166 seconds)
    (33/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.78759542 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.417468921 seconds)
    (35/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.412558951 seconds)
    (36/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.421795131 seconds)
    (37/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.415333762 seconds)
    (38/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.414337177 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.446929578 seconds)
    (40/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.423061597 seconds)
    (41/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.419926943 seconds)
    (42/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.440102183 seconds)
    (43/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.421733162 seconds)
    (44/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.443820821 seconds)
    (45/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.793131152 seconds)
    (46/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.423672192 seconds)
    (47/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.440743193 seconds)
    (48/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.442206539 seconds)
    (49/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.781456479 seconds)
    (50/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.41069731 seconds)
    (51/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.440597805 seconds)
    (52/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.424867086 seconds)
    (53/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.440340685 seconds)
    (54/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.428365258 seconds)
    (55/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.411740228 seconds)
  done (took 138.331975526 seconds)
  (2/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.395072048 seconds)
    (2/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.392482822 seconds)
    (3/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.383414688 seconds)
    (4/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.382445414 seconds)
    (5/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.383219223 seconds)
    (6/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.39875973 seconds)
  done (took 16.710480553 seconds)
  (3/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.446843283 seconds)
    (2/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.842171928 seconds)
    (3/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.904068948 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.435524807 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.445274124 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.424895005 seconds)
    (7/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.486499272 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.420781375 seconds)
    (9/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.433415307 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.487512422 seconds)
    (11/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.482153774 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.904208806 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.424041795 seconds)
    (14/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.436012877 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.482478941 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.435176157 seconds)
    (17/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.446067808 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.422074549 seconds)
    (19/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.845540732 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.435993355 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.445734909 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.446270423 seconds)
  done (took 57.92021032 seconds)
  (4/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.461040574 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.428881011 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.466698175 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.45342464 seconds)
    (5/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.439736524 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.505743355 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.508327669 seconds)
    (8/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.495514094 seconds)
    (9/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.509059181 seconds)
    (10/30) benchmarking ("zero", "Float64")...
    done (took 2.432084247 seconds)
    (11/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.42920375 seconds)
    (12/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.430986852 seconds)
    (13/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.428579629 seconds)
    (14/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.430698943 seconds)
    (15/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.459253809 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.459526787 seconds)
    (17/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.449064778 seconds)
    (18/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.495600149 seconds)
    (19/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.461949948 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.431730684 seconds)
    (21/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.459296102 seconds)
    (22/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.428822338 seconds)
    (23/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.429050332 seconds)
    (24/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.506843008 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.428752291 seconds)
    (26/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.463631649 seconds)
    (27/30) benchmarking ("zero", "Float32")...
    done (took 2.42754883 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.453721199 seconds)
    (29/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.508571287 seconds)
    (30/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.504973524 seconds)
  done (took 76.165798937 seconds)
  (5/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.436537 seconds)
    (2/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.432825498 seconds)
    (3/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.428302824 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.567416284 seconds)
    (5/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.436568814 seconds)
    (6/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.430953467 seconds)
    (7/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.495440375 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.444568677 seconds)
    (9/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.56646945 seconds)
    (10/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.513703197 seconds)
    (11/68) benchmarking ("x one", "Float64")...
    done (took 2.517899603 seconds)
    (12/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.429962853 seconds)
    (13/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.438014003 seconds)
    (14/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.56404777 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.438286047 seconds)
    (16/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.429991991 seconds)
    (17/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.430521866 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.430685962 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.495479159 seconds)
    (20/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.561104659 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.441667354 seconds)
    (22/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.435280417 seconds)
    (23/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.436269199 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.563477202 seconds)
    (25/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.435356266 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.439398419 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.497239634 seconds)
    (28/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.428857682 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.570344223 seconds)
    (30/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.435704511 seconds)
    (31/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.432648108 seconds)
    (32/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.438761391 seconds)
    (33/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.432428858 seconds)
    (34/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.430425019 seconds)
    (35/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.425148467 seconds)
    (36/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.434151014 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.430129041 seconds)
    (38/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.439010202 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.441744004 seconds)
    (40/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.447081658 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.56177732 seconds)
    (42/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.433644844 seconds)
    (43/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.431395602 seconds)
    (44/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.495431388 seconds)
    (45/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.430657681 seconds)
    (46/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.427026628 seconds)
    (47/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.502841559 seconds)
    (48/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.443429493 seconds)
    (49/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.507692346 seconds)
    (50/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.437521743 seconds)
    (51/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.424746594 seconds)
    (52/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.429988669 seconds)
    (53/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.425899052 seconds)
    (54/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.439474534 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.436075659 seconds)
    (56/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.432195555 seconds)
    (57/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.431634181 seconds)
    (58/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.420899535 seconds)
    (59/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.434284761 seconds)
    (60/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.510141441 seconds)
    (61/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.428493632 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.512765976 seconds)
    (63/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.441927847 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.558017399 seconds)
    (65/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.498399325 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.440062537 seconds)
    (67/68) benchmarking ("x one", "Float32")...
    done (took 2.440420831 seconds)
    (68/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.435626917 seconds)
  done (took 169.714246561 seconds)
  (6/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "UInt64")...
    done (took 2.397611346 seconds)
    (2/72) benchmarking ("isodd", "BigInt")...
    done (took 2.425501619 seconds)
    (3/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.396197633 seconds)
    (4/72) benchmarking ("isless", "Int64")...
    done (took 2.408761618 seconds)
    (5/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.409990953 seconds)
    (6/72) benchmarking ("isnan", "Float32")...
    done (took 2.410238758 seconds)
    (7/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.409990768 seconds)
    (8/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.413258548 seconds)
    (9/72) benchmarking ("isequal", "Int64")...
    done (took 2.413014295 seconds)
    (10/72) benchmarking ("isequal", "Float32")...
    done (took 2.414802583 seconds)
    (11/72) benchmarking ("isnan", "UInt64")...
    done (took 2.398385958 seconds)
    (12/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.410737095 seconds)
    (13/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.396532684 seconds)
    (14/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.572734473 seconds)
    (15/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.497112916 seconds)
    (16/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.411460207 seconds)
    (17/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.400691198 seconds)
    (18/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.413386984 seconds)
    (19/72) benchmarking ("isequal", "UInt64")...
    done (took 2.407929985 seconds)
    (20/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.409942028 seconds)
    (21/72) benchmarking ("isinteger", "Float32")...
    done (took 2.408490748 seconds)
    (22/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.413839771 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 2.42334011 seconds)
    (24/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.420348792 seconds)
    (25/72) benchmarking ("isinteger", "Float64")...
    done (took 2.410090252 seconds)
    (26/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.398286525 seconds)
    (27/72) benchmarking ("isless", "UInt64")...
    done (took 2.412779245 seconds)
    (28/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.421194432 seconds)
    (29/72) benchmarking ("isfinite", "Int64")...
    done (took 2.397133099 seconds)
    (30/72) benchmarking ("isless", "Float32")...
    done (took 2.411967043 seconds)
    (31/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.461471245 seconds)
    (32/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.396821972 seconds)
    (33/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.481086219 seconds)
    (34/72) benchmarking ("isfinite", "Float32")...
    done (took 2.407271734 seconds)
    (35/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.410494037 seconds)
    (36/72) benchmarking ("isnan", "Int64")...
    done (took 2.397428472 seconds)
    (37/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.403347725 seconds)
    (38/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.411226553 seconds)
    (39/72) benchmarking ("isnan", "BigInt")...
    done (took 2.397589288 seconds)
    (40/72) benchmarking ("isinf", "Float32")...
    done (took 2.410758262 seconds)
    (41/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.398161115 seconds)
    (42/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.411846808 seconds)
    (43/72) benchmarking ("iseven", "BigInt")...
    done (took 2.4271669 seconds)
    (44/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.414914848 seconds)
    (45/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.412582804 seconds)
    (46/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.39776078 seconds)
    (47/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.416009484 seconds)
    (48/72) benchmarking ("isequal", "Float64")...
    done (took 2.410607 seconds)
    (49/72) benchmarking ("isnan", "Float64")...
    done (took 2.408226977 seconds)
    (50/72) benchmarking ("isinf", "Float64")...
    done (took 2.410356685 seconds)
    (51/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.397546658 seconds)
    (52/72) benchmarking ("isinf", "Int64")...
    done (took 2.396431607 seconds)
    (53/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.397897152 seconds)
    (54/72) benchmarking ("isless", "BigInt")...
    done (took 2.440284181 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.461950069 seconds)
    (56/72) benchmarking ("isless", "BigFloat")...
    done (took 2.496401378 seconds)
    (57/72) benchmarking ("isfinite", "Float64")...
    done (took 2.407130974 seconds)
    (58/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.396935677 seconds)
    (59/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.409792525 seconds)
    (60/72) benchmarking ("isequal", "BigInt")...
    done (took 2.44222835 seconds)
    (61/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.41191467 seconds)
    (62/72) benchmarking ("iseven", "Int64")...
    done (took 2.408292397 seconds)
    (63/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.396932119 seconds)
    (64/72) benchmarking ("iseven", "UInt64")...
    done (took 2.412600634 seconds)
    (65/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.410627587 seconds)
    (66/72) benchmarking ("isinteger", "Int64")...
    done (took 2.396328757 seconds)
    (67/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.413136884 seconds)
    (68/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.411894926 seconds)
    (69/72) benchmarking ("isless", "Float64")...
    done (took 2.413220399 seconds)
    (70/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.396862137 seconds)
    (71/72) benchmarking ("isinf", "BigInt")...
    done (took 2.3962406 seconds)
    (72/72) benchmarking ("isodd", "UInt64")...
    done (took 2.407513736 seconds)
  done (took 176.322709722 seconds)
  (7/25) benchmarking "tan"...
    (1/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.243399314 seconds)
    (2/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.428130083 seconds)
    (3/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.424615095 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.246469887 seconds)
    (5/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.233853708 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.424727237 seconds)
    (7/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.244713004 seconds)
    (8/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.25076383 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.425040932 seconds)
    (10/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.424928704 seconds)
    (11/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.42453887 seconds)
    (12/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.266969069 seconds)
    (13/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.307979178 seconds)
    (14/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.427306305 seconds)
    (15/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.427460986 seconds)
    (16/18) benchmarking ("zero", "Float32")...
    done (took 2.427457387 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.427481629 seconds)
    (18/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.244501996 seconds)
  done (took 52.675806685 seconds)
  (8/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.432792436 seconds)
    (2/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.437428824 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.45671556 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.438282209 seconds)
    (5/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.438461711 seconds)
    (6/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.432606332 seconds)
    (7/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.432801262 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.437610182 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.462938911 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.431479165 seconds)
    (11/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.431083824 seconds)
    (12/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.437164886 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.433325345 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.457898121 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.45918619 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.63664362 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.436148352 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.430176374 seconds)
    (19/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.485529543 seconds)
    (20/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.474158768 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.631920779 seconds)
  done (took 54.090086043 seconds)
  (9/25) benchmarking "cbrt"...
    (1/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.426847533 seconds)
    (2/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.340792685 seconds)
    (3/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.592609022 seconds)
    (4/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.524142581 seconds)
    (5/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.524026964 seconds)
    (6/20) benchmarking ("zero", "Float64")...
    done (took 2.424521599 seconds)
    (7/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.493538709 seconds)
    (8/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.524489771 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.592962428 seconds)
    (10/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.512990321 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.514298111 seconds)
    (12/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.495044461 seconds)
    (13/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.524265787 seconds)
    (14/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.496381541 seconds)
    (15/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.341816536 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.425487693 seconds)
    (17/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.495249634 seconds)
    (18/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.42802257 seconds)
    (19/20) benchmarking ("one", "Float32")...
    done (took 2.501271813 seconds)
    (20/20) benchmarking ("one", "Float64")...
    done (took 2.513237309 seconds)
  done (took 56.066976933 seconds)
  (10/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.456582822 seconds)
    (2/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.461533973 seconds)
    (3/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.458324725 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.462935745 seconds)
    (5/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.458648318 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.439119986 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.447823159 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.442342802 seconds)
    (9/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.457916801 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.438398461 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.437264388 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.435499374 seconds)
    (13/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.442974484 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.438923012 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.432884973 seconds)
    (16/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.619272548 seconds)
    (17/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.437467005 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.436955807 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.431020007 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.432415638 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.440883221 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.438650953 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.439602675 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.432806702 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.439440445 seconds)
    (26/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.462011047 seconds)
    (27/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.619356992 seconds)
    (28/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.461818292 seconds)
  done (took 71.17924752 seconds)
  (11/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.652874889 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.448084437 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.446532559 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.460718619 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.514296837 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.460853786 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.45709262 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.456678511 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.456195417 seconds)
    (10/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.514781169 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.667884272 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.459273686 seconds)
    (13/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.434840754 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.455784361 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.455435069 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.448707578 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.45783295 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.511818566 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.463240825 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.662847926 seconds)
    (21/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.434181147 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.460243522 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.459917795 seconds)
    (24/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.439989176 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.460548747 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.512834953 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.66671627 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.455040929 seconds)
    (29/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.518312881 seconds)
    (30/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.660107 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.51408063 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.45565448 seconds)
    (33/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.438266879 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.448417362 seconds)
    (35/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.437684966 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.456027771 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.513283525 seconds)
    (38/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.658932338 seconds)
    (39/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.661200557 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.458093144 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.51019522 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.458263254 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.45912341 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.462017388 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.460451909 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.457721638 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.45654788 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.478997473 seconds)
    (49/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.515560294 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.463328806 seconds)
    (51/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.437755989 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.45954483 seconds)
    (53/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.513981227 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.513845528 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.478693861 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.653107288 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.513061741 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.458896459 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.463207103 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.450074165 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.458531923 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.515609624 seconds)
    (63/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.45930475 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.456540131 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.457509153 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.513687671 seconds)
  done (took 166.901674318 seconds)
  (12/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.432924283 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.429816106 seconds)
    (3/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.252512871 seconds)
    (4/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.429546825 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.430186818 seconds)
    (6/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.429859845 seconds)
    (7/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.45059548 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.491039993 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.446141346 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.429140771 seconds)
    (11/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.253851307 seconds)
    (12/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.429410572 seconds)
    (13/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.477872784 seconds)
    (14/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.430191101 seconds)
    (15/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.429038229 seconds)
    (16/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.434664332 seconds)
    (17/20) benchmarking ("zero", "Float32")...
    done (took 2.433256841 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.431472433 seconds)
    (19/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.451812911 seconds)
    (20/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.478227157 seconds)
  done (took 52.84768777 seconds)
  (13/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.413610997 seconds)
    (2/49) benchmarking ("add", "ComplexF64")...
    done (took 3.989495272 seconds)
    (3/49) benchmarking ("div", "Float32")...
    done (took 2.409974574 seconds)
    (4/49) benchmarking ("mul", "BigFloat")...
    done (took 3.193106973 seconds)
    (5/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.320779781 seconds)
    (6/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 5.229909934 seconds)
    (7/49) benchmarking ("add", "Float64")...
    done (took 2.490318085 seconds)
    (8/49) benchmarking ("add", "BigInt")...
    done (took 2.89407364 seconds)
    (9/49) benchmarking ("sub", "Int64")...
    done (took 3.228900914 seconds)
    (10/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.415173744 seconds)
    (11/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.421361095 seconds)
    (12/49) benchmarking ("div", "BigFloat")...
    done (took 3.429237494 seconds)
    (13/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.439279662 seconds)
    (14/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.418567929 seconds)
    (15/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.418973146 seconds)
    (16/49) benchmarking ("div", "UInt64")...
    done (took 2.424095013 seconds)
    (17/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.341031547 seconds)
    (18/49) benchmarking ("sub", "UInt64")...
    done (took 3.993713474 seconds)
    (19/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.475621955 seconds)
    (20/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.418615806 seconds)
    (21/49) benchmarking ("div", "Float64")...
    done (took 2.414859222 seconds)
    (22/49) benchmarking "13786"...
    done (took 2.416058789 seconds)
    (23/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.97454598 seconds)
    (24/49) benchmarking ("add", "ComplexF32")...
    done (took 2.420825942 seconds)
    (25/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.38535494 seconds)
    (26/49) benchmarking ("mul", "Float64")...
    done (took 2.421660033 seconds)
    (27/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.469547156 seconds)
    (28/49) benchmarking ("mul", "Int64")...
    done (took 2.416185987 seconds)
    (29/49) benchmarking ("sub", "Float64")...
    done (took 2.418227434 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 3.139672342 seconds)
    (31/49) benchmarking ("div", "ComplexF64")...
    done (took 3.228945232 seconds)
    (32/49) benchmarking ("add", "BigFloat")...
    done (took 2.888827636 seconds)
    (33/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.485659505 seconds)
    (34/49) benchmarking ("mul", "Float32")...
    done (took 2.42013167 seconds)
    (35/49) benchmarking ("div", "BigInt")...
    done (took 3.345133819 seconds)
    (36/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.884511867 seconds)
    (37/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.425440572 seconds)
    (38/49) benchmarking ("add", "Float32")...
    done (took 2.406925966 seconds)
    (39/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.412905761 seconds)
    (40/49) benchmarking ("add", "Int64")...
    done (took 2.409296127 seconds)
    (41/49) benchmarking ("sub", "BigFloat")...
    done (took 2.737751178 seconds)
    (42/49) benchmarking ("mul", "UInt64")...
    done (took 2.479053685 seconds)
    (43/49) benchmarking ("add", "UInt64")...
    done (took 2.41197686 seconds)
    (44/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.252309657 seconds)
    (45/49) benchmarking ("sub", "BigInt")...
    done (took 2.873121505 seconds)
    (46/49) benchmarking ("div", "ComplexF32")...
    done (took 3.241552243 seconds)
    (47/49) benchmarking ("sub", "Float32")...
    done (took 2.414930031 seconds)
    (48/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.422222089 seconds)
    (49/49) benchmarking ("div", "Int64")...
    done (took 2.425454334 seconds)
  done (took 142.387704754 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.432099148 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.43795795 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.488824957 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.433154257 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.439657705 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.473647807 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.485859064 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.448041333 seconds)
    (9/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.485658891 seconds)
    (10/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.484992852 seconds)
    (11/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.439245848 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.473499574 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.488898699 seconds)
    (14/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.489395297 seconds)
    (15/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.489442793 seconds)
    (16/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.489835845 seconds)
    (17/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.446265219 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.434168762 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.439149366 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.433433698 seconds)
    (21/22) benchmarking ("zero", "Float32")...
    done (took 2.433523939 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.437503843 seconds)
  done (took 56.48855208 seconds)
  (15/25) benchmarking "sinh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.831545561 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.989337099 seconds)
    (3/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.487393065 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.469518763 seconds)
    (5/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.47936253 seconds)
    (6/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.487993289 seconds)
    (7/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.447694032 seconds)
    (8/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.487483145 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.991718095 seconds)
    (10/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.47683979 seconds)
    (11/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.463354374 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.499300454 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.499017967 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.446352657 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.830462882 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.487887199 seconds)
    (17/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.500538334 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.46267618 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.463673691 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.469530778 seconds)
    (21/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.498955472 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.469474811 seconds)
  done (took 58.623925548 seconds)
  (16/25) benchmarking "exp2"...
    (1/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.252268061 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.430563494 seconds)
    (3/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.766244613 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.447299237 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.447981755 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.4340576 seconds)
    (7/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.451091768 seconds)
    (8/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.767016959 seconds)
    (9/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.449897547 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.39026928 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.448432675 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.448568443 seconds)
    (13/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.447589836 seconds)
    (14/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.451727094 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.250574173 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.389967674 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.39006829 seconds)
    (18/24) benchmarking ("zero", "Float32")...
    done (took 2.446091611 seconds)
    (19/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.446752407 seconds)
    (20/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.446626306 seconds)
    (21/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.447732401 seconds)
    (22/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.388635559 seconds)
    (23/24) benchmarking ("one", "Float32")...
    done (took 2.44665967 seconds)
    (24/24) benchmarking ("one", "Float64")...
    done (took 2.454399349 seconds)
  done (took 71.123899529 seconds)
  (17/25) benchmarking "iteration"...
    (1/2) benchmarking "in"...
    done (took 2.606116501 seconds)
    (2/2) benchmarking "indexed"...
    done (took 2.609209168 seconds)
  done (took 7.71935147 seconds)
  (18/25) benchmarking "acosh"...
    (1/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.56322026 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.489171079 seconds)
    (3/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.498822325 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.567327145 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.614044827 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.542344435 seconds)
    (7/8) benchmarking ("one", "Float64")...
    done (took 2.433075201 seconds)
    (8/8) benchmarking ("one", "Float32")...
    done (took 2.432295612 seconds)
  done (took 22.642665874 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.233645789 seconds)
    (2/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.24850198 seconds)
    (3/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.514367082 seconds)
    (4/16) benchmarking ("zero", "Float64")...
    done (took 2.460728207 seconds)
    (5/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.523959875 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.513672175 seconds)
    (7/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.248720519 seconds)
    (8/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.522766673 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.232208231 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.522385383 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.563567702 seconds)
    (12/16) benchmarking ("zero", "Float32")...
    done (took 2.450937692 seconds)
    (13/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.563551724 seconds)
    (14/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.523100472 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.45651783 seconds)
    (16/16) benchmarking ("one", "Float32")...
    done (took 2.44670411 seconds)
  done (took 45.408707682 seconds)
  (20/25) benchmarking "expm1"...
    (1/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.430383181 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.917840031 seconds)
    (3/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.380837632 seconds)
    (4/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.433642291 seconds)
    (5/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.432720361 seconds)
    (6/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.460146594 seconds)
    (7/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.434082561 seconds)
    (8/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.454858054 seconds)
    (9/30) benchmarking ("zero", "Float64")...
    done (took 2.476389898 seconds)
    (10/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.430392501 seconds)
    (11/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.454335938 seconds)
    (12/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.434221607 seconds)
    (13/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.453736253 seconds)
    (14/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.434654343 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.38121197 seconds)
    (16/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.459797819 seconds)
    (17/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.46125866 seconds)
    (18/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.476041296 seconds)
    (19/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.431505049 seconds)
    (20/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.458419749 seconds)
    (21/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.454868426 seconds)
    (22/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.46152233 seconds)
    (23/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.456798383 seconds)
    (24/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.461061602 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.920858368 seconds)
    (26/30) benchmarking ("zero", "Float32")...
    done (took 2.454759281 seconds)
    (27/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.455165256 seconds)
    (28/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.433433853 seconds)
    (29/30) benchmarking ("one", "Float32")...
    done (took 2.456454869 seconds)
    (30/30) benchmarking ("one", "Float64")...
    done (took 2.461349646 seconds)
  done (took 92.694300704 seconds)
  (21/25) benchmarking "sin"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.674419212 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.465159379 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.466825202 seconds)
    (4/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.442893559 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.520190214 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.486900828 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.454562316 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.456454622 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.455563283 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.455759962 seconds)
    (11/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.455356794 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.454354856 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.453795205 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.456011345 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.464216712 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.466012301 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.463697238 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.671089594 seconds)
    (19/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.446538447 seconds)
    (20/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.435283223 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.456208444 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.457164451 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.453948366 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.467309067 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.46698835 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.466484237 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.659886408 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.454086511 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.472425905 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.438215772 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.52238734 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.467400904 seconds)
    (33/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.671457379 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.457343141 seconds)
    (35/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.671971984 seconds)
    (36/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.445954261 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.527399925 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.523728452 seconds)
    (39/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.520291437 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.453411026 seconds)
    (41/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.454023513 seconds)
    (42/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.52520243 seconds)
    (43/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.665171081 seconds)
    (44/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.659228406 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.465037846 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.455682853 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.464860643 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.521010949 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.464726233 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.487159006 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.45406401 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.627995987 seconds)
    (53/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.442110944 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.458946571 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.473580005 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.459683332 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.455185611 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.464793682 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.466877048 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.457175231 seconds)
    (61/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.674692266 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.454888956 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.455345488 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.4537402 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.453263144 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.47165562 seconds)
  done (took 166.969840917 seconds)
  (22/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.526963345 seconds)
    (2/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.620370445 seconds)
    (3/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.434396474 seconds)
    (4/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.440378168 seconds)
    (5/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.562224721 seconds)
    (6/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.612117294 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.524339826 seconds)
    (8/22) benchmarking ("zero", "Float64")...
    done (took 2.441386751 seconds)
    (9/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.50310527 seconds)
    (10/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.570526234 seconds)
    (11/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.501187772 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.441704091 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.461279475 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.503801925 seconds)
    (15/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.622927827 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.500819028 seconds)
    (17/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.562946458 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.434760545 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.435588447 seconds)
    (20/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.612919686 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.461299769 seconds)
    (22/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.571129616 seconds)
  done (took 57.729693162 seconds)
  (23/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.582449993 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.490540993 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.578444096 seconds)
    (4/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.515546664 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.516499928 seconds)
    (6/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.490252645 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.519007426 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.488778376 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.517660533 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.58126079 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.516981881 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.520186605 seconds)
    (13/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.72587867 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.51670473 seconds)
    (15/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.472618336 seconds)
    (16/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.583240296 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.516540286 seconds)
    (18/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.577678028 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.536590924 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.515082463 seconds)
    (21/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.49041809 seconds)
    (22/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.471682161 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.519632716 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.517513766 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.516744236 seconds)
    (26/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.516354091 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.483608016 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.516048617 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.516947417 seconds)
    (30/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.725681133 seconds)
    (31/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.518373885 seconds)
    (32/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.576943111 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.516451121 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.517131678 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.493325712 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.517161277 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.516395503 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.51645032 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.5204471 seconds)
    (40/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.727066714 seconds)
    (41/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.51551883 seconds)
    (42/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.490407477 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.516336281 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.576412708 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.482062568 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.515499041 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.579167907 seconds)
    (48/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.582665219 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.580038961 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.515797312 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.515471684 seconds)
    (52/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.516770588 seconds)
    (53/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.576778093 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.516349219 seconds)
    (55/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.536443933 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.574472409 seconds)
    (57/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.518212666 seconds)
    (58/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.489767679 seconds)
    (59/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.727834615 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.578742664 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.575470016 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.519487806 seconds)
  done (took 159.842091246 seconds)
  (24/25) benchmarking "acos"...
    (1/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.255608769 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.446989922 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.43860271 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.457915728 seconds)
    (5/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.436786225 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.441408218 seconds)
    (7/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.438293212 seconds)
    (8/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.466980427 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.502350616 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.437929599 seconds)
    (11/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.441555829 seconds)
    (12/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.434410242 seconds)
    (13/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.439967474 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.442713696 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.442244397 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.444124362 seconds)
    (17/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.465353171 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.256351567 seconds)
  done (took 48.073837241 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.589405308 seconds)
    (2/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 3.482792899 seconds)
    (3/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.287540052 seconds)
    (4/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.530605013 seconds)
    (5/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.418811627 seconds)
    (6/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.27986421 seconds)
    (7/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 4.025199803 seconds)
    (8/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.41925527 seconds)
    (9/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.423045558 seconds)
    (10/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.849656983 seconds)
    (11/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.473985253 seconds)
    (12/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.057563952 seconds)
    (13/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.873661154 seconds)
    (14/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.861185814 seconds)
    (15/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.458102659 seconds)
    (16/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.422069696 seconds)
    (17/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.425018132 seconds)
    (18/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.260157768 seconds)
    (19/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.439162082 seconds)
    (20/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.418509594 seconds)
    (21/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.415566235 seconds)
    (22/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.358971152 seconds)
    (23/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.567502038 seconds)
    (24/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 3.954253041 seconds)
    (25/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.382378738 seconds)
    (26/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.426909834 seconds)
    (27/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.282924399 seconds)
    (28/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.756272764 seconds)
    (29/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.421990893 seconds)
    (30/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.425616695 seconds)
    (31/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.427558111 seconds)
    (32/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.423470942 seconds)
    (33/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.532461603 seconds)
    (34/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.261300192 seconds)
    (35/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 4.005284817 seconds)
    (36/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.749111835 seconds)
    (37/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.170442011 seconds)
    (38/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.956033981 seconds)
    (39/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 3.239051735 seconds)
    (40/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.425451038 seconds)
    (41/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.617159826 seconds)
    (42/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.415767308 seconds)
    (43/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.416585152 seconds)
    (44/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.131124194 seconds)
    (45/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.114134579 seconds)
    (46/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.936819939 seconds)
    (47/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 3.236400291 seconds)
    (48/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.575085199 seconds)
    (49/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.420623549 seconds)
    (50/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 3.936192993 seconds)
    (51/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 3.237106723 seconds)
    (52/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.421108812 seconds)
    (53/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.423182622 seconds)
    (54/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.808449144 seconds)
    (55/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.354779712 seconds)
    (56/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.540990506 seconds)
    (57/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.476661918 seconds)
    (58/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.277099899 seconds)
    (59/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.387047769 seconds)
    (60/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.781710947 seconds)
    (61/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.483448189 seconds)
    (62/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.415712351 seconds)
    (63/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.111234863 seconds)
    (64/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.461343198 seconds)
    (65/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.22480449 seconds)
    (66/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.555605125 seconds)
    (67/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.883013986 seconds)
    (68/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.459424195 seconds)
    (69/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.668264042 seconds)
    (70/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.035181156 seconds)
    (71/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.620977668 seconds)
    (72/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 4.081366595 seconds)
    (73/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 4.488279482 seconds)
    (74/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.540907121 seconds)
    (75/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.419924366 seconds)
    (76/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.472349516 seconds)
    (77/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.420317196 seconds)
    (78/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.42392661 seconds)
    (79/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.36076232 seconds)
    (80/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.87138039 seconds)
    (81/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.49081104 seconds)
    (82/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.971766695 seconds)
    (83/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.371493865 seconds)
    (84/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 4.085042545 seconds)
    (85/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.472867281 seconds)
    (86/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.939290032 seconds)
    (87/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 3.24334196 seconds)
    (88/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.18921989 seconds)
    (89/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.49092903 seconds)
    (90/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.09687114 seconds)
    (91/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.567074149 seconds)
    (92/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.934195441 seconds)
    (93/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.355586598 seconds)
    (94/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.41523827 seconds)
    (95/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.375540301 seconds)
    (96/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.416530883 seconds)
    (97/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.387473228 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.612782613 seconds)
    (99/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 3.944593537 seconds)
    (100/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.511340524 seconds)
    (101/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 3.955664874 seconds)
    (102/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.106679487 seconds)
    (103/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 3.22319203 seconds)
    (104/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.091739185 seconds)
    (105/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.152182745 seconds)
    (106/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.653995463 seconds)
    (107/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.375108968 seconds)
    (108/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.488629432 seconds)
    (109/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.421776301 seconds)
    (110/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.176790766 seconds)
    (111/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.491133222 seconds)
    (112/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.466666116 seconds)
    (113/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.423046691 seconds)
    (114/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.805173175 seconds)
    (115/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.203268884 seconds)
    (116/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.559255412 seconds)
    (117/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.065226469 seconds)
    (118/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.830800985 seconds)
    (119/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.478370298 seconds)
    (120/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.724574819 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.618797659 seconds)
    (122/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.566022688 seconds)
    (123/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.329221136 seconds)
    (124/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 5.566667456 seconds)
    (125/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 4.060247956 seconds)
    (126/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.758502889 seconds)
    (127/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.85547097 seconds)
    (128/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.547313732 seconds)
    (129/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.414947572 seconds)
    (130/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.124405282 seconds)
    (131/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.775391215 seconds)
    (132/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 4.07218049 seconds)
    (133/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.597346809 seconds)
    (134/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.539546031 seconds)
    (135/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.416676443 seconds)
    (136/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.913988167 seconds)
    (137/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.091222366 seconds)
    (138/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.379851042 seconds)
    (139/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.756977499 seconds)
    (140/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.680815207 seconds)
    (141/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.183826413 seconds)
    (142/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.511799931 seconds)
    (143/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.419306912 seconds)
    (144/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.105151148 seconds)
    (145/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.600380247 seconds)
    (146/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.868578826 seconds)
    (147/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.545453528 seconds)
    (148/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.275788833 seconds)
    (149/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 4.736161112 seconds)
    (150/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.33862115 seconds)
    (151/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.15407127 seconds)
    (152/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.295599056 seconds)
    (153/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.920505936 seconds)
    (154/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.909663582 seconds)
    (155/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.719722899 seconds)
    (156/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.928527931 seconds)
    (157/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.489539385 seconds)
    (158/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.422847888 seconds)
    (159/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.427588377 seconds)
    (160/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.468428096 seconds)
    (161/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.255690255 seconds)
    (162/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.560451208 seconds)
    (163/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.422517031 seconds)
    (164/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 3.512207684 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 4.41865988 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.714360355 seconds)
    (167/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.240111753 seconds)
    (168/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.425275181 seconds)
    (169/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.427988594 seconds)
    (170/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.88315883 seconds)
    (171/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.092742711 seconds)
    (172/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.734655622 seconds)
    (173/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.422650752 seconds)
    (174/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.41997 seconds)
    (175/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.423927642 seconds)
    (176/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 3.866166929 seconds)
    (177/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.894166177 seconds)
    (178/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 5.12907277 seconds)
    (179/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 4.865707752 seconds)
    (180/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 3.235366675 seconds)
    (181/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.131446028 seconds)
    (182/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 3.257432423 seconds)
    (183/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.421999602 seconds)
    (184/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.758488201 seconds)
    (185/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.652009495 seconds)
    (186/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.4191462 seconds)
    (187/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.422466266 seconds)
    (188/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.425738659 seconds)
    (189/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.338276504 seconds)
    (190/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.277489709 seconds)
    (191/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.542564072 seconds)
    (192/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.418878885 seconds)
    (193/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.405616688 seconds)
    (194/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.44760834 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.433549512 seconds)
    (196/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.483909097 seconds)
    (197/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.896858498 seconds)
    (198/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.576739353 seconds)
    (199/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 3.946147157 seconds)
    (200/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.356636663 seconds)
    (201/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.866496347 seconds)
    (202/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.866280445 seconds)
    (203/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.360200695 seconds)
    (204/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.857708096 seconds)
    (205/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.482951089 seconds)
    (206/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.420281259 seconds)
    (207/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.80483004 seconds)
    (208/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.803031926 seconds)
    (209/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.895730627 seconds)
    (210/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.698687893 seconds)
    (211/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 5.160728682 seconds)
    (212/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.525814741 seconds)
    (213/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.415817699 seconds)
    (214/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.860449206 seconds)
    (215/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.557780616 seconds)
    (216/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.421460477 seconds)
    (217/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.856118443 seconds)
    (218/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.660373374 seconds)
    (219/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.733428376 seconds)
    (220/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.324310908 seconds)
    (221/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.506961951 seconds)
    (222/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.731390766 seconds)
    (223/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.49140917 seconds)
    (224/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.43183016 seconds)
    (225/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.419621742 seconds)
    (226/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.483424704 seconds)
    (227/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.431023633 seconds)
    (228/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.879019098 seconds)
    (229/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.635464888 seconds)
    (230/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.772564475 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 3.95082545 seconds)
    (232/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.414748628 seconds)
    (233/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.42523431 seconds)
    (234/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.792520353 seconds)
    (235/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.400983978 seconds)
    (236/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 4.016970176 seconds)
    (237/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.937932659 seconds)
    (238/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.412910815 seconds)
    (239/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 4.02771482 seconds)
    (240/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 3.24704876 seconds)
    (241/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.420019111 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.42047713 seconds)
    (243/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.603606152 seconds)
    (244/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.612293845 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.128794482 seconds)
    (246/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.56241495 seconds)
    (247/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.426528828 seconds)
    (248/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.068349768 seconds)
    (249/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.620259849 seconds)
    (250/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.953256376 seconds)
    (251/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.76365483 seconds)
    (252/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.554858281 seconds)
    (253/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.414227165 seconds)
    (254/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.4684901 seconds)
    (255/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.425041503 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.704469773 seconds)
    (257/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.232133081 seconds)
    (258/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.602001524 seconds)
    (259/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.424995488 seconds)
    (260/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.138757109 seconds)
    (261/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.673448987 seconds)
    (262/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.815996141 seconds)
    (263/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.203242418 seconds)
    (264/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.556976485 seconds)
    (265/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.836680159 seconds)
    (266/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.657731973 seconds)
    (267/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.422328591 seconds)
    (268/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.72649735 seconds)
    (269/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.817794164 seconds)
    (270/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.318430477 seconds)
    (271/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.816535941 seconds)
    (272/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.682697643 seconds)
    (273/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.109022899 seconds)
    (274/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 3.236941139 seconds)
    (275/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.767971335 seconds)
    (276/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.690065134 seconds)
    (277/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.354135468 seconds)
    (278/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.653122827 seconds)
    (279/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 4.001386044 seconds)
    (280/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.425043215 seconds)
    (281/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.420146764 seconds)
    (282/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.41438998 seconds)
    (283/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.428829584 seconds)
    (284/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.420290218 seconds)
    (285/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.468907585 seconds)
    (286/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.751557245 seconds)
    (287/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.479964203 seconds)
    (288/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.302138694 seconds)
    (289/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.133774685 seconds)
    (290/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.549770696 seconds)
    (291/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.696228498 seconds)
    (292/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.601463972 seconds)
    (293/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 3.951870937 seconds)
    (294/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.651834044 seconds)
    (295/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.847323495 seconds)
    (296/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.120273989 seconds)
    (297/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.579302857 seconds)
    (298/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.344601602 seconds)
    (299/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.520221428 seconds)
    (300/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.622584285 seconds)
    (301/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.419118808 seconds)
    (302/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.034621879 seconds)
    (303/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.872218783 seconds)
    (304/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.793446248 seconds)
    (305/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.862613248 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.626698169 seconds)
    (307/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 3.941958169 seconds)
    (308/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.424650608 seconds)
    (309/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.863946231 seconds)
    (310/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.709925458 seconds)
    (311/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.878409681 seconds)
    (312/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.337187512 seconds)
    (313/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.704370948 seconds)
    (314/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.549015037 seconds)
    (315/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.419302745 seconds)
    (316/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.085669156 seconds)
    (317/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.5651905 seconds)
    (318/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.419425935 seconds)
    (319/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.794533512 seconds)
    (320/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.032070565 seconds)
    (321/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.734411822 seconds)
    (322/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.149763578 seconds)
    (323/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.483115502 seconds)
    (324/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.287902458 seconds)
    (325/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.330477173 seconds)
    (326/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.873352974 seconds)
    (327/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.453752761 seconds)
    (328/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.452949916 seconds)
    (329/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.427370024 seconds)
    (330/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.422496166 seconds)
    (331/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.419755251 seconds)
    (332/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.329868159 seconds)
    (333/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.589198291 seconds)
    (334/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.48786229 seconds)
    (335/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.61183385 seconds)
    (336/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.980234831 seconds)
    (337/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.482156889 seconds)
    (338/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.996127887 seconds)
    (339/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.731858824 seconds)
    (340/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.422919596 seconds)
    (341/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.57040517 seconds)
    (342/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.550502435 seconds)
    (343/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.699727158 seconds)
    (344/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.609687075 seconds)
    (345/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.420613147 seconds)
    (346/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.429166652 seconds)
    (347/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.83288632 seconds)
    (348/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.5679377 seconds)
    (349/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.420855636 seconds)
    (350/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.517808985 seconds)
    (351/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.94814565 seconds)
    (352/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.417098021 seconds)
    (353/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.113478554 seconds)
    (354/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.56436457 seconds)
    (355/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.972146168 seconds)
    (356/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.520937971 seconds)
    (357/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.420458454 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.420647515 seconds)
    (359/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.678647671 seconds)
    (360/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.661809701 seconds)
    (361/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.775504144 seconds)
    (362/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.121197665 seconds)
    (363/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.125538819 seconds)
    (364/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.786707625 seconds)
    (365/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.580758881 seconds)
    (366/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.531862881 seconds)
    (367/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.558570846 seconds)
    (368/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.695249173 seconds)
    (369/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 3.797308782 seconds)
    (370/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.524618042 seconds)
    (371/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.425479692 seconds)
    (372/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.490101884 seconds)
    (373/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.450477188 seconds)
    (374/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.563897744 seconds)
    (375/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.421167413 seconds)
    (376/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.452733833 seconds)
    (377/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.242232196 seconds)
    (378/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.47061584 seconds)
    (379/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.185754599 seconds)
    (380/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.456799969 seconds)
    (381/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.034818856 seconds)
    (382/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.334631723 seconds)
    (383/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.842941174 seconds)
    (384/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.53009778 seconds)
    (385/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.085189221 seconds)
    (386/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.951514272 seconds)
    (387/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.661591394 seconds)
    (388/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.420197033 seconds)
    (389/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.420505167 seconds)
    (390/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.419711145 seconds)
    (391/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.282875052 seconds)
    (392/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.294716886 seconds)
    (393/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 4.451005047 seconds)
    (394/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.491197934 seconds)
    (395/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.521547199 seconds)
    (396/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.865482448 seconds)
    (397/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.651610758 seconds)
    (398/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.415655547 seconds)
    (399/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.419360012 seconds)
    (400/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.416650499 seconds)
    (401/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.555199963 seconds)
    (402/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 3.708861507 seconds)
    (403/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.644708561 seconds)
    (404/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.419440384 seconds)
    (405/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.419290499 seconds)
    (406/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.781375479 seconds)
    (407/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.77401122 seconds)
    (408/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.553679143 seconds)
    (409/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.843915413 seconds)
    (410/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.750072814 seconds)
    (411/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.524765892 seconds)
    (412/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.129127928 seconds)
    (413/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.556464024 seconds)
    (414/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.461909102 seconds)
    (415/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.131152802 seconds)
    (416/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.614322111 seconds)
    (417/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.467466076 seconds)
    (418/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.546838627 seconds)
    (419/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 3.93762178 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.42238555 seconds)
    (421/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.796771742 seconds)
    (422/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.567854667 seconds)
    (423/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.427556225 seconds)
    (424/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.709084783 seconds)
    (425/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.559237064 seconds)
    (426/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.418543408 seconds)
    (427/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.418594313 seconds)
    (428/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.482260241 seconds)
    (429/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.3984692 seconds)
    (430/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.534668395 seconds)
    (431/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 4.626672437 seconds)
    (432/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 3.233239027 seconds)
    (433/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.265445938 seconds)
    (434/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 3.815737638 seconds)
    (435/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.418280026 seconds)
    (436/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.426549597 seconds)
    (437/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 5.082632164 seconds)
    (438/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.29322342 seconds)
    (439/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.238549527 seconds)
    (440/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.236740999 seconds)
    (441/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.134998093 seconds)
    (442/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.801419562 seconds)
    (443/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.548746345 seconds)
    (444/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.519860039 seconds)
    (445/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.872106453 seconds)
    (446/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.540984356 seconds)
    (447/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.270576396 seconds)
    (448/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.461981527 seconds)
    (449/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.755723779 seconds)
    (450/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.810248618 seconds)
    (451/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.356233113 seconds)
    (452/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.327661986 seconds)
    (453/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.156386017 seconds)
    (454/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.693594733 seconds)
    (455/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.024688494 seconds)
    (456/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.311314146 seconds)
    (457/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 4.645812429 seconds)
    (458/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.418380108 seconds)
    (459/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 4.052762843 seconds)
    (460/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.618336696 seconds)
    (461/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.713645572 seconds)
    (462/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.358442318 seconds)
    (463/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.949340688 seconds)
    (464/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.678605818 seconds)
    (465/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.746379157 seconds)
    (466/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.479560886 seconds)
    (467/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.851542486 seconds)
    (468/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.545177695 seconds)
    (469/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.921820539 seconds)
    (470/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.877828174 seconds)
    (471/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.624743472 seconds)
    (472/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.423137946 seconds)
    (473/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.417542533 seconds)
    (474/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.474508157 seconds)
    (475/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.575692667 seconds)
    (476/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.421480608 seconds)
    (477/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.453224683 seconds)
    (478/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.135151124 seconds)
    (479/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 3.22724237 seconds)
    (480/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.420668833 seconds)
    (481/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.11927765 seconds)
    (482/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.481733555 seconds)
    (483/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.836737404 seconds)
    (484/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.912146573 seconds)
    (485/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.719342693 seconds)
    (486/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.09545703 seconds)
    (487/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.875270289 seconds)
    (488/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.689326647 seconds)
    (489/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.493563832 seconds)
    (490/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 4.860355435 seconds)
    (491/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.69402307 seconds)
    (492/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.5508679 seconds)
    (493/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.416116903 seconds)
    (494/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.416664223 seconds)
    (495/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.419424359 seconds)
    (496/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.753415396 seconds)
    (497/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.187964842 seconds)
    (498/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 3.232782776 seconds)
    (499/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.135549713 seconds)
    (500/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.519756636 seconds)
    (501/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.619426391 seconds)
    (502/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.381892961 seconds)
    (503/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.845584203 seconds)
    (504/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 3.240661575 seconds)
    (505/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.349301817 seconds)
    (506/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.505017612 seconds)
    (507/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.833212823 seconds)
    (508/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.480656125 seconds)
    (509/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.422500497 seconds)
    (510/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.419325251 seconds)
    (511/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.942278228 seconds)
    (512/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.578031173 seconds)
    (513/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.572259724 seconds)
    (514/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.11667177 seconds)
    (515/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.555163415 seconds)
    (516/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.49897988 seconds)
    (517/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.102492073 seconds)
    (518/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.88632528 seconds)
    (519/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.519318548 seconds)
    (520/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.478383094 seconds)
    (521/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.417792393 seconds)
    (522/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.421585217 seconds)
    (523/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.391318638 seconds)
    (524/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.875965494 seconds)
    (525/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.568124042 seconds)
    (526/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.571341404 seconds)
    (527/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.479467002 seconds)
    (528/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.903545704 seconds)
    (529/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.13341436 seconds)
    (530/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.579246021 seconds)
    (531/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.418434454 seconds)
    (532/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.418092072 seconds)
    (533/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.884159157 seconds)
    (534/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.730832905 seconds)
    (535/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.865086288 seconds)
    (536/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.236322951 seconds)
    (537/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.713712037 seconds)
    (538/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.64092931 seconds)
    (539/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.123490366 seconds)
    (540/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.563781127 seconds)
    (541/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.275086343 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.814762357 seconds)
    (543/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.64787772 seconds)
    (544/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.626633489 seconds)
    (545/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.416582868 seconds)
    (546/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.426048276 seconds)
    (547/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.421090547 seconds)
    (548/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.415393535 seconds)
    (549/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.421033424 seconds)
    (550/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.412852937 seconds)
    (551/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.423213641 seconds)
    (552/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.957351226 seconds)
    (553/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.324046258 seconds)
    (554/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.352694206 seconds)
    (555/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.567084961 seconds)
    (556/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.402352738 seconds)
    (557/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.685850687 seconds)
    (558/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.922545647 seconds)
    (559/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.399239223 seconds)
    (560/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.539654857 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.416169055 seconds)
    (562/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.424779066 seconds)
    (563/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.526590035 seconds)
    (564/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.43824716 seconds)
    (565/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.448890944 seconds)
    (566/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.712598088 seconds)
    (567/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.525503567 seconds)
    (568/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.755193424 seconds)
    (569/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.478763882 seconds)
    (570/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.413599478 seconds)
    (571/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.554188256 seconds)
    (572/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.568267171 seconds)
    (573/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.415499184 seconds)
    (574/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.42841044 seconds)
    (575/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.417845651 seconds)
    (576/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.715051687 seconds)
    (577/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.908800319 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.691105482 seconds)
    (579/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.031887264 seconds)
    (580/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.665270744 seconds)
    (581/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.48794086 seconds)
    (582/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.841253581 seconds)
    (583/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.227195129 seconds)
    (584/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.271217826 seconds)
    (585/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.540780762 seconds)
    (586/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.418780952 seconds)
    (587/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.751559279 seconds)
    (588/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.34287611 seconds)
    (589/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.033808274 seconds)
    (590/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 3.706731435 seconds)
    (591/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 4.012636021 seconds)
    (592/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 4.12892458 seconds)
    (593/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.532064644 seconds)
    (594/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.292890082 seconds)
    (595/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.233266206 seconds)
    (596/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.84182748 seconds)
  done (took 1936.860000893 seconds)
done (took 3957.865515704 seconds)
(10/23) benchmarking "misc"...
  (1/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt", "UInt")...
    done (took 2.419437444 seconds)
    (2/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.417372577 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.423983123 seconds)
    (4/4) benchmarking ("Int", "UInt")...
    done (took 2.424890888 seconds)
  done (took 12.066094447 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.971647488 seconds)
  (3/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 3.064500119 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 3.277906192 seconds)
  done (took 8.73492401 seconds)
  (4/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.445594241 seconds)
    (2/3) benchmarking "Float64"...
    done (took 2.998114671 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 3.039867344 seconds)
  done (took 10.872948721 seconds)
  (5/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.24236324 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.227598601 seconds)
  done (took 8.851706634 seconds)
  (6/15) benchmarking "fastmath many args"...
  done (took 2.617856196 seconds)
  (7/15) benchmarking "23042"...
    (1/4) benchmarking "Float32"...
    done (took 2.852579927 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.562813986 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 4.111466484 seconds)
    (4/4) benchmarking "Float64"...
    done (took 3.229080378 seconds)
  done (took 16.135951501 seconds)
  (8/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.547534733 seconds)
  done (took 4.940805013 seconds)
  (9/15) benchmarking "18129"...
  done (took 7.411627745 seconds)
  (10/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.570915894 seconds)
    (2/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.902382104 seconds)
    (3/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.727282311 seconds)
  done (took 10.601960132 seconds)
  (11/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 3.008924974 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.177548552 seconds)
  done (took 8.569385476 seconds)
  (12/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.389911199 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.482158082 seconds)
    (3/3) benchmarking "Float64"...
    done (took 7.392745272 seconds)
  done (took 24.662098047 seconds)
  (13/15) benchmarking "20517"...
  done (took 3.041620865 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.69753491 seconds)
    (2/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.682028559 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.843853803 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.84011321 seconds)
    (5/10) benchmarking "zip(1:1000)"...
    done (took 2.533662121 seconds)
    (6/10) benchmarking "zip(1:1)"...
    done (took 2.803429507 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.609231573 seconds)
    (8/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.226055403 seconds)
    (9/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.916658042 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.869834025 seconds)
  done (took 30.404428679 seconds)
  (15/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "nested")...
    done (took 7.382030357 seconds)
    (2/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.459943297 seconds)
    (3/4) benchmarking ("parse", "function")...
    done (took 2.767407849 seconds)
    (4/4) benchmarking ("parse", "array")...
    done (took 4.418616714 seconds)
  done (took 24.436307322 seconds)
done (took 178.761395029 seconds)
(11/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.587889815 seconds)
    (2/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.615559636 seconds)
    (3/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.383146313 seconds)
    (4/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 2.734627612 seconds)
    (5/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.482223004 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.66014886 seconds)
    (7/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.587577319 seconds)
    (8/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.841246569 seconds)
    (9/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.394952961 seconds)
    (10/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 9.498325602 seconds)
    (11/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.595126169 seconds)
    (12/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 2.627424814 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.637525151 seconds)
    (14/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.571442773 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.799847887 seconds)
    (16/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 2.441327136 seconds)
    (17/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 2.519410526 seconds)
    (18/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.468159162 seconds)
    (19/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.472958634 seconds)
    (20/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.582964788 seconds)
    (21/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.444691025 seconds)
    (22/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.389350273 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 9.872037419 seconds)
    (24/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.402620045 seconds)
    (25/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 14.091785352 seconds)
    (26/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 3.034559767 seconds)
    (27/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.399410001 seconds)
    (28/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.618622737 seconds)
    (29/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.38914906 seconds)
    (30/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.757132624 seconds)
    (31/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.389459303 seconds)
    (32/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 3.0487343 seconds)
    (33/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.71686379 seconds)
    (34/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.912040486 seconds)
    (35/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.589161559 seconds)
    (36/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.559071657 seconds)
    (37/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.607736129 seconds)
    (38/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 2.435122931 seconds)
    (39/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.887501737 seconds)
    (40/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.903306108 seconds)
    (41/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.579804486 seconds)
    (42/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.46169477 seconds)
    (43/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.799773175 seconds)
    (44/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.643098289 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.629188976 seconds)
    (46/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.951213608 seconds)
    (47/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.496175929 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 3.271983779 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 2.633332413 seconds)
    (50/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.526664227 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.691443321 seconds)
    (52/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.637657009 seconds)
    (53/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.073108319 seconds)
    (54/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.463305838 seconds)
    (55/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 7.442206801 seconds)
    (56/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 7.384576818 seconds)
    (57/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.002598954 seconds)
    (58/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.632401125 seconds)
    (59/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.45894092 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 2.980875118 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.450069176 seconds)
    (62/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 2.629781028 seconds)
    (63/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.463454221 seconds)
    (64/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.622542888 seconds)
    (65/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.585003715 seconds)
    (66/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.948722946 seconds)
    (67/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.596981404 seconds)
    (68/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.39847132 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 10.874909535 seconds)
    (70/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.498864814 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.603385179 seconds)
    (72/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.577266289 seconds)
    (73/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.816836051 seconds)
    (74/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.642353357 seconds)
    (75/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.57519587 seconds)
    (76/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 2.636568278 seconds)
    (77/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.630383463 seconds)
    (78/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.572777987 seconds)
    (79/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.655799561 seconds)
    (80/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 2.642855431 seconds)
    (81/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.684255501 seconds)
    (82/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.16942533 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.450862102 seconds)
    (84/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.697979164 seconds)
    (85/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.395631372 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 3.084330517 seconds)
    (87/434) benchmarking ("sort", "Bool", 0)...
    done (took 2.418216512 seconds)
    (88/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.405014947 seconds)
    (89/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.506199125 seconds)
    (90/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.570717948 seconds)
    (91/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.402150798 seconds)
    (92/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 2.6262952 seconds)
    (93/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.412686738 seconds)
    (94/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 7.381150362 seconds)
    (95/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 2.610558862 seconds)
    (96/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.577378484 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.848390979 seconds)
    (98/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.481166633 seconds)
    (99/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.453754171 seconds)
    (100/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 2.39490609 seconds)
    (101/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.789306851 seconds)
    (102/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.489147633 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.580994767 seconds)
    (104/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.398936193 seconds)
    (105/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.473518901 seconds)
    (106/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.593221443 seconds)
    (107/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.477633831 seconds)
    (108/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.584655872 seconds)
    (109/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.42612182 seconds)
    (110/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.391893063 seconds)
    (111/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 7.615057147 seconds)
    (112/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 3.286688983 seconds)
    (113/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.47377975 seconds)
    (114/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 2.475892623 seconds)
    (115/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.392441005 seconds)
    (116/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 7.52678252 seconds)
    (117/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 2.476543244 seconds)
    (118/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.409644272 seconds)
    (119/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.407580571 seconds)
    (120/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.386341605 seconds)
    (121/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.672436511 seconds)
    (122/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.852133684 seconds)
    (123/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.609836661 seconds)
    (124/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.865357095 seconds)
    (125/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.423381003 seconds)
    (126/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.627577237 seconds)
    (127/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.385629324 seconds)
    (128/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.123470416 seconds)
    (129/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.734127395 seconds)
    (130/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.645098544 seconds)
    (131/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 3.267093653 seconds)
    (132/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.496713987 seconds)
    (133/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 3.202340973 seconds)
    (134/434) benchmarking ("perf_countequals", "Float64")...
    done (took 2.683465039 seconds)
    (135/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 3.364794397 seconds)
    (136/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.46950546 seconds)
    (137/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.387434493 seconds)
    (138/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.453782677 seconds)
    (139/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.465776178 seconds)
    (140/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.465634617 seconds)
    (141/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.852259963 seconds)
    (142/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.476226838 seconds)
    (143/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 3.05944539 seconds)
    (144/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.477166782 seconds)
    (145/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 2.795851867 seconds)
    (146/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.5282743 seconds)
    (147/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.390899172 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 7.260070411 seconds)
    (149/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.462563019 seconds)
    (150/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.484120051 seconds)
    (151/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.390572626 seconds)
    (152/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 9.986230753 seconds)
    (153/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.478003899 seconds)
    (154/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 2.626976536 seconds)
    (155/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.577272809 seconds)
    (156/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 2.630922223 seconds)
    (157/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.642364737 seconds)
    (158/434) benchmarking ("sort", "Int8", 0)...
    done (took 2.463535043 seconds)
    (159/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 5.012914551 seconds)
    (160/434) benchmarking ("perf_countequals", "Float32")...
    done (took 2.457357902 seconds)
    (161/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 7.38639669 seconds)
    (162/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 10.250837991 seconds)
    (163/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.642781912 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.700752753 seconds)
    (165/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.395748605 seconds)
    (166/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 6.123296673 seconds)
    (167/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.561097052 seconds)
    (168/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 2.535915457 seconds)
    (169/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.470701736 seconds)
    (170/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.386662063 seconds)
    (171/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 10.038221876 seconds)
    (172/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 2.63335375 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 5.910899288 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.408339006 seconds)
    (175/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.407978329 seconds)
    (176/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.790026114 seconds)
    (177/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 2.47987304 seconds)
    (178/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.518781862 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.449155363 seconds)
    (180/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 6.11453346 seconds)
    (181/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.402278405 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.721395868 seconds)
    (183/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.080031652 seconds)
    (184/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 3.055694044 seconds)
    (185/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.671249292 seconds)
    (186/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.771101429 seconds)
    (187/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 2.63140732 seconds)
    (188/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 3.312272309 seconds)
    (189/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.654829002 seconds)
    (190/434) benchmarking ("sort", "Int64", 0)...
    done (took 4.971793113 seconds)
    (191/434) benchmarking ("sort", "Float64", 0)...
    done (took 4.558070323 seconds)
    (192/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.390549065 seconds)
    (193/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.608219587 seconds)
    (194/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.628780148 seconds)
    (195/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 2.574889687 seconds)
    (196/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.41881837 seconds)
    (197/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.470480986 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 2.487246827 seconds)
    (199/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.757364952 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.608016655 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 3.051661344 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.409627229 seconds)
    (203/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.720169377 seconds)
    (204/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.729030417 seconds)
    (205/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.874580216 seconds)
    (206/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.424285562 seconds)
    (207/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.504600138 seconds)
    (208/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 2.635542841 seconds)
    (209/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.492987788 seconds)
    (210/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.384156906 seconds)
    (211/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.677011852 seconds)
    (212/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.463829791 seconds)
    (213/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.566352541 seconds)
    (214/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.481894993 seconds)
    (215/434) benchmarking ("perf_countequals", "Int8")...
    done (took 2.431872135 seconds)
    (216/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.406723139 seconds)
    (217/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.418257167 seconds)
    (218/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.589896195 seconds)
    (219/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 7.452847551 seconds)
    (220/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 12.050327288 seconds)
    (221/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 3.537190505 seconds)
    (222/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.393046817 seconds)
    (223/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 14.318318525 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.747343461 seconds)
    (225/434) benchmarking ("sort", "BigInt", 0)...
    done (took 11.916820008 seconds)
    (226/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 2.69427329 seconds)
    (227/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.831738584 seconds)
    (228/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.653632033 seconds)
    (229/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.559377702 seconds)
    (230/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.546332154 seconds)
    (231/434) benchmarking ("perf_countequals", "Int64")...
    done (took 2.456590584 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.740920862 seconds)
    (233/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.414282548 seconds)
    (234/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.133521802 seconds)
    (235/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.607067085 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.712056331 seconds)
    (237/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 2.633829776 seconds)
    (238/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.544126878 seconds)
    (239/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.474003262 seconds)
    (240/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.389874303 seconds)
    (241/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 3.094896595 seconds)
    (242/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.44622746 seconds)
    (243/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 2.636143077 seconds)
    (244/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.473967919 seconds)
    (245/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.835645243 seconds)
    (246/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 6.846492872 seconds)
    (247/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.398840749 seconds)
    (248/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 7.292176964 seconds)
    (249/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.463941282 seconds)
    (250/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 6.20483024 seconds)
    (251/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.403350618 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.723993304 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.574007355 seconds)
    (254/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.819213598 seconds)
    (255/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.477243097 seconds)
    (256/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.4002474 seconds)
    (257/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.115988059 seconds)
    (258/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 3.269853819 seconds)
    (259/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.727979728 seconds)
    (260/434) benchmarking ("sort", "Float32", 0)...
    done (took 3.11485134 seconds)
    (261/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.749889769 seconds)
    (262/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.395525686 seconds)
    (263/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.960049159 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.580981293 seconds)
    (265/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.863159326 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 2.639090681 seconds)
    (267/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.405337684 seconds)
    (268/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 11.2998484 seconds)
    (269/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.397549843 seconds)
    (270/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 10.489361872 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 3.072666708 seconds)
    (272/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.454298523 seconds)
    (273/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.464818859 seconds)
    (274/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.867938766 seconds)
    (275/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.680821908 seconds)
    (276/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.637181133 seconds)
    (277/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.6277016 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.741131438 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.704212229 seconds)
    (280/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.534817983 seconds)
    (281/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.412110731 seconds)
    (282/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.754222213 seconds)
    (283/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.726426766 seconds)
    (284/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.541271893 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 2.475517805 seconds)
    (286/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.395344856 seconds)
    (287/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.987088067 seconds)
    (288/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.626756101 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.393527874 seconds)
    (290/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 3.178866439 seconds)
    (291/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 2.640374608 seconds)
    (292/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.571622157 seconds)
    (293/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.667265397 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 3.063029982 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.431496268 seconds)
    (296/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.394392326 seconds)
    (297/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 6.450389609 seconds)
    (298/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.857968222 seconds)
    (299/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.416719768 seconds)
    (300/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.388651577 seconds)
    (301/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 3.019334357 seconds)
    (302/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.415480943 seconds)
    (303/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.621008427 seconds)
    (304/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.498414091 seconds)
    (305/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.642832181 seconds)
    (306/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.785159648 seconds)
    (307/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.733608505 seconds)
    (308/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 2.414571217 seconds)
    (309/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.585962077 seconds)
    (310/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.408961083 seconds)
    (311/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.483617248 seconds)
    (312/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.411161262 seconds)
    (313/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.583371386 seconds)
    (314/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.395567716 seconds)
    (315/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 7.204820501 seconds)
    (316/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.759843818 seconds)
    (317/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.457976453 seconds)
    (318/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 2.524160802 seconds)
    (319/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.389899146 seconds)
    (320/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.887818215 seconds)
    (321/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.463096854 seconds)
    (322/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.487612302 seconds)
    (323/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.651203659 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.472898522 seconds)
    (325/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.388903846 seconds)
    (326/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 7.554329814 seconds)
    (327/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 3.078405414 seconds)
    (328/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 3.047536043 seconds)
    (329/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.508816198 seconds)
    (330/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.08608281 seconds)
    (331/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 2.730042914 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.624318634 seconds)
    (333/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.426251585 seconds)
    (334/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.449815215 seconds)
    (335/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.849265808 seconds)
    (336/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 6.909427641 seconds)
    (337/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.46493424 seconds)
    (338/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.491409339 seconds)
    (339/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.39670817 seconds)
    (340/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.84881868 seconds)
    (341/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.416312627 seconds)
    (342/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.392923476 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 2.591563084 seconds)
    (344/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.651948638 seconds)
    (345/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.626678882 seconds)
    (346/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.590683011 seconds)
    (347/434) benchmarking ("perf_countequals", "Bool")...
    done (took 2.438883083 seconds)
    (348/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 3.580265717 seconds)
    (349/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.396117993 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 3.056960808 seconds)
    (351/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 7.399462646 seconds)
    (352/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.500432167 seconds)
    (353/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.417223093 seconds)
    (354/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.411032258 seconds)
    (355/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.416172525 seconds)
    (356/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.598316535 seconds)
    (357/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.739058769 seconds)
    (358/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.575945811 seconds)
    (359/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.732666142 seconds)
    (360/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.633073504 seconds)
    (361/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.737274944 seconds)
    (362/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.409016427 seconds)
    (363/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.692655157 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.758580383 seconds)
    (365/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 2.486318094 seconds)
    (366/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.4679499 seconds)
    (367/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.669742026 seconds)
    (368/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 2.734340778 seconds)
    (369/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.477432541 seconds)
    (370/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.393860495 seconds)
    (371/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 10.137450859 seconds)
    (372/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.568669835 seconds)
    (373/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.462253777 seconds)
    (374/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.5698034 seconds)
    (375/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.436619569 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.592409471 seconds)
    (377/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.457399623 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.492427794 seconds)
    (379/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.413032801 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.501413255 seconds)
    (381/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.733526768 seconds)
    (382/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.483474215 seconds)
    (383/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.768519429 seconds)
    (384/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.409214284 seconds)
    (385/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.766016865 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 7.398252992 seconds)
    (387/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.660953642 seconds)
    (388/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.392446584 seconds)
    (389/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 3.622400435 seconds)
    (390/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.419080446 seconds)
    (391/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.410735278 seconds)
    (392/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 2.640214325 seconds)
    (393/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.490493562 seconds)
    (394/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 2.643243535 seconds)
    (395/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 2.643696151 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 2.650947356 seconds)
    (397/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.415656184 seconds)
    (398/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 2.748939929 seconds)
    (399/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.412477883 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 7.395094545 seconds)
    (401/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 14.318131296 seconds)
    (402/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 6.479172425 seconds)
    (403/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 2.643913853 seconds)
    (404/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.584865142 seconds)
    (405/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.663821925 seconds)
    (406/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.671491482 seconds)
    (407/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.751834536 seconds)
    (408/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.596926425 seconds)
    (409/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.728114109 seconds)
    (410/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.488267563 seconds)
    (411/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 7.39444609 seconds)
    (412/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 10.027447126 seconds)
    (413/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.668615713 seconds)
    (414/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.768294502 seconds)
    (415/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 2.64476047 seconds)
    (416/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.541826964 seconds)
    (417/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.629638496 seconds)
    (418/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.663143826 seconds)
    (419/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.404234034 seconds)
    (420/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.640858999 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 2.413749776 seconds)
    (422/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.638715058 seconds)
    (423/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.480373648 seconds)
    (424/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 2.528795121 seconds)
    (425/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.415613602 seconds)
    (426/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.522606879 seconds)
    (427/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.879999527 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.735678631 seconds)
    (429/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.848735977 seconds)
    (430/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.509262879 seconds)
    (431/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.566219028 seconds)
    (432/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 2.72258423 seconds)
    (433/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.507429486 seconds)
    (434/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 2.652359951 seconds)
  done (took 1628.930100036 seconds)
done (took 1631.31692829 seconds)
(12/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 7.422389588 seconds)
  (2/4) benchmarking "grow_array"...
  done (took 7.717789174 seconds)
  (3/4) benchmarking "arrays"...
  done (took 7.39163456 seconds)
  (4/4) benchmarking "structs"...
  done (took 7.611921912 seconds)
done (took 32.531750166 seconds)
(13/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.389630558 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.785366636 seconds)
    (3/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.388826548 seconds)
    (4/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.742931537 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.633820141 seconds)
    (6/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.397270405 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.392188825 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.582526045 seconds)
    (9/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.582041108 seconds)
    (10/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.563648347 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.439163187 seconds)
    (12/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.601236626 seconds)
    (13/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.549273891 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.566135729 seconds)
    (15/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.388918526 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.463873119 seconds)
    (17/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.60076244 seconds)
    (18/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.491324946 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.388748333 seconds)
    (20/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.703513082 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.392352409 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.62011945 seconds)
    (23/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.714155301 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.390963681 seconds)
    (25/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.619417456 seconds)
    (26/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.670878789 seconds)
    (27/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.394174238 seconds)
    (28/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.391484802 seconds)
    (29/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.390010565 seconds)
    (30/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.615488592 seconds)
    (31/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.70265289 seconds)
    (32/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.479442925 seconds)
    (33/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.582534935 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.388993822 seconds)
    (35/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.714576072 seconds)
    (36/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.393255981 seconds)
    (37/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.39220687 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.567718308 seconds)
    (39/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.710096268 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.6056059 seconds)
    (41/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.392955815 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.391314487 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.392904954 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.39095634 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.597943984 seconds)
    (46/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.392552866 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.551282938 seconds)
    (48/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.675969026 seconds)
    (49/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.598743371 seconds)
    (50/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.656898619 seconds)
    (51/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.440057663 seconds)
    (52/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.625118319 seconds)
    (53/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.619291085 seconds)
    (54/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.617395753 seconds)
    (55/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.577349852 seconds)
    (56/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.554209089 seconds)
    (57/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.638438515 seconds)
    (58/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.782496743 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.6833685 seconds)
    (60/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.390986921 seconds)
    (61/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.715110131 seconds)
    (62/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.391355713 seconds)
    (63/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.463233944 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.390544437 seconds)
    (65/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.646222209 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.756129302 seconds)
  done (took 280.11292146 seconds)
  (2/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.509414085 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.424731607 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.511891349 seconds)
    (4/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.660864281 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.484814823 seconds)
    (6/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.445891681 seconds)
    (7/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.446888577 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.455839536 seconds)
    (9/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.446708435 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.452260575 seconds)
    (11/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.429219892 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.457651832 seconds)
    (13/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.394633292 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.442198094 seconds)
    (15/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.4940169 seconds)
    (16/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.427873646 seconds)
    (17/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.630611616 seconds)
    (18/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.107932868 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.444836903 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.521434631 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.687764214 seconds)
    (22/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 3.149832624 seconds)
    (23/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.44579676 seconds)
    (24/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.44892364 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.428059008 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.455494938 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.425671591 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.445750892 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.451369725 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.452004018 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.438637792 seconds)
    (32/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.538576044 seconds)
    (33/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.425107796 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.495526373 seconds)
    (35/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.906623667 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.550601072 seconds)
    (37/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 3.011449891 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.429358369 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.362879157 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.951577038 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.687249573 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 3.18330068 seconds)
    (43/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.949752091 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 3.201915951 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.564156256 seconds)
    (46/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.427329214 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.428512157 seconds)
    (48/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.435486738 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.693567052 seconds)
    (50/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 3.650864811 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 4.188095174 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 3.109552349 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.442473638 seconds)
    (54/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.456948196 seconds)
    (55/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.436581433 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.498153285 seconds)
    (57/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.952095798 seconds)
    (58/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 3.346723444 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.425357924 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.429808127 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.494382934 seconds)
    (62/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.513359263 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.51029674 seconds)
    (64/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.429134809 seconds)
    (65/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.609468217 seconds)
    (66/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 3.638278394 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.715417995 seconds)
    (68/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 3.203460032 seconds)
    (69/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.449240372 seconds)
    (70/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.44631875 seconds)
    (71/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.446314703 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.441574011 seconds)
  done (took 206.490566028 seconds)
  (3/5) benchmarking "sequences"...
    (1/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.735102401 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.545078806 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.732788978 seconds)
    (4/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.65584529 seconds)
    (5/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.032177713 seconds)
    (6/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.739678668 seconds)
    (7/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.963222117 seconds)
  done (took 21.798302675 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.062542524 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.497101452 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.056231082 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.550933967 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.878110389 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.808452307 seconds)
  done (took 20.280594858 seconds)
  (5/5) benchmarking "types"...
    (1/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.455753823 seconds)
    (2/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.407440182 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.299847687 seconds)
    (4/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.509264049 seconds)
    (5/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.452232148 seconds)
    (6/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.328586317 seconds)
    (7/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.495179029 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.487524459 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.44433455 seconds)
    (10/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.504687881 seconds)
    (11/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.618435437 seconds)
    (12/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.390955956 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.467039611 seconds)
    (14/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.717062061 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.688926051 seconds)
    (16/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.433387824 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.273070388 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.295448998 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.579375917 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.734150244 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.437844303 seconds)
    (22/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.389222002 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.750171454 seconds)
    (24/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.447393983 seconds)
    (25/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.491760941 seconds)
    (26/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.589783822 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.441137122 seconds)
    (28/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.454677088 seconds)
    (29/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.617812266 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.715377108 seconds)
    (31/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.427962961 seconds)
    (32/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.392669055 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.452951637 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.441398443 seconds)
    (35/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.625731154 seconds)
    (36/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.449453054 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.651812566 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.446066796 seconds)
    (39/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.45541736 seconds)
    (40/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.686519086 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.454863928 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.883612265 seconds)
    (43/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.39165084 seconds)
    (44/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.394139027 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.450336413 seconds)
    (46/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.602436832 seconds)
    (47/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.521580124 seconds)
    (48/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.450279445 seconds)
    (49/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.268930146 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.441159991 seconds)
    (51/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.727500629 seconds)
    (52/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.466827549 seconds)
    (53/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.686125136 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.390018339 seconds)
    (55/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.729461508 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.561952308 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.445965807 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.445936299 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.434368612 seconds)
    (60/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.46091807 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.441858732 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.450321287 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.68664623 seconds)
    (64/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.579487362 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.487637281 seconds)
    (66/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.391388304 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.443291146 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.448329905 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.4516646 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.522725147 seconds)
    (71/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.438655087 seconds)
    (72/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.448950803 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.570973599 seconds)
    (74/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.469254274 seconds)
    (75/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.391083577 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.125940848 seconds)
    (77/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.58367687 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.689635645 seconds)
    (79/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.450796038 seconds)
    (80/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.457767686 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.449400276 seconds)
    (82/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.390126785 seconds)
    (83/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.454433268 seconds)
    (84/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.559126964 seconds)
    (85/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.447879461 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.449576386 seconds)
    (87/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.736321395 seconds)
    (88/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.697672124 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.684251052 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.449039365 seconds)
    (91/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.143681624 seconds)
    (92/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.439323551 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.46964382 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.620969608 seconds)
    (95/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.468947511 seconds)
    (96/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.390083713 seconds)
    (97/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.44214884 seconds)
  done (took 309.374094678 seconds)
done (took 840.447123299 seconds)
(14/23) benchmarking "shootout"...
  (1/12) benchmarking "fasta"...
  done (took 2.511339886 seconds)
  (2/12) benchmarking "k_nucleotide"...
  done (took 7.413116481 seconds)
  (3/12) benchmarking "revcomp"...
  done (took 3.544561626 seconds)
  (4/12) benchmarking "spectralnorm"...
  done (took 7.436643448 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.397152917 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.417858487 seconds)
  (7/12) benchmarking "meteor_contest"...
  done (took 9.147026626 seconds)
  (8/12) benchmarking "pidigits"...
  done (took 8.072055433 seconds)
  (9/12) benchmarking "nbody_vec"...
  done (took 6.73187213 seconds)
  (10/12) benchmarking "nbody"...
  done (took 3.444965035 seconds)
  (11/12) benchmarking "regex_dna"...
  done (took 7.393942001 seconds)
  (12/12) benchmarking "fannkuch"...
  done (took 3.809544775 seconds)
done (took 76.708391433 seconds)
(15/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.393585561 seconds)
    (2/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.39558866 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.393273628 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.393144287 seconds)
  done (took 31.967991338 seconds)
  (2/6) benchmarking "26942"...
  done (took 3.698170849 seconds)
  (3/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.539745526 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 2.831941119 seconds)
    (3/4) benchmarking ("(10000000,)", 2)...
    done (took 3.012069477 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.472322291 seconds)
  done (took 13.655982224 seconds)
  (4/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.435833955 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.436840835 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.428797532 seconds)
    (4/9) benchmarking (5, "scal_tup")...
    done (took 2.427857547 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.43089394 seconds)
    (6/9) benchmarking (3, "scal_tup")...
    done (took 2.425935801 seconds)
    (7/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.436284069 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.430316409 seconds)
    (9/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.390659784 seconds)
  done (took 29.243212647 seconds)
  (5/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 2.646453277 seconds)
    (2/6) benchmarking ("tuple", 10)...
    done (took 2.594794683 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.522870659 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 2.689103798 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.87126172 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.580518236 seconds)
  done (took 18.682750842 seconds)
  (6/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.490877621 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.620545147 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.387842818 seconds)
  done (took 23.899601649 seconds)
done (took 123.535589292 seconds)
(16/23) benchmarking "sort"...
  (1/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.401077684 seconds)
    (2/13) benchmarking "small Float64 view"...
    done (took 2.400603489 seconds)
    (3/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.894395617 seconds)
    (4/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.40476997 seconds)
    (5/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.923291088 seconds)
    (6/13) benchmarking "small Int view"...
    done (took 2.40583549 seconds)
    (7/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.805093367 seconds)
    (8/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.814711291 seconds)
    (9/13) benchmarking "Float16"...
    done (took 7.398033564 seconds)
    (10/13) benchmarking "sort(rand(10^8))"...
    done (took 13.037292343 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.419871294 seconds)
    (12/13) benchmarking "inplace sorting of a view"...
    done (took 2.567036312 seconds)
    (13/13) benchmarking "sortslices sorting very short slices"...
    done (took 7.576831227 seconds)
  done (took 81.440163418 seconds)
  (2/11) benchmarking "length = 10"...
    (1/17) benchmarking "all same"...
    done (took 2.400592468 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.405235682 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.405413878 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.405221301 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.399332664 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.415234626 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.403237465 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.405353538 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.403483166 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.40249724 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.403041839 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.408348625 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.411964033 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.401829399 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.403671829 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.402922799 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.4396768 seconds)
  done (took 43.495056655 seconds)
  (3/11) benchmarking "issorted"...
    (1/8) benchmarking ("reverse", "ascending")...
    done (took 3.034095643 seconds)
    (2/8) benchmarking ("forwards", "ascending")...
    done (took 3.000112546 seconds)
    (3/8) benchmarking ("forwards", "descending")...
    done (took 2.842806728 seconds)
    (4/8) benchmarking ("reverse", "random")...
    done (took 3.211796329 seconds)
    (5/8) benchmarking ("reverse", "ones")...
    done (took 3.437444877 seconds)
    (6/8) benchmarking ("forwards", "random")...
    done (took 3.016286242 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.440721179 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 3.000741862 seconds)
  done (took 27.374607445 seconds)
  (4/11) benchmarking "length = 30"...
    (1/17) benchmarking "all same"...
    done (took 2.399801689 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.407503863 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.403802788 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.404968909 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.400414124 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.415039858 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.407585831 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.404130132 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.4066677 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.406420791 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.412949608 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.405699976 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.415599915 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.39813341 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.411977089 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.404282183 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.554979108 seconds)
  done (took 43.454425713 seconds)
  (5/11) benchmarking "quicksort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 7.397929128 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 7.394528647 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 7.399912166 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 7.39619931 seconds)
  done (took 31.97947645 seconds)
  (6/11) benchmarking "length = 100"...
    (1/17) benchmarking "all same"...
    done (took 2.400420274 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.422203015 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.412755102 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.41314667 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.40279061 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.419872494 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.434057319 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.418408848 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.430935855 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.425944022 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.428098038 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.410818933 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.420543587 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.399200321 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.446864608 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.411676875 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 3.074182394 seconds)
  done (took 44.164710036 seconds)
  (7/11) benchmarking "length = 10000"...
    (1/17) benchmarking "all same"...
    done (took 2.681517691 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 4.967685411 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.138003407 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.100402564 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.430208576 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.075247535 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 6.606477036 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.053874331 seconds)
    (9/17) benchmarking "descending"...
    done (took 5.15632761 seconds)
    (10/17) benchmarking "ascending"...
    done (took 5.110640528 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 7.373246658 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.034220847 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.207437024 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.428454347 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 6.711892133 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 3.94382275 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 7.407968356 seconds)
  done (took 82.819072632 seconds)
  (8/11) benchmarking "mergesort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 7.392726909 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 7.396181917 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 7.397241348 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 7.397583039 seconds)
  done (took 31.97366499 seconds)
  (9/11) benchmarking "length = 1000"...
    (1/17) benchmarking "all same"...
    done (took 2.422446771 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.630775592 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.604876808 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.606073136 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.403676361 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.598154485 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.745090747 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.566926504 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.60511362 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.59550471 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.801891038 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.596520946 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.626214851 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.406624935 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.74426844 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.581188414 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 7.394123666 seconds)
  done (took 51.32078376 seconds)
  (10/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 2.421857732 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 2.429039862 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 2.418966208 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 2.433314294 seconds)
  done (took 12.098109779 seconds)
  (11/11) benchmarking "length = 3"...
    (1/17) benchmarking "all same"...
    done (took 2.400457543 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.402347897 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.399611771 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.400790222 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.3980392 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.40954855 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.398563843 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.401090694 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.398056751 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.398004525 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.397986244 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.40101675 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.404766516 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.397783895 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.398773474 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.39890897 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.428426 seconds)
  done (took 43.228769976 seconds)
done (took 495.740192921 seconds)
(17/23) benchmarking "array"...
  (1/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 2.60320392 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.647282729 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 2.606833901 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 2.65083542 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.670317984 seconds)
  done (took 15.573672584 seconds)
  (2/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.389012195 seconds)
    (2/12) benchmarking ("gramschmidt!", 1000)...
    done (took 13.079306474 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.441636305 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.769097117 seconds)
    (5/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.499442692 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.776153524 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.398140615 seconds)
    (8/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.582512876 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.009268038 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 12.161391805 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.397335611 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.453595006 seconds)
  done (took 106.346356525 seconds)
  (3/13) benchmarking "index"...
    (1/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.860256773 seconds)
    (2/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.742631073 seconds)
    (3/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.393433343 seconds)
    (4/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.453210083 seconds)
    (5/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.394178871 seconds)
    (6/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.133409954 seconds)
    (7/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.506924472 seconds)
    (8/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.398779336 seconds)
    (9/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.388964273 seconds)
    (10/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.401028056 seconds)
    (11/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 4.535847858 seconds)
    (12/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.399942336 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395845648 seconds)
    (14/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.390686931 seconds)
    (15/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.407429753 seconds)
    (16/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.394866001 seconds)
    (17/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.878884658 seconds)
    (18/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.402726965 seconds)
    (19/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397308615 seconds)
    (20/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.428460603 seconds)
    (21/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 4.139792931 seconds)
    (22/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397023201 seconds)
    (23/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.400286945 seconds)
    (24/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.397927193 seconds)
    (25/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.618179289 seconds)
    (26/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.398829359 seconds)
    (27/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.395332597 seconds)
    (28/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.540262556 seconds)
    (29/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.935397189 seconds)
    (30/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.39869907 seconds)
    (31/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.391701903 seconds)
    (32/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.396098265 seconds)
    (33/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.395030906 seconds)
    (34/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.266223149 seconds)
    (35/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.398425988 seconds)
    (36/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.395895628 seconds)
    (37/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.391542912 seconds)
    (38/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.893685406 seconds)
    (39/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.39985933 seconds)
    (40/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.3942666 seconds)
    (41/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.894782273 seconds)
    (42/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.389896998 seconds)
    (43/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.432211536 seconds)
    (44/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.398120667 seconds)
    (45/608) benchmarking ("sum", "3darray")...
    done (took 3.503384304 seconds)
    (46/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.948490688 seconds)
    (47/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.395658209 seconds)
    (48/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 4.646594666 seconds)
    (49/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.387394784 seconds)
    (50/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.519551687 seconds)
    (51/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.389938842 seconds)
    (52/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.577137019 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.396451338 seconds)
    (54/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.517826066 seconds)
    (55/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.396375914 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.403266198 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.396316721 seconds)
    (58/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.4350162 seconds)
    (59/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.396641467 seconds)
    (60/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.492473108 seconds)
    (61/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.400409142 seconds)
    (62/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.810270854 seconds)
    (63/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.790890397 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.391443518 seconds)
    (65/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.389897077 seconds)
    (66/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.052457395 seconds)
    (67/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.552687259 seconds)
    (68/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.391229047 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.494359782 seconds)
    (70/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.390437658 seconds)
    (71/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.386983222 seconds)
    (72/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.394568403 seconds)
    (73/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.398191066 seconds)
    (74/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.385890256 seconds)
    (75/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.42677121 seconds)
    (76/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.396665691 seconds)
    (77/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.689881563 seconds)
    (78/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.39632925 seconds)
    (79/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.315231042 seconds)
    (80/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.405765619 seconds)
    (81/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.395070515 seconds)
    (82/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.389892204 seconds)
    (83/608) benchmarking "6d"...
    done (took 7.387538982 seconds)
    (84/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.396403768 seconds)
    (85/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.173240286 seconds)
    (86/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.496767621 seconds)
    (87/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.353222408 seconds)
    (88/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.395430556 seconds)
    (89/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.390003765 seconds)
    (90/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.410468266 seconds)
    (91/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.39807927 seconds)
    (92/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.41016536 seconds)
    (93/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.393870949 seconds)
    (94/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 5.196787172 seconds)
    (95/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.402827647 seconds)
    (96/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.392969718 seconds)
    (97/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.390290133 seconds)
    (98/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.835774827 seconds)
    (99/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.691447462 seconds)
    (100/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.389113026 seconds)
    (101/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.396215376 seconds)
    (102/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.387387913 seconds)
    (103/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394242017 seconds)
    (104/608) benchmarking "ind2sub"...
    done (took 3.134847207 seconds)
    (105/608) benchmarking "5d"...
    done (took 5.508176448 seconds)
    (106/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.537381682 seconds)
    (107/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.396218866 seconds)
    (108/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.398465847 seconds)
    (109/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.444036554 seconds)
    (110/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.395737508 seconds)
    (111/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.393881776 seconds)
    (112/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.390566011 seconds)
    (113/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.396090363 seconds)
    (114/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.39657934 seconds)
    (115/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.390924859 seconds)
    (116/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.39707857 seconds)
    (117/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.801693607 seconds)
    (118/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.392297005 seconds)
    (119/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 5.612287991 seconds)
    (120/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.48698142 seconds)
    (121/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.576201172 seconds)
    (122/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.397232731 seconds)
    (123/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.39094769 seconds)
    (124/608) benchmarking "3d"...
    done (took 3.985091807 seconds)
    (125/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397203522 seconds)
    (126/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.389666336 seconds)
    (127/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.40628538 seconds)
    (128/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.449006973 seconds)
    (129/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.410016039 seconds)
    (130/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.389442859 seconds)
    (131/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.39018921 seconds)
    (132/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.394450589 seconds)
    (133/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.397470517 seconds)
    (134/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.389354806 seconds)
    (135/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.884012849 seconds)
    (136/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.407511024 seconds)
    (137/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.386853233 seconds)
    (138/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.263706443 seconds)
    (139/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.392841518 seconds)
    (140/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.794733449 seconds)
    (141/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.805675154 seconds)
    (142/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.393241986 seconds)
    (143/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.421550278 seconds)
    (144/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.397101364 seconds)
    (145/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.391824875 seconds)
    (146/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.7923274 seconds)
    (147/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.318454388 seconds)
    (148/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.391469459 seconds)
    (149/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 3.5323114 seconds)
    (150/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.840790635 seconds)
    (151/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.611740231 seconds)
    (152/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.872634084 seconds)
    (153/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.429754811 seconds)
    (154/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.79297417 seconds)
    (155/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.421504625 seconds)
    (156/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.390204004 seconds)
    (157/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.217273482 seconds)
    (158/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.498270717 seconds)
    (159/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.865291131 seconds)
    (160/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.621149546 seconds)
    (161/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.883219927 seconds)
    (162/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.395406452 seconds)
    (163/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.389304748 seconds)
    (164/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.449231513 seconds)
    (165/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 4.634588129 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.397948344 seconds)
    (167/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.387106339 seconds)
    (168/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.390818037 seconds)
    (169/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416226503 seconds)
    (170/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.389057802 seconds)
    (171/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 5.940726449 seconds)
    (172/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.922689225 seconds)
    (173/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.386334659 seconds)
    (174/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.390341583 seconds)
    (175/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.393195493 seconds)
    (176/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.396646375 seconds)
    (177/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.405310108 seconds)
    (178/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.540225718 seconds)
    (179/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40826819 seconds)
    (180/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.929905297 seconds)
    (181/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.394534607 seconds)
    (182/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.41027391 seconds)
    (183/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 6.439297233 seconds)
    (184/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.615668658 seconds)
    (185/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.598313955 seconds)
    (186/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.396674114 seconds)
    (187/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.386551533 seconds)
    (188/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.394645042 seconds)
    (189/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.395467388 seconds)
    (190/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.397095609 seconds)
    (191/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.606488043 seconds)
    (192/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394417332 seconds)
    (193/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.395197646 seconds)
    (194/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.386520783 seconds)
    (195/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.972754836 seconds)
    (196/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.428492973 seconds)
    (197/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.50845761 seconds)
    (198/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394868981 seconds)
    (199/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394467327 seconds)
    (200/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.263248244 seconds)
    (201/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.390298821 seconds)
    (202/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.396885281 seconds)
    (203/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.39577968 seconds)
    (204/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.422246789 seconds)
    (205/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.38600347 seconds)
    (206/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.657744739 seconds)
    (207/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.116723408 seconds)
    (208/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.387677017 seconds)
    (209/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.016620361 seconds)
    (210/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.499346801 seconds)
    (211/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.39031282 seconds)
    (212/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.39363 seconds)
    (213/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394880959 seconds)
    (214/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417707877 seconds)
    (215/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.437173318 seconds)
    (216/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.400216499 seconds)
    (217/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.39574138 seconds)
    (218/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.399105699 seconds)
    (219/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.683894584 seconds)
    (220/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.391377455 seconds)
    (221/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 4.65885731 seconds)
    (222/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.396658902 seconds)
    (223/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.815453259 seconds)
    (224/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.745128541 seconds)
    (225/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.397855965 seconds)
    (226/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.74986191 seconds)
    (227/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.460045077 seconds)
    (228/608) benchmarking "7d"...
    done (took 4.93718155 seconds)
    (229/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.391050105 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.389540558 seconds)
    (231/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 4.633629115 seconds)
    (232/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.456500499 seconds)
    (233/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.396721029 seconds)
    (234/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.394659348 seconds)
    (235/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.392312421 seconds)
    (236/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.390041191 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 6.996462147 seconds)
    (238/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.39192343 seconds)
    (239/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.388044488 seconds)
    (240/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.395154982 seconds)
    (241/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.829449111 seconds)
    (242/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.884101742 seconds)
    (243/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.450945881 seconds)
    (244/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397016567 seconds)
    (245/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.881460464 seconds)
    (246/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.426669186 seconds)
    (247/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.446760886 seconds)
    (248/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394790051 seconds)
    (249/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.844701871 seconds)
    (250/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.387190252 seconds)
    (251/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.094736164 seconds)
    (252/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.709395463 seconds)
    (253/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.551281379 seconds)
    (254/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.394611419 seconds)
    (255/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.390426511 seconds)
    (256/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.398307995 seconds)
    (257/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.396498212 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.79962429 seconds)
    (259/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.396028035 seconds)
    (260/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.394612031 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405014918 seconds)
    (262/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.424580113 seconds)
    (263/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 6.996631741 seconds)
    (264/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.40127041 seconds)
    (265/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.407328697 seconds)
    (266/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.399675102 seconds)
    (267/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.416270698 seconds)
    (268/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.391200334 seconds)
    (269/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.397026892 seconds)
    (270/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 4.632313547 seconds)
    (271/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397190404 seconds)
    (272/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.397698443 seconds)
    (273/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.391439364 seconds)
    (274/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.448814348 seconds)
    (275/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.396601075 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.397144435 seconds)
    (277/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.499761329 seconds)
    (278/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.801371126 seconds)
    (279/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.392433983 seconds)
    (280/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.401044986 seconds)
    (281/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.390349568 seconds)
    (282/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.40268145 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.422979565 seconds)
    (284/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.396267106 seconds)
    (285/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.394539231 seconds)
    (286/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.400242786 seconds)
    (287/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.653316928 seconds)
    (288/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.42256194 seconds)
    (289/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.393761589 seconds)
    (290/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.390523108 seconds)
    (291/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.403076743 seconds)
    (292/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.393928019 seconds)
    (293/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.396884886 seconds)
    (294/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.41048402 seconds)
    (295/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.220553686 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.390301568 seconds)
    (297/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.399711537 seconds)
    (298/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.390289433 seconds)
    (299/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.391009506 seconds)
    (300/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.390292335 seconds)
    (301/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.398313324 seconds)
    (302/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.395694876 seconds)
    (303/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.163981571 seconds)
    (304/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.394964005 seconds)
    (305/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.833960403 seconds)
    (306/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 4.626397495 seconds)
    (307/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.395832659 seconds)
    (308/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.403395312 seconds)
    (309/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.39199871 seconds)
    (310/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.395000537 seconds)
    (311/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.904272074 seconds)
    (312/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.390164285 seconds)
    (313/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.393895006 seconds)
    (314/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.318504325 seconds)
    (315/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.386462931 seconds)
    (316/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.393429493 seconds)
    (317/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.388808471 seconds)
    (318/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.283755336 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.483991497 seconds)
    (320/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.393040335 seconds)
    (321/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.393917105 seconds)
    (322/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397226328 seconds)
    (323/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 5.987278427 seconds)
    (324/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.417253574 seconds)
    (325/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.391934604 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.389179103 seconds)
    (327/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.397854581 seconds)
    (328/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.656060616 seconds)
    (329/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.399749165 seconds)
    (330/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.394590612 seconds)
    (331/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412098572 seconds)
    (332/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.676824023 seconds)
    (333/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.390138901 seconds)
    (334/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.394981169 seconds)
    (335/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.391401547 seconds)
    (336/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.394804736 seconds)
    (337/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.787167575 seconds)
    (338/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.801129834 seconds)
    (339/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.079900835 seconds)
    (340/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.235025904 seconds)
    (341/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.581029055 seconds)
    (342/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.39340655 seconds)
    (343/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.402830892 seconds)
    (344/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.440736674 seconds)
    (345/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.564162488 seconds)
    (346/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.3935345 seconds)
    (347/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398422992 seconds)
    (348/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.396007632 seconds)
    (349/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411028798 seconds)
    (350/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398277932 seconds)
    (351/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.391203534 seconds)
    (352/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.392564331 seconds)
    (353/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.395603945 seconds)
    (354/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.874536474 seconds)
    (355/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.579358348 seconds)
    (356/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.399841402 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.392491026 seconds)
    (358/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.391494307 seconds)
    (359/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.395803807 seconds)
    (360/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.420795986 seconds)
    (361/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.914100939 seconds)
    (362/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.401001566 seconds)
    (363/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.913720127 seconds)
    (364/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.395999313 seconds)
    (365/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.390518665 seconds)
    (366/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.235004198 seconds)
    (367/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.400183891 seconds)
    (368/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.400866165 seconds)
    (369/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397550682 seconds)
    (370/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.865358795 seconds)
    (371/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.875925697 seconds)
    (372/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.393482315 seconds)
    (373/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.504909591 seconds)
    (374/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.500466697 seconds)
    (375/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.395183113 seconds)
    (376/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 4.623655885 seconds)
    (377/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 6.574053685 seconds)
    (378/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.488516106 seconds)
    (379/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.454971205 seconds)
    (380/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 6.994996995 seconds)
    (381/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 4.622028129 seconds)
    (382/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.393883005 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.38949228 seconds)
    (384/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395696355 seconds)
    (385/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.397505087 seconds)
    (386/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 2.421588134 seconds)
    (387/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.393962922 seconds)
    (388/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.392305548 seconds)
    (389/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.39599883 seconds)
    (390/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.742144351 seconds)
    (391/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.392903774 seconds)
    (392/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.280716863 seconds)
    (393/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 5.380755746 seconds)
    (394/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.55084583 seconds)
    (395/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.531306263 seconds)
    (396/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.401304276 seconds)
    (397/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.529654422 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.393386609 seconds)
    (399/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.391397239 seconds)
    (400/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.397092221 seconds)
    (401/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.403541907 seconds)
    (402/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.282545593 seconds)
    (403/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.869265805 seconds)
    (404/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.440464451 seconds)
    (405/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.677324494 seconds)
    (406/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.391123617 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.656317088 seconds)
    (408/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.393157013 seconds)
    (409/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.922831255 seconds)
    (410/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395456523 seconds)
    (411/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397111511 seconds)
    (412/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.831351643 seconds)
    (413/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.792467066 seconds)
    (414/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.39224579 seconds)
    (415/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.401051313 seconds)
    (416/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.399124142 seconds)
    (417/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.404160727 seconds)
    (418/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.39404653 seconds)
    (419/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41374449 seconds)
    (420/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.551172106 seconds)
    (421/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.653446786 seconds)
    (422/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.568113114 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.533869265 seconds)
    (424/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.39980102 seconds)
    (425/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.396334834 seconds)
    (426/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.394144356 seconds)
    (427/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.39406534 seconds)
    (428/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.425495696 seconds)
    (429/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.393037563 seconds)
    (430/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.446360586 seconds)
    (431/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.452864509 seconds)
    (432/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.394593411 seconds)
    (433/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.394625123 seconds)
    (434/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 5.611401835 seconds)
    (435/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.3969578 seconds)
    (436/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.407086731 seconds)
    (437/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.389561627 seconds)
    (438/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.546937721 seconds)
    (439/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.495061133 seconds)
    (440/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.398363307 seconds)
    (441/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.39939478 seconds)
    (442/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.397351855 seconds)
    (443/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.397362997 seconds)
    (444/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.434032124 seconds)
    (445/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.244247242 seconds)
    (446/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.40075303 seconds)
    (447/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.801275045 seconds)
    (448/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.393729156 seconds)
    (449/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.443272959 seconds)
    (450/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.399614734 seconds)
    (451/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.393135998 seconds)
    (452/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.396997274 seconds)
    (453/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.395752724 seconds)
    (454/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.392614574 seconds)
    (455/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.395022969 seconds)
    (456/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.781363918 seconds)
    (457/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.394141995 seconds)
    (458/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.615750657 seconds)
    (459/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.107672833 seconds)
    (460/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.500550705 seconds)
    (461/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.868927613 seconds)
    (462/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.39585395 seconds)
    (463/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397348108 seconds)
    (464/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.399045655 seconds)
    (465/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.04052037 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.664389498 seconds)
    (467/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.4192651 seconds)
    (468/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.397063505 seconds)
    (469/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 6.990760892 seconds)
    (470/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.494266741 seconds)
    (471/608) benchmarking "sub2ind"...
    done (took 7.557633231 seconds)
    (472/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.397619574 seconds)
    (473/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.431784011 seconds)
    (474/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.399409633 seconds)
    (475/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.394417029 seconds)
    (476/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.521929671 seconds)
    (477/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.396978155 seconds)
    (478/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.913186568 seconds)
    (479/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.800888871 seconds)
    (480/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.396624062 seconds)
    (481/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.469160107 seconds)
    (482/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.954596 seconds)
    (483/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.391835427 seconds)
    (484/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.393269578 seconds)
    (485/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397542153 seconds)
    (486/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.469308407 seconds)
    (487/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.393844383 seconds)
    (488/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.396857527 seconds)
    (489/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.392490834 seconds)
    (490/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.400193524 seconds)
    (491/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394186169 seconds)
    (492/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.538606159 seconds)
    (493/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.995069964 seconds)
    (494/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.395838992 seconds)
    (495/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.39852304 seconds)
    (496/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.663457179 seconds)
    (497/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398664713 seconds)
    (498/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 4.16718552 seconds)
    (499/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398280239 seconds)
    (500/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.39787129 seconds)
    (501/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.398139265 seconds)
    (502/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.393555061 seconds)
    (503/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 5.613081818 seconds)
    (504/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.397680232 seconds)
    (505/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.395672396 seconds)
    (506/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.262771117 seconds)
    (507/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.393887201 seconds)
    (508/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.393308255 seconds)
    (509/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.08042461 seconds)
    (510/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.419320631 seconds)
    (511/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.392779979 seconds)
    (512/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.437364025 seconds)
    (513/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.40114497 seconds)
    (514/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.399470722 seconds)
    (515/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.409033891 seconds)
    (516/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.798502031 seconds)
    (517/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.425891494 seconds)
    (518/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.395989331 seconds)
    (519/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.395065648 seconds)
    (520/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.401519954 seconds)
    (521/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.394398657 seconds)
    (522/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.162837488 seconds)
    (523/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.394577634 seconds)
    (524/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.401304701 seconds)
    (525/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.394118517 seconds)
    (526/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.396031688 seconds)
    (527/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.76703455 seconds)
    (528/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.407901479 seconds)
    (529/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.394197505 seconds)
    (530/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.397386628 seconds)
    (531/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.402238851 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 4.840053832 seconds)
    (533/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.396615666 seconds)
    (534/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 5.168768318 seconds)
    (535/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.399054935 seconds)
    (536/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.400281369 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.397175884 seconds)
    (538/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.399062993 seconds)
    (539/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.393795588 seconds)
    (540/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.396617502 seconds)
    (541/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.392820914 seconds)
    (542/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.234339889 seconds)
    (543/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.406857808 seconds)
    (544/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395169607 seconds)
    (545/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.263308514 seconds)
    (546/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.393952309 seconds)
    (547/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395134366 seconds)
    (548/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.303606119 seconds)
    (549/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.399131986 seconds)
    (550/608) benchmarking "4d"...
    done (took 4.22141496 seconds)
    (551/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.397437625 seconds)
    (552/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.864671435 seconds)
    (553/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.394120609 seconds)
    (554/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.396527527 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.3935665 seconds)
    (556/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.395680947 seconds)
    (557/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.394044392 seconds)
    (558/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.876430512 seconds)
    (559/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.397473626 seconds)
    (560/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.397699257 seconds)
    (561/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.398242947 seconds)
    (562/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395578737 seconds)
    (563/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395532311 seconds)
    (564/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426747901 seconds)
    (565/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.417036099 seconds)
    (566/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.888618366 seconds)
    (567/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.392235292 seconds)
    (568/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.396324896 seconds)
    (569/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.630202757 seconds)
    (570/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.416258779 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.398192958 seconds)
    (572/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.394812441 seconds)
    (573/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.772534018 seconds)
    (574/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394035067 seconds)
    (575/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.393344328 seconds)
    (576/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397654766 seconds)
    (577/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.391494434 seconds)
    (578/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.77403838 seconds)
    (579/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.396306844 seconds)
    (580/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.394640227 seconds)
    (581/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.567932479 seconds)
    (582/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 2.425411429 seconds)
    (583/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.39787737 seconds)
    (584/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.402687 seconds)
    (585/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.426605305 seconds)
    (586/608) benchmarking "2d"...
    done (took 3.65331658 seconds)
    (587/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.400139071 seconds)
    (588/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.391898778 seconds)
    (589/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.416846991 seconds)
    (590/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.393026615 seconds)
    (591/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.423894932 seconds)
    (592/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.396252868 seconds)
    (593/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.397543352 seconds)
    (594/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.39470758 seconds)
    (595/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.394209979 seconds)
    (596/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.175689994 seconds)
    (597/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.494533264 seconds)
    (598/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.682269561 seconds)
    (599/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.399248206 seconds)
    (600/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.201709164 seconds)
    (601/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 2.532789575 seconds)
    (602/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.394099586 seconds)
    (603/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.399706546 seconds)
    (604/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.401229345 seconds)
    (605/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.395671549 seconds)
    (606/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397772562 seconds)
    (607/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395537181 seconds)
    (608/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394159164 seconds)
  done (took 3904.137771158 seconds)
  (4/13) benchmarking "convert"...
    (1/4) benchmarking ("Float64", "Int")...
    done (took 2.913673082 seconds)
    (2/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.033007801 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.322510702 seconds)
    (4/4) benchmarking ("Int", "Float64")...
    done (took 2.845703644 seconds)
  done (took 14.506962292 seconds)
  (5/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.393886449 seconds)
    (2/6) benchmarking "boolarray_true_fill!"...
    done (took 2.87611489 seconds)
    (3/6) benchmarking "boolarray_true_load!"...
    done (took 2.83930161 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.766461267 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.403234047 seconds)
    (6/6) benchmarking "bitarray_true_load!"...
    done (took 7.396656511 seconds)
  done (took 33.071380149 seconds)
  (6/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate", "Float64")...
    done (took 2.535693869 seconds)
    (2/12) benchmarking ("cumsum", "Int")...
    done (took 3.01328285 seconds)
    (3/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.468184443 seconds)
    (4/12) benchmarking ("accumulate!", "Int")...
    done (took 3.049267457 seconds)
    (5/12) benchmarking ("cumsum", "Float64")...
    done (took 2.555126054 seconds)
    (6/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.53643422 seconds)
    (7/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.397992466 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.400589463 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 3.05828945 seconds)
    (10/12) benchmarking ("accumulate", "Int")...
    done (took 3.173451648 seconds)
    (11/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.379907737 seconds)
    (12/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.400068251 seconds)
  done (took 55.364496467 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 2.613838335 seconds)
    (2/12) benchmarking ("push_multiple!", 256)...
    done (took 2.484957893 seconds)
    (3/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.489367651 seconds)
    (4/12) benchmarking ("prerend!", 8)...
    done (took 2.599979488 seconds)
    (5/12) benchmarking ("prerend!", 256)...
    done (took 3.34353079 seconds)
    (6/12) benchmarking ("push_single!", 256)...
    done (took 2.470532675 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 3.131659297 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 2.649452786 seconds)
    (9/12) benchmarking ("prerend!", 2048)...
    done (took 2.690782937 seconds)
    (10/12) benchmarking ("append!", 8)...
    done (took 2.576303768 seconds)
    (11/12) benchmarking ("push_single!", 2048)...
    done (took 2.488722132 seconds)
    (12/12) benchmarking ("push_single!", 8)...
    done (took 2.459408905 seconds)
  done (took 34.39534556 seconds)
  (8/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.305368208 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.805097813 seconds)
    (3/20) benchmarking ("sumabs", "Float64")...
    done (took 3.372342197 seconds)
    (4/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.257245316 seconds)
    (5/20) benchmarking ("norminf", "Float64")...
    done (took 2.474418954 seconds)
    (6/20) benchmarking ("sum", "Float64")...
    done (took 3.278444146 seconds)
    (7/20) benchmarking ("norm", "Float64")...
    done (took 3.293217619 seconds)
    (8/20) benchmarking ("sum", "Int64")...
    done (took 3.131595732 seconds)
    (9/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.212997957 seconds)
    (10/20) benchmarking ("norminf", "Int64")...
    done (took 2.499776639 seconds)
    (11/20) benchmarking ("norm", "Int64")...
    done (took 2.570828213 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 3.277593872 seconds)
    (13/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.514524506 seconds)
    (14/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.266800552 seconds)
    (15/20) benchmarking ("maxabs", "Int64")...
    done (took 2.960898282 seconds)
    (16/20) benchmarking ("mean", "Float64")...
    done (took 3.32800506 seconds)
    (17/20) benchmarking ("norm1", "Int64")...
    done (took 2.829961076 seconds)
    (18/20) benchmarking ("mean", "Int64")...
    done (took 2.930956135 seconds)
    (19/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.214824942 seconds)
    (20/20) benchmarking ("sumabs", "Int64")...
    done (took 3.624984071 seconds)
  done (took 64.546508214 seconds)
  (9/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.398856297 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.404019666 seconds)
    (3/4) benchmarking "rev_load_slow!"...
    done (took 7.403803695 seconds)
    (4/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.404145776 seconds)
  done (took 32.005866336 seconds)
  (10/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.714248303 seconds)
    (2/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.763019125 seconds)
    (3/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.762370548 seconds)
    (4/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.700643705 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.716028822 seconds)
    (6/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.748461207 seconds)
    (7/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.647817274 seconds)
    (8/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.758697715 seconds)
    (9/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.750778373 seconds)
    (10/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.717264858 seconds)
    (11/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.752584888 seconds)
    (12/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.74336535 seconds)
    (13/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.763250001 seconds)
    (14/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.716313726 seconds)
    (15/24) benchmarking ("any", "BitArray")...
    done (took 3.079885831 seconds)
    (16/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.747477715 seconds)
    (17/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.75337604 seconds)
    (18/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.636418699 seconds)
    (19/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.740895874 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.743085576 seconds)
    (21/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.697881917 seconds)
    (22/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.64232848 seconds)
    (23/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.633600954 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 3.075271709 seconds)
  done (took 68.398783547 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.394399928 seconds)
    (2/17) benchmarking ("vcat", 500)...
    done (took 7.395992211 seconds)
    (3/17) benchmarking ("hcat", 5)...
    done (took 4.814588038 seconds)
    (4/17) benchmarking ("vcat_setind", 5)...
    done (took 4.69263414 seconds)
    (5/17) benchmarking ("catnd_setind", 5)...
    done (took 2.876977058 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 3.570020811 seconds)
    (7/17) benchmarking ("hvcat", 5)...
    done (took 4.735665058 seconds)
    (8/17) benchmarking ("hcat_setind", 500)...
    done (took 7.83285315 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.398366031 seconds)
    (10/17) benchmarking ("catnd", 5)...
    done (took 2.44459148 seconds)
    (11/17) benchmarking "4467"...
    done (took 2.576100092 seconds)
    (12/17) benchmarking ("vcat", 5)...
    done (took 3.569827551 seconds)
    (13/17) benchmarking ("catnd", 500)...
    done (took 7.839203274 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 7.394511786 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 3.564743567 seconds)
    (16/17) benchmarking ("vcat_setind", 500)...
    done (took 7.905991679 seconds)
    (17/17) benchmarking ("catnd_setind", 500)...
    done (took 7.402548201 seconds)
  done (took 95.805418658 seconds)
  (12/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.503373207 seconds)
    (2/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.482068512 seconds)
    (3/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.693411146 seconds)
    (4/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.596306509 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.412173848 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.424485342 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.559833074 seconds)
    (8/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.477171488 seconds)
  done (took 62.541140071 seconds)
  (13/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.847874553 seconds)
    (2/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.460005441 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.661273605 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.505272417 seconds)
    (5/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.804964961 seconds)
    (6/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.799113593 seconds)
    (7/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.599193743 seconds)
    (8/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.61177577 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.460210851 seconds)
    (10/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.802073579 seconds)
    (11/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.398186844 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.75402893 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.642517872 seconds)
    (14/24) benchmarking ("==", "BitArray")...
    done (took 2.610994217 seconds)
    (15/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.433021435 seconds)
    (16/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.784330595 seconds)
    (17/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.624141971 seconds)
    (18/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.641962541 seconds)
    (19/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.751857576 seconds)
    (20/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.722386354 seconds)
    (21/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.433465103 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.61621149 seconds)
    (23/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.636680656 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.028131748 seconds)
  done (took 71.023438148 seconds)
done (took 4560.104859395 seconds)
(18/23) benchmarking "string"...
  (1/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "different"...
    done (took 2.487497818 seconds)
    (2/4) benchmarking "identical"...
    done (took 2.696468145 seconds)
    (3/4) benchmarking "equal"...
    done (took 2.561330177 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.559934101 seconds)
  done (took 12.700422352 seconds)
  (2/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat str len 1"...
    done (took 3.374693433 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.989681073 seconds)
    (3/4) benchmarking "repeat char 2"...
    done (took 5.019008563 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.487601526 seconds)
  done (took 18.262776945 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "different"...
    done (took 2.4593361 seconds)
    (2/3) benchmarking "equal"...
    done (took 2.707361268 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.43367022 seconds)
  done (took 10.424205148 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.404368721 seconds)
  (5/7) benchmarking "findfirst"...
    (1/2) benchmarking "String"...
    done (took 2.595182907 seconds)
    (2/2) benchmarking "Char"...
    done (took 2.516614312 seconds)
  done (took 7.505239923 seconds)
  (6/7) benchmarking "join"...
  done (took 7.449589706 seconds)
  (7/7) benchmarking "readuntil"...
    (1/7) benchmarking "barbarian backtrack"...
    done (took 6.795891266 seconds)
    (2/7) benchmarking "target length 1"...
    done (took 3.09615144 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.101890257 seconds)
    (4/7) benchmarking "target length 1000"...
    done (took 2.656376125 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.375659601 seconds)
    (6/7) benchmarking "no backtracking"...
    done (took 5.133961113 seconds)
    (7/7) benchmarking "backtracking"...
    done (took 7.19476809 seconds)
  done (took 33.755200523 seconds)
done (took 95.895556171 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "symm!"...
    done (took 7.48058187 seconds)
    (2/36) benchmarking "symv"...
    done (took 3.887891385 seconds)
    (3/36) benchmarking "dotu"...
    done (took 3.413996482 seconds)
    (4/36) benchmarking "sbmv!"...
    done (took 4.684354703 seconds)
    (5/36) benchmarking "scal!"...
    done (took 3.335056074 seconds)
    (6/36) benchmarking "gemm!"...
    done (took 7.484082394 seconds)
    (7/36) benchmarking "trmv"...
    done (took 3.821086721 seconds)
    (8/36) benchmarking "asum"...
    done (took 3.166886323 seconds)
    (9/36) benchmarking "gemm"...
    done (took 7.468991701 seconds)
    (10/36) benchmarking "gbmv!"...
    done (took 4.912154016 seconds)
    (11/36) benchmarking "trsm"...
    done (took 7.45200211 seconds)
    (12/36) benchmarking "ger!"...
    done (took 7.399373512 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.980082516 seconds)
    (14/36) benchmarking "syr!"...
    done (took 7.40075829 seconds)
    (15/36) benchmarking "gbmv"...
    done (took 4.942930341 seconds)
    (16/36) benchmarking "symm"...
    done (took 7.474409589 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.172029487 seconds)
    (18/36) benchmarking "scal"...
    done (took 2.531136003 seconds)
    (19/36) benchmarking "trmm"...
    done (took 7.447502276 seconds)
    (20/36) benchmarking "trmv!"...
    done (took 3.804721984 seconds)
    (21/36) benchmarking "trmm!"...
    done (took 7.450714971 seconds)
    (22/36) benchmarking "dotc"...
    done (took 3.416852592 seconds)
    (23/36) benchmarking "syrk!"...
    done (took 7.438046069 seconds)
    (24/36) benchmarking "syrk"...
    done (took 7.457628873 seconds)
    (25/36) benchmarking "gemv"...
    done (took 5.194052594 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.631419378 seconds)
    (27/36) benchmarking "nrm2"...
    done (took 3.265417541 seconds)
    (28/36) benchmarking "sbmv"...
    done (took 4.744367583 seconds)
    (29/36) benchmarking "trsv!"...
    done (took 3.97253351 seconds)
    (30/36) benchmarking "axpy!"...
    done (took 3.605792536 seconds)
    (31/36) benchmarking "trsm!"...
    done (took 7.43336383 seconds)
    (32/36) benchmarking "her!"...
    done (took 7.405797352 seconds)
    (33/36) benchmarking "herk"...
    done (took 7.598382193 seconds)
    (34/36) benchmarking "dot"...
    done (took 3.372614441 seconds)
    (35/36) benchmarking "herk!"...
    done (took 7.529767792 seconds)
    (36/36) benchmarking "symv!"...
    done (took 3.841234898 seconds)
  done (took 197.01784209 seconds)
  (2/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.421207027 seconds)
    (2/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.40294391 seconds)
    (3/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.469371613 seconds)
    (4/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.398588848 seconds)
    (5/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.401727017 seconds)
    (6/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.161314263 seconds)
    (7/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.401806102 seconds)
    (8/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.399478191 seconds)
    (9/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.405554581 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.399181281 seconds)
    (11/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.411207295 seconds)
    (12/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.428488804 seconds)
    (13/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.39684901 seconds)
    (14/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.454106614 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.399917065 seconds)
    (16/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.400432996 seconds)
    (17/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.401652853 seconds)
    (18/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.561133096 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.406459176 seconds)
    (20/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.91201695 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.397594496 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.397791359 seconds)
    (23/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.482959495 seconds)
    (24/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 23.872305979 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.403442118 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.402941134 seconds)
    (27/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.48432248 seconds)
    (28/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.404108141 seconds)
    (29/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.401339327 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.405273543 seconds)
    (31/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.31188045 seconds)
    (32/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.408324157 seconds)
    (33/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.402512957 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.406272467 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.39847526 seconds)
    (36/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.459544119 seconds)
    (37/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.781758592 seconds)
    (38/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.525970472 seconds)
    (39/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.644751107 seconds)
    (40/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.398089294 seconds)
    (41/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.483421439 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.457318963 seconds)
    (43/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.398626462 seconds)
    (44/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.401863146 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.094559699 seconds)
    (46/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.402079442 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.130329514 seconds)
    (48/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.464870556 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.398518885 seconds)
    (50/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.400899283 seconds)
    (51/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.099767463 seconds)
    (52/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.402971437 seconds)
    (53/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 23.695319432 seconds)
    (54/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.105576831 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.414938986 seconds)
    (56/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.401060264 seconds)
    (57/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.400389975 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.398548812 seconds)
    (59/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.45797733 seconds)
    (60/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.398671388 seconds)
    (61/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.40176011 seconds)
    (62/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.39794799 seconds)
    (63/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.40792587 seconds)
    (64/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.426125138 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.416839542 seconds)
    (66/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.39674238 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.96822981 seconds)
    (68/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.460271943 seconds)
    (69/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.459061291 seconds)
    (70/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.459650104 seconds)
    (71/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.396934907 seconds)
    (72/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.401384375 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.399217987 seconds)
    (74/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.397389818 seconds)
    (75/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.404000734 seconds)
    (76/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.398737592 seconds)
    (77/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.396701891 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.396356403 seconds)
    (79/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.404672404 seconds)
    (80/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.600169136 seconds)
    (81/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.400725677 seconds)
    (82/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.472663356 seconds)
    (83/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.451162399 seconds)
    (84/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.472874876 seconds)
    (85/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.411426212 seconds)
    (86/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.619574602 seconds)
    (87/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.490736864 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.032854397 seconds)
    (89/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.443111687 seconds)
    (90/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.396890831 seconds)
    (91/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.41588219 seconds)
    (92/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.070649299 seconds)
    (93/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.397342949 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.779155054 seconds)
    (95/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.336103467 seconds)
    (96/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.404831795 seconds)
    (97/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.398603761 seconds)
    (98/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.397480777 seconds)
    (99/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.100578688 seconds)
    (100/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.401617034 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.398591856 seconds)
    (102/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.401402235 seconds)
    (103/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.397174115 seconds)
    (104/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.476371409 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.412435225 seconds)
    (106/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.478767232 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.406484019 seconds)
    (108/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 19.101428392 seconds)
    (109/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.426088757 seconds)
    (110/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.400135297 seconds)
    (111/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.401832348 seconds)
    (112/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.40131579 seconds)
    (113/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.398717951 seconds)
    (114/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.7786552 seconds)
    (115/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.406719304 seconds)
    (116/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.397290483 seconds)
    (117/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.520777409 seconds)
    (118/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 23.690982154 seconds)
  done (took 481.61801158 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.513474886 seconds)
  (4/4) benchmarking "factorization"...
    (1/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.440679259 seconds)
    (2/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.542557109 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.5107232 seconds)
    (4/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.747948263 seconds)
    (5/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.418478506 seconds)
    (6/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.527229926 seconds)
    (7/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.405669508 seconds)
    (8/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.415791084 seconds)
    (9/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.286726796 seconds)
    (10/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.427686883 seconds)
    (11/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.401195032 seconds)
    (12/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.131053256 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.472708283 seconds)
    (14/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.52404016 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.497122228 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.454875552 seconds)
    (17/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.414479985 seconds)
    (18/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.502075995 seconds)
    (19/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.534045493 seconds)
    (20/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.415491792 seconds)
    (21/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.440738493 seconds)
    (22/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.409408388 seconds)
    (23/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.404645115 seconds)
    (24/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.407762194 seconds)
    (25/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.9945298 seconds)
    (26/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.116031952 seconds)
    (27/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.364750797 seconds)
    (28/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.411631327 seconds)
    (29/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.404912667 seconds)
    (30/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.429836158 seconds)
    (31/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.563220133 seconds)
    (32/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.476221778 seconds)
  done (took 219.893393746 seconds)
done (took 903.452544951 seconds)
(20/23) benchmarking "tuple"...
  (1/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.41002611 seconds)
    (2/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.415178268 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.409743422 seconds)
    (4/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.418522567 seconds)
    (5/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.407701119 seconds)
    (6/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.403841673 seconds)
    (7/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.404609758 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.40539077 seconds)
  done (took 21.677288891 seconds)
  (2/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.435864127 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.852560617 seconds)
  done (took 7.690599226 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.410424644 seconds)
    (2/24) benchmarking ("sum", "(4,)")...
    done (took 2.407518154 seconds)
    (3/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.409059146 seconds)
    (4/24) benchmarking ("minimum", "(8,)")...
    done (took 2.409242638 seconds)
    (5/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.411564741 seconds)
    (6/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.408197129 seconds)
    (7/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.407681278 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.407218852 seconds)
    (9/24) benchmarking ("minimum", "(2,)")...
    done (took 2.407771058 seconds)
    (10/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.408840986 seconds)
    (11/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.411739743 seconds)
    (12/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.410025171 seconds)
    (13/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.414016459 seconds)
    (14/24) benchmarking ("minimum", "(16,)")...
    done (took 2.408960204 seconds)
    (15/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.407064338 seconds)
    (16/24) benchmarking ("sum", "(8,)")...
    done (took 2.410226852 seconds)
    (17/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.40818946 seconds)
    (18/24) benchmarking ("sum", "(2,)")...
    done (took 2.406540832 seconds)
    (19/24) benchmarking ("minimum", "(4,)")...
    done (took 2.408267215 seconds)
    (20/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.410579829 seconds)
    (21/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.408792235 seconds)
    (22/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.407429261 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.407768409 seconds)
    (24/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.408319971 seconds)
  done (took 60.233019343 seconds)
  (4/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.410153396 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.408733011 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.411494506 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.406986195 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.41039052 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.407293201 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.406884094 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.40829706 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.407397482 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.407885026 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.408646781 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.412057204 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.408313638 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.40813579 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.409561535 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.409643033 seconds)
  done (took 40.941664388 seconds)
done (took 132.942659929 seconds)
(21/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.595767007 seconds)
    (2/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.546249316 seconds)
    (3/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.832710851 seconds)
    (4/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.043415682 seconds)
    (5/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.598838136 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.582242806 seconds)
    (7/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.537625242 seconds)
    (8/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.574343055 seconds)
    (9/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.68126529 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.529814361 seconds)
    (11/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.55515489 seconds)
    (12/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.578851087 seconds)
    (13/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.895765832 seconds)
    (14/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.363310781 seconds)
    (15/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.552807126 seconds)
    (16/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.539292966 seconds)
    (17/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.532433286 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.825615035 seconds)
    (19/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.937311251 seconds)
    (20/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.955559146 seconds)
    (21/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.359368137 seconds)
    (22/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.608423107 seconds)
    (23/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.40022568 seconds)
    (24/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.172880475 seconds)
    (25/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.928870386 seconds)
    (26/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.546104334 seconds)
    (27/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.950092748 seconds)
    (28/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.6796947 seconds)
    (29/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.617491387 seconds)
    (30/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.531186523 seconds)
    (31/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.858617735 seconds)
    (32/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.603214762 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.042021661 seconds)
    (34/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.952310027 seconds)
    (35/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.404523174 seconds)
    (36/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.570651944 seconds)
    (37/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.541840883 seconds)
    (38/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.544387238 seconds)
    (39/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.533928544 seconds)
    (40/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.66591417 seconds)
    (41/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.612531801 seconds)
    (42/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.656875138 seconds)
  done (took 122.444939603 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.4467591 seconds)
    (2/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.524082995 seconds)
    (3/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.490489003 seconds)
    (4/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.445300264 seconds)
    (5/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.461556328 seconds)
    (6/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.485091602 seconds)
    (7/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.494004076 seconds)
    (8/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.545132031 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.508586028 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.531157624 seconds)
    (11/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.937887569 seconds)
    (12/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.525763005 seconds)
    (13/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.52194181 seconds)
    (14/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.481219054 seconds)
    (15/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.937096505 seconds)
    (16/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.476909159 seconds)
    (17/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.491417803 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.924502398 seconds)
    (19/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.470325761 seconds)
    (20/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.512603344 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.452824101 seconds)
    (22/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.517601516 seconds)
    (23/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.517083207 seconds)
    (24/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.941520956 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.441435221 seconds)
    (26/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.531147371 seconds)
  done (took 69.016492265 seconds)
  (3/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.710931934 seconds)
    (2/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.923519552 seconds)
    (3/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.80141355 seconds)
    (4/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.398121636 seconds)
    (5/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.59183966 seconds)
    (6/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.086006395 seconds)
    (7/28) benchmarking ("Set", "String", "filter")...
    done (took 2.69765843 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.477344519 seconds)
    (9/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.646570546 seconds)
    (10/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.562019472 seconds)
    (11/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.678489062 seconds)
    (12/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.474250343 seconds)
    (13/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.465045807 seconds)
    (14/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.52961805 seconds)
    (15/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.601173336 seconds)
    (16/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.914258297 seconds)
    (17/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.933236539 seconds)
    (18/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.604154961 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.703839209 seconds)
    (20/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.513845965 seconds)
    (21/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.546502081 seconds)
    (22/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.51738911 seconds)
    (23/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.647427013 seconds)
    (24/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.630211788 seconds)
    (25/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.766180284 seconds)
    (26/28) benchmarking ("Vector", "Int", "filter")...
    done (took 3.868628802 seconds)
    (27/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.326741168 seconds)
    (28/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.760953197 seconds)
  done (took 83.775832062 seconds)
  (4/6) benchmarking "set operations"...
    (1/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.460602304 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.552280233 seconds)
    (3/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.365040085 seconds)
    (4/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.485891877 seconds)
    (5/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.895114469 seconds)
    (6/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.507214679 seconds)
    (7/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.67871268 seconds)
    (8/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.873906932 seconds)
    (9/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 3.166345125 seconds)
    (10/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.010080628 seconds)
    (11/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.639919017 seconds)
    (12/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.479813008 seconds)
    (13/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.438242403 seconds)
    (14/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.584570184 seconds)
    (15/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.51588425 seconds)
    (16/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.226726408 seconds)
    (17/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.19180667 seconds)
    (18/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.760319348 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.564482381 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.32962892 seconds)
    (21/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.695672839 seconds)
    (22/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.54555102 seconds)
    (23/117) benchmarking ("Set", "Int", "union")...
    done (took 2.562600475 seconds)
    (24/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.702635619 seconds)
    (25/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.529015908 seconds)
    (26/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.794499524 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 3.87555655 seconds)
    (28/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 3.260441983 seconds)
    (29/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.068059206 seconds)
    (30/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.539303137 seconds)
    (31/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.446276015 seconds)
    (32/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.591710469 seconds)
    (33/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.051125223 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.747835928 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.366314499 seconds)
    (36/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.667154462 seconds)
    (37/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.467683413 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.540212655 seconds)
    (39/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.546673567 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.508695619 seconds)
    (41/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.618832192 seconds)
    (42/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.518423694 seconds)
    (43/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.813110425 seconds)
    (44/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.377658979 seconds)
    (45/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.891394749 seconds)
    (46/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.595057076 seconds)
    (47/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.649926742 seconds)
    (48/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.259880324 seconds)
    (49/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.722392076 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.524334589 seconds)
    (51/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.494696404 seconds)
    (52/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.414997774 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.569659694 seconds)
    (54/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.522641701 seconds)
    (55/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.686580868 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.472758772 seconds)
    (57/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.66106004 seconds)
    (58/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.568965101 seconds)
    (59/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.59236938 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.601352429 seconds)
    (61/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.933731521 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.192103541 seconds)
    (63/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.888848614 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.657962388 seconds)
    (65/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.290566965 seconds)
    (66/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.117792642 seconds)
    (67/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.603701524 seconds)
    (68/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.259100017 seconds)
    (69/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.103087929 seconds)
    (70/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.514380552 seconds)
    (71/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.47759666 seconds)
    (72/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.67653531 seconds)
    (73/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.70617685 seconds)
    (74/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.465131223 seconds)
    (75/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.630260764 seconds)
    (76/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.176139895 seconds)
    (77/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.463863436 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.556244629 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.053331804 seconds)
    (80/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.332715496 seconds)
    (81/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.72731823 seconds)
    (82/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 3.909528206 seconds)
    (83/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.307210532 seconds)
    (84/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.985478503 seconds)
    (85/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.588235404 seconds)
    (86/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.931453831 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.599116305 seconds)
    (88/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.580002565 seconds)
    (89/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.521141847 seconds)
    (90/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.60360806 seconds)
    (91/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.748317123 seconds)
    (92/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.555299258 seconds)
    (93/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.906288325 seconds)
    (94/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.537040388 seconds)
    (95/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.518807902 seconds)
    (96/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.549267939 seconds)
    (97/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.527029706 seconds)
    (98/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.562302799 seconds)
    (99/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.704912072 seconds)
    (100/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.507094523 seconds)
    (101/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.597775674 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.301295011 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.012265377 seconds)
    (104/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.721894598 seconds)
    (105/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.915331704 seconds)
    (106/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.479693484 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.517902365 seconds)
    (108/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.496037784 seconds)
    (109/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.642612728 seconds)
    (110/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.725880656 seconds)
    (111/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.705541525 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.745565473 seconds)
    (113/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.942158749 seconds)
    (114/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.685870548 seconds)
    (115/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.448239196 seconds)
    (116/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 3.886368237 seconds)
    (117/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 4.327442089 seconds)
  done (took 345.326860604 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.466336095 seconds)
    (2/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.87384414 seconds)
    (3/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.775205312 seconds)
    (4/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.480683034 seconds)
    (5/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.481275285 seconds)
    (6/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.440682933 seconds)
    (7/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.614098591 seconds)
    (8/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.477601139 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.534304512 seconds)
    (10/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.474330717 seconds)
    (11/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.703035191 seconds)
    (12/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.769109211 seconds)
    (13/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.926719291 seconds)
    (14/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.557671888 seconds)
    (15/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.526152197 seconds)
    (16/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.553897404 seconds)
    (17/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.674317469 seconds)
    (18/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.682632703 seconds)
    (19/105) benchmarking ("Set", "Int", "length")...
    done (took 2.434333788 seconds)
    (20/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.468123468 seconds)
    (21/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.608475343 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.528495597 seconds)
    (23/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.437313035 seconds)
    (24/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.713724607 seconds)
    (25/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.600179794 seconds)
    (26/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.732792823 seconds)
    (27/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.446169353 seconds)
    (28/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.48754002 seconds)
    (29/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.464818429 seconds)
    (30/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.482359716 seconds)
    (31/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.817603644 seconds)
    (32/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.554873823 seconds)
    (33/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.799355863 seconds)
    (34/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.838383192 seconds)
    (35/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.499856575 seconds)
    (36/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.556103091 seconds)
    (37/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.702719907 seconds)
    (38/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.498399888 seconds)
    (39/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.531647784 seconds)
    (40/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.90678767 seconds)
    (41/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.456806322 seconds)
    (42/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.454214225 seconds)
    (43/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.905048701 seconds)
    (44/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.476696331 seconds)
    (45/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.562917775 seconds)
    (46/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.444945072 seconds)
    (47/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.259041852 seconds)
    (48/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.540019565 seconds)
    (49/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.649870721 seconds)
    (50/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.636872001 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.473070737 seconds)
    (52/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.604763196 seconds)
    (53/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.478969097 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.649739119 seconds)
    (55/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.455281904 seconds)
    (56/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.942054663 seconds)
    (57/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.631943862 seconds)
    (58/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.776404983 seconds)
    (59/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.467821203 seconds)
    (60/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.543895648 seconds)
    (61/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.605513362 seconds)
    (62/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.403290824 seconds)
    (63/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.969991492 seconds)
    (64/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.711876562 seconds)
    (65/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.650720298 seconds)
    (66/105) benchmarking ("Set", "Int", "first")...
    done (took 2.479690064 seconds)
    (67/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.465448852 seconds)
    (68/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.46916896 seconds)
    (69/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.539747361 seconds)
    (70/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.447889114 seconds)
    (71/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.623757182 seconds)
    (72/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.442555346 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.140410859 seconds)
    (74/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.96708696 seconds)
    (75/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.873560898 seconds)
    (76/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.807356189 seconds)
    (77/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.701326259 seconds)
    (78/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.783720442 seconds)
    (79/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.471889034 seconds)
    (80/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.792177566 seconds)
    (81/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.456372203 seconds)
    (82/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.865525131 seconds)
    (83/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.208072631 seconds)
    (84/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.820067423 seconds)
    (85/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.890865708 seconds)
    (86/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.64401282 seconds)
    (87/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.50276742 seconds)
    (88/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.083362544 seconds)
    (89/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.525109322 seconds)
    (90/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.718469228 seconds)
    (91/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.43522474 seconds)
    (92/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.645038062 seconds)
    (93/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.439542234 seconds)
    (94/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.460869522 seconds)
    (95/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.435098598 seconds)
    (96/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.635337256 seconds)
    (97/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.526105416 seconds)
    (98/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.826639462 seconds)
    (99/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.617363605 seconds)
    (100/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.475122576 seconds)
    (101/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.515507716 seconds)
    (102/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.754377842 seconds)
    (103/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.518470037 seconds)
    (104/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.792266006 seconds)
    (105/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.738512845 seconds)
  done (took 287.820071884 seconds)
  (6/6) benchmarking "optimizations"...
    (1/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.406310923 seconds)
    (2/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.63158268 seconds)
    (3/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.417541407 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.406473939 seconds)
    (5/27) benchmarking ("BitSet", "Int8")...
    done (took 4.111243576 seconds)
    (6/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.402335877 seconds)
    (7/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.401440163 seconds)
    (8/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.403488214 seconds)
    (9/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.32242239 seconds)
    (10/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.500562191 seconds)
    (11/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.409350437 seconds)
    (12/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.560735632 seconds)
    (13/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.543005395 seconds)
    (14/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.467059198 seconds)
    (15/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.407821132 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.40274088 seconds)
    (17/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.406481077 seconds)
    (18/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.401606516 seconds)
    (19/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.402519095 seconds)
    (20/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.406928531 seconds)
    (21/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.403267091 seconds)
    (22/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.418453081 seconds)
    (23/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.564530852 seconds)
    (24/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.405183064 seconds)
    (25/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.058940225 seconds)
    (26/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.909358364 seconds)
    (27/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.418983715 seconds)
  done (took 183.993467132 seconds)
done (took 1094.774385816 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "optimization"...
    (1/12) benchmarking "many_const_calls"...
    done (took 34.305125264 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 37.825283065 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 34.184327614 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 35.205430823 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 34.614269171 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 33.617399726 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 33.539748151 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 36.500331613 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 33.757171671 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 35.774254898 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 42.392471505 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 34.590714239 seconds)
  done (took 428.708526941 seconds)
  (2/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "many_const_calls"...
    done (took 39.531002096 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 38.100480156 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 36.706931727 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 36.502679845 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 37.100673591 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 36.759931161 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 36.498399387 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 38.321610694 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 36.523668491 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 37.21576027 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 36.904725503 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 36.689294373 seconds)
  done (took 450.535594414 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "many_const_calls"...
    done (took 35.508233732 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.492594572 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 39.780295377 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 35.695435712 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.119473857 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 36.876205794 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 39.133935382 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 36.418406751 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 39.366452489 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 35.787457202 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 43.464269231 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 36.823968952 seconds)
  done (took 457.88735085 seconds)
done (took 1339.531028956 seconds)
(23/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 10.366155492 seconds)
done (took 15.771777174 seconds)
SAVING RESULT...
DONE!
