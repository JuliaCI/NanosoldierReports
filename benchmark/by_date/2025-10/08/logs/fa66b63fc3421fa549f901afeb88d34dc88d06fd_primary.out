cset: moving following pidspec: 3752384
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "find"... done (took 2.574291254 seconds)
loading group "problem"... done (took 1.558920078 seconds)
loading group "io"... done (took 1.51034539 seconds)
loading group "simd"... done (took 1.115971673 seconds)
loading group "sparse"... done (took 0.549719706 seconds)
loading group "micro"... done (took 0.046086808 seconds)
loading group "parallel"... done (took 0.019660773 seconds)
loading group "dates"... done (took 0.185618378 seconds)
loading group "scalar"... done (took 1.181690305 seconds)
loading group "misc"... done (took 0.406209218 seconds)
loading group "union"... done (took 2.825648477 seconds)
loading group "alloc"... done (took 0.015970854 seconds)
loading group "random"... done (took 2.124292101 seconds)
loading group "shootout"... done (took 0.596532649 seconds)
loading group "broadcast"... done (took 0.621926322 seconds)
loading group "sort"... done (took 0.300391431 seconds)
loading group "array"... done (took 2.252074661 seconds)
loading group "string"... done (took 0.199375216 seconds)
loading group "linalg"... done (took 2.607129256 seconds)
loading group "tuple"... done (took 0.569666832 seconds)
loading group "collection"... done (took 5.441856633 seconds)
loading group "inference"... done (took 2.597547772 seconds)
loading group "frontend"... done (took 0.003605034 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.091379107 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 0.037264614 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.03954612 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.457e-5 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039721624 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.053469773 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.04068384 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052478014 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040103015 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 1.7652e-5 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039082369 seconds)
  done (took 1.150971516 seconds)
  (2/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.085161897 seconds)
    (2/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.193e-5 seconds)
    (3/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.085779579 seconds)
    (4/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.050374103 seconds)
    (5/41) benchmarking ("BitVector", "10-90")...
    done (took 0.018955828 seconds)
    (6/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.3441e-5 seconds)
    (7/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.083547798 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.4361e-5 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082368364 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086646712 seconds)
    (11/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086556058 seconds)
    (12/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.081827405 seconds)
    (13/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.088798598 seconds)
    (14/41) benchmarking ("BitVector", "50-50")...
    done (took 1.928e-5 seconds)
    (15/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081514371 seconds)
    (16/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.7132e-5 seconds)
    (17/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.4292e-5 seconds)
    (18/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 9.836e-6 seconds)
    (19/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.080981201 seconds)
    (20/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.5823e-5 seconds)
    (21/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080127228 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.4146e-5 seconds)
    (23/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 7.677e-6 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.299e-5 seconds)
    (25/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.0308e-5 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 8.989e-6 seconds)
    (27/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080460358 seconds)
    (28/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.3387e-5 seconds)
    (29/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.3457e-5 seconds)
    (30/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.4734e-5 seconds)
    (31/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.1557e-5 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 9.35e-6 seconds)
    (33/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080533041 seconds)
    (34/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.5535e-5 seconds)
    (35/41) benchmarking ("BitVector", "90-10")...
    done (took 1.1385e-5 seconds)
    (36/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.1923e-5 seconds)
    (37/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.0145e-5 seconds)
    (38/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081362669 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.1908e-5 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 7.168e-6 seconds)
    (41/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.012e-5 seconds)
  done (took 1.922672258 seconds)
  (3/3) benchmarking "findprev"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029891738 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 0.026752259 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039331145 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.7362e-5 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039992698 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.050347489 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039650731 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.050024088 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039650522 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.2269e-5 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039511173 seconds)
  done (took 1.049949769 seconds)
done (took 4.879711956 seconds)
(2/23) benchmarking "problem"...
  (1/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.25143941 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.206423146 seconds)
  done (took 1.146498081 seconds)
  (2/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.264718621 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.220999673 seconds)
  done (took 1.182110166 seconds)
  (3/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.239763446 seconds)
  done (took 0.938629343 seconds)
  (4/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.062763679 seconds)
  done (took 1.766562974 seconds)
  (5/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.3208483 seconds)
  done (took 1.031201399 seconds)
  (6/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.364675378 seconds)
  done (took 2.070375863 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.676627794 seconds)
  done (took 1.385388118 seconds)
  (8/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.675160361 seconds)
    (2/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.089584316 seconds)
    (3/4) benchmarking "laplace_iter_devec"...
    done (took 0.149526756 seconds)
    (4/4) benchmarking "laplace_iter_sub"...
    done (took 1.136371 seconds)
  done (took 3.765898518 seconds)
  (9/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.781593862 seconds)
  done (took 5.501656369 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.428589338 seconds)
  done (took 1.150535516 seconds)
  (11/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.952163631 seconds)
  done (took 1.678138634 seconds)
  (12/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049648367 seconds)
  done (took 0.773338657 seconds)
  (13/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.935533501 seconds)
  done (took 1.662248128 seconds)
  (14/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.525343474 seconds)
  done (took 2.276914316 seconds)
done (took 27.021638813 seconds)
(3/23) benchmarking "io"...
  (1/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.831188237 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.889517425 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.735727561 seconds)
  done (took 4.184195034 seconds)
  (2/4) benchmarking "read"...
    (1/2) benchmarking "read"...
    done (took 0.033116011 seconds)
    (2/2) benchmarking "readstring"...
    done (took 0.02187192 seconds)
  done (took 0.812960219 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.873524182 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.133630903 seconds)
    (3/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.020843779 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.036422727 seconds)
  done (took 1.798714882 seconds)
  (4/4) benchmarking "skipchars"...
  done (took 0.244535329 seconds)
done (took 7.791287001 seconds)
(4/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.197483855 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.088414634 seconds)
  (3/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.043490879 seconds)
  (4/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 0.082101086 seconds)
  (5/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.046091485 seconds)
  (6/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.104093579 seconds)
  (7/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.063037676 seconds)
  (8/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.093719271 seconds)
  (9/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 0.074595824 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.023749528 seconds)
  (11/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 0.05148428 seconds)
  (12/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031503884 seconds)
  (13/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 0.082009038 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.055171758 seconds)
  (15/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.084043953 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.078432689 seconds)
  (17/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.062058153 seconds)
  (18/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.03129381 seconds)
  (19/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.057763119 seconds)
  (20/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.050308682 seconds)
  (21/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.063679419 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.060168973 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.063334498 seconds)
  (24/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.023993914 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.052079169 seconds)
  (26/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.060330354 seconds)
  (27/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.1121e-5 seconds)
  (28/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.071273389 seconds)
  (29/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.080488475 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 0.070522296 seconds)
  (31/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.069260099 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.060733358 seconds)
  (33/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.040065017 seconds)
  (34/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.056349257 seconds)
  (35/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032600212 seconds)
  (36/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.030568414 seconds)
  (37/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 0.071414363 seconds)
  (38/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.071472149 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.079332722 seconds)
  (40/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.027669964 seconds)
  (41/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 3.0633e-5 seconds)
  (42/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.057298454 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.06249125 seconds)
  (44/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.045602792 seconds)
  (45/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 0.065802172 seconds)
  (46/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.056676838 seconds)
  (47/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.075795766 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.046358362 seconds)
  (49/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.6522e-5 seconds)
  (50/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.055153751 seconds)
  (51/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 0.072789111 seconds)
  (52/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.080344067 seconds)
  (53/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.0524e-5 seconds)
  (54/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.1858e-5 seconds)
  (55/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 0.058304931 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.049481374 seconds)
  (57/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 3.2593e-5 seconds)
  (58/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.066153228 seconds)
  (59/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.1853e-5 seconds)
  (60/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.048751512 seconds)
  (61/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 0.074672151 seconds)
  (62/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.05427376 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.073004771 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.068053785 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.03171688 seconds)
  (66/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.068853845 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.8084e-5 seconds)
  (68/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.06595309 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.2258e-5 seconds)
  (70/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.040552105 seconds)
  (71/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 3.3852e-5 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.055360733 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.038895846 seconds)
  (74/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.6751e-5 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 0.066908477 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 0.069718854 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.06591435 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.073913755 seconds)
  (79/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.027988708 seconds)
  (80/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.077817081 seconds)
  (81/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.040325123 seconds)
  (82/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.4579e-5 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 4.3214e-5 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.06911946 seconds)
  (85/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.4416e-5 seconds)
  (86/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.03150959 seconds)
  (87/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.053473956 seconds)
  (88/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.060877309 seconds)
  (89/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.4582e-5 seconds)
  (90/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 3.3704e-5 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.058157127 seconds)
  (92/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.055543034 seconds)
  (93/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.057619493 seconds)
  (94/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.06405821 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.073235103 seconds)
  (96/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.0258e-5 seconds)
  (97/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.034696849 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.6033e-5 seconds)
  (99/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.073242723 seconds)
  (100/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031366629 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.061739453 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.047885022 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.070939836 seconds)
  (104/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.071104686 seconds)
  (105/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.029719903 seconds)
  (106/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.032040572 seconds)
  (107/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.7228e-5 seconds)
  (108/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 0.045228876 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.039648599 seconds)
  (110/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 4.0717e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.05954425 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.06658905 seconds)
  (113/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.046540119 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.039557215 seconds)
  (115/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.9238e-5 seconds)
  (116/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 3.281e-5 seconds)
  (117/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.9401e-5 seconds)
  (118/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.977e-5 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 0.071175456 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 0.066700961 seconds)
  (121/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.032430008 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 4.4471e-5 seconds)
  (123/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 0.05778319 seconds)
  (124/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 3.5326e-5 seconds)
  (125/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.8906e-5 seconds)
  (126/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.067997878 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.062058046 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.9058e-5 seconds)
  (129/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 0.047157062 seconds)
  (130/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 0.028192237 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.608e-5 seconds)
  (132/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.028895795 seconds)
  (133/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.040150546 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.076730419 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.076273975 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 3.238e-5 seconds)
  (137/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.049662881 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.2531e-5 seconds)
  (139/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.2472e-5 seconds)
  (140/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.04874286 seconds)
  (141/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 3.5265e-5 seconds)
  (142/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.4286e-5 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.6722e-5 seconds)
  (144/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.068861639 seconds)
  (145/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.038677214 seconds)
  (146/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 0.046077508 seconds)
  (147/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.058957175 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.064112915 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.8392e-5 seconds)
  (150/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.047345337 seconds)
  (151/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 3.5538e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.062960986 seconds)
  (153/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.06729037 seconds)
  (154/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 3.3794e-5 seconds)
  (155/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.3436e-5 seconds)
  (156/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.7977e-5 seconds)
  (157/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.049798043 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.5413e-5 seconds)
  (159/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.06727181 seconds)
  (160/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 0.067090594 seconds)
  (161/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.5697e-5 seconds)
  (162/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.8585e-5 seconds)
  (163/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.073373511 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 0.076103922 seconds)
  (165/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 5.7205e-5 seconds)
  (166/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.06446621 seconds)
  (167/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 3.8464e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 0.054317621 seconds)
  (169/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.04771353 seconds)
  (170/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.057922583 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 9.9795e-5 seconds)
  (172/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.2124e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.2225e-5 seconds)
  (174/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.8922e-5 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.9544e-5 seconds)
  (176/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.062257464 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.1077e-5 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.072986776 seconds)
  (179/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.7677e-5 seconds)
  (180/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.1366e-5 seconds)
  (181/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.028525294 seconds)
  (182/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.8013e-5 seconds)
  (183/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.06370129 seconds)
  (184/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.032166102 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 4.0628e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 0.067266431 seconds)
  (187/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.031720272 seconds)
  (188/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.8607e-5 seconds)
  (189/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 3.9621e-5 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.1733e-5 seconds)
  (191/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.6562e-5 seconds)
  (192/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.057224802 seconds)
  (193/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.029434787 seconds)
  (194/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 3.0395e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.4326e-5 seconds)
  (196/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 3.407e-5 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.9982e-5 seconds)
  (198/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 9.762e-6 seconds)
  (199/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.070902743 seconds)
  (200/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.633e-5 seconds)
  (201/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.3227e-5 seconds)
  (202/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.4712e-5 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.7196e-5 seconds)
  (204/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.03638672 seconds)
  (205/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.5506e-5 seconds)
  (206/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.6725e-5 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.045447492 seconds)
  (208/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.080205124 seconds)
  (209/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.063067806 seconds)
  (210/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.8309e-5 seconds)
  (211/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 5.3866e-5 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.4167e-5 seconds)
  (213/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.8854e-5 seconds)
  (214/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.040404252 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 4.3606e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 0.03122826 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 3.9989e-5 seconds)
  (218/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.798e-5 seconds)
  (219/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.054917966 seconds)
  (220/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.048816427 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 1.9423e-5 seconds)
  (222/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.12e-5 seconds)
  (223/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.414e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.0024e-5 seconds)
  (225/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.2898e-5 seconds)
  (226/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.080676845 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.039493707 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.068662248 seconds)
  (229/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.9832e-5 seconds)
  (230/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.4591e-5 seconds)
  (231/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.0397e-5 seconds)
  (232/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.6723e-5 seconds)
  (233/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.0483e-5 seconds)
  (234/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.7574e-5 seconds)
  (235/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.967e-5 seconds)
  (236/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.6111e-5 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.03602069 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.060585788 seconds)
  (239/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.3107e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.1365e-5 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.1563e-5 seconds)
  (242/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.169e-5 seconds)
  (243/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.7541e-5 seconds)
  (244/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 0.060896965 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.049428092 seconds)
  (246/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 3.5076e-5 seconds)
  (247/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.0327e-5 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.0329e-5 seconds)
  (249/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.7756e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.067581313 seconds)
  (251/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 7.3051e-5 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 3.39e-5 seconds)
  (253/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.7305e-5 seconds)
  (254/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.057932411 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.066695759 seconds)
  (256/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.5649e-5 seconds)
  (257/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.6746e-5 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.6168e-5 seconds)
  (259/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.6036e-5 seconds)
  (260/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.066259913 seconds)
  (261/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.7825e-5 seconds)
  (262/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.6877e-5 seconds)
  (263/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 0.035028464 seconds)
  (264/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.9179e-5 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.063492138 seconds)
  (266/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.2209e-5 seconds)
  (267/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.6752e-5 seconds)
  (268/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.063903123 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 4.7305e-5 seconds)
  (270/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.7521e-5 seconds)
  (271/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.8689e-5 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.829e-5 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.4306e-5 seconds)
  (274/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.1465e-5 seconds)
  (275/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.9917e-5 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.7816e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.1832e-5 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 3.1384e-5 seconds)
  (279/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.073530159 seconds)
  (280/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 7.7224e-5 seconds)
  (281/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.071256142 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 4.1761e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.9129e-5 seconds)
  (284/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.0109005 seconds)
  (285/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 3.4043e-5 seconds)
  (286/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.3552e-5 seconds)
  (287/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.7488e-5 seconds)
  (288/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.054253601 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.8309e-5 seconds)
  (290/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.055232589 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.070756286 seconds)
  (292/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.8329e-5 seconds)
  (293/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.1066e-5 seconds)
  (294/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.3879e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.060416033 seconds)
  (296/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.3652e-5 seconds)
  (297/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.1233e-5 seconds)
  (298/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.116296241 seconds)
  (299/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.8449e-5 seconds)
  (300/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.8722e-5 seconds)
  (301/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.2819e-5 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.063872481 seconds)
  (303/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 4.4118e-5 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.2257e-5 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.7666e-5 seconds)
  (306/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.028267233 seconds)
  (307/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 4.313e-5 seconds)
  (308/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.2298e-5 seconds)
  (309/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.1058e-5 seconds)
  (310/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.9162e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 3.063e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.629e-5 seconds)
  (313/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.8394e-5 seconds)
  (314/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.5854e-5 seconds)
  (315/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.5058e-5 seconds)
  (316/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 0.031667885 seconds)
  (317/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 3.1327e-5 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.060444015 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.1463e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 0.039492117 seconds)
  (321/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.050566816 seconds)
  (322/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.6622e-5 seconds)
  (323/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.0968e-5 seconds)
  (324/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.8921e-5 seconds)
  (325/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.9149e-5 seconds)
  (326/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.5739e-5 seconds)
  (327/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.071536592 seconds)
  (328/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 5.7811e-5 seconds)
  (329/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.4131e-5 seconds)
  (330/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.7137e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.9465e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.050990079 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 3.6156e-5 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.0378e-5 seconds)
  (335/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.2328e-5 seconds)
  (336/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 3.8377e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.7339e-5 seconds)
  (338/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.6896e-5 seconds)
  (339/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.8297e-5 seconds)
  (340/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.0704e-5 seconds)
  (341/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.9402e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.2478e-5 seconds)
  (343/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.5765e-5 seconds)
  (344/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.0632e-5 seconds)
  (345/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.6345e-5 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.175e-5 seconds)
  (347/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.4784e-5 seconds)
  (348/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.3836e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.1458e-5 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.4779e-5 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.4839e-5 seconds)
  (352/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.010991281 seconds)
  (353/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 5.3825e-5 seconds)
  (354/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 3.2732e-5 seconds)
  (355/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.7701e-5 seconds)
  (356/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.8896e-5 seconds)
  (357/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.0799e-5 seconds)
  (358/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.5005e-5 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 3.0905e-5 seconds)
  (360/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.3208e-5 seconds)
  (361/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.36e-5 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.9641e-5 seconds)
  (363/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.6839e-5 seconds)
  (364/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.8759e-5 seconds)
  (365/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.4107e-5 seconds)
  (366/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 6.1144e-5 seconds)
  (367/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.3262e-5 seconds)
  (368/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.121e-5 seconds)
  (369/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 3.962e-5 seconds)
  (370/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.0846e-5 seconds)
  (371/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.031008558 seconds)
  (372/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.028704295 seconds)
  (373/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.9442e-5 seconds)
  (374/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.9407e-5 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.4905e-5 seconds)
  (376/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.2128e-5 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.0623268 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.8867e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.8264e-5 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.5783e-5 seconds)
  (381/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.0627e-5 seconds)
  (382/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.8684e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.8044e-5 seconds)
  (384/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.9346e-5 seconds)
  (385/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.6812e-5 seconds)
  (386/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.5297e-5 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 3.133e-5 seconds)
  (388/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 9.105e-6 seconds)
  (389/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.7995e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.9161e-5 seconds)
  (391/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.292e-5 seconds)
  (392/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.6985e-5 seconds)
  (393/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.7295e-5 seconds)
  (394/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.5224e-5 seconds)
  (395/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.3462e-5 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.3898e-5 seconds)
  (397/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.2334e-5 seconds)
  (398/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.4027e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.2194e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.8867e-5 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.4882e-5 seconds)
  (402/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.2148e-5 seconds)
  (403/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.1596e-5 seconds)
  (404/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.6561e-5 seconds)
  (405/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.5081e-5 seconds)
  (406/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.1163e-5 seconds)
  (407/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.03685796 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 3.099e-5 seconds)
  (409/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.6476e-5 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.4503e-5 seconds)
  (411/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.9498e-5 seconds)
  (412/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.799e-5 seconds)
  (413/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.4087e-5 seconds)
  (414/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.8042e-5 seconds)
  (415/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.3659e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.4833e-5 seconds)
  (417/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.6833e-5 seconds)
  (418/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.354e-5 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.3545e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 3.6794e-5 seconds)
  (421/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 3.8903e-5 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.8113e-5 seconds)
  (423/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.3039e-5 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.077908394 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.8166e-5 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.3364e-5 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.1979e-5 seconds)
  (428/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.7452e-5 seconds)
  (429/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.8321e-5 seconds)
  (430/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.1435e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.7409e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.5897e-5 seconds)
  (433/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.028051234 seconds)
  (434/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 5.6728e-5 seconds)
  (435/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.7081e-5 seconds)
  (436/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.8608e-5 seconds)
  (437/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.5192e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.7133e-5 seconds)
  (439/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.8098e-5 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 1.8504e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.03580429 seconds)
  (442/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.9604e-5 seconds)
  (443/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 3.8156e-5 seconds)
  (444/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.1713e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.0579e-5 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 3.9552e-5 seconds)
  (447/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.3217e-5 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.6011e-5 seconds)
  (449/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.06127428 seconds)
  (450/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.1751e-5 seconds)
  (451/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 3.0547e-5 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.5607e-5 seconds)
  (453/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.5691e-5 seconds)
  (454/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.7157e-5 seconds)
  (455/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.0683e-5 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.9331e-5 seconds)
  (457/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.8229e-5 seconds)
  (458/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.8998e-5 seconds)
  (459/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.6484e-5 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 0.067466756 seconds)
  (461/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 3.1878e-5 seconds)
  (462/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.2328e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.0125e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.894e-5 seconds)
  (465/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.7297e-5 seconds)
  (466/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.9146e-5 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 3.0946e-5 seconds)
  (468/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.9752e-5 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.984e-5 seconds)
  (470/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.1071e-5 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.1429e-5 seconds)
  (472/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.8593e-5 seconds)
  (473/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.6454e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 1.9702e-5 seconds)
  (475/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.296e-5 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.5402e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.4181e-5 seconds)
  (478/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.4522e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.2181e-5 seconds)
  (480/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.5247e-5 seconds)
  (481/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.6248e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.3388e-5 seconds)
  (483/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.9296e-5 seconds)
  (484/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.011022789 seconds)
  (485/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.9511e-5 seconds)
  (486/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.0126e-5 seconds)
  (487/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.8099e-5 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.5535e-5 seconds)
  (489/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.9698e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.683e-5 seconds)
  (491/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.4747e-5 seconds)
  (492/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 3.8277e-5 seconds)
  (493/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.5664e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.4657e-5 seconds)
  (495/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.9209e-5 seconds)
  (496/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.48e-5 seconds)
  (497/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.9166e-5 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.1437e-5 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.6775e-5 seconds)
  (500/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.8e-5 seconds)
  (501/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.6146e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.5314e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.5864e-5 seconds)
  (504/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.8364e-5 seconds)
  (505/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.7555e-5 seconds)
  (506/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 5.198e-5 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.2174e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.7324e-5 seconds)
  (509/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.4261e-5 seconds)
  (510/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.9916e-5 seconds)
  (511/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.4339e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.5497e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.0791e-5 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.4563e-5 seconds)
  (515/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.913e-5 seconds)
  (516/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.9513e-5 seconds)
  (517/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 9.358e-6 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.746e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.3588e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.2396e-5 seconds)
  (521/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.4509e-5 seconds)
  (522/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.029614968 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 3.4609e-5 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.2045e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.0736e-5 seconds)
  (526/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.7331e-5 seconds)
  (527/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.3904e-5 seconds)
  (528/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.7179e-5 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.8916e-5 seconds)
  (530/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.7024e-5 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.1373e-5 seconds)
  (532/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 1.0254e-5 seconds)
  (533/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.6574e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.1636e-5 seconds)
  (535/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.0737e-5 seconds)
  (536/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.7307e-5 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.9565e-5 seconds)
  (538/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.6733e-5 seconds)
  (539/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 5.0838e-5 seconds)
  (540/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.7377e-5 seconds)
  (541/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.0708e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.4397e-5 seconds)
  (543/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.8903e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 0.051849286 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.9395e-5 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.9527e-5 seconds)
  (547/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.3802e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.1894e-5 seconds)
  (549/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.7901e-5 seconds)
  (550/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.7683e-5 seconds)
  (551/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.2145e-5 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.808e-5 seconds)
  (553/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 4.6965e-5 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.1044e-5 seconds)
  (555/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.6679e-5 seconds)
  (556/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.3988e-5 seconds)
  (557/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.0999e-5 seconds)
  (558/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.011553641 seconds)
  (559/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.9087e-5 seconds)
  (560/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 3.315e-5 seconds)
  (561/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.012e-5 seconds)
  (562/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.4605e-5 seconds)
  (563/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.5494e-5 seconds)
  (564/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.1749e-5 seconds)
  (565/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.7154e-5 seconds)
  (566/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.4985e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.7399e-5 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.7833e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.3009e-5 seconds)
  (570/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.4125e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.2305e-5 seconds)
  (572/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.0698e-5 seconds)
  (573/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.7458e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.7793e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.0637e-5 seconds)
  (576/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.8793e-5 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.6679e-5 seconds)
  (578/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.1565e-5 seconds)
  (579/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.7045e-5 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.5815e-5 seconds)
  (581/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.7531e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.7691e-5 seconds)
  (583/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.4867e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.6648e-5 seconds)
  (585/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.0286e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.3448e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.5664e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.408e-5 seconds)
  (589/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.7907e-5 seconds)
  (590/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.3755e-5 seconds)
  (591/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 1.8729e-5 seconds)
  (592/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.0006e-5 seconds)
  (593/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.5847e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.1164e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.6087e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.0803e-5 seconds)
  (597/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.0028e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 3.6179e-5 seconds)
  (599/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.7373e-5 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.2451e-5 seconds)
  (601/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.6593e-5 seconds)
  (602/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.6098e-5 seconds)
  (603/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.6177e-5 seconds)
  (604/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.5697e-5 seconds)
  (605/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 3.3527e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.9341e-5 seconds)
  (607/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.031926384 seconds)
  (608/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.6084e-5 seconds)
  (609/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.2648e-5 seconds)
  (610/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.3407e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.443e-5 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.884e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 5.6217e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.1736e-5 seconds)
  (615/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.7339e-5 seconds)
  (616/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.1829e-5 seconds)
  (617/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 3.5924e-5 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.0021e-5 seconds)
  (619/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.5578e-5 seconds)
  (620/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 1.9515e-5 seconds)
  (621/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.9863e-5 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.2506e-5 seconds)
  (623/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.3047e-5 seconds)
  (624/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.000171207 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.2228e-5 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.5986e-5 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.783e-5 seconds)
  (628/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.359e-5 seconds)
  (629/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.7107e-5 seconds)
  (630/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.3312e-5 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.7173e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 1.3835e-5 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.5854e-5 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 3.6131e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.8089e-5 seconds)
  (636/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.562e-5 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.4856e-5 seconds)
  (638/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.3293e-5 seconds)
  (639/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.4326e-5 seconds)
  (640/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.7661e-5 seconds)
  (641/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.2676e-5 seconds)
  (642/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.9645e-5 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.1272e-5 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.548e-5 seconds)
  (645/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.2007e-5 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.3886e-5 seconds)
  (647/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.759e-5 seconds)
  (648/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.1188e-5 seconds)
  (649/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.616e-5 seconds)
  (650/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.601e-5 seconds)
  (651/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.7382e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.6069e-5 seconds)
  (653/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 8.697e-6 seconds)
  (654/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.2358e-5 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.7051e-5 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.6631e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 1.9767e-5 seconds)
  (658/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.8818e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.9854e-5 seconds)
  (660/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.0692e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.3658e-5 seconds)
  (662/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.1438e-5 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.8262e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.708e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.3584e-5 seconds)
  (666/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.3028e-5 seconds)
  (667/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.4203e-5 seconds)
  (668/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.2474e-5 seconds)
  (669/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.8437e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.4074e-5 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.5082e-5 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.4201e-5 seconds)
  (673/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.5469e-5 seconds)
  (674/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 9.444e-6 seconds)
  (675/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.4926e-5 seconds)
  (676/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.0999e-5 seconds)
  (677/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 1.9605e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.7243e-5 seconds)
  (679/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.8825e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.2074e-5 seconds)
done (took 11.450626349 seconds)
(5/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.537433237 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.470759163 seconds)
  done (took 1.776794775 seconds)
  (2/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.397241942 seconds)
    (2/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.098006572 seconds)
    (3/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.41035357 seconds)
    (4/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.076014497 seconds)
    (5/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.073394751 seconds)
    (6/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.167089065 seconds)
    (7/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000153141 seconds)
    (8/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.084831745 seconds)
    (9/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001348021 seconds)
    (10/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.141625677 seconds)
    (11/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080253437 seconds)
    (12/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.141549142 seconds)
    (13/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.079618956 seconds)
    (14/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.029220748 seconds)
    (15/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.034071976 seconds)
    (16/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.078616008 seconds)
    (17/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000834326 seconds)
    (18/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 9.2919e-5 seconds)
    (19/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000147085 seconds)
    (20/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.034441342 seconds)
    (21/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034657275 seconds)
    (22/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002883499 seconds)
    (23/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031113442 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.042907791 seconds)
    (25/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.004849477 seconds)
    (26/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 8.5405e-5 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000224105 seconds)
    (28/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001614682 seconds)
    (29/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.3026e-5 seconds)
    (30/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.086094937 seconds)
    (31/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 9.4156e-5 seconds)
    (32/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000136707 seconds)
    (33/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003550199 seconds)
    (34/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.027078096 seconds)
    (35/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 8.9941e-5 seconds)
    (36/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002181773 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.02986945 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.076792014 seconds)
    (39/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001608015 seconds)
    (40/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.035348881 seconds)
    (41/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000116098 seconds)
    (42/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.029429895 seconds)
    (43/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000139943 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.034479168 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.1802e-5 seconds)
    (46/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000122079 seconds)
    (47/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000150748 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000211993 seconds)
    (49/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 9.4662e-5 seconds)
    (50/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000129431 seconds)
    (51/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 5.3385e-5 seconds)
    (52/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.7018e-5 seconds)
    (53/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.003234852 seconds)
    (54/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.001749296 seconds)
    (55/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002560986 seconds)
    (56/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.030047964 seconds)
    (57/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.00024318 seconds)
    (58/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.007300847 seconds)
    (59/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002651001 seconds)
    (60/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.000850779 seconds)
    (61/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003480275 seconds)
    (62/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000262092 seconds)
    (63/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001401917 seconds)
    (64/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035363137 seconds)
    (65/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.00145758 seconds)
    (66/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.00021815 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.036043899 seconds)
    (68/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.00303205 seconds)
    (69/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008449764 seconds)
    (70/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 8.7696e-5 seconds)
    (71/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002114151 seconds)
    (72/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 6.099e-5 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.003780687 seconds)
    (74/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.003051308 seconds)
    (75/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 6.2171e-5 seconds)
    (76/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.007066225 seconds)
    (77/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002772224 seconds)
    (78/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.2173e-5 seconds)
    (79/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001736489 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000122862 seconds)
    (81/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000203734 seconds)
    (82/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.001059263 seconds)
    (83/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000110923 seconds)
    (84/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003601416 seconds)
    (85/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.002467501 seconds)
    (86/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 8.5307e-5 seconds)
    (87/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.012705793 seconds)
    (88/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000123658 seconds)
    (89/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.00018685 seconds)
    (90/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001482683 seconds)
    (91/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.012030613 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 5.6874e-5 seconds)
    (93/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.001400904 seconds)
    (94/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.001438827 seconds)
    (95/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002389741 seconds)
    (96/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.003515287 seconds)
    (97/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000130744 seconds)
    (98/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 4.8061e-5 seconds)
    (99/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000112971 seconds)
    (100/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000105077 seconds)
    (101/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.030262329 seconds)
    (102/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000150829 seconds)
    (103/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001334583 seconds)
    (104/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.3764e-5 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 4.8877e-5 seconds)
    (106/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000206035 seconds)
    (107/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.001758028 seconds)
    (108/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.6172e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000247273 seconds)
    (110/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000123869 seconds)
    (111/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001608894 seconds)
    (112/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002323306 seconds)
    (113/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.012768183 seconds)
    (114/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000248993 seconds)
    (115/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.2746e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001731255 seconds)
    (117/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000394941 seconds)
    (118/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.4469e-5 seconds)
    (119/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001456422 seconds)
    (120/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002235703 seconds)
    (121/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002890376 seconds)
    (122/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000116675 seconds)
    (123/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000491121 seconds)
    (124/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 8.1754e-5 seconds)
    (125/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000116947 seconds)
    (126/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.5701e-5 seconds)
    (127/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.3764e-5 seconds)
    (128/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000137597 seconds)
    (129/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000174495 seconds)
    (130/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000239587 seconds)
    (131/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002081046 seconds)
    (132/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.008482831 seconds)
    (133/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000221308 seconds)
    (134/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001912825 seconds)
    (135/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002794708 seconds)
    (136/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000112017 seconds)
    (137/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013061526 seconds)
    (138/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.00413536 seconds)
    (139/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.000107312 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008052709 seconds)
    (141/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.00019002 seconds)
    (142/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000167296 seconds)
    (143/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 7.2764e-5 seconds)
    (144/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 9.5122e-5 seconds)
    (145/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.000612985 seconds)
    (146/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.009542102 seconds)
    (147/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005232015 seconds)
    (148/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001822801 seconds)
    (149/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.001737164 seconds)
    (150/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 9.6968e-5 seconds)
    (151/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004598802 seconds)
    (152/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000282634 seconds)
    (153/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002318883 seconds)
    (154/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.00143713 seconds)
    (155/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 6.7802e-5 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008818594 seconds)
    (157/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.01436948 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000100635 seconds)
    (159/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004175205 seconds)
    (160/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013395053 seconds)
    (161/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 7.3386e-5 seconds)
    (162/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000184045 seconds)
    (163/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000104431 seconds)
    (164/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000131219 seconds)
    (165/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001735868 seconds)
    (166/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 8.1332e-5 seconds)
    (167/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.0547e-5 seconds)
    (168/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005292199 seconds)
    (169/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002036453 seconds)
    (170/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.00871201 seconds)
    (171/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000161371 seconds)
    (172/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.00156333 seconds)
    (173/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.3733e-5 seconds)
    (174/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000469675 seconds)
    (175/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000112574 seconds)
    (176/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.2121e-5 seconds)
    (177/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.002879796 seconds)
    (178/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000113212 seconds)
    (179/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.0006941 seconds)
    (180/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001517148 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000138837 seconds)
    (182/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 5.8171e-5 seconds)
    (183/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 8.5439e-5 seconds)
    (184/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000118554 seconds)
    (185/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.042e-5 seconds)
    (186/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005247549 seconds)
    (187/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.006814608 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002104218 seconds)
    (189/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.00039573 seconds)
    (190/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008167352 seconds)
    (191/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002179732 seconds)
    (192/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.004186951 seconds)
    (193/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.017460217 seconds)
    (194/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003488393 seconds)
    (195/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.002509309 seconds)
    (196/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000783384 seconds)
    (197/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000153412 seconds)
    (198/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001368181 seconds)
    (199/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002366207 seconds)
    (200/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001783882 seconds)
    (201/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.011924353 seconds)
    (202/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 7.4323e-5 seconds)
    (203/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000170593 seconds)
    (204/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000235104 seconds)
    (205/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000134527 seconds)
    (206/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.5996e-5 seconds)
    (207/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000218012 seconds)
    (208/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.2852e-5 seconds)
    (209/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012548857 seconds)
    (210/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000224492 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.7914e-5 seconds)
    (212/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001292398 seconds)
    (213/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 5.6227e-5 seconds)
    (214/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.009487941 seconds)
    (215/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000132856 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 5.9041e-5 seconds)
    (217/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002927046 seconds)
    (218/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000147048 seconds)
    (219/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000214781 seconds)
    (220/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014433355 seconds)
    (221/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002716089 seconds)
    (222/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000176387 seconds)
    (223/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000134758 seconds)
    (224/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.011875197 seconds)
  done (took 3.681182869 seconds)
  (3/7) benchmarking "transpose"...
    (1/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.239700205 seconds)
    (2/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.025242433 seconds)
    (3/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.314011595 seconds)
    (4/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 1.032016721 seconds)
    (5/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000181343 seconds)
    (6/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000197868 seconds)
    (7/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.123964124 seconds)
    (8/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.271952427 seconds)
    (9/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000211804 seconds)
    (10/16) benchmarking ("transpose", "(600, 600)")...
    done (took 9.8469e-5 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.000223658 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.053007407 seconds)
    (13/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.30264298 seconds)
    (14/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.000176374 seconds)
    (15/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.724084347 seconds)
    (16/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.085805157 seconds)
  done (took 3.949798967 seconds)
  (4/7) benchmarking "constructors"...
    (1/18) benchmarking ("IV", 100)...
    done (took 0.228349049 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.128721943 seconds)
    (3/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.2926e-5 seconds)
    (4/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.7999e-5 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 2.57e-5 seconds)
    (6/18) benchmarking ("IJV", 1000)...
    done (took 0.058684963 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 0.157427256 seconds)
    (8/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.112035909 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.116091025 seconds)
    (10/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.2927e-5 seconds)
    (11/18) benchmarking ("Diagonal", 1000)...
    done (took 4.1004e-5 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 1.0058e-5 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 7.365e-6 seconds)
    (14/18) benchmarking ("IV", 10)...
    done (took 1.4365e-5 seconds)
    (15/18) benchmarking ("IJV", 100)...
    done (took 1.1755e-5 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.0418e-5 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 3.1759e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.3718e-5 seconds)
  done (took 1.617043307 seconds)
  (5/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.222633289 seconds)
    (2/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.100195837 seconds)
    (3/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.058829323 seconds)
    (4/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.3808e-5 seconds)
    (5/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.106890919 seconds)
    (6/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.044618919 seconds)
    (7/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.000787131 seconds)
    (8/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.0681856 seconds)
    (9/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000716427 seconds)
    (10/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.4609e-5 seconds)
    (11/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.059528193 seconds)
    (12/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.034661164 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.053183574 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.084290214 seconds)
    (15/54) benchmarking ("spmat", "array", 10)...
    done (took 0.030418333 seconds)
    (16/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.050993268 seconds)
    (17/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.054915228 seconds)
    (18/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.109415175 seconds)
    (19/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.9429e-5 seconds)
    (20/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.002618989 seconds)
    (21/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.0021e-5 seconds)
    (22/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.051822566 seconds)
    (23/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.087869747 seconds)
    (24/54) benchmarking ("spvec", "range", 100000)...
    done (took 3.1457e-5 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 6.0555e-5 seconds)
    (26/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000940772 seconds)
    (27/54) benchmarking ("spmat", "range", 100)...
    done (took 7.28e-5 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.037990988 seconds)
    (29/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.002181614 seconds)
    (30/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.000116266 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 4.1757e-5 seconds)
    (32/54) benchmarking ("spmat", "range", 10)...
    done (took 1.3229e-5 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.067264044 seconds)
    (34/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.2508e-5 seconds)
    (35/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000732812 seconds)
    (36/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 6.1076e-5 seconds)
    (37/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 9.651e-6 seconds)
    (38/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001104067 seconds)
    (39/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.000695227 seconds)
    (40/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.3352e-5 seconds)
    (41/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 4.9063e-5 seconds)
    (42/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 4.1512e-5 seconds)
    (43/54) benchmarking ("spvec", "logical", 1000)...
    done (took 3.7688e-5 seconds)
    (44/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.000725679 seconds)
    (45/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000137431 seconds)
    (46/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.8758e-5 seconds)
    (47/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.1337e-5 seconds)
    (48/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.2276e-5 seconds)
    (49/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 9.629e-6 seconds)
    (50/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001060013 seconds)
    (51/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.4957e-5 seconds)
    (52/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.7287e-5 seconds)
    (53/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.0765e-5 seconds)
    (54/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.9867e-5 seconds)
  done (took 2.151796782 seconds)
  (6/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.059816711 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.180292175 seconds)
  done (took 1.023481096 seconds)
  (7/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (default), vector rhs"...
    done (took 2.468065214 seconds)
    (2/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.226073631 seconds)
    (3/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.41243888 seconds)
    (4/10) benchmarking "square system (default), vector rhs"...
    done (took 0.227867114 seconds)
    (5/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.10903957 seconds)
    (6/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.37847936 seconds)
    (7/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.102143137 seconds)
    (8/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107690013 seconds)
    (9/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.105259881 seconds)
    (10/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.12643205 seconds)
  done (took 5.057932702 seconds)
done (took 20.034016748 seconds)
(6/23) benchmarking "micro"...
  (1/8) benchmarking "mandel"...
  done (took 0.125068058 seconds)
  (2/8) benchmarking "randmatmul"...
  done (took 0.124680002 seconds)
  (3/8) benchmarking "fib"...
  done (took 0.024166547 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.641654046 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.059016418 seconds)
  (6/8) benchmarking "parseint"...
  done (took 0.037955738 seconds)
  (7/8) benchmarking "quicksort"...
  done (took 0.0380678 seconds)
  (8/8) benchmarking "printfd"...
  done (took 0.168685006 seconds)
done (took 2.01541408 seconds)
(7/23) benchmarking "parallel"...
done (took 0.810661647 seconds)
(8/23) benchmarking "dates"...
  (1/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "DateFormat")...
    done (took 0.441819511 seconds)
    (2/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.024911193 seconds)
    (3/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.10494771 seconds)
    (4/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.323877589 seconds)
    (5/9) benchmarking "Date"...
    done (took 0.02112173 seconds)
    (6/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.147876905 seconds)
    (7/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024772545 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024750025 seconds)
    (9/9) benchmarking "DateTime"...
    done (took 0.020928844 seconds)
  done (took 1.964597934 seconds)
  (2/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.024205082 seconds)
    (2/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022967637 seconds)
    (3/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021406517 seconds)
    (4/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021922906 seconds)
    (5/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025142507 seconds)
    (6/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020106026 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022310139 seconds)
    (8/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020284675 seconds)
    (9/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022440608 seconds)
    (10/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.02106365 seconds)
    (11/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019859592 seconds)
    (12/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026255366 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.029731216 seconds)
    (14/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.021318251 seconds)
    (15/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.030567836 seconds)
    (16/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021173928 seconds)
    (17/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019931732 seconds)
    (18/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.020776575 seconds)
  done (took 1.223232646 seconds)
  (3/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.034251785 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029343061 seconds)
  done (took 0.877213294 seconds)
  (4/7) benchmarking "accessor"...
    (1/7) benchmarking "millisecond"...
    done (took 0.020167387 seconds)
    (2/7) benchmarking "month"...
    done (took 0.018645141 seconds)
    (3/7) benchmarking "second"...
    done (took 0.020888442 seconds)
    (4/7) benchmarking "day"...
    done (took 0.019023987 seconds)
    (5/7) benchmarking "year"...
    done (took 0.018770185 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.020681129 seconds)
    (7/7) benchmarking "hour"...
    done (took 0.020713081 seconds)
  done (took 0.94931184 seconds)
  (5/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.124929938 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.019400852 seconds)
  done (took 0.953553348 seconds)
  (6/7) benchmarking "conversion"...
    (1/2) benchmarking "DateTime -> Date"...
    done (took 0.020486274 seconds)
    (2/2) benchmarking "Date -> DateTime"...
    done (took 0.019357458 seconds)
  done (took 0.850504127 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020588887 seconds)
    (2/10) benchmarking ("DateTime", "Month")...
    done (took 0.03635571 seconds)
    (3/10) benchmarking ("Date", "Day")...
    done (took 0.020214636 seconds)
    (4/10) benchmarking ("Date", "Month")...
    done (took 0.032855164 seconds)
    (5/10) benchmarking ("DateTime", "Year")...
    done (took 0.033246935 seconds)
    (6/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020118866 seconds)
    (7/10) benchmarking ("DateTime", "Second")...
    done (took 0.020259275 seconds)
    (8/10) benchmarking ("Date", "Year")...
    done (took 0.029870306 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020546773 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.020618398 seconds)
  done (took 1.065034084 seconds)
done (took 8.683132881 seconds)
(9/23) benchmarking "scalar"...
  (1/25) benchmarking "floatexp"...
    (1/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.023332567 seconds)
    (2/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.1142e-5 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022122194 seconds)
    (4/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.019062792 seconds)
    (5/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.018705038 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018356688 seconds)
    (7/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.2352e-5 seconds)
    (8/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.023671703 seconds)
    (9/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.020760399 seconds)
    (10/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018516247 seconds)
    (11/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020416356 seconds)
    (12/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.2608e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 5.932e-6 seconds)
    (14/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 7.973e-6 seconds)
    (15/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 8.56e-6 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 7.378e-6 seconds)
    (17/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 4.847e-6 seconds)
    (18/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.021741032 seconds)
    (19/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.4361e-5 seconds)
    (20/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 7.582e-6 seconds)
    (21/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 8.892e-6 seconds)
    (22/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 9.355e-6 seconds)
    (23/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 7.818e-6 seconds)
    (24/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 7.151e-6 seconds)
    (25/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 8.916e-6 seconds)
    (26/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.020426398 seconds)
    (27/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.292e-5 seconds)
    (28/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 9.056e-6 seconds)
    (29/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 9.713e-6 seconds)
    (30/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 6.585e-6 seconds)
    (31/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 5.419e-6 seconds)
    (32/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 5.606e-6 seconds)
    (33/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 6.697e-6 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 5.368e-6 seconds)
    (35/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 4.966e-6 seconds)
    (36/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 7.72e-6 seconds)
    (37/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 5.731e-6 seconds)
    (38/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 6.702e-6 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.392e-6 seconds)
    (40/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 5.116e-6 seconds)
    (41/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 6.375e-6 seconds)
    (42/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 6.256e-6 seconds)
    (43/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 3.4026e-5 seconds)
    (44/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 6.853e-6 seconds)
    (45/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 5.554e-6 seconds)
    (46/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 5.003e-6 seconds)
    (47/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 5.349e-6 seconds)
    (48/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 5.364e-6 seconds)
    (49/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.244e-6 seconds)
    (50/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.020413963 seconds)
    (51/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.2029e-5 seconds)
    (52/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.2238e-5 seconds)
    (53/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 7.976e-6 seconds)
    (54/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 8.151e-6 seconds)
    (55/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 6.628e-6 seconds)
  done (took 1.053923606 seconds)
  (2/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.054589868 seconds)
    (2/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.041771676 seconds)
    (3/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.042879297 seconds)
    (4/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.03658316 seconds)
    (5/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026549648 seconds)
    (6/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.041031096 seconds)
  done (took 1.054623455 seconds)
  (3/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.019085968 seconds)
    (2/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020480637 seconds)
    (3/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.2695e-5 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 7.923e-6 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.1501e-5 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.686e-6 seconds)
    (7/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.967e-6 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.053e-6 seconds)
    (9/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.901e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.833e-6 seconds)
    (11/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.2572e-5 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.512e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.072e-6 seconds)
    (14/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 6.02e-6 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.291e-6 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.642e-6 seconds)
    (17/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.612e-6 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.093e-6 seconds)
    (19/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.388e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 5.615e-6 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 6.09e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.369e-6 seconds)
  done (took 0.852185225 seconds)
  (4/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.018680821 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 9.588e-6 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.933e-6 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.517e-6 seconds)
    (5/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018724941 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 9.817e-6 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 6.477e-6 seconds)
    (8/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.563e-6 seconds)
    (9/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.773e-6 seconds)
    (10/30) benchmarking ("zero", "Float64")...
    done (took 1.0232e-5 seconds)
    (11/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.1045e-5 seconds)
    (12/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 8.624e-6 seconds)
    (13/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.79e-6 seconds)
    (14/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 5.701e-6 seconds)
    (15/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 5.117e-6 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 5.414e-6 seconds)
    (17/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 5.939e-6 seconds)
    (18/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.444e-6 seconds)
    (19/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.321e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.561e-6 seconds)
    (21/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.431e-6 seconds)
    (22/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.791e-6 seconds)
    (23/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.624e-6 seconds)
    (24/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.32e-6 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.694e-6 seconds)
    (26/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.948e-6 seconds)
    (27/30) benchmarking ("zero", "Float32")...
    done (took 5.726e-6 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.509e-6 seconds)
    (29/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.163e-6 seconds)
    (30/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 5.106e-6 seconds)
  done (took 0.848069906 seconds)
  (5/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.036568904 seconds)
    (2/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.025604481 seconds)
    (3/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.010217351 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.5233e-5 seconds)
    (5/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.1562e-5 seconds)
    (6/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 8.88e-6 seconds)
    (7/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 6.459e-6 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 5.516e-6 seconds)
    (9/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 5.495e-6 seconds)
    (10/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 6.612e-6 seconds)
    (11/68) benchmarking ("x one", "Float64")...
    done (took 1.9755e-5 seconds)
    (12/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.4819e-5 seconds)
    (13/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.649e-6 seconds)
    (14/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 5.671e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 5.506e-6 seconds)
    (16/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 5.954e-6 seconds)
    (17/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 5.917e-6 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 5.843e-6 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 5.716e-6 seconds)
    (20/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 5.606e-6 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 5.906e-6 seconds)
    (22/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 5.711e-6 seconds)
    (23/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.011254158 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 3.7043e-5 seconds)
    (25/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.0043e-5 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.1281e-5 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 7.15e-6 seconds)
    (28/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 5.633e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 5.911e-6 seconds)
    (30/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 6.572e-6 seconds)
    (31/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.877e-6 seconds)
    (32/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 5.716e-6 seconds)
    (33/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.084e-6 seconds)
    (34/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.2381e-5 seconds)
    (35/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 5.508e-6 seconds)
    (36/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 5.702e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.786e-6 seconds)
    (38/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 5.94e-6 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 5.614e-6 seconds)
    (40/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 5.989e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 5.642e-6 seconds)
    (42/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 8.263e-6 seconds)
    (43/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.6787e-5 seconds)
    (44/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 7.298e-6 seconds)
    (45/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 6.317e-6 seconds)
    (46/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 5.44e-6 seconds)
    (47/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 5.342e-6 seconds)
    (48/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.386e-6 seconds)
    (49/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 5.456e-6 seconds)
    (50/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 5.875e-6 seconds)
    (51/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.238e-6 seconds)
    (52/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.208e-6 seconds)
    (53/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.305e-6 seconds)
    (54/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 5.43e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 5.92e-6 seconds)
    (56/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.417e-6 seconds)
    (57/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 5.672e-6 seconds)
    (58/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 5.183e-6 seconds)
    (59/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 5.83e-6 seconds)
    (60/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 5.716e-6 seconds)
    (61/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 7.721e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 6.066e-6 seconds)
    (63/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 5.799e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 5.357e-6 seconds)
    (65/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 5.355e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.065e-6 seconds)
    (67/68) benchmarking ("x one", "Float32")...
    done (took 1.1978e-5 seconds)
    (68/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 6.22e-6 seconds)
  done (took 0.982864272 seconds)
  (6/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015935248 seconds)
    (2/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020230416 seconds)
    (3/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015473247 seconds)
    (4/72) benchmarking ("isless", "Int64")...
    done (took 0.019321929 seconds)
    (5/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.019750222 seconds)
    (6/72) benchmarking ("isnan", "Float32")...
    done (took 0.019040982 seconds)
    (7/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019371481 seconds)
    (8/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.01964038 seconds)
    (9/72) benchmarking ("isequal", "Int64")...
    done (took 0.019012064 seconds)
    (10/72) benchmarking ("isequal", "Float32")...
    done (took 0.019631266 seconds)
    (11/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015373558 seconds)
    (12/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.019554751 seconds)
    (13/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015560646 seconds)
    (14/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.028464053 seconds)
    (15/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022319462 seconds)
    (16/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.019980655 seconds)
    (17/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015378645 seconds)
    (18/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019113164 seconds)
    (19/72) benchmarking ("isequal", "UInt64")...
    done (took 0.0190205 seconds)
    (20/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.0191791 seconds)
    (21/72) benchmarking ("isinteger", "Float32")...
    done (took 0.018893536 seconds)
    (22/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019830054 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 0.018766487 seconds)
    (24/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020937501 seconds)
    (25/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018991132 seconds)
    (26/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.01531663 seconds)
    (27/72) benchmarking ("isless", "UInt64")...
    done (took 0.018821316 seconds)
    (28/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019634436 seconds)
    (29/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015300997 seconds)
    (30/72) benchmarking ("isless", "Float32")...
    done (took 0.020601529 seconds)
    (31/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020749902 seconds)
    (32/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015391735 seconds)
    (33/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.023640782 seconds)
    (34/72) benchmarking ("isfinite", "Float32")...
    done (took 0.018648972 seconds)
    (35/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019085857 seconds)
    (36/72) benchmarking ("isnan", "Int64")...
    done (took 0.015469182 seconds)
    (37/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015391341 seconds)
    (38/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019160104 seconds)
    (39/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015465628 seconds)
    (40/72) benchmarking ("isinf", "Float32")...
    done (took 0.018892284 seconds)
    (41/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015406441 seconds)
    (42/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.019589536 seconds)
    (43/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019748485 seconds)
    (44/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020159288 seconds)
    (45/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019696207 seconds)
    (46/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015449721 seconds)
    (47/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019332671 seconds)
    (48/72) benchmarking ("isequal", "Float64")...
    done (took 0.019506017 seconds)
    (49/72) benchmarking ("isnan", "Float64")...
    done (took 0.018643682 seconds)
    (50/72) benchmarking ("isinf", "Float64")...
    done (took 0.018860396 seconds)
    (51/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015333328 seconds)
    (52/72) benchmarking ("isinf", "Int64")...
    done (took 0.015520574 seconds)
    (53/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015460465 seconds)
    (54/72) benchmarking ("isless", "BigInt")...
    done (took 0.02012929 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.02153947 seconds)
    (56/72) benchmarking ("isless", "BigFloat")...
    done (took 0.02299708 seconds)
    (57/72) benchmarking ("isfinite", "Float64")...
    done (took 0.018755549 seconds)
    (58/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015424285 seconds)
    (59/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019165124 seconds)
    (60/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019985092 seconds)
    (61/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.019771425 seconds)
    (62/72) benchmarking ("iseven", "Int64")...
    done (took 0.019120758 seconds)
    (63/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015472212 seconds)
    (64/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019029954 seconds)
    (65/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.019782019 seconds)
    (66/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015400867 seconds)
    (67/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019192354 seconds)
    (68/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019514467 seconds)
    (69/72) benchmarking ("isless", "Float64")...
    done (took 0.020578649 seconds)
    (70/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015470569 seconds)
    (71/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015278887 seconds)
    (72/72) benchmarking ("isodd", "UInt64")...
    done (took 0.018959378 seconds)
  done (took 2.156202481 seconds)
  (7/25) benchmarking "tan"...
    (1/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017276842 seconds)
    (2/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018428133 seconds)
    (3/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018496219 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.00014519 seconds)
    (5/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.01717433 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.5871e-5 seconds)
    (7/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 6.0793e-5 seconds)
    (8/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.017139276 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.0134e-5 seconds)
    (10/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.057e-6 seconds)
    (11/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.1007e-5 seconds)
    (12/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.01703047 seconds)
    (13/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 7.0104e-5 seconds)
    (14/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 9.709e-6 seconds)
    (15/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.0e-6 seconds)
    (16/18) benchmarking ("zero", "Float32")...
    done (took 9.933e-6 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.821e-6 seconds)
    (18/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.5461e-5 seconds)
  done (took 0.919991653 seconds)
  (8/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018972825 seconds)
    (2/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 9.504e-6 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 6.256e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.492e-6 seconds)
    (5/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.125e-6 seconds)
    (6/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.174e-6 seconds)
    (7/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.597e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 4.809e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.301e-6 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.19e-6 seconds)
    (11/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 8.678e-6 seconds)
    (12/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.046e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 4.988e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 4.934e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.235e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.175e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 4.833e-6 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.024e-6 seconds)
    (19/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.164e-6 seconds)
    (20/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.148e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.043e-6 seconds)
  done (took 0.832699056 seconds)
  (9/25) benchmarking "cbrt"...
    (1/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018619684 seconds)
    (2/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.1059e-5 seconds)
    (3/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018683118 seconds)
    (4/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 8.981e-6 seconds)
    (5/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.133e-6 seconds)
    (6/20) benchmarking ("zero", "Float64")...
    done (took 1.2945e-5 seconds)
    (7/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 8.309e-6 seconds)
    (8/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 4.964e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.001e-6 seconds)
    (10/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 4.984e-6 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 9.515e-6 seconds)
    (12/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.453e-6 seconds)
    (13/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.232e-6 seconds)
    (14/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.024e-6 seconds)
    (15/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.067e-6 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 5.841e-6 seconds)
    (17/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.091e-6 seconds)
    (18/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 8.838e-6 seconds)
    (19/20) benchmarking ("one", "Float32")...
    done (took 6.229e-6 seconds)
    (20/20) benchmarking ("one", "Float64")...
    done (took 5.233e-6 seconds)
  done (took 0.850773382 seconds)
  (10/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.051385067 seconds)
    (2/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 9.414e-6 seconds)
    (3/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 6.296e-6 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.343e-6 seconds)
    (5/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.463e-6 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.033e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.707e-6 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.012e-6 seconds)
    (9/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.357e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 4.986e-6 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 9.623e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.133e-6 seconds)
    (13/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 4.895e-6 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 4.849e-6 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.089e-6 seconds)
    (16/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.506e-6 seconds)
    (17/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.127e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 4.788e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 4.926e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.114e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.277e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.071e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 4.659e-6 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 4.731e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.311e-6 seconds)
    (26/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.109e-6 seconds)
    (27/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.172e-6 seconds)
    (28/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.923e-6 seconds)
  done (took 0.86848404 seconds)
  (11/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018700134 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 9.853e-6 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.98e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.01852074 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.0289e-5 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 7.273e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.964e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.681e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.533e-6 seconds)
    (10/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.037e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 9.612e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.392e-6 seconds)
    (13/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.4137e-5 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.353e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.914e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 8.554e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.911e-6 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.635e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.709e-6 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.444e-6 seconds)
    (21/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.434e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.042e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.047e-6 seconds)
    (24/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.874e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.616e-6 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.869e-6 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.618e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.459e-6 seconds)
    (29/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.843e-6 seconds)
    (30/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.931e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.883e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.723e-6 seconds)
    (33/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.88e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.64e-6 seconds)
    (35/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 6.018e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.914e-6 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.641e-6 seconds)
    (38/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.808e-6 seconds)
    (39/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.231e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.168e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.013e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.993e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.0205e-5 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.612e-6 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.087e-6 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.613e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.939e-6 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.924e-6 seconds)
    (49/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.986e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.712e-6 seconds)
    (51/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 6.126e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.75e-6 seconds)
    (53/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.837e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.899e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.891e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.889e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.077e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.127e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.533e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.833e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.029e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.609e-6 seconds)
    (63/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.748e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.771e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.896e-6 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.703e-6 seconds)
  done (took 0.851809173 seconds)
  (12/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018524412 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 0.018571107 seconds)
    (3/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017247112 seconds)
    (4/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.1081e-5 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.0874e-5 seconds)
    (6/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.795e-6 seconds)
    (7/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.6625e-5 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 6.579e-6 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 5.923e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.556e-6 seconds)
    (11/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 6.2947e-5 seconds)
    (12/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.881e-6 seconds)
    (13/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 5.738e-6 seconds)
    (14/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 5.469e-6 seconds)
    (15/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.898e-6 seconds)
    (16/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.491e-6 seconds)
    (17/20) benchmarking ("zero", "Float32")...
    done (took 1.0868e-5 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.71e-6 seconds)
    (19/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.787e-6 seconds)
    (20/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.424e-6 seconds)
  done (took 0.868105944 seconds)
  (13/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.02140232 seconds)
    (2/49) benchmarking ("add", "ComplexF64")...
    done (took 0.019557052 seconds)
    (3/49) benchmarking ("div", "Float32")...
    done (took 0.018564586 seconds)
    (4/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019937896 seconds)
    (5/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.025267696 seconds)
    (6/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.025296947 seconds)
    (7/49) benchmarking ("add", "Float64")...
    done (took 0.018999461 seconds)
    (8/49) benchmarking ("add", "BigInt")...
    done (took 0.019415931 seconds)
    (9/49) benchmarking ("sub", "Int64")...
    done (took 0.018984391 seconds)
    (10/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019441595 seconds)
    (11/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.02006587 seconds)
    (12/49) benchmarking ("div", "BigFloat")...
    done (took 0.020317 seconds)
    (13/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.019933692 seconds)
    (14/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.019505429 seconds)
    (15/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020077264 seconds)
    (16/49) benchmarking ("div", "UInt64")...
    done (took 0.019517778 seconds)
    (17/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021128918 seconds)
    (18/49) benchmarking ("sub", "UInt64")...
    done (took 0.018927226 seconds)
    (19/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.025994117 seconds)
    (20/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.020028642 seconds)
    (21/49) benchmarking ("div", "Float64")...
    done (took 0.018806958 seconds)
    (22/49) benchmarking "13786"...
    done (took 0.033906715 seconds)
    (23/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.031640383 seconds)
    (24/49) benchmarking ("add", "ComplexF32")...
    done (took 0.019844845 seconds)
    (25/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.020962335 seconds)
    (26/49) benchmarking ("mul", "Float64")...
    done (took 0.0189424 seconds)
    (27/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.025585652 seconds)
    (28/49) benchmarking ("mul", "Int64")...
    done (took 0.018906852 seconds)
    (29/49) benchmarking ("sub", "Float64")...
    done (took 0.018979946 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.01953663 seconds)
    (31/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020082268 seconds)
    (32/49) benchmarking ("add", "BigFloat")...
    done (took 0.020153142 seconds)
    (33/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.020316994 seconds)
    (34/49) benchmarking ("mul", "Float32")...
    done (took 0.018776952 seconds)
    (35/49) benchmarking ("div", "BigInt")...
    done (took 0.021040814 seconds)
    (36/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.045881274 seconds)
    (37/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020080192 seconds)
    (38/49) benchmarking ("add", "Float32")...
    done (took 0.018630027 seconds)
    (39/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.019808754 seconds)
    (40/49) benchmarking ("add", "Int64")...
    done (took 0.018844413 seconds)
    (41/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020269126 seconds)
    (42/49) benchmarking ("mul", "UInt64")...
    done (took 0.019006011 seconds)
    (43/49) benchmarking ("add", "UInt64")...
    done (took 0.019147839 seconds)
    (44/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021251183 seconds)
    (45/49) benchmarking ("sub", "BigInt")...
    done (took 0.019709265 seconds)
    (46/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020614727 seconds)
    (47/49) benchmarking ("sub", "Float32")...
    done (took 0.018923787 seconds)
    (48/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.020374268 seconds)
    (49/49) benchmarking ("div", "Int64")...
    done (took 0.019247664 seconds)
  done (took 1.856811902 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02035209 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018493504 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 9.831e-6 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.0641e-5 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 9.92e-6 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.841e-6 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.098e-6 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.112e-6 seconds)
    (9/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.225e-6 seconds)
    (10/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 4.978e-6 seconds)
    (11/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 9.123e-6 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 4.935e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.304e-6 seconds)
    (14/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.12e-6 seconds)
    (15/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 4.941e-6 seconds)
    (16/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.575e-6 seconds)
    (17/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.211e-6 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.998e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 4.821e-6 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 4.743e-6 seconds)
    (21/22) benchmarking ("zero", "Float32")...
    done (took 5.024e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 4.793e-6 seconds)
  done (took 0.857180664 seconds)
  (15/25) benchmarking "sinh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018685803 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020772335 seconds)
    (3/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 9.32e-6 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.1046e-5 seconds)
    (5/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.677e-6 seconds)
    (6/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.503e-6 seconds)
    (7/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 8.53e-6 seconds)
    (8/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.093e-6 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.246e-6 seconds)
    (10/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.027e-6 seconds)
    (11/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 9.385e-6 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.286e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 4.916e-6 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 4.744e-6 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.684e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.324e-6 seconds)
    (17/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 4.722e-6 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 4.931e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 5.417e-6 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.259e-6 seconds)
    (21/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 4.67e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 4.871e-6 seconds)
  done (took 0.85774287 seconds)
  (16/25) benchmarking "exp2"...
    (1/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018613488 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 9.296e-6 seconds)
    (3/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01869312 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 9.799e-6 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 9.385e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 9.395e-6 seconds)
    (7/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 6.338e-6 seconds)
    (8/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.485e-6 seconds)
    (9/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 4.804e-6 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.246e-6 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 9.401e-6 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.299e-6 seconds)
    (13/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 4.929e-6 seconds)
    (14/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.872e-6 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.527e-6 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 4.755e-6 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.5563e-5 seconds)
    (18/24) benchmarking ("zero", "Float32")...
    done (took 5.738e-6 seconds)
    (19/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.582e-6 seconds)
    (20/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.125e-6 seconds)
    (21/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 4.9e-6 seconds)
    (22/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 4.839e-6 seconds)
    (23/24) benchmarking ("one", "Float32")...
    done (took 5.443e-6 seconds)
    (24/24) benchmarking ("one", "Float64")...
    done (took 4.946e-6 seconds)
  done (took 0.85348467 seconds)
  (17/25) benchmarking "iteration"...
    (1/2) benchmarking "in"...
    done (took 0.019835569 seconds)
    (2/2) benchmarking "indexed"...
    done (took 0.01986754 seconds)
  done (took 0.855664542 seconds)
  (18/25) benchmarking "acosh"...
    (1/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.018649443 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.1242e-5 seconds)
    (3/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018784121 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 9.6e-6 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.964e-6 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 8.82e-6 seconds)
    (7/8) benchmarking ("one", "Float64")...
    done (took 1.1435e-5 seconds)
    (8/8) benchmarking ("one", "Float32")...
    done (took 5.41e-6 seconds)
  done (took 0.854613409 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020707773 seconds)
    (2/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020661863 seconds)
    (3/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.4083e-5 seconds)
    (4/16) benchmarking ("zero", "Float64")...
    done (took 1.15e-5 seconds)
    (5/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 7.049e-6 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.8892e-5 seconds)
    (7/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.817e-6 seconds)
    (8/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 5.217e-6 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.363e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 4.907e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 9.696e-6 seconds)
    (12/16) benchmarking ("zero", "Float32")...
    done (took 5.737e-6 seconds)
    (13/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.423e-6 seconds)
    (14/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 4.895e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 4.93e-6 seconds)
    (16/16) benchmarking ("one", "Float32")...
    done (took 4.898e-6 seconds)
  done (took 0.857705192 seconds)
  (20/25) benchmarking "expm1"...
    (1/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018587198 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.0984e-5 seconds)
    (3/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018616601 seconds)
    (4/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.0058e-5 seconds)
    (5/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.683e-6 seconds)
    (6/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.663e-6 seconds)
    (7/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 4.881e-6 seconds)
    (8/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 8.991e-6 seconds)
    (9/30) benchmarking ("zero", "Float64")...
    done (took 1.0158e-5 seconds)
    (10/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.718e-6 seconds)
    (11/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.0621e-5 seconds)
    (12/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.3e-6 seconds)
    (13/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 4.775e-6 seconds)
    (14/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.069e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 9.264e-6 seconds)
    (16/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.397e-6 seconds)
    (17/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.478e-6 seconds)
    (18/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 4.878e-6 seconds)
    (19/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.449e-6 seconds)
    (20/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.148e-6 seconds)
    (21/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.066e-6 seconds)
    (22/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.016e-6 seconds)
    (23/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 4.983e-6 seconds)
    (24/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 5.022e-6 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.441e-6 seconds)
    (26/30) benchmarking ("zero", "Float32")...
    done (took 5.842e-6 seconds)
    (27/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.418e-6 seconds)
    (28/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 4.882e-6 seconds)
    (29/30) benchmarking ("one", "Float32")...
    done (took 4.966e-6 seconds)
    (30/30) benchmarking ("one", "Float64")...
    done (took 4.997e-6 seconds)
  done (took 0.853868035 seconds)
  (21/25) benchmarking "sin"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018807048 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.0748e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 7.383e-6 seconds)
    (4/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018478722 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.2763e-5 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.29e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.794e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.169e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.92e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.948e-6 seconds)
    (11/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 9.954e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.06e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 4.966e-6 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.047e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.047e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.126e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 4.825e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.359e-6 seconds)
    (19/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.037e-6 seconds)
    (20/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.324e-5 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.374e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 4.837e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.976e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 7.905e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 8.068e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.294e-6 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.897e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.335e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 4.75e-6 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.522e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.352e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.016e-6 seconds)
    (33/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.104e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.187e-6 seconds)
    (35/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.043e-6 seconds)
    (36/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 4.905e-6 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.437e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 4.74e-6 seconds)
    (39/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.188e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.032e-6 seconds)
    (41/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.159e-6 seconds)
    (42/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.365e-6 seconds)
    (43/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.8158e-5 seconds)
    (44/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.088e-6 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.06e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.084e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.274e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 4.81e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.49e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.004e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.7e-6 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.391e-6 seconds)
    (53/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 5.126e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.146e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 4.902e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 4.925e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.005e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 4.81e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.417e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 4.958e-6 seconds)
    (61/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.349e-6 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.221e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.573e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.274e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.225e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 4.846e-6 seconds)
  done (took 0.860126265 seconds)
  (22/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.018881527 seconds)
    (2/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.1148e-5 seconds)
    (3/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018285236 seconds)
    (4/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.262e-5 seconds)
    (5/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 7.87e-6 seconds)
    (6/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 7.242e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 5.981e-6 seconds)
    (8/22) benchmarking ("zero", "Float64")...
    done (took 1.1563e-5 seconds)
    (9/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 7.397e-6 seconds)
    (10/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 6.27e-6 seconds)
    (11/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.0366e-5 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.597e-6 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 5.917e-6 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.697e-6 seconds)
    (15/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 6.322e-6 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.825e-6 seconds)
    (17/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 5.902e-6 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.873e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 6.267e-6 seconds)
    (20/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.862e-6 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.168e-6 seconds)
    (22/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.804e-6 seconds)
  done (took 0.854670022 seconds)
  (23/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.019344374 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019175257 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.1462e-5 seconds)
    (4/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.871e-6 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.205e-6 seconds)
    (6/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 6.346e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 5.377e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.088e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 6.199e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.341e-6 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 8.351e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.264e-6 seconds)
    (13/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.079e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.267e-6 seconds)
    (15/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 4.839e-6 seconds)
    (16/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.249e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.288e-6 seconds)
    (18/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 4.876e-6 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 4.595e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.999e-6 seconds)
    (21/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.125e-6 seconds)
    (22/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 4.8e-6 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.123e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 4.709e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 4.965e-6 seconds)
    (26/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 4.864e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.257e-6 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.059e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.362e-6 seconds)
    (30/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.068e-6 seconds)
    (31/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.369e-6 seconds)
    (32/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 4.99e-6 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.328e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 6.401e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 4.923e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 4.913e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.09e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.001e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.319e-6 seconds)
    (40/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.228e-6 seconds)
    (41/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.275e-6 seconds)
    (42/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.05e-6 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.5532e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.795e-6 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.773e-6 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.131e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.806e-6 seconds)
    (48/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.324e-6 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.48e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 4.927e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.281e-6 seconds)
    (52/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.354e-6 seconds)
    (53/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 4.974e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.018e-6 seconds)
    (55/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.032e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.035e-6 seconds)
    (57/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.193e-6 seconds)
    (58/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 4.911e-6 seconds)
    (59/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.125e-6 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.838e-6 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.001e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 4.685e-6 seconds)
  done (took 0.8566276 seconds)
  (24/25) benchmarking "acos"...
    (1/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.017292144 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018488247 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.018665937 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.8472e-5 seconds)
    (5/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 6.192e-6 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 5.951e-6 seconds)
    (7/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.629e-6 seconds)
    (8/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.272e-6 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 5.427e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.484e-6 seconds)
    (11/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.0215e-5 seconds)
    (12/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 5.634e-6 seconds)
    (13/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.403e-6 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.309e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 6.569e-6 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.579e-6 seconds)
    (17/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.338e-6 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.000139919 seconds)
  done (took 0.871653767 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.022730377 seconds)
    (2/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.027577035 seconds)
    (3/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.022027726 seconds)
    (4/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.020843141 seconds)
    (5/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020658034 seconds)
    (6/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022167163 seconds)
    (7/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022184027 seconds)
    (8/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020163042 seconds)
    (9/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.019900879 seconds)
    (10/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.028875956 seconds)
    (11/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.01888811 seconds)
    (12/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.022634246 seconds)
    (13/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.020997746 seconds)
    (14/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021933808 seconds)
    (15/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020624516 seconds)
    (16/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.01960682 seconds)
    (17/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020312335 seconds)
    (18/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026745029 seconds)
    (19/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.020246946 seconds)
    (20/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.020093306 seconds)
    (21/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.018914237 seconds)
    (22/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020895936 seconds)
    (23/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021746116 seconds)
    (24/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.019467499 seconds)
    (25/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020804135 seconds)
    (26/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020001656 seconds)
    (27/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.02360877 seconds)
    (28/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.023426792 seconds)
    (29/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020051909 seconds)
    (30/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020899283 seconds)
    (31/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020642279 seconds)
    (32/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020465535 seconds)
    (33/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.02706566 seconds)
    (34/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.022512048 seconds)
    (35/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018800124 seconds)
    (36/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021524291 seconds)
    (37/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.021975694 seconds)
    (38/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.019932256 seconds)
    (39/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.020229365 seconds)
    (40/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020494047 seconds)
    (41/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022243261 seconds)
    (42/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.020632078 seconds)
    (43/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020242701 seconds)
    (44/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.022574606 seconds)
    (45/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021182663 seconds)
    (46/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019563033 seconds)
    (47/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020646611 seconds)
    (48/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019419889 seconds)
    (49/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020349891 seconds)
    (50/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021858438 seconds)
    (51/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.01878944 seconds)
    (52/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020298388 seconds)
    (53/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020312427 seconds)
    (54/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021621498 seconds)
    (55/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.021856716 seconds)
    (56/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.022392777 seconds)
    (57/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.022274687 seconds)
    (58/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.021458181 seconds)
    (59/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.022428654 seconds)
    (60/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020876476 seconds)
    (61/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.019855702 seconds)
    (62/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.020011865 seconds)
    (63/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021778366 seconds)
    (64/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021273681 seconds)
    (65/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021806374 seconds)
    (66/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020267696 seconds)
    (67/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.020922076 seconds)
    (68/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.02067016 seconds)
    (69/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021540619 seconds)
    (70/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.023789467 seconds)
    (71/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022269261 seconds)
    (72/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.008589647 seconds)
    (73/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.030502711 seconds)
    (74/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.019440886 seconds)
    (75/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.021088154 seconds)
    (76/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019305619 seconds)
    (77/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020321338 seconds)
    (78/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.02022214 seconds)
    (79/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.026395607 seconds)
    (80/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020267838 seconds)
    (81/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020237734 seconds)
    (82/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020439798 seconds)
    (83/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.020734352 seconds)
    (84/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021205041 seconds)
    (85/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026058499 seconds)
    (86/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.019974584 seconds)
    (87/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.018853903 seconds)
    (88/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019962019 seconds)
    (89/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.019965338 seconds)
    (90/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021826951 seconds)
    (91/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020763343 seconds)
    (92/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026797699 seconds)
    (93/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.026737659 seconds)
    (94/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020403806 seconds)
    (95/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021670076 seconds)
    (96/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.027333999 seconds)
    (97/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020295206 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021782231 seconds)
    (99/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.0198009 seconds)
    (100/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.022806555 seconds)
    (101/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.01921163 seconds)
    (102/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.021865538 seconds)
    (103/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.018689736 seconds)
    (104/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.020715337 seconds)
    (105/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.020789403 seconds)
    (106/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020899356 seconds)
    (107/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.021870417 seconds)
    (108/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019169075 seconds)
    (109/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.018972021 seconds)
    (110/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022274437 seconds)
    (111/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.021331946 seconds)
    (112/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018754726 seconds)
    (113/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019403038 seconds)
    (114/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.020912808 seconds)
    (115/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021421447 seconds)
    (116/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019333807 seconds)
    (117/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020749229 seconds)
    (118/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020785513 seconds)
    (119/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.018896597 seconds)
    (120/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020131417 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.021786587 seconds)
    (122/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022636963 seconds)
    (123/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023502861 seconds)
    (124/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.021448284 seconds)
    (125/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026431058 seconds)
    (126/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020469297 seconds)
    (127/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.02276436 seconds)
    (128/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.021228101 seconds)
    (129/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019005871 seconds)
    (130/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019706494 seconds)
    (131/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.022192617 seconds)
    (132/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.023177747 seconds)
    (133/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021823146 seconds)
    (134/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008487664 seconds)
    (135/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019054216 seconds)
    (136/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020232096 seconds)
    (137/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.021841275 seconds)
    (138/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020485631 seconds)
    (139/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.020969241 seconds)
    (140/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.022191757 seconds)
    (141/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021368599 seconds)
    (142/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.00305536 seconds)
    (143/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019126348 seconds)
    (144/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.027019498 seconds)
    (145/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020205532 seconds)
    (146/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.022920301 seconds)
    (147/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.018780523 seconds)
    (148/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022885541 seconds)
    (149/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020381378 seconds)
    (150/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026557241 seconds)
    (151/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.020731688 seconds)
    (152/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023242205 seconds)
    (153/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020346661 seconds)
    (154/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.020946846 seconds)
    (155/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021488695 seconds)
    (156/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.019795745 seconds)
    (157/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020514766 seconds)
    (158/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.019761561 seconds)
    (159/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.020884256 seconds)
    (160/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020530569 seconds)
    (161/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02094533 seconds)
    (162/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.018704183 seconds)
    (163/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.019811158 seconds)
    (164/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022061967 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.020502242 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019363645 seconds)
    (167/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.018828183 seconds)
    (168/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020701596 seconds)
    (169/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020576005 seconds)
    (170/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021317016 seconds)
    (171/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026328859 seconds)
    (172/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.019006389 seconds)
    (173/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.018775956 seconds)
    (174/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.019649337 seconds)
    (175/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019912596 seconds)
    (176/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.022201922 seconds)
    (177/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02362111 seconds)
    (178/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022620973 seconds)
    (179/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.020473611 seconds)
    (180/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019435763 seconds)
    (181/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022275783 seconds)
    (182/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.022605177 seconds)
    (183/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.019900937 seconds)
    (184/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.020331565 seconds)
    (185/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022877817 seconds)
    (186/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.018604392 seconds)
    (187/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.019692807 seconds)
    (188/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.019709087 seconds)
    (189/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.02728075 seconds)
    (190/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.02650436 seconds)
    (191/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.0206165 seconds)
    (192/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.01949799 seconds)
    (193/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.025854606 seconds)
    (194/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020513697 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.020905794 seconds)
    (196/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.01969998 seconds)
    (197/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020898445 seconds)
    (198/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.021628499 seconds)
    (199/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.018742558 seconds)
    (200/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026771857 seconds)
    (201/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023252689 seconds)
    (202/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.02217839 seconds)
    (203/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022132051 seconds)
    (204/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020266205 seconds)
    (205/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020033179 seconds)
    (206/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019543866 seconds)
    (207/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.0266078 seconds)
    (208/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.025559972 seconds)
    (209/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.021389258 seconds)
    (210/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.02100182 seconds)
    (211/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.022176027 seconds)
    (212/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020251944 seconds)
    (213/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003146147 seconds)
    (214/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020264624 seconds)
    (215/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019541256 seconds)
    (216/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.02078919 seconds)
    (217/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.021632865 seconds)
    (218/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020318931 seconds)
    (219/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020025175 seconds)
    (220/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020505579 seconds)
    (221/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022309488 seconds)
    (222/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020270223 seconds)
    (223/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020389909 seconds)
    (224/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020118327 seconds)
    (225/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.020424663 seconds)
    (226/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021764042 seconds)
    (227/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019095807 seconds)
    (228/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.022844353 seconds)
    (229/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.022205951 seconds)
    (230/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02174038 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019850244 seconds)
    (232/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019322363 seconds)
    (233/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01964978 seconds)
    (234/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.021670488 seconds)
    (235/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021823358 seconds)
    (236/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.021952629 seconds)
    (237/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022165465 seconds)
    (238/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.021208674 seconds)
    (239/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.003208857 seconds)
    (240/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020420363 seconds)
    (241/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.019826013 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019467852 seconds)
    (243/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.020869218 seconds)
    (244/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018727931 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020770178 seconds)
    (246/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.01971985 seconds)
    (247/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020281518 seconds)
    (248/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.021066844 seconds)
    (249/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.020449342 seconds)
    (250/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.023386365 seconds)
    (251/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021494632 seconds)
    (252/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.01998196 seconds)
    (253/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019029739 seconds)
    (254/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.020796435 seconds)
    (255/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019022925 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021006262 seconds)
    (257/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021706677 seconds)
    (258/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021008236 seconds)
    (259/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003463751 seconds)
    (260/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.020777426 seconds)
    (261/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.021041927 seconds)
    (262/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.022652153 seconds)
    (263/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021284207 seconds)
    (264/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020303322 seconds)
    (265/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.021491396 seconds)
    (266/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020516926 seconds)
    (267/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.020291039 seconds)
    (268/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020246207 seconds)
    (269/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027212514 seconds)
    (270/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.025790524 seconds)
    (271/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.022510147 seconds)
    (272/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020055545 seconds)
    (273/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.02114135 seconds)
    (274/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019160425 seconds)
    (275/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022454764 seconds)
    (276/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021028001 seconds)
    (277/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.021543917 seconds)
    (278/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020638731 seconds)
    (279/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.020205684 seconds)
    (280/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.020289751 seconds)
    (281/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019701215 seconds)
    (282/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.018853915 seconds)
    (283/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019108608 seconds)
    (284/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.019897286 seconds)
    (285/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019263353 seconds)
    (286/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020410325 seconds)
    (287/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.019876571 seconds)
    (288/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020402459 seconds)
    (289/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02182855 seconds)
    (290/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.019866207 seconds)
    (291/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.021043901 seconds)
    (292/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025015938 seconds)
    (293/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022241894 seconds)
    (294/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019087322 seconds)
    (295/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022271784 seconds)
    (296/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022228582 seconds)
    (297/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.019716669 seconds)
    (298/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.02025903 seconds)
    (299/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021684463 seconds)
    (300/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02070568 seconds)
    (301/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.021155581 seconds)
    (302/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.021801822 seconds)
    (303/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.02122465 seconds)
    (304/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.022246975 seconds)
    (305/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.021278867 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.021071385 seconds)
    (307/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.01975394 seconds)
    (308/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020152959 seconds)
    (309/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021890498 seconds)
    (310/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02061419 seconds)
    (311/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.022151067 seconds)
    (312/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021023876 seconds)
    (313/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020850223 seconds)
    (314/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.018830541 seconds)
    (315/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019018741 seconds)
    (316/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.021123293 seconds)
    (317/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.019555343 seconds)
    (318/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020262187 seconds)
    (319/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019921361 seconds)
    (320/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026043839 seconds)
    (321/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019729123 seconds)
    (322/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.020614676 seconds)
    (323/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.021653598 seconds)
    (324/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021478493 seconds)
    (325/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022844152 seconds)
    (326/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.027341823 seconds)
    (327/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.021081443 seconds)
    (328/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020068156 seconds)
    (329/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.019683897 seconds)
    (330/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.01982014 seconds)
    (331/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019451728 seconds)
    (332/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021415537 seconds)
    (333/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020129749 seconds)
    (334/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.019987107 seconds)
    (335/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021263243 seconds)
    (336/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019730004 seconds)
    (337/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020455496 seconds)
    (338/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026095822 seconds)
    (339/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020017698 seconds)
    (340/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020241705 seconds)
    (341/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.020873031 seconds)
    (342/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.018521987 seconds)
    (343/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.021499995 seconds)
    (344/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021575492 seconds)
    (345/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.020276863 seconds)
    (346/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020623945 seconds)
    (347/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.023048871 seconds)
    (348/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.019617664 seconds)
    (349/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.019432143 seconds)
    (350/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.020953687 seconds)
    (351/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020181099 seconds)
    (352/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.018623758 seconds)
    (353/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021654877 seconds)
    (354/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.019825979 seconds)
    (355/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022303558 seconds)
    (356/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.020114056 seconds)
    (357/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.019919182 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.02036873 seconds)
    (359/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025789231 seconds)
    (360/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.02182899 seconds)
    (361/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.025960138 seconds)
    (362/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022194105 seconds)
    (363/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.022356125 seconds)
    (364/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.024918119 seconds)
    (365/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.025728623 seconds)
    (366/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003180106 seconds)
    (367/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.018820288 seconds)
    (368/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.020252334 seconds)
    (369/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021282649 seconds)
    (370/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.02057706 seconds)
    (371/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019413803 seconds)
    (372/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021368139 seconds)
    (373/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021812213 seconds)
    (374/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.020389558 seconds)
    (375/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019531088 seconds)
    (376/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020222335 seconds)
    (377/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020599224 seconds)
    (378/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.019869096 seconds)
    (379/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.020735379 seconds)
    (380/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018610121 seconds)
    (381/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020270701 seconds)
    (382/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021241663 seconds)
    (383/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025752041 seconds)
    (384/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.01941043 seconds)
    (385/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.02120759 seconds)
    (386/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.0214649 seconds)
    (387/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.008807063 seconds)
    (388/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.01988292 seconds)
    (389/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.01956878 seconds)
    (390/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019285872 seconds)
    (391/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.0211286 seconds)
    (392/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025575794 seconds)
    (393/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.020205094 seconds)
    (394/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.019737738 seconds)
    (395/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021184082 seconds)
    (396/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.021791947 seconds)
    (397/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.018745844 seconds)
    (398/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.020616966 seconds)
    (399/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.019474936 seconds)
    (400/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.018956856 seconds)
    (401/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.020826206 seconds)
    (402/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.025788173 seconds)
    (403/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.019874083 seconds)
    (404/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019451938 seconds)
    (405/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.019582904 seconds)
    (406/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022407786 seconds)
    (407/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.02135539 seconds)
    (408/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019659898 seconds)
    (409/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.021384228 seconds)
    (410/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.022065783 seconds)
    (411/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.019364179 seconds)
    (412/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.021564811 seconds)
    (413/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.019451153 seconds)
    (414/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.020219677 seconds)
    (415/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.021223917 seconds)
    (416/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019019121 seconds)
    (417/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021042391 seconds)
    (418/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.020721343 seconds)
    (419/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.02059588 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020595901 seconds)
    (421/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.023775198 seconds)
    (422/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.020237253 seconds)
    (423/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020692855 seconds)
    (424/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021531309 seconds)
    (425/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004105084 seconds)
    (426/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.02012938 seconds)
    (427/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019506514 seconds)
    (428/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.022548121 seconds)
    (429/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021299393 seconds)
    (430/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.021565024 seconds)
    (431/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022703923 seconds)
    (432/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.01978035 seconds)
    (433/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026447583 seconds)
    (434/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.020582661 seconds)
    (435/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020261124 seconds)
    (436/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020992696 seconds)
    (437/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021775259 seconds)
    (438/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022484462 seconds)
    (439/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.022420747 seconds)
    (440/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020073219 seconds)
    (441/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020912558 seconds)
    (442/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02213026 seconds)
    (443/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.019166093 seconds)
    (444/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020711231 seconds)
    (445/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022465139 seconds)
    (446/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020704839 seconds)
    (447/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.020991616 seconds)
    (448/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.023046444 seconds)
    (449/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020781183 seconds)
    (450/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.021008164 seconds)
    (451/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020719549 seconds)
    (452/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021183052 seconds)
    (453/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.020948763 seconds)
    (454/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022266879 seconds)
    (455/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.021193858 seconds)
    (456/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022120461 seconds)
    (457/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020335319 seconds)
    (458/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.021274608 seconds)
    (459/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.023970753 seconds)
    (460/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003144894 seconds)
    (461/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021707316 seconds)
    (462/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.02224896 seconds)
    (463/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.022045272 seconds)
    (464/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003940242 seconds)
    (465/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021457881 seconds)
    (466/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020188598 seconds)
    (467/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023215587 seconds)
    (468/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.020209242 seconds)
    (469/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.022213878 seconds)
    (470/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021370639 seconds)
    (471/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.004684812 seconds)
    (472/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020368422 seconds)
    (473/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.0201394 seconds)
    (474/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.02194414 seconds)
    (475/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022974312 seconds)
    (476/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019688519 seconds)
    (477/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019836873 seconds)
    (478/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019599761 seconds)
    (479/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.018848324 seconds)
    (480/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019048723 seconds)
    (481/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019647429 seconds)
    (482/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.019636348 seconds)
    (483/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.021022929 seconds)
    (484/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026098766 seconds)
    (485/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020315416 seconds)
    (486/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020295209 seconds)
    (487/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.02228603 seconds)
    (488/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.019812685 seconds)
    (489/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.021031088 seconds)
    (490/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021287162 seconds)
    (491/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.021068563 seconds)
    (492/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.019751657 seconds)
    (493/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.018624601 seconds)
    (494/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018570978 seconds)
    (495/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019493578 seconds)
    (496/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019561319 seconds)
    (497/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019491477 seconds)
    (498/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020068382 seconds)
    (499/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019400521 seconds)
    (500/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.020905308 seconds)
    (501/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.019324185 seconds)
    (502/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.020068185 seconds)
    (503/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.021119109 seconds)
    (504/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020206987 seconds)
    (505/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.025544407 seconds)
    (506/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025413168 seconds)
    (507/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020124935 seconds)
    (508/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018598786 seconds)
    (509/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004379006 seconds)
    (510/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.019507028 seconds)
    (511/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022283223 seconds)
    (512/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.019646234 seconds)
    (513/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020196981 seconds)
    (514/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.02150907 seconds)
    (515/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.019482723 seconds)
    (516/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023295901 seconds)
    (517/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.020983047 seconds)
    (518/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.022963085 seconds)
    (519/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019659728 seconds)
    (520/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.018698992 seconds)
    (521/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.019362892 seconds)
    (522/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019007909 seconds)
    (523/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.025847275 seconds)
    (524/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020151537 seconds)
    (525/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.020801459 seconds)
    (526/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.020099592 seconds)
    (527/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019652608 seconds)
    (528/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.022007448 seconds)
    (529/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022197668 seconds)
    (530/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019271314 seconds)
    (531/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.019313514 seconds)
    (532/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.019731542 seconds)
    (533/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025099304 seconds)
    (534/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.020836253 seconds)
    (535/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019221086 seconds)
    (536/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.019957398 seconds)
    (537/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026014813 seconds)
    (538/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020183998 seconds)
    (539/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.021446853 seconds)
    (540/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.019599951 seconds)
    (541/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.020751016 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.02156156 seconds)
    (543/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.025202197 seconds)
    (544/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020159858 seconds)
    (545/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.018772163 seconds)
    (546/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020526541 seconds)
    (547/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.01971687 seconds)
    (548/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018355753 seconds)
    (549/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.019434702 seconds)
    (550/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.021764492 seconds)
    (551/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020319029 seconds)
    (552/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022507474 seconds)
    (553/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.020763032 seconds)
    (554/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.021122038 seconds)
    (555/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.02101216 seconds)
    (556/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.021363875 seconds)
    (557/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.019570288 seconds)
    (558/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022274967 seconds)
    (559/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021745227 seconds)
    (560/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.019431443 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019237963 seconds)
    (562/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020099751 seconds)
    (563/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.019865333 seconds)
    (564/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.01978404 seconds)
    (565/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003919714 seconds)
    (566/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021263984 seconds)
    (567/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.018751186 seconds)
    (568/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020041963 seconds)
    (569/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019501378 seconds)
    (570/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.018785 seconds)
    (571/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.024892592 seconds)
    (572/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.018824678 seconds)
    (573/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.019366989 seconds)
    (574/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020407676 seconds)
    (575/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019399508 seconds)
    (576/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027228982 seconds)
    (577/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.02057725 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020368189 seconds)
    (579/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.021903466 seconds)
    (580/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.0193215 seconds)
    (581/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.021487977 seconds)
    (582/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022705684 seconds)
    (583/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.019952372 seconds)
    (584/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021725541 seconds)
    (585/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020150665 seconds)
    (586/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020092972 seconds)
    (587/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.021596755 seconds)
    (588/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.021663514 seconds)
    (589/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.02577458 seconds)
    (590/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003737858 seconds)
    (591/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.022767752 seconds)
    (592/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.022871774 seconds)
    (593/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020180935 seconds)
    (594/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021634247 seconds)
    (595/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.02119437 seconds)
    (596/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.020592169 seconds)
  done (took 13.181952475 seconds)
done (took 37.42547141 seconds)
(10/23) benchmarking "misc"...
  (1/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt", "UInt")...
    done (took 0.02211355 seconds)
    (2/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.02174167 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.021533712 seconds)
    (4/4) benchmarking ("Int", "UInt")...
    done (took 0.021648313 seconds)
  done (took 0.929342507 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.274026546 seconds)
  (3/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.119809798 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 6.1484e-5 seconds)
  done (took 0.994952401 seconds)
  (4/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.033367745 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034427697 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.038109564 seconds)
  done (took 0.960981218 seconds)
  (5/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.059836125 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.053616887 seconds)
  done (took 0.972610274 seconds)
  (6/15) benchmarking "fastmath many args"...
  done (took 0.058127405 seconds)
  (7/15) benchmarking "23042"...
    (1/4) benchmarking "Float32"...
    done (took 0.064768795 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.053021686 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.023017862 seconds)
    (4/4) benchmarking "Float64"...
    done (took 0.027580831 seconds)
  done (took 1.022354126 seconds)
  (8/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.039616997 seconds)
  done (took 0.893752026 seconds)
  (9/15) benchmarking "18129"...
  done (took 0.168530645 seconds)
  (10/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.264881116 seconds)
    (2/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.13853883 seconds)
    (3/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.079362139 seconds)
  done (took 1.339367517 seconds)
  (11/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.091570706 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.036365396 seconds)
  done (took 0.989791539 seconds)
  (12/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.063506011 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.062177443 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.056957002 seconds)
  done (took 1.042843058 seconds)
  (13/15) benchmarking "20517"...
  done (took 0.059358583 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.08035618 seconds)
    (2/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.14810676 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.036154931 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.5835e-5 seconds)
    (5/10) benchmarking "zip(1:1000)"...
    done (took 0.081297842 seconds)
    (6/10) benchmarking "zip(1:1)"...
    done (took 1.1746e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.0704e-5 seconds)
    (8/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.086816774 seconds)
    (9/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.106566735 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.5729e-5 seconds)
  done (took 1.403870936 seconds)
  (15/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "nested")...
    done (took 0.030490603 seconds)
    (2/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.043880644 seconds)
    (3/4) benchmarking ("parse", "function")...
    done (took 0.019695625 seconds)
    (4/4) benchmarking ("parse", "array")...
    done (took 0.020430648 seconds)
  done (took 0.981955909 seconds)
done (took 12.951794385 seconds)
(11/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.118300546 seconds)
    (2/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.037619872 seconds)
    (3/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.229429005 seconds)
    (4/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.03328233 seconds)
    (5/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026659811 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.056069815 seconds)
    (7/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.112055489 seconds)
    (8/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.177367362 seconds)
    (9/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.069256746 seconds)
    (10/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.109650674 seconds)
    (11/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.036918783 seconds)
    (12/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.029100119 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029391719 seconds)
    (14/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.115494056 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.052876875 seconds)
    (16/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.024602577 seconds)
    (17/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.034677335 seconds)
    (18/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.113399967 seconds)
    (19/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.071399465 seconds)
    (20/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.036251284 seconds)
    (21/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.032198959 seconds)
    (22/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.028386971 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.028870986 seconds)
    (24/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028680184 seconds)
    (25/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.028894791 seconds)
    (26/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.02965977 seconds)
    (27/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028795963 seconds)
    (28/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.184232491 seconds)
    (29/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.272628601 seconds)
    (30/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.031783186 seconds)
    (31/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.038747086 seconds)
    (32/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 7.3909e-5 seconds)
    (33/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.036511874 seconds)
    (34/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.196838686 seconds)
    (35/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.036707445 seconds)
    (36/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.117142916 seconds)
    (37/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.093615727 seconds)
    (38/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024034346 seconds)
    (39/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.060222145 seconds)
    (40/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.033004245 seconds)
    (41/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.107034101 seconds)
    (42/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025756755 seconds)
    (43/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.17022551 seconds)
    (44/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.108884541 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.03706616 seconds)
    (46/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032031877 seconds)
    (47/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.096307539 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.034611994 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.029884103 seconds)
    (50/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.0306121 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.044570166 seconds)
    (52/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.175681051 seconds)
    (53/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.142204288 seconds)
    (54/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.029366914 seconds)
    (55/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.039681598 seconds)
    (56/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.034438767 seconds)
    (57/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.248205388 seconds)
    (58/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029295453 seconds)
    (59/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.105141572 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.050069041 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023949278 seconds)
    (62/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.029246963 seconds)
    (63/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029291563 seconds)
    (64/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.153004643 seconds)
    (65/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 6.0484e-5 seconds)
    (66/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.161158361 seconds)
    (67/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.033217863 seconds)
    (68/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.032544963 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.068723764 seconds)
    (70/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.112224194 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 6.1256e-5 seconds)
    (72/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.027342656 seconds)
    (73/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.028791068 seconds)
    (74/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.130672119 seconds)
    (75/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.107167773 seconds)
    (76/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.030389018 seconds)
    (77/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.090353305 seconds)
    (78/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.108245015 seconds)
    (79/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.109605358 seconds)
    (80/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.030426769 seconds)
    (81/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 7.8766e-5 seconds)
    (82/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.095262955 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066185422 seconds)
    (84/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.028939021 seconds)
    (85/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000960949 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.043850659 seconds)
    (87/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.063550242 seconds)
    (88/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.028517013 seconds)
    (89/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.027313255 seconds)
    (90/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.109207632 seconds)
    (91/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.028968391 seconds)
    (92/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.028730812 seconds)
    (93/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028770345 seconds)
    (94/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.001031559 seconds)
    (95/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.034716476 seconds)
    (96/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 6.717e-5 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.03573874 seconds)
    (98/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027190011 seconds)
    (99/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.639e-5 seconds)
    (100/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.027998652 seconds)
    (101/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.130919467 seconds)
    (102/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.087487019 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 6.3919e-5 seconds)
    (104/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028534776 seconds)
    (105/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.02899065 seconds)
    (106/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.110701735 seconds)
    (107/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.029532219 seconds)
    (108/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.084486338 seconds)
    (109/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.028895219 seconds)
    (110/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.175683609 seconds)
    (111/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.129149637 seconds)
    (112/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.035079486 seconds)
    (113/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 4.7021e-5 seconds)
    (114/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.024536697 seconds)
    (115/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.129023016 seconds)
    (116/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.120705852 seconds)
    (117/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.025243791 seconds)
    (118/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.028131273 seconds)
    (119/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028435162 seconds)
    (120/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.030281475 seconds)
    (121/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 8.7908e-5 seconds)
    (122/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000760414 seconds)
    (123/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.083771054 seconds)
    (124/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.039822082 seconds)
    (125/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.088064735 seconds)
    (126/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.147956052 seconds)
    (127/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.028959321 seconds)
    (128/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.212402566 seconds)
    (129/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.134776024 seconds)
    (130/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 7.4376e-5 seconds)
    (131/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 9.3479e-5 seconds)
    (132/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025349891 seconds)
    (133/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.044849464 seconds)
    (134/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.03309074 seconds)
    (135/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.035142911 seconds)
    (136/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 4.4681e-5 seconds)
    (137/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.237950749 seconds)
    (138/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.032715914 seconds)
    (139/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025364322 seconds)
    (140/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.085255049 seconds)
    (141/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000773931 seconds)
    (142/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.087150265 seconds)
    (143/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.036453564 seconds)
    (144/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.026836673 seconds)
    (145/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.028365685 seconds)
    (146/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.029394398 seconds)
    (147/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.037204473 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.111807937 seconds)
    (149/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.026180565 seconds)
    (150/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 4.6526e-5 seconds)
    (151/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.001632282 seconds)
    (152/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.169816683 seconds)
    (153/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.025391718 seconds)
    (154/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.028550355 seconds)
    (155/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.5638e-5 seconds)
    (156/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.028088715 seconds)
    (157/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.231696013 seconds)
    (158/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.338652239 seconds)
    (159/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 1.001515082 seconds)
    (160/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.034772582 seconds)
    (161/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.03322039 seconds)
    (162/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.029624847 seconds)
    (163/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.029696057 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.042993754 seconds)
    (165/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.00255893 seconds)
    (166/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.048115426 seconds)
    (167/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 7.383e-5 seconds)
    (168/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035698089 seconds)
    (169/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 3.7639e-5 seconds)
    (170/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.028634187 seconds)
    (171/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.033840695 seconds)
    (172/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.031212722 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.227298724 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.045426812 seconds)
    (175/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 3.6031e-5 seconds)
    (176/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.053300713 seconds)
    (177/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.026276451 seconds)
    (178/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.027756411 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.094723884 seconds)
    (180/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.032844124 seconds)
    (181/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029651997 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.032879277 seconds)
    (183/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.030759126 seconds)
    (184/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.033678686 seconds)
    (185/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.043757632 seconds)
    (186/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.000125049 seconds)
    (187/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.02915954 seconds)
    (188/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.034833262 seconds)
    (189/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 8.0346e-5 seconds)
    (190/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.019666461 seconds)
    (191/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.899227566 seconds)
    (192/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.196950304 seconds)
    (193/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 8.2855e-5 seconds)
    (194/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 6.1621e-5 seconds)
    (195/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.033265459 seconds)
    (196/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.092245009 seconds)
    (197/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 4.6162e-5 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.4302e-5 seconds)
    (199/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 9.777e-5 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.1512e-5 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.033463397 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.487584911 seconds)
    (203/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.041118252 seconds)
    (204/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.137685559 seconds)
    (205/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.152526037 seconds)
    (206/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.093124662 seconds)
    (207/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.027921508 seconds)
    (208/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.03125213 seconds)
    (209/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 4.1885e-5 seconds)
    (210/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001560109 seconds)
    (211/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028121036 seconds)
    (212/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.087681544 seconds)
    (213/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033746433 seconds)
    (214/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.8065e-5 seconds)
    (215/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.03208275 seconds)
    (216/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.029597559 seconds)
    (217/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 3.4187e-5 seconds)
    (218/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 6.5211e-5 seconds)
    (219/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.032164571 seconds)
    (220/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.044149982 seconds)
    (221/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.033490508 seconds)
    (222/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.072500644 seconds)
    (223/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.179172016 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002155702 seconds)
    (225/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.175206171 seconds)
    (226/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.026600197 seconds)
    (227/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.033426925 seconds)
    (228/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.000223182 seconds)
    (229/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.7955e-5 seconds)
    (230/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.2086e-5 seconds)
    (231/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.032288598 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.035762599 seconds)
    (233/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.04163694 seconds)
    (234/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.216384302 seconds)
    (235/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.034005434 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 9.8522e-5 seconds)
    (237/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.028847149 seconds)
    (238/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.177536401 seconds)
    (239/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.106873492 seconds)
    (240/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.00194551 seconds)
    (241/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 7.6415e-5 seconds)
    (242/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.058720517 seconds)
    (243/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.029144516 seconds)
    (244/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 4.5348e-5 seconds)
    (245/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.001250391 seconds)
    (246/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000109372 seconds)
    (247/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.002363624 seconds)
    (248/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.029977058 seconds)
    (249/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.127411992 seconds)
    (250/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.026708078 seconds)
    (251/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.667e-5 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.034499914 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.027193939 seconds)
    (254/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.027242362 seconds)
    (255/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.7436e-5 seconds)
    (256/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027061024 seconds)
    (257/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.07187357 seconds)
    (258/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 7.7851e-5 seconds)
    (259/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.034599421 seconds)
    (260/434) benchmarking ("sort", "Float32", 0)...
    done (took 1.020278261 seconds)
    (261/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 9.4621e-5 seconds)
    (262/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001646929 seconds)
    (263/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.110190005 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.9741e-5 seconds)
    (265/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.141244507 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.028279407 seconds)
    (267/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.003591809 seconds)
    (268/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.031206697 seconds)
    (269/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001282247 seconds)
    (270/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.035594795 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.032777906 seconds)
    (272/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 3.556e-5 seconds)
    (273/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.916e-5 seconds)
    (274/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000120944 seconds)
    (275/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 7.4144e-5 seconds)
    (276/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 6.6957e-5 seconds)
    (277/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 6.3898e-5 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.042532459 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 8.4044e-5 seconds)
    (280/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.8984e-5 seconds)
    (281/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.028752928 seconds)
    (282/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.000109299 seconds)
    (283/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035703176 seconds)
    (284/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.4659e-5 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.025961859 seconds)
    (286/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.000233173 seconds)
    (287/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.031433984 seconds)
    (288/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.031866381 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.045123545 seconds)
    (290/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 3.798e-5 seconds)
    (291/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.029156431 seconds)
    (292/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 6.1224e-5 seconds)
    (293/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.028581257 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.030918317 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026925306 seconds)
    (296/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002293751 seconds)
    (297/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.150601793 seconds)
    (298/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.036353609 seconds)
    (299/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029430052 seconds)
    (300/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.134235993 seconds)
    (301/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.854e-5 seconds)
    (302/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.02872834 seconds)
    (303/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 8.2625e-5 seconds)
    (304/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.109016648 seconds)
    (305/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.029322932 seconds)
    (306/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.044012528 seconds)
    (307/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.033304771 seconds)
    (308/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.027149868 seconds)
    (309/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 6.0682e-5 seconds)
    (310/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.8759e-5 seconds)
    (311/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029614893 seconds)
    (312/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.7595e-5 seconds)
    (313/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.6604e-5 seconds)
    (314/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002454649 seconds)
    (315/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.028948768 seconds)
    (316/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000102862 seconds)
    (317/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024074283 seconds)
    (318/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.034059808 seconds)
    (319/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001711261 seconds)
    (320/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.065403477 seconds)
    (321/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.037258312 seconds)
    (322/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.3063e-5 seconds)
    (323/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 8.0382e-5 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.087199493 seconds)
    (325/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001813654 seconds)
    (326/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.036241264 seconds)
    (327/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.2313e-5 seconds)
    (328/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.033152912 seconds)
    (329/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 4.1907e-5 seconds)
    (330/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.251375466 seconds)
    (331/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.033591872 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 7.8245e-5 seconds)
    (333/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.090003373 seconds)
    (334/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.3889e-5 seconds)
    (335/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.001280595 seconds)
    (336/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.030908964 seconds)
    (337/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 3.0888e-5 seconds)
    (338/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.107870706 seconds)
    (339/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001743305 seconds)
    (340/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.062e-5 seconds)
    (341/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.028314308 seconds)
    (342/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.30076878 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.026089064 seconds)
    (344/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 7.6457e-5 seconds)
    (345/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 7.0826e-5 seconds)
    (346/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.5581e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031363853 seconds)
    (348/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.982032341 seconds)
    (349/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001709226 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.027578061 seconds)
    (351/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.038391212 seconds)
    (352/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 4.0092e-5 seconds)
    (353/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.1265e-5 seconds)
    (354/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.043469042 seconds)
    (355/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.8088e-5 seconds)
    (356/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 6.7657e-5 seconds)
    (357/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.033562013 seconds)
    (358/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.035095884 seconds)
    (359/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.033369055 seconds)
    (360/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 6.7115e-5 seconds)
    (361/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.036158608 seconds)
    (362/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.028055379 seconds)
    (363/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 9.1916e-5 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 9.9741e-5 seconds)
    (365/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.02456485 seconds)
    (366/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 4.935e-5 seconds)
    (367/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.036138184 seconds)
    (368/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.036672067 seconds)
    (369/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 4.9002e-5 seconds)
    (370/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.001762282 seconds)
    (371/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.088628139 seconds)
    (372/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 7.8184e-5 seconds)
    (373/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.989e-5 seconds)
    (374/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.034679318 seconds)
    (375/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 3.0809e-5 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 8.1028e-5 seconds)
    (377/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 3.3086e-5 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 3.3123e-5 seconds)
    (379/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.2946e-5 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 4.4391e-5 seconds)
    (381/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 8.8957e-5 seconds)
    (382/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068258155 seconds)
    (383/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000112208 seconds)
    (384/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.9798e-5 seconds)
    (385/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000116053 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.040837659 seconds)
    (387/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 7.8754e-5 seconds)
    (388/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.00090654 seconds)
    (389/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.030057591 seconds)
    (390/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.1117e-5 seconds)
    (391/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027592516 seconds)
    (392/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.030427572 seconds)
    (393/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 3.4631e-5 seconds)
    (394/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.030129477 seconds)
    (395/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.030034786 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.028365589 seconds)
    (397/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.1553e-5 seconds)
    (398/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.480585901 seconds)
    (399/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.7163e-5 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.03948941 seconds)
    (401/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002450839 seconds)
    (402/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.7836e-5 seconds)
    (403/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.030794186 seconds)
    (404/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 6.169e-5 seconds)
    (405/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 8.4653e-5 seconds)
    (406/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 7.5224e-5 seconds)
    (407/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.000113566 seconds)
    (408/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.5839e-5 seconds)
    (409/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.03618232 seconds)
    (410/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.068871681 seconds)
    (411/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.031648559 seconds)
    (412/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.7596e-5 seconds)
    (413/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 8.9613e-5 seconds)
    (414/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.030606771 seconds)
    (415/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.029330927 seconds)
    (416/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.5688e-5 seconds)
    (417/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.2203e-5 seconds)
    (418/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 8.5723e-5 seconds)
    (419/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.9794e-5 seconds)
    (420/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 6.852e-5 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.027229847 seconds)
    (422/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 7.7606e-5 seconds)
    (423/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.4817e-5 seconds)
    (424/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.031796108 seconds)
    (425/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.9241e-5 seconds)
    (426/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 5.5047e-5 seconds)
    (427/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000119622 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.034758812 seconds)
    (429/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.000131265 seconds)
    (430/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.1285e-5 seconds)
    (431/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.0435e-5 seconds)
    (432/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.037208651 seconds)
    (433/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 4.0787e-5 seconds)
    (434/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.110841908 seconds)
  done (took 23.761867413 seconds)
done (took 24.628558369 seconds)
(12/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.10040103 seconds)
  (2/4) benchmarking "grow_array"...
  done (took 0.03091977 seconds)
  (3/4) benchmarking "arrays"...
  done (took 0.053794047 seconds)
  (4/4) benchmarking "structs"...
  done (took 0.060929095 seconds)
done (took 1.227828241 seconds)
(13/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.035643954 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.063774792 seconds)
    (3/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037303968 seconds)
    (4/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.040155105 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.041423594 seconds)
    (6/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.039245299 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.048756201 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.044503242 seconds)
    (9/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.04241499 seconds)
    (10/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.035667944 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.025782803 seconds)
    (12/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.039375328 seconds)
    (13/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.035645943 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.491e-5 seconds)
    (15/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.048372166 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.026893197 seconds)
    (17/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.043373703 seconds)
    (18/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.035381766 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.042073997 seconds)
    (20/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.053118643 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.002477273 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.8031e-5 seconds)
    (23/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.025041065 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001099973 seconds)
    (25/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.1221e-5 seconds)
    (26/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 6.4364e-5 seconds)
    (27/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.031587757 seconds)
    (28/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.034836441 seconds)
    (29/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.025626548 seconds)
    (30/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.1631e-5 seconds)
    (31/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.0809e-5 seconds)
    (32/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.0704e-5 seconds)
    (33/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 7.717e-6 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 8.03e-6 seconds)
    (35/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.029287273 seconds)
    (36/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.040885074 seconds)
    (37/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 1.9925e-5 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.04057303 seconds)
    (39/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.039012051 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.029463076 seconds)
    (41/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.040717236 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.2278e-5 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.035745236 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001094009 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.029944063 seconds)
    (46/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002519499 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.035278948 seconds)
    (48/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 6.9872e-5 seconds)
    (49/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.9444e-5 seconds)
    (50/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 9.54e-6 seconds)
    (51/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 9.051e-6 seconds)
    (52/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 6.5099e-5 seconds)
    (53/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.037535358 seconds)
    (54/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.7397e-5 seconds)
    (55/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.03071553 seconds)
    (56/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.3063e-5 seconds)
    (57/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.042804424 seconds)
    (58/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.9778e-5 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.024016415 seconds)
    (60/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.6952e-5 seconds)
    (61/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 9.0248e-5 seconds)
    (62/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.00107672 seconds)
    (63/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 8.13e-6 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 9.827e-6 seconds)
    (65/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 8.023e-6 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 5.715e-6 seconds)
  done (took 2.326729963 seconds)
  (2/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.037889988 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.020659577 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.033861681 seconds)
    (4/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035271452 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.031194459 seconds)
    (6/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.022057453 seconds)
    (7/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.0552e-5 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.024174314 seconds)
    (9/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.0094e-5 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 8.054e-6 seconds)
    (11/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.021112647 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.025380738 seconds)
    (13/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.024035939 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.023807161 seconds)
    (15/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.2876e-5 seconds)
    (16/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.020916555 seconds)
    (17/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.03484004 seconds)
    (18/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.036755275 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.023827782 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.5033e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.051623461 seconds)
    (22/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.021981472 seconds)
    (23/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.3642e-5 seconds)
    (24/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 6.369e-6 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.020700393 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.023831965 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.020524178 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.4772e-5 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.4476e-5 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 9.055e-6 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.102e-5 seconds)
    (32/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 6.954e-6 seconds)
    (33/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 6.724e-6 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.0084e-5 seconds)
    (35/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.024378114 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.8264e-5 seconds)
    (37/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.2123e-5 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.020559538 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.0914e-5 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.6532e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 8.138e-6 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.023860959 seconds)
    (43/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 4.8707e-5 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.1749e-5 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.0672e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.020399196 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.020855044 seconds)
    (48/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.2862e-5 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.037e-5 seconds)
    (50/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.1421e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.4372e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.0984e-5 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.023783835 seconds)
    (54/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025530204 seconds)
    (55/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022557693 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.5715e-5 seconds)
    (57/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.03e-5 seconds)
    (58/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 6.919e-6 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.0652e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 9.885e-6 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.0324e-5 seconds)
    (62/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 6.634e-6 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 6.649e-6 seconds)
    (64/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.021165383 seconds)
    (65/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.1878e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.3759e-5 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 7.169e-6 seconds)
    (68/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.0112e-5 seconds)
    (69/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.0947e-5 seconds)
    (70/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 6.151e-6 seconds)
    (71/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.0003e-5 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.024071093 seconds)
  done (took 1.749699245 seconds)
  (3/5) benchmarking "sequences"...
    (1/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.0425019 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.069594444 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.034272443 seconds)
    (4/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020206001 seconds)
    (5/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.02121208 seconds)
    (6/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.031876475 seconds)
    (7/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.021450734 seconds)
  done (took 1.212256574 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.039061642 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.028760901 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024350332 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.019627112 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.024219856 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.02394712 seconds)
  done (took 1.132148758 seconds)
  (5/5) benchmarking "types"...
    (1/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020520209 seconds)
    (2/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.023858103 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.021493845 seconds)
    (4/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.049992329 seconds)
    (5/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023491309 seconds)
    (6/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.021717912 seconds)
    (7/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.028001138 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.024301367 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020851393 seconds)
    (10/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031442058 seconds)
    (11/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.021796363 seconds)
    (12/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.05350418 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.031786385 seconds)
    (14/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.039374369 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.033741109 seconds)
    (16/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020428212 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.052900539 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064278591 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023905258 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.034104686 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021464558 seconds)
    (22/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.04414851 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029916162 seconds)
    (24/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023215682 seconds)
    (25/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023812219 seconds)
    (26/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019434154 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021305757 seconds)
    (28/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.020451836 seconds)
    (29/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.03654706 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029273832 seconds)
    (31/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024984023 seconds)
    (32/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.023198223 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.023930351 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020921207 seconds)
    (35/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021390365 seconds)
    (36/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021897268 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029451841 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.035004445 seconds)
    (39/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024185063 seconds)
    (40/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.03406423 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.021752428 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.039318547 seconds)
    (43/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.027593637 seconds)
    (44/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021094095 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022055086 seconds)
    (46/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.032219164 seconds)
    (47/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.020926205 seconds)
    (48/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.023842014 seconds)
    (49/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021662015 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.021310634 seconds)
    (51/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019664435 seconds)
    (52/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.02079129 seconds)
    (53/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.033404708 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.029809852 seconds)
    (55/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.02971559 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.03059386 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021155607 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021106623 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021454214 seconds)
    (60/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020645942 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.021547173 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.035170652 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.033828799 seconds)
    (64/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033272054 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.024047726 seconds)
    (66/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.028493252 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021436906 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023293003 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.05060019 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021369426 seconds)
    (71/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024862025 seconds)
    (72/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.023703634 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.020726676 seconds)
    (74/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020912982 seconds)
    (75/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.020725327 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.021644592 seconds)
    (77/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.02120068 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.033276505 seconds)
    (79/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.023407593 seconds)
    (80/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.021698628 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.023703593 seconds)
    (82/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.030391815 seconds)
    (83/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.018568815 seconds)
    (84/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.024708824 seconds)
    (85/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022622178 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.023490074 seconds)
    (87/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.033621359 seconds)
    (88/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.02438964 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.033346713 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022649871 seconds)
    (91/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.021709572 seconds)
    (92/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.02192152 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.024922459 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021294371 seconds)
    (95/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.024714578 seconds)
    (96/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.023222004 seconds)
    (97/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022063939 seconds)
  done (took 3.588705429 seconds)
done (took 10.975861799 seconds)
(14/23) benchmarking "shootout"...
  (1/12) benchmarking "fasta"...
  done (took 0.120951062 seconds)
  (2/12) benchmarking "k_nucleotide"...
  done (took 0.528155642 seconds)
  (3/12) benchmarking "revcomp"...
  done (took 0.074261457 seconds)
  (4/12) benchmarking "spectralnorm"...
  done (took 0.103240211 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.066343956 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.095259659 seconds)
  (7/12) benchmarking "meteor_contest"...
  done (took 2.775063453 seconds)
  (8/12) benchmarking "pidigits"...
  done (took 0.108898646 seconds)
  (9/12) benchmarking "nbody_vec"...
  done (took 0.440707695 seconds)
  (10/12) benchmarking "nbody"...
  done (took 0.076885698 seconds)
  (11/12) benchmarking "regex_dna"...
  done (took 0.055475233 seconds)
  (12/12) benchmarking "fannkuch"...
  done (took 0.120280279 seconds)
done (took 5.553720601 seconds)
(15/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.096581126 seconds)
    (2/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.237192048 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.069990431 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.11696223 seconds)
  done (took 1.500140375 seconds)
  (2/6) benchmarking "26942"...
  done (took 0.058559966 seconds)
  (3/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.298919072 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 0.119239307 seconds)
    (3/4) benchmarking ("(10000000,)", 2)...
    done (took 0.165284501 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.159750828 seconds)
  done (took 1.733199507 seconds)
  (4/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.037086349 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.03629999 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.020345831 seconds)
    (4/9) benchmarking (5, "scal_tup")...
    done (took 0.025889512 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.029013933 seconds)
    (6/9) benchmarking (3, "scal_tup")...
    done (took 0.025220631 seconds)
    (7/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.029544581 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.020491409 seconds)
    (9/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.089898185 seconds)
  done (took 1.345165285 seconds)
  (5/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 0.060696871 seconds)
    (2/6) benchmarking ("tuple", 10)...
    done (took 0.046239488 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.036749611 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 1.2428e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 6.52e-6 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.03330139 seconds)
  done (took 1.171398056 seconds)
  (6/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.270246705 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.181436402 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.278924197 seconds)
  done (took 1.724412199 seconds)
done (took 8.524280327 seconds)
(16/23) benchmarking "sort"...
  (1/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.040660801 seconds)
    (2/13) benchmarking "small Float64 view"...
    done (took 0.178773869 seconds)
    (3/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.20766841 seconds)
    (4/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.035496174 seconds)
    (5/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.271430392 seconds)
    (6/13) benchmarking "small Int view"...
    done (took 0.097976046 seconds)
    (7/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.228247662 seconds)
    (8/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.407380938 seconds)
    (9/13) benchmarking "Float16"...
    done (took 1.00483966 seconds)
    (10/13) benchmarking "sort(rand(10^8))"...
    done (took 8.641309134 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 8.100617136 seconds)
    (12/13) benchmarking "inplace sorting of a view"...
    done (took 0.910350384 seconds)
    (13/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.962520677 seconds)
  done (took 23.090467926 seconds)
  (2/11) benchmarking "length = 10"...
    (1/17) benchmarking "all same"...
    done (took 0.031120966 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 0.028382938 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.340283498 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 9.179e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.09388484 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.044810681 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 0.132606876 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.026725916 seconds)
    (9/17) benchmarking "descending"...
    done (took 0.035253999 seconds)
    (10/17) benchmarking "ascending"...
    done (took 0.030412359 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 0.024043726 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.6937e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.5301e-5 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.02531092 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.115029615 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.5541e-5 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.575943335 seconds)
  done (took 9.554661455 seconds)
  (3/11) benchmarking "issorted"...
    (1/8) benchmarking ("reverse", "ascending")...
    done (took 0.056444442 seconds)
    (2/8) benchmarking ("forwards", "ascending")...
    done (took 0.029082365 seconds)
    (3/8) benchmarking ("forwards", "descending")...
    done (took 0.034905488 seconds)
    (4/8) benchmarking ("reverse", "random")...
    done (took 0.061485358 seconds)
    (5/8) benchmarking ("reverse", "ones")...
    done (took 0.030686354 seconds)
    (6/8) benchmarking ("forwards", "random")...
    done (took 0.031948833 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.030068398 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.025216291 seconds)
  done (took 1.375425563 seconds)
  (4/11) benchmarking "length = 30"...
    (1/17) benchmarking "all same"...
    done (took 2.6426e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 9.401e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 1.8645e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.826e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 6.295e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.6791e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 1.1205e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 7.278e-6 seconds)
    (9/17) benchmarking "descending"...
    done (took 7.113e-6 seconds)
    (10/17) benchmarking "ascending"...
    done (took 6.347e-6 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 1.3573e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.093e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.584e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.211e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 1.1652e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.783e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.011579591 seconds)
  done (took 1.07001845 seconds)
  (5/11) benchmarking "quicksort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.157687835 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.154784892 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.057099509 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.132903521 seconds)
  done (took 1.557064077 seconds)
  (6/11) benchmarking "length = 100"...
    (1/17) benchmarking "all same"...
    done (took 2.5543e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 1.5125e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.1273e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.969e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.991e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.7349e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.1642e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.3232e-5 seconds)
    (9/17) benchmarking "descending"...
    done (took 1.3431e-5 seconds)
    (10/17) benchmarking "ascending"...
    done (took 1.0418e-5 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 1.7571e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 6.965e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 9.357e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.863e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 1.9289e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.525e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.00043264 seconds)
  done (took 1.061147478 seconds)
  (7/11) benchmarking "length = 10000"...
    (1/17) benchmarking "all same"...
    done (took 6.7928e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 0.000551401 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.00036399 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000346025 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 1.2631e-5 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000360373 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 0.000958751 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000525212 seconds)
    (9/17) benchmarking "descending"...
    done (took 0.000564665 seconds)
    (10/17) benchmarking "ascending"...
    done (took 0.000549637 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000998529 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.00033745 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000365953 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.2728e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.000878611 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000320165 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.016998495 seconds)
  done (took 1.079250424 seconds)
  (8/11) benchmarking "mergesort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.208594476 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.201087866 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.057843341 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.074975067 seconds)
  done (took 1.593630516 seconds)
  (9/11) benchmarking "length = 1000"...
    (1/17) benchmarking "all same"...
    done (took 3.5625e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 6.2203e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.4149e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.6119e-5 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 7.039e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.6098e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 9.3683e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.3082e-5 seconds)
    (9/17) benchmarking "descending"...
    done (took 4.7028e-5 seconds)
    (10/17) benchmarking "ascending"...
    done (took 4.475e-5 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 8.9487e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.7623e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.0658e-5 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.213e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 8.15e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.0696e-5 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.001862365 seconds)
  done (took 1.066800792 seconds)
  (10/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.070990667 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.084548461 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.051200788 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.066791687 seconds)
  done (took 1.330240312 seconds)
  (11/11) benchmarking "length = 3"...
    (1/17) benchmarking "all same"...
    done (took 2.4713e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 6.381e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 9.157e-6 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.368e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.479e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.4491e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 8.58e-6 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 6.005e-6 seconds)
    (9/17) benchmarking "descending"...
    done (took 4.856e-6 seconds)
    (10/17) benchmarking "ascending"...
    done (took 4.108e-6 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 8.501e-6 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.117e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.363e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.415e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 7.918e-6 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 3.562e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.7001e-5 seconds)
  done (took 1.060977523 seconds)
done (took 44.84793168 seconds)
(17/23) benchmarking "array"...
  (1/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 0.172629312 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.022196919 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 0.016246376 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 0.044014476 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.014928489 seconds)
  done (took 1.323690588 seconds)
  (2/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.610990065 seconds)
    (2/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.932917722 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.024171268 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.814297627 seconds)
    (5/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.17015204 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.643433898 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.005529488 seconds)
    (8/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142165184 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.492204446 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.298986904 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009304221 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.096868957 seconds)
  done (took 27.306295482 seconds)
  (3/13) benchmarking "index"...
    (1/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.09074871 seconds)
    (2/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.098891898 seconds)
    (3/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.274138031 seconds)
    (4/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101659584 seconds)
    (5/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.220845849 seconds)
    (6/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.198602398 seconds)
    (7/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.307010067 seconds)
    (8/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.178392023 seconds)
    (9/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.31835032 seconds)
    (10/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.512512908 seconds)
    (11/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.03958956 seconds)
    (12/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056878879 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023046706 seconds)
    (14/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.205031594 seconds)
    (15/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065048357 seconds)
    (16/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08779907 seconds)
    (17/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.351539547 seconds)
    (18/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.038196405 seconds)
    (19/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064048403 seconds)
    (20/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.142319455 seconds)
    (21/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.000368869 seconds)
    (22/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020857971 seconds)
    (23/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173163574 seconds)
    (24/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068346493 seconds)
    (25/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.087398291 seconds)
    (26/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111036201 seconds)
    (27/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.216728959 seconds)
    (28/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042393284 seconds)
    (29/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000124101 seconds)
    (30/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037715102 seconds)
    (31/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043747455 seconds)
    (32/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041694331 seconds)
    (33/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073981873 seconds)
    (34/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064578814 seconds)
    (35/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086870754 seconds)
    (36/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.043267066 seconds)
    (37/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023526198 seconds)
    (38/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000130258 seconds)
    (39/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034438967 seconds)
    (40/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031732889 seconds)
    (41/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040928642 seconds)
    (42/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051954973 seconds)
    (43/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.019692538 seconds)
    (44/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.048097787 seconds)
    (45/608) benchmarking ("sum", "3darray")...
    done (took 0.048342149 seconds)
    (46/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030350789 seconds)
    (47/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092685218 seconds)
    (48/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.012891255 seconds)
    (49/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043290303 seconds)
    (50/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.033110003 seconds)
    (51/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060987759 seconds)
    (52/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029776163 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.235062015 seconds)
    (54/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135812237 seconds)
    (55/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039749271 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034405194 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037478456 seconds)
    (58/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044883833 seconds)
    (59/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118689576 seconds)
    (60/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.037497942 seconds)
    (61/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016260728 seconds)
    (62/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.000102938 seconds)
    (63/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000301834 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028538102 seconds)
    (65/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037255755 seconds)
    (66/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.323730962 seconds)
    (67/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.0421e-5 seconds)
    (68/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024481047 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014910351 seconds)
    (70/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086432674 seconds)
    (71/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023857764 seconds)
    (72/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.051484723 seconds)
    (73/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051738692 seconds)
    (74/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021721573 seconds)
    (75/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.3196e-5 seconds)
    (76/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031722885 seconds)
    (77/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040507044 seconds)
    (78/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020507889 seconds)
    (79/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086510551 seconds)
    (80/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041458574 seconds)
    (81/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052587047 seconds)
    (82/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08527887 seconds)
    (83/608) benchmarking "6d"...
    done (took 0.264524089 seconds)
    (84/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.025911001 seconds)
    (85/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.3125e-5 seconds)
    (86/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.041439768 seconds)
    (87/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000218164 seconds)
    (88/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093045623 seconds)
    (89/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095404997 seconds)
    (90/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057872413 seconds)
    (91/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.038263786 seconds)
    (92/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040433229 seconds)
    (93/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062524152 seconds)
    (94/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.039567883 seconds)
    (95/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158619925 seconds)
    (96/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025301547 seconds)
    (97/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036741735 seconds)
    (98/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.021963896 seconds)
    (99/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.5626e-5 seconds)
    (100/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022472702 seconds)
    (101/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024400384 seconds)
    (102/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084730824 seconds)
    (103/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078135494 seconds)
    (104/608) benchmarking "ind2sub"...
    done (took 0.072411984 seconds)
    (105/608) benchmarking "5d"...
    done (took 0.138925849 seconds)
    (106/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.011879712 seconds)
    (107/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055730103 seconds)
    (108/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.040710253 seconds)
    (109/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045903287 seconds)
    (110/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025382859 seconds)
    (111/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032212939 seconds)
    (112/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024711755 seconds)
    (113/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.054483274 seconds)
    (114/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047801056 seconds)
    (115/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048983271 seconds)
    (116/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.022363781 seconds)
    (117/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.021534281 seconds)
    (118/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079037918 seconds)
    (119/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.023671432 seconds)
    (120/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054643032 seconds)
    (121/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5476e-5 seconds)
    (122/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.05589076 seconds)
    (123/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027161248 seconds)
    (124/608) benchmarking "3d"...
    done (took 0.064594692 seconds)
    (125/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039262334 seconds)
    (126/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.040573109 seconds)
    (127/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044237865 seconds)
    (128/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.036607086 seconds)
    (129/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067862396 seconds)
    (130/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07948325 seconds)
    (131/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06398619 seconds)
    (132/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027887371 seconds)
    (133/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.029327132 seconds)
    (134/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020510847 seconds)
    (135/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028910194 seconds)
    (136/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.043017651 seconds)
    (137/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09114844 seconds)
    (138/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000159121 seconds)
    (139/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069023096 seconds)
    (140/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026684193 seconds)
    (141/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.00030636 seconds)
    (142/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.068695467 seconds)
    (143/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034160365 seconds)
    (144/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024052341 seconds)
    (145/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.036764496 seconds)
    (146/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.01883114 seconds)
    (147/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.068983138 seconds)
    (148/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079664371 seconds)
    (149/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000212754 seconds)
    (150/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081992146 seconds)
    (151/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 6.8351e-5 seconds)
    (152/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.8424e-5 seconds)
    (153/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028922609 seconds)
    (154/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 9.8132e-5 seconds)
    (155/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.5769e-5 seconds)
    (156/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038228389 seconds)
    (157/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030342865 seconds)
    (158/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.9488e-5 seconds)
    (159/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.060439331 seconds)
    (160/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047577453 seconds)
    (161/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.028026114 seconds)
    (162/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0499645 seconds)
    (163/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045088324 seconds)
    (164/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.022779426 seconds)
    (165/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.021010707 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037293666 seconds)
    (167/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053808849 seconds)
    (168/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039525038 seconds)
    (169/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073724171 seconds)
    (170/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03380197 seconds)
    (171/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.017482138 seconds)
    (172/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013262801 seconds)
    (173/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015464868 seconds)
    (174/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.024481671 seconds)
    (175/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.025699954 seconds)
    (176/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084081766 seconds)
    (177/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05768985 seconds)
    (178/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.704e-5 seconds)
    (179/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064445256 seconds)
    (180/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.02872644 seconds)
    (181/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068702001 seconds)
    (182/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053715957 seconds)
    (183/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.032554344 seconds)
    (184/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000424355 seconds)
    (185/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043783796 seconds)
    (186/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045819008 seconds)
    (187/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025092933 seconds)
    (188/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086510405 seconds)
    (189/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04875389 seconds)
    (190/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065289653 seconds)
    (191/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057897329 seconds)
    (192/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020517436 seconds)
    (193/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.353837258 seconds)
    (194/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023589581 seconds)
    (195/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.4115e-5 seconds)
    (196/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045742256 seconds)
    (197/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.8091e-5 seconds)
    (198/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060421201 seconds)
    (199/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083628844 seconds)
    (200/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036955223 seconds)
    (201/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033281248 seconds)
    (202/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.016465203 seconds)
    (203/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.018755592 seconds)
    (204/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.016864224 seconds)
    (205/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.041749218 seconds)
    (206/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 8.6558e-5 seconds)
    (207/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000551516 seconds)
    (208/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024594962 seconds)
    (209/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.037477788 seconds)
    (210/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019963342 seconds)
    (211/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056242023 seconds)
    (212/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022385637 seconds)
    (213/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05866281 seconds)
    (214/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064846222 seconds)
    (215/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.2924e-5 seconds)
    (216/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059081308 seconds)
    (217/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047614377 seconds)
    (218/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04784113 seconds)
    (219/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042444515 seconds)
    (220/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066912701 seconds)
    (221/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.025544294 seconds)
    (222/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040440109 seconds)
    (223/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000308608 seconds)
    (224/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000549154 seconds)
    (225/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034279823 seconds)
    (226/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024113156 seconds)
    (227/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050558987 seconds)
    (228/608) benchmarking "7d"...
    done (took 0.268932413 seconds)
    (229/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067436819 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026287576 seconds)
    (231/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.012842365 seconds)
    (232/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041303493 seconds)
    (233/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.040548706 seconds)
    (234/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.050569715 seconds)
    (235/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018309495 seconds)
    (236/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.064067798 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.017809632 seconds)
    (238/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069896887 seconds)
    (239/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041915872 seconds)
    (240/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.01609068 seconds)
    (241/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.020761669 seconds)
    (242/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021919899 seconds)
    (243/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.059735158 seconds)
    (244/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061315657 seconds)
    (245/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2529e-5 seconds)
    (246/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.039782201 seconds)
    (247/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018053163 seconds)
    (248/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048987181 seconds)
    (249/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.016820046 seconds)
    (250/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03483928 seconds)
    (251/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061473455 seconds)
    (252/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 8.0892e-5 seconds)
    (253/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.021149453 seconds)
    (254/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.026395528 seconds)
    (255/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018503081 seconds)
    (256/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.025941919 seconds)
    (257/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.018682662 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.00011003 seconds)
    (259/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08394214 seconds)
    (260/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054543312 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022738733 seconds)
    (262/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.2163e-5 seconds)
    (263/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.011002131 seconds)
    (264/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.053267044 seconds)
    (265/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043585269 seconds)
    (266/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051529449 seconds)
    (267/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049679838 seconds)
    (268/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.028786787 seconds)
    (269/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043428027 seconds)
    (270/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.013925551 seconds)
    (271/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018559186 seconds)
    (272/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029510189 seconds)
    (273/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093528332 seconds)
    (274/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05199889 seconds)
    (275/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078589379 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062484975 seconds)
    (277/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2144e-5 seconds)
    (278/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000296247 seconds)
    (279/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06464316 seconds)
    (280/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032254156 seconds)
    (281/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.053262034 seconds)
    (282/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046326979 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0487782 seconds)
    (284/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033774854 seconds)
    (285/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0806378 seconds)
    (286/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03171795 seconds)
    (287/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.3178e-5 seconds)
    (288/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.025211212 seconds)
    (289/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067565816 seconds)
    (290/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054624416 seconds)
    (291/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026431766 seconds)
    (292/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.070199295 seconds)
    (293/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046294608 seconds)
    (294/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026366119 seconds)
    (295/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021444383 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059741446 seconds)
    (297/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.030829531 seconds)
    (298/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027907521 seconds)
    (299/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051964028 seconds)
    (300/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042228599 seconds)
    (301/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.05698413 seconds)
    (302/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.042471686 seconds)
    (303/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.044463546 seconds)
    (304/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.071954506 seconds)
    (305/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.016649468 seconds)
    (306/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.018273273 seconds)
    (307/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0409763 seconds)
    (308/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046714818 seconds)
    (309/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084312598 seconds)
    (310/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039719338 seconds)
    (311/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022420151 seconds)
    (312/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039534912 seconds)
    (313/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078018586 seconds)
    (314/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.04557298 seconds)
    (315/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058273834 seconds)
    (316/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027087751 seconds)
    (317/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046895121 seconds)
    (318/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000159678 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020124652 seconds)
    (320/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015835766 seconds)
    (321/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.034013597 seconds)
    (322/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058214988 seconds)
    (323/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.028230701 seconds)
    (324/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03321964 seconds)
    (325/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.01880028 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029242799 seconds)
    (327/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043139492 seconds)
    (328/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 6.8364e-5 seconds)
    (329/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051295741 seconds)
    (330/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052992481 seconds)
    (331/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068918967 seconds)
    (332/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027846892 seconds)
    (333/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043743224 seconds)
    (334/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.014860813 seconds)
    (335/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03366026 seconds)
    (336/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075459148 seconds)
    (337/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.0395124 seconds)
    (338/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000487368 seconds)
    (339/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.00036413 seconds)
    (340/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03532919 seconds)
    (341/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.057751449 seconds)
    (342/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065151748 seconds)
    (343/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024282308 seconds)
    (344/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045958286 seconds)
    (345/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.1281e-5 seconds)
    (346/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071452398 seconds)
    (347/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069469731 seconds)
    (348/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047220059 seconds)
    (349/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085753499 seconds)
    (350/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050715356 seconds)
    (351/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071709566 seconds)
    (352/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.017133499 seconds)
    (353/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092529326 seconds)
    (354/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000120144 seconds)
    (355/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 6.1886e-5 seconds)
    (356/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01807626 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075799803 seconds)
    (358/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025582401 seconds)
    (359/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.029037103 seconds)
    (360/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.3237e-5 seconds)
    (361/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030999749 seconds)
    (362/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023403035 seconds)
    (363/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0164558 seconds)
    (364/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068173287 seconds)
    (365/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018492588 seconds)
    (366/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000148744 seconds)
    (367/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077249064 seconds)
    (368/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077560293 seconds)
    (369/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060923723 seconds)
    (370/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017266474 seconds)
    (371/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000123909 seconds)
    (372/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045450445 seconds)
    (373/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.2357e-5 seconds)
    (374/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015176941 seconds)
    (375/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033517702 seconds)
    (376/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.014141066 seconds)
    (377/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.033310263 seconds)
    (378/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051489971 seconds)
    (379/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046260116 seconds)
    (380/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.011150596 seconds)
    (381/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.015721282 seconds)
    (382/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038425795 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015041292 seconds)
    (384/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044713204 seconds)
    (385/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.225974181 seconds)
    (386/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 2.534e-5 seconds)
    (387/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028433102 seconds)
    (388/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023249946 seconds)
    (389/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024987094 seconds)
    (390/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000484231 seconds)
    (391/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042090324 seconds)
    (392/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.025468199 seconds)
    (393/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.026604878 seconds)
    (394/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040625277 seconds)
    (395/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010768247 seconds)
    (396/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065369856 seconds)
    (397/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010390713 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.031847092 seconds)
    (399/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089038606 seconds)
    (400/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047987874 seconds)
    (401/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.053926057 seconds)
    (402/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021578008 seconds)
    (403/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.1104e-5 seconds)
    (404/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071077763 seconds)
    (405/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.06402232 seconds)
    (406/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022494406 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.8068e-5 seconds)
    (408/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021825623 seconds)
    (409/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013224528 seconds)
    (410/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043842197 seconds)
    (411/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043805004 seconds)
    (412/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028088765 seconds)
    (413/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04489622 seconds)
    (414/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061278642 seconds)
    (415/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060429232 seconds)
    (416/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024427795 seconds)
    (417/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097289935 seconds)
    (418/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054296258 seconds)
    (419/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049986588 seconds)
    (420/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.438e-5 seconds)
    (421/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.8312e-5 seconds)
    (422/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.6045e-5 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011658854 seconds)
    (424/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023836847 seconds)
    (425/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08118135 seconds)
    (426/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055402805 seconds)
    (427/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012492821 seconds)
    (428/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.016751098 seconds)
    (429/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09710776 seconds)
    (430/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.054586231 seconds)
    (431/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.05804164 seconds)
    (432/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027881108 seconds)
    (433/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034251734 seconds)
    (434/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.018384288 seconds)
    (435/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018749913 seconds)
    (436/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0208304 seconds)
    (437/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046134142 seconds)
    (438/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.1373e-5 seconds)
    (439/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.01456046 seconds)
    (440/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025507661 seconds)
    (441/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178512743 seconds)
    (442/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015772454 seconds)
    (443/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062135223 seconds)
    (444/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076011585 seconds)
    (445/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000152264 seconds)
    (446/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.021457456 seconds)
    (447/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032673674 seconds)
    (448/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024304569 seconds)
    (449/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047874226 seconds)
    (450/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039892975 seconds)
    (451/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015635921 seconds)
    (452/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.246929188 seconds)
    (453/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04591779 seconds)
    (454/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076512287 seconds)
    (455/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055529801 seconds)
    (456/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.039444319 seconds)
    (457/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.02069718 seconds)
    (458/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.41e-5 seconds)
    (459/608) benchmarking ("sumvector", "1:100000")...
    done (took 1.5506e-5 seconds)
    (460/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02977176 seconds)
    (461/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.021981355 seconds)
    (462/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.016666559 seconds)
    (463/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062185718 seconds)
    (464/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020567882 seconds)
    (465/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.011986134 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062931232 seconds)
    (467/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.069004632 seconds)
    (468/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022635831 seconds)
    (469/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012437325 seconds)
    (470/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.013988364 seconds)
    (471/608) benchmarking "sub2ind"...
    done (took 0.300131965 seconds)
    (472/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062394581 seconds)
    (473/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046952037 seconds)
    (474/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067623989 seconds)
    (475/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.020535628 seconds)
    (476/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 6.0784e-5 seconds)
    (477/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.016031798 seconds)
    (478/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000328024 seconds)
    (479/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000302505 seconds)
    (480/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048402021 seconds)
    (481/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.1251e-5 seconds)
    (482/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03737746 seconds)
    (483/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044462876 seconds)
    (484/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035270148 seconds)
    (485/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016476565 seconds)
    (486/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.1862e-5 seconds)
    (487/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.04694081 seconds)
    (488/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047052932 seconds)
    (489/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016623707 seconds)
    (490/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081343768 seconds)
    (491/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028280814 seconds)
    (492/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.9841e-5 seconds)
    (493/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041485102 seconds)
    (494/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018141835 seconds)
    (495/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03310538 seconds)
    (496/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 7.1616e-5 seconds)
    (497/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050992681 seconds)
    (498/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.000399978 seconds)
    (499/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070778807 seconds)
    (500/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.360847019 seconds)
    (501/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.030907153 seconds)
    (502/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041003636 seconds)
    (503/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.015949192 seconds)
    (504/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.020334549 seconds)
    (505/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042188381 seconds)
    (506/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.5885e-5 seconds)
    (507/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045771486 seconds)
    (508/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014951223 seconds)
    (509/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055392073 seconds)
    (510/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024154831 seconds)
    (511/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030243941 seconds)
    (512/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023802831 seconds)
    (513/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061321689 seconds)
    (514/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.058675153 seconds)
    (515/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.06768543 seconds)
    (516/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.054896196 seconds)
    (517/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074149601 seconds)
    (518/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018157814 seconds)
    (519/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02495914 seconds)
    (520/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062955449 seconds)
    (521/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.035024685 seconds)
    (522/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.022563814 seconds)
    (523/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055712539 seconds)
    (524/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014877773 seconds)
    (525/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.033449823 seconds)
    (526/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053718126 seconds)
    (527/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.8067e-5 seconds)
    (528/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1722512 seconds)
    (529/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020128756 seconds)
    (530/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023415825 seconds)
    (531/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034811454 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.026496507 seconds)
    (533/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.058178598 seconds)
    (534/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.0654331 seconds)
    (535/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026041043 seconds)
    (536/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062908603 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.019769472 seconds)
    (538/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048401339 seconds)
    (539/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057033199 seconds)
    (540/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.015638519 seconds)
    (541/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061385546 seconds)
    (542/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032150355 seconds)
    (543/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.022151576 seconds)
    (544/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01907975 seconds)
    (545/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.6745e-5 seconds)
    (546/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025882725 seconds)
    (547/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032490406 seconds)
    (548/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072309121 seconds)
    (549/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05315338 seconds)
    (550/608) benchmarking "4d"...
    done (took 0.093273559 seconds)
    (551/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.074676965 seconds)
    (552/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000112706 seconds)
    (553/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.017794767 seconds)
    (554/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018178353 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070050179 seconds)
    (556/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028087943 seconds)
    (557/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059677347 seconds)
    (558/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000120928 seconds)
    (559/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028525441 seconds)
    (560/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045091157 seconds)
    (561/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063376459 seconds)
    (562/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013667303 seconds)
    (563/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047370467 seconds)
    (564/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053015477 seconds)
    (565/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.052444788 seconds)
    (566/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027332212 seconds)
    (567/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016186726 seconds)
    (568/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011343306 seconds)
    (569/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.05805837 seconds)
    (570/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.01488767 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014957279 seconds)
    (572/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043576492 seconds)
    (573/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040231758 seconds)
    (574/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019087017 seconds)
    (575/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014860193 seconds)
    (576/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050510576 seconds)
    (577/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099581525 seconds)
    (578/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014279694 seconds)
    (579/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045650379 seconds)
    (580/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072683841 seconds)
    (581/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.354e-5 seconds)
    (582/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 1.9143e-5 seconds)
    (583/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058187961 seconds)
    (584/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053450953 seconds)
    (585/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071417328 seconds)
    (586/608) benchmarking "2d"...
    done (took 0.052020685 seconds)
    (587/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062555334 seconds)
    (588/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060354061 seconds)
    (589/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024063379 seconds)
    (590/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072798254 seconds)
    (591/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011355138 seconds)
    (592/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046476255 seconds)
    (593/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034480521 seconds)
    (594/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.016830731 seconds)
    (595/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.059245072 seconds)
    (596/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.2059e-5 seconds)
    (597/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.25769231 seconds)
    (598/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 7.7229e-5 seconds)
    (599/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027297078 seconds)
    (600/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.4357e-5 seconds)
    (601/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 1.5057e-5 seconds)
    (602/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044756876 seconds)
    (603/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042609787 seconds)
    (604/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041384223 seconds)
    (605/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.019602714 seconds)
    (606/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066321895 seconds)
    (607/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017922444 seconds)
    (608/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089663213 seconds)
  done (took 29.498055378 seconds)
  (4/13) benchmarking "convert"...
    (1/4) benchmarking ("Float64", "Int")...
    done (took 0.136031971 seconds)
    (2/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.123377326 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.096741142 seconds)
    (4/4) benchmarking ("Int", "Float64")...
    done (took 0.032006203 seconds)
  done (took 1.563244848 seconds)
  (5/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.057056886 seconds)
    (2/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025243994 seconds)
    (3/6) benchmarking "boolarray_true_load!"...
    done (took 0.024454125 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.025367415 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.044724279 seconds)
    (6/6) benchmarking "bitarray_true_load!"...
    done (took 0.034719244 seconds)
  done (took 1.378274003 seconds)
  (6/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate", "Float64")...
    done (took 0.049957462 seconds)
    (2/12) benchmarking ("cumsum", "Int")...
    done (took 0.038902012 seconds)
    (3/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.100093124 seconds)
    (4/12) benchmarking ("accumulate!", "Int")...
    done (took 0.045188725 seconds)
    (5/12) benchmarking ("cumsum", "Float64")...
    done (took 0.028435703 seconds)
    (6/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.02692676 seconds)
    (7/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.043719531 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.093181737 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.036917504 seconds)
    (10/12) benchmarking ("accumulate", "Int")...
    done (took 0.031574959 seconds)
    (11/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.027815803 seconds)
    (12/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.043516284 seconds)
  done (took 1.731095752 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 0.039227566 seconds)
    (2/12) benchmarking ("push_multiple!", 256)...
    done (took 3.3153e-5 seconds)
    (3/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.4041e-5 seconds)
    (4/12) benchmarking ("prerend!", 8)...
    done (took 0.043451598 seconds)
    (5/12) benchmarking ("prerend!", 256)...
    done (took 3.205e-5 seconds)
    (6/12) benchmarking ("push_single!", 256)...
    done (took 0.031530395 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 0.042472317 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 2.4128e-5 seconds)
    (9/12) benchmarking ("prerend!", 2048)...
    done (took 2.4475e-5 seconds)
    (10/12) benchmarking ("append!", 8)...
    done (took 6.705e-6 seconds)
    (11/12) benchmarking ("push_single!", 2048)...
    done (took 1.7202e-5 seconds)
    (12/12) benchmarking ("push_single!", 8)...
    done (took 6.048e-6 seconds)
  done (took 1.328125239 seconds)
  (8/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.056835061 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.062943927 seconds)
    (3/20) benchmarking ("sumabs", "Float64")...
    done (took 0.058147061 seconds)
    (4/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.056779334 seconds)
    (5/20) benchmarking ("norminf", "Float64")...
    done (took 0.209182858 seconds)
    (6/20) benchmarking ("sum", "Float64")...
    done (took 0.04050242 seconds)
    (7/20) benchmarking ("norm", "Float64")...
    done (took 0.039158534 seconds)
    (8/20) benchmarking ("sum", "Int64")...
    done (took 0.039593066 seconds)
    (9/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.051129539 seconds)
    (10/20) benchmarking ("norminf", "Int64")...
    done (took 0.221777163 seconds)
    (11/20) benchmarking ("norm", "Int64")...
    done (took 0.034813432 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.040040255 seconds)
    (13/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.025255696 seconds)
    (14/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.060415531 seconds)
    (15/20) benchmarking ("maxabs", "Int64")...
    done (took 0.052241991 seconds)
    (16/20) benchmarking ("mean", "Float64")...
    done (took 0.033575418 seconds)
    (17/20) benchmarking ("norm1", "Int64")...
    done (took 0.085609954 seconds)
    (18/20) benchmarking ("mean", "Int64")...
    done (took 0.073006755 seconds)
    (19/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.050617341 seconds)
    (20/20) benchmarking ("sumabs", "Int64")...
    done (took 0.051923422 seconds)
  done (took 2.511723974 seconds)
  (9/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.047017161 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.052759958 seconds)
    (3/4) benchmarking "rev_load_slow!"...
    done (took 0.049551834 seconds)
    (4/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.053525784 seconds)
  done (took 1.379476332 seconds)
  (10/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.045555405 seconds)
    (2/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.039931475 seconds)
    (3/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038325941 seconds)
    (4/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.027799008 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.047239272 seconds)
    (6/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.04180756 seconds)
    (7/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.02269063 seconds)
    (8/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038578016 seconds)
    (9/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.035290616 seconds)
    (10/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.045836598 seconds)
    (11/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.040370634 seconds)
    (12/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.034358463 seconds)
    (13/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.038253812 seconds)
    (14/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.045252539 seconds)
    (15/24) benchmarking ("any", "BitArray")...
    done (took 0.027211651 seconds)
    (16/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.040549495 seconds)
    (17/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.041072823 seconds)
    (18/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.022328058 seconds)
    (19/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.03377026 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.033906097 seconds)
    (21/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026244394 seconds)
    (22/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.02337028 seconds)
    (23/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.022695972 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.028979939 seconds)
  done (took 2.020820383 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.033478234 seconds)
    (2/17) benchmarking ("vcat", 500)...
    done (took 0.08358651 seconds)
    (3/17) benchmarking ("hcat", 5)...
    done (took 1.2511e-5 seconds)
    (4/17) benchmarking ("vcat_setind", 5)...
    done (took 0.049907897 seconds)
    (5/17) benchmarking ("catnd_setind", 5)...
    done (took 0.191407343 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.051458053 seconds)
    (7/17) benchmarking ("hvcat", 5)...
    done (took 0.033197937 seconds)
    (8/17) benchmarking ("hcat_setind", 500)...
    done (took 0.074740161 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.002521865 seconds)
    (10/17) benchmarking ("catnd", 5)...
    done (took 0.559017645 seconds)
    (11/17) benchmarking "4467"...
    done (took 0.028400549 seconds)
    (12/17) benchmarking ("vcat", 5)...
    done (took 3.7899e-5 seconds)
    (13/17) benchmarking ("catnd", 500)...
    done (took 0.004624493 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 0.004022002 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 1.1436e-5 seconds)
    (16/17) benchmarking ("vcat_setind", 500)...
    done (took 0.002461387 seconds)
    (17/17) benchmarking ("catnd_setind", 500)...
    done (took 0.003296308 seconds)
  done (took 2.298342771 seconds)
  (12/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.266212946 seconds)
    (2/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.13357795 seconds)
    (3/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.317580511 seconds)
    (4/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.49192429 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.112949123 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.202875556 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.300031429 seconds)
    (8/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.19205449 seconds)
  done (took 3.200748394 seconds)
  (13/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.040617001 seconds)
    (2/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.053125894 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.052366628 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.063768367 seconds)
    (5/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.040224966 seconds)
    (6/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.046446124 seconds)
    (7/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.055755036 seconds)
    (8/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.045021714 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031761799 seconds)
    (10/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.036459728 seconds)
    (11/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.044114159 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.040936592 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031525891 seconds)
    (14/24) benchmarking ("==", "BitArray")...
    done (took 0.030808485 seconds)
    (15/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.025031063 seconds)
    (16/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.042967168 seconds)
    (17/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.049671946 seconds)
    (18/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030658057 seconds)
    (19/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.051323821 seconds)
    (20/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.03532595 seconds)
    (21/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.01998143 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.04645237 seconds)
    (23/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.051279954 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.047645938 seconds)
  done (took 2.199818316 seconds)
done (took 78.797225153 seconds)
(18/23) benchmarking "string"...
  (1/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "different"...
    done (took 0.040887258 seconds)
    (2/4) benchmarking "identical"...
    done (took 0.021083271 seconds)
    (3/4) benchmarking "equal"...
    done (took 1.9786e-5 seconds)
    (4/4) benchmarking "different length"...
    done (took 1.5129e-5 seconds)
  done (took 1.235320339 seconds)
  (2/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat str len 1"...
    done (took 0.021401458 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024880312 seconds)
    (3/4) benchmarking "repeat char 2"...
    done (took 0.036893734 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.02116913 seconds)
  done (took 1.28797939 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "different"...
    done (took 0.022954327 seconds)
    (2/3) benchmarking "equal"...
    done (took 9.12e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 4.562e-6 seconds)
  done (took 1.210129769 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020408936 seconds)
  (5/7) benchmarking "findfirst"...
    (1/2) benchmarking "String"...
    done (took 0.023781212 seconds)
    (2/2) benchmarking "Char"...
    done (took 0.023252969 seconds)
  done (took 1.233329574 seconds)
  (6/7) benchmarking "join"...
  done (took 0.262505369 seconds)
  (7/7) benchmarking "readuntil"...
    (1/7) benchmarking "barbarian backtrack"...
    done (took 0.138379565 seconds)
    (2/7) benchmarking "target length 1"...
    done (took 9.36e-6 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.674e-6 seconds)
    (4/7) benchmarking "target length 1000"...
    done (took 7.266e-6 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.000205148 seconds)
    (6/7) benchmarking "no backtracking"...
    done (took 0.000584878 seconds)
    (7/7) benchmarking "backtracking"...
    done (took 0.001000801 seconds)
  done (took 1.331745092 seconds)
done (took 7.766007925 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "symm!"...
    done (took 0.149552953 seconds)
    (2/36) benchmarking "symv"...
    done (took 0.04256402 seconds)
    (3/36) benchmarking "dotu"...
    done (took 0.025022447 seconds)
    (4/36) benchmarking "sbmv!"...
    done (took 0.041360742 seconds)
    (5/36) benchmarking "scal!"...
    done (took 0.031464326 seconds)
    (6/36) benchmarking "gemm!"...
    done (took 0.121289708 seconds)
    (7/36) benchmarking "trmv"...
    done (took 0.041517206 seconds)
    (8/36) benchmarking "asum"...
    done (took 0.023015732 seconds)
    (9/36) benchmarking "gemm"...
    done (took 0.119571623 seconds)
    (10/36) benchmarking "gbmv!"...
    done (took 0.040624064 seconds)
    (11/36) benchmarking "trsm"...
    done (took 0.107081467 seconds)
    (12/36) benchmarking "ger!"...
    done (took 0.042252642 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.041336336 seconds)
    (14/36) benchmarking "syr!"...
    done (took 0.044311621 seconds)
    (15/36) benchmarking "gbmv"...
    done (took 0.025801631 seconds)
    (16/36) benchmarking "symm"...
    done (took 0.118302063 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.030040618 seconds)
    (18/36) benchmarking "scal"...
    done (took 0.029036395 seconds)
    (19/36) benchmarking "trmm"...
    done (took 0.081999137 seconds)
    (20/36) benchmarking "trmv!"...
    done (took 0.03031962 seconds)
    (21/36) benchmarking "trmm!"...
    done (took 0.082494787 seconds)
    (22/36) benchmarking "dotc"...
    done (took 0.023212766 seconds)
    (23/36) benchmarking "syrk!"...
    done (took 0.090941411 seconds)
    (24/36) benchmarking "syrk"...
    done (took 0.088871317 seconds)
    (25/36) benchmarking "gemv"...
    done (took 0.024870263 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.024252935 seconds)
    (27/36) benchmarking "nrm2"...
    done (took 0.021891608 seconds)
    (28/36) benchmarking "sbmv"...
    done (took 0.024938845 seconds)
    (29/36) benchmarking "trsv!"...
    done (took 0.02788225 seconds)
    (30/36) benchmarking "axpy!"...
    done (took 0.037241231 seconds)
    (31/36) benchmarking "trsm!"...
    done (took 0.087945631 seconds)
    (32/36) benchmarking "her!"...
    done (took 0.048150675 seconds)
    (33/36) benchmarking "herk"...
    done (took 0.247129724 seconds)
    (34/36) benchmarking "dot"...
    done (took 0.022008978 seconds)
    (35/36) benchmarking "herk!"...
    done (took 0.230104489 seconds)
    (36/36) benchmarking "symv!"...
    done (took 0.02838916 seconds)
  done (took 3.471734274 seconds)
  (2/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.17073716 seconds)
    (2/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.145683047 seconds)
    (3/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.292429943 seconds)
    (4/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.020460285 seconds)
    (5/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.082369816 seconds)
    (6/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.508119693 seconds)
    (7/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.228583831 seconds)
    (8/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.073200738 seconds)
    (9/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020203648 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.050886746 seconds)
    (11/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.051710781 seconds)
    (12/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.032484696 seconds)
    (13/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.06229361 seconds)
    (14/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.023579966 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.111662447 seconds)
    (16/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.077240615 seconds)
    (17/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019943364 seconds)
    (18/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.091727862 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 9.0703e-5 seconds)
    (20/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.049977612 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086721382 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.034634404 seconds)
    (23/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.126166544 seconds)
    (24/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 2.428875254 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.000138478 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.128777918 seconds)
    (27/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.164252133 seconds)
    (28/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025828054 seconds)
    (29/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.108081534 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.425852547 seconds)
    (31/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 3.952478325 seconds)
    (32/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 4.9083e-5 seconds)
    (33/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022313657 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.000126924 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.0281e-5 seconds)
    (36/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.044337328 seconds)
    (37/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007587473 seconds)
    (38/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.184569244 seconds)
    (39/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.441026592 seconds)
    (40/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.044453396 seconds)
    (41/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.128215088 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.085623694 seconds)
    (43/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.020679917 seconds)
    (44/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.3887e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.082664083 seconds)
    (46/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.110503795 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.056064167 seconds)
    (48/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.050601619 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06716926 seconds)
    (50/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.5896e-5 seconds)
    (51/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.01395785 seconds)
    (52/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.086302448 seconds)
    (53/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.096045977 seconds)
    (54/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.118061494 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000686466 seconds)
    (56/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.2375e-5 seconds)
    (57/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.114503366 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.5136e-5 seconds)
    (59/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001278862 seconds)
    (60/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.064133427 seconds)
    (61/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020898196 seconds)
    (62/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 3.8037e-5 seconds)
    (63/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019754286 seconds)
    (64/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.143950478 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.051812298 seconds)
    (66/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.0305e-5 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.740587565 seconds)
    (68/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.114378785 seconds)
    (69/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.001364383 seconds)
    (70/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001495097 seconds)
    (71/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020053316 seconds)
    (72/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.3958e-5 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.034395623 seconds)
    (74/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.059285754 seconds)
    (75/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000114234 seconds)
    (76/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025955496 seconds)
    (77/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.6273e-5 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.5476e-5 seconds)
    (79/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.000140338 seconds)
    (80/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.004163688 seconds)
    (81/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 4.4597e-5 seconds)
    (82/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.6395e-5 seconds)
    (83/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.4777e-5 seconds)
    (84/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001494295 seconds)
    (85/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.023385931 seconds)
    (86/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.13851942 seconds)
    (87/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001712386 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.173227767 seconds)
    (89/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094501248 seconds)
    (90/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.1446e-5 seconds)
    (91/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.00070645 seconds)
    (92/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.213634491 seconds)
    (93/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.4887e-5 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.007531368 seconds)
    (95/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.038765681 seconds)
    (96/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.4262e-5 seconds)
    (97/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 4.0498e-5 seconds)
    (98/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.9669e-5 seconds)
    (99/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.054505272 seconds)
    (100/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.568e-5 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.5881e-5 seconds)
    (102/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.067083524 seconds)
    (103/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.4837e-5 seconds)
    (104/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001566425 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000594414 seconds)
    (106/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.00163669 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.3928e-5 seconds)
    (108/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.33686417 seconds)
    (109/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.049834416 seconds)
    (110/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.0072e-5 seconds)
    (111/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.6973e-5 seconds)
    (112/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.184673523 seconds)
    (113/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 4.7818e-5 seconds)
    (114/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007692366 seconds)
    (115/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.0617e-5 seconds)
    (116/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.543e-5 seconds)
    (117/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.00247444 seconds)
    (118/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.921936636 seconds)
  done (took 20.185015138 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.624408807 seconds)
  (4/4) benchmarking "factorization"...
    (1/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.070960598 seconds)
    (2/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.340029085 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.260284064 seconds)
    (4/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.574712437 seconds)
    (5/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.043778217 seconds)
    (6/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.154355389 seconds)
    (7/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.293331074 seconds)
    (8/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.032345888 seconds)
    (9/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.022598719 seconds)
    (10/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.037437156 seconds)
    (11/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.004053322 seconds)
    (12/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.351711484 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.166909779 seconds)
    (14/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.428666351 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.794118538 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.022579434 seconds)
    (17/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.150416743 seconds)
    (18/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.245741553 seconds)
    (19/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.306668598 seconds)
    (20/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.032849987 seconds)
    (21/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 3.5506e-5 seconds)
    (22/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.011914837 seconds)
    (23/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.001471314 seconds)
    (24/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.00857555 seconds)
    (25/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.60393792 seconds)
    (26/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000589208 seconds)
    (27/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000223615 seconds)
    (28/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.003654886 seconds)
    (29/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003627201 seconds)
    (30/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.034015956 seconds)
    (31/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 6.6877e-5 seconds)
    (32/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.10138358 seconds)
  done (took 13.321639319 seconds)
done (took 38.784034851 seconds)
(20/23) benchmarking "tuple"...
  (1/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.272260885 seconds)
    (2/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.14183723 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.141534719 seconds)
    (4/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.325643771 seconds)
    (5/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.037742006 seconds)
    (6/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.021900858 seconds)
    (7/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.079885055 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022369757 seconds)
  done (took 4.254861129 seconds)
  (2/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021275086 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.044634065 seconds)
  done (took 1.294167575 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.022157849 seconds)
    (2/24) benchmarking ("sum", "(4,)")...
    done (took 0.022599295 seconds)
    (3/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023391333 seconds)
    (4/24) benchmarking ("minimum", "(8,)")...
    done (took 0.021651595 seconds)
    (5/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.022415498 seconds)
    (6/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.02472323 seconds)
    (7/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.021773527 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.023110721 seconds)
    (9/24) benchmarking ("minimum", "(2,)")...
    done (took 0.019956646 seconds)
    (10/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022200501 seconds)
    (11/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021262153 seconds)
    (12/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023156434 seconds)
    (13/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026074473 seconds)
    (14/24) benchmarking ("minimum", "(16,)")...
    done (took 0.021785493 seconds)
    (15/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.021486541 seconds)
    (16/24) benchmarking ("sum", "(8,)")...
    done (took 0.022305547 seconds)
    (17/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.022356833 seconds)
    (18/24) benchmarking ("sum", "(2,)")...
    done (took 0.022382747 seconds)
    (19/24) benchmarking ("minimum", "(4,)")...
    done (took 0.020975805 seconds)
    (20/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.019691249 seconds)
    (21/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.021695588 seconds)
    (22/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.022679748 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026735885 seconds)
    (24/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.02410668 seconds)
  done (took 1.761961166 seconds)
  (4/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.072108122 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022131464 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.020543566 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.022980976 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.02235275 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022700675 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021612943 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.020889321 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.020864096 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020241553 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020530431 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020575175 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.021547715 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020462817 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.020813606 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.021804233 seconds)
  done (took 1.650337868 seconds)
done (took 10.174773067 seconds)
(21/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.021754859 seconds)
    (2/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.021888555 seconds)
    (3/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.038749989 seconds)
    (4/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.02178012 seconds)
    (5/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065411599 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.3553e-5 seconds)
    (7/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.028095579 seconds)
    (8/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.02608538 seconds)
    (9/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003276874 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.026958949 seconds)
    (11/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.01141442 seconds)
    (12/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.036014364 seconds)
    (13/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.039135253 seconds)
    (14/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.025008625 seconds)
    (15/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.029650911 seconds)
    (16/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.0130083 seconds)
    (17/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.023851362 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.028237167 seconds)
    (19/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.035304506 seconds)
    (20/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003392246 seconds)
    (21/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.027317896 seconds)
    (22/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.029161892 seconds)
    (23/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.037941254 seconds)
    (24/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.006145903 seconds)
    (25/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.00773999 seconds)
    (26/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008618576 seconds)
    (27/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.005022689 seconds)
    (28/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.013225427 seconds)
    (29/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.3556e-5 seconds)
    (30/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005442427 seconds)
    (31/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.026472957 seconds)
    (32/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020341271 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.005003552 seconds)
    (34/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.023860046 seconds)
    (35/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.005061223 seconds)
    (36/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.011539518 seconds)
    (37/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.030403077 seconds)
    (38/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.011721136 seconds)
    (39/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.01190756 seconds)
    (40/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005465211 seconds)
    (41/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.2567e-5 seconds)
    (42/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.012909058 seconds)
  done (took 2.02346742 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028041957 seconds)
    (2/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.028110822 seconds)
    (3/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.029124029 seconds)
    (4/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023621007 seconds)
    (5/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029887313 seconds)
    (6/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029318564 seconds)
    (7/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022172347 seconds)
    (8/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.02693987 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026671659 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024648383 seconds)
    (11/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022550447 seconds)
    (12/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.025739893 seconds)
    (13/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028186977 seconds)
    (14/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028217162 seconds)
    (15/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026514919 seconds)
    (16/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027940405 seconds)
    (17/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.022643241 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021839975 seconds)
    (19/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.030890877 seconds)
    (20/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028096919 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.025925381 seconds)
    (22/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027855587 seconds)
    (23/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.028120768 seconds)
    (24/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027657884 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.023911551 seconds)
    (26/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.026256901 seconds)
  done (took 1.917801239 seconds)
  (3/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.037916179 seconds)
    (2/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.049396467 seconds)
    (3/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.065395836 seconds)
    (4/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.031937844 seconds)
    (5/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.03661793 seconds)
    (6/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.040978885 seconds)
    (7/28) benchmarking ("Set", "String", "filter")...
    done (took 0.045070688 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.030403786 seconds)
    (9/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.03163125 seconds)
    (10/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.043602585 seconds)
    (11/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.045677737 seconds)
    (12/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.030323177 seconds)
    (13/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.027675562 seconds)
    (14/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.050716676 seconds)
    (15/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037442696 seconds)
    (16/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.051873576 seconds)
    (17/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.055089648 seconds)
    (18/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.040143774 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.040515461 seconds)
    (20/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.048415998 seconds)
    (21/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.035260875 seconds)
    (22/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.042298458 seconds)
    (23/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.037505092 seconds)
    (24/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.035473371 seconds)
    (25/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037408388 seconds)
    (26/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.034376764 seconds)
    (27/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.034878867 seconds)
    (28/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.036395735 seconds)
  done (took 2.362460773 seconds)
  (4/6) benchmarking "set operations"...
    (1/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019537195 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.059412065 seconds)
    (3/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.103343981 seconds)
    (4/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.053735636 seconds)
    (5/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031192075 seconds)
    (6/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.022520645 seconds)
    (7/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026338365 seconds)
    (8/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.026881042 seconds)
    (9/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.05902847 seconds)
    (10/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.098034964 seconds)
    (11/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.032246069 seconds)
    (12/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.060587418 seconds)
    (13/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.020082742 seconds)
    (14/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.055948268 seconds)
    (15/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.07053716 seconds)
    (16/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.033074523 seconds)
    (17/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026547687 seconds)
    (18/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020924639 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020221812 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020219036 seconds)
    (21/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.02680662 seconds)
    (22/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.027746456 seconds)
    (23/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020126736 seconds)
    (24/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.019709917 seconds)
    (25/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.046183865 seconds)
    (26/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.020991889 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.019543474 seconds)
    (28/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.020970517 seconds)
    (29/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.025562381 seconds)
    (30/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.044938092 seconds)
    (31/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025610715 seconds)
    (32/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.03308139 seconds)
    (33/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.027093151 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.02687965 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.066088381 seconds)
    (36/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.029431983 seconds)
    (37/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.019246036 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.019915341 seconds)
    (39/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031244206 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.02243565 seconds)
    (41/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 3.2407e-5 seconds)
    (42/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.024389072 seconds)
    (43/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037280493 seconds)
    (44/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.034505587 seconds)
    (45/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.030821649 seconds)
    (46/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.057593772 seconds)
    (47/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 3.8412e-5 seconds)
    (48/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.079495228 seconds)
    (49/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.026970054 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.028746013 seconds)
    (51/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.025517262 seconds)
    (52/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.12696886 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.019868891 seconds)
    (54/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.018933732 seconds)
    (55/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.02818202 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041456016 seconds)
    (57/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.03166372 seconds)
    (58/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.026880142 seconds)
    (59/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.049353102 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035789047 seconds)
    (61/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.140632749 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019684418 seconds)
    (63/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.029033516 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025114146 seconds)
    (65/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.038988445 seconds)
    (66/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037026326 seconds)
    (67/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.028279396 seconds)
    (68/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.036390782 seconds)
    (69/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.057993885 seconds)
    (70/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 3.1957e-5 seconds)
    (71/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.040661932 seconds)
    (72/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.02864091 seconds)
    (73/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.035117049 seconds)
    (74/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.2242e-5 seconds)
    (75/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.031021737 seconds)
    (76/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.025567757 seconds)
    (77/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.5216e-5 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.034334065 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.025861905 seconds)
    (80/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.026738163 seconds)
    (81/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.020639272 seconds)
    (82/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.04022187 seconds)
    (83/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032262117 seconds)
    (84/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029330318 seconds)
    (85/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024387911 seconds)
    (86/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.039284111 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032231877 seconds)
    (88/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027069801 seconds)
    (89/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.024100685 seconds)
    (90/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.038393485 seconds)
    (91/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.043849698 seconds)
    (92/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039460096 seconds)
    (93/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.027487441 seconds)
    (94/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.030381514 seconds)
    (95/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019116049 seconds)
    (96/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.043352147 seconds)
    (97/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.029149677 seconds)
    (98/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020140416 seconds)
    (99/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.024683516 seconds)
    (100/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029003149 seconds)
    (101/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.036382635 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.019873814 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.029689294 seconds)
    (104/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.02402506 seconds)
    (105/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.044711569 seconds)
    (106/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.0386e-5 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.020523466 seconds)
    (108/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.019037282 seconds)
    (109/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.052285738 seconds)
    (110/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.7297e-5 seconds)
    (111/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.02164912 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.025374453 seconds)
    (113/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.043336397 seconds)
    (114/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024617631 seconds)
    (115/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.0276e-5 seconds)
    (116/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.034543677 seconds)
    (117/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.020582264 seconds)
  done (took 5.085927644 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.02971994 seconds)
    (2/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.033761082 seconds)
    (3/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024542924 seconds)
    (4/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026840987 seconds)
    (5/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.0280139 seconds)
    (6/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018671555 seconds)
    (7/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021058052 seconds)
    (8/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.041604962 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.020313459 seconds)
    (10/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.028708023 seconds)
    (11/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.031967361 seconds)
    (12/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.040137474 seconds)
    (13/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.025819569 seconds)
    (14/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026448132 seconds)
    (15/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.020750017 seconds)
    (16/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.020919646 seconds)
    (17/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022596374 seconds)
    (18/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022891666 seconds)
    (19/105) benchmarking ("Set", "Int", "length")...
    done (took 0.018667355 seconds)
    (20/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.6599e-5 seconds)
    (21/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.02423259 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.5533e-5 seconds)
    (23/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020522413 seconds)
    (24/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024387278 seconds)
    (25/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023478224 seconds)
    (26/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 5.089e-5 seconds)
    (27/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021690862 seconds)
    (28/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.034509484 seconds)
    (29/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.027031645 seconds)
    (30/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026801701 seconds)
    (31/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.038225823 seconds)
    (32/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.6901e-5 seconds)
    (33/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.028311523 seconds)
    (34/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.031744057 seconds)
    (35/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.026443978 seconds)
    (36/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.037149553 seconds)
    (37/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021313971 seconds)
    (38/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.034182487 seconds)
    (39/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.020256144 seconds)
    (40/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 3.1931e-5 seconds)
    (41/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018820633 seconds)
    (42/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.027122815 seconds)
    (43/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.031247654 seconds)
    (44/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.038166876 seconds)
    (45/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.026948046 seconds)
    (46/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.021324712 seconds)
    (47/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023583572 seconds)
    (48/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020910299 seconds)
    (49/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 6.4691e-5 seconds)
    (50/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.035599357 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.028831665 seconds)
    (52/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.7243e-5 seconds)
    (53/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.2686e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.020735087 seconds)
    (55/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025049349 seconds)
    (56/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.039977488 seconds)
    (57/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.021784004 seconds)
    (58/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.037462959 seconds)
    (59/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021063564 seconds)
    (60/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 4.4681e-5 seconds)
    (61/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.021501596 seconds)
    (62/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036616184 seconds)
    (63/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.031638937 seconds)
    (64/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.0634e-5 seconds)
    (65/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.9174e-5 seconds)
    (66/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025184443 seconds)
    (67/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.8981e-5 seconds)
    (68/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.025448574 seconds)
    (69/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.7491e-5 seconds)
    (70/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.382e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.020048267 seconds)
    (72/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020140771 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.036649522 seconds)
    (74/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.036658665 seconds)
    (75/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.031700438 seconds)
    (76/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 3.7534e-5 seconds)
    (77/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.030664893 seconds)
    (78/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.020817968 seconds)
    (79/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026756218 seconds)
    (80/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.029087362 seconds)
    (81/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020438656 seconds)
    (82/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 5.6756e-5 seconds)
    (83/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.021248563 seconds)
    (84/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.7868e-5 seconds)
    (85/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 3.4501e-5 seconds)
    (86/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.8085e-5 seconds)
    (87/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.6873e-5 seconds)
    (88/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.023459611 seconds)
    (89/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028130463 seconds)
    (90/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 5.0807e-5 seconds)
    (91/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019738737 seconds)
    (92/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 3.5814e-5 seconds)
    (93/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025535527 seconds)
    (94/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.5295e-5 seconds)
    (95/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021914067 seconds)
    (96/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.022433238 seconds)
    (97/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.9576e-5 seconds)
    (98/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 1.7638e-5 seconds)
    (99/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 3.4974e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.026595016 seconds)
    (101/105) benchmarking ("Set", "String", "in", "true")...
    done (took 3.1338e-5 seconds)
    (102/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.022941108 seconds)
    (103/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023504671 seconds)
    (104/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 5.682e-5 seconds)
    (105/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000170349 seconds)
  done (took 3.280055677 seconds)
  (6/6) benchmarking "optimizations"...
    (1/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.050995252 seconds)
    (2/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.030899275 seconds)
    (3/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.129671102 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.090561046 seconds)
    (5/27) benchmarking ("BitSet", "Int8")...
    done (took 0.044704003 seconds)
    (6/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.091619691 seconds)
    (7/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.084594622 seconds)
    (8/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.094294919 seconds)
    (9/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.054142643 seconds)
    (10/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.090676175 seconds)
    (11/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.056240623 seconds)
    (12/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.087831748 seconds)
    (13/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.061301618 seconds)
    (14/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.025063878 seconds)
    (15/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.02197817 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.04508963 seconds)
    (17/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.044110718 seconds)
    (18/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.095634655 seconds)
    (19/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022628711 seconds)
    (20/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070115679 seconds)
    (21/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.041618972 seconds)
    (22/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.034997161 seconds)
    (23/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.022989863 seconds)
    (24/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.024248326 seconds)
    (25/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.021884945 seconds)
    (26/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.026760546 seconds)
    (27/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.070457232 seconds)
  done (took 2.783601519 seconds)
done (took 18.678571671 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "optimization"...
    (1/12) benchmarking "many_const_calls"...
    done (took 16.760971535 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.981826197 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.297169954 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.405381872 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.463694339 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.827661284 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.084152268 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.587641176 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.228660216 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.390252343 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 10.212052397 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.294017601 seconds)
  done (took 42.775634381 seconds)
  (2/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "many_const_calls"...
    done (took 2.157939464 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 3.068276645 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.101697084 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.059709284 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.16127463 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.108866721 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.046244449 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.37700306 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.041802002 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.147956346 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 2.004274498 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.393684584 seconds)
  done (took 10.570580933 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "many_const_calls"...
    done (took 0.101175861 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.906410722 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.246087516 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.393241695 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.299726862 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.643563005 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.077813598 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.781826549 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.104731641 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.372097763 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.21807574 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.273393543 seconds)
  done (took 24.501096164 seconds)
done (took 79.097871493 seconds)
(23/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.028803504 seconds)
done (took 2.664279095 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.733476615 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 2.983822824 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.68707969 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.561127433 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.683947693 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.587611626 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.591578806 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.686866763 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.692160386 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.575964071 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.593806122 seconds)
  done (took 31.785856835 seconds)
  (2/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.458736548 seconds)
    (2/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.459283001 seconds)
    (3/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.4631125 seconds)
    (4/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.549518983 seconds)
    (5/41) benchmarking ("BitVector", "10-90")...
    done (took 5.074142009 seconds)
    (6/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.468227707 seconds)
    (7/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.47136733 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.484686036 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.641736039 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.550042545 seconds)
    (11/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.469021545 seconds)
    (12/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.515544997 seconds)
    (13/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.579852294 seconds)
    (14/41) benchmarking ("BitVector", "50-50")...
    done (took 4.189847568 seconds)
    (15/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.56058135 seconds)
    (16/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.53719456 seconds)
    (17/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.574634841 seconds)
    (18/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.462353608 seconds)
    (19/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.519031434 seconds)
    (20/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.547328862 seconds)
    (21/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.52686163 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.545114625 seconds)
    (23/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.488090941 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.58273293 seconds)
    (25/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.539320971 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.563300528 seconds)
    (27/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.554755066 seconds)
    (28/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.46923494 seconds)
    (29/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.535878023 seconds)
    (30/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.598784326 seconds)
    (31/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.600672339 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.481163745 seconds)
    (33/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.540956131 seconds)
    (34/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.551304911 seconds)
    (35/41) benchmarking ("BitVector", "90-10")...
    done (took 2.862823612 seconds)
    (36/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.798562022 seconds)
    (37/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.554802908 seconds)
    (38/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.517074056 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.51014343 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.48096711 seconds)
    (41/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.484789663 seconds)
  done (took 110.779960404 seconds)
  (3/3) benchmarking "findprev"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 3.162218031 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 3.322540171 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.689742497 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.636752245 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.686524965 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.587397685 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.585098596 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.687159666 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.682064071 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.704717292 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.587780886 seconds)
  done (took 32.758093775 seconds)
done (took 177.813887527 seconds)
(2/23) benchmarking "problem"...
  (1/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.417781016 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.423871936 seconds)
  done (took 17.251727085 seconds)
  (2/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.48621382 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.454521626 seconds)
  done (took 17.354086462 seconds)
  (3/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.430904896 seconds)
  done (took 9.84611722 seconds)
  (4/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.720371821 seconds)
  done (took 10.136369707 seconds)
  (5/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.521440378 seconds)
  done (took 9.936480586 seconds)
  (6/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.915851153 seconds)
  done (took 10.334528891 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.632353311 seconds)
  done (took 10.06045895 seconds)
  (8/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.445626445 seconds)
    (2/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.498254953 seconds)
    (3/4) benchmarking "laplace_iter_devec"...
    done (took 7.6202008 seconds)
    (4/4) benchmarking "laplace_iter_sub"...
    done (took 7.450539708 seconds)
  done (took 32.440218284 seconds)
  (9/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.287343163 seconds)
  done (took 11.80935557 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.42630316 seconds)
  done (took 9.850153106 seconds)
  (11/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.677372456 seconds)
  done (took 10.091771351 seconds)
  (12/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.428708549 seconds)
  done (took 9.855501666 seconds)
  (13/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 8.141024406 seconds)
  done (took 10.560891634 seconds)
  (14/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.752947572 seconds)
  done (took 10.19910074 seconds)
done (took 182.139786189 seconds)
(3/23) benchmarking "io"...
  (1/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.979992647 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 8.110486356 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 8.106905109 seconds)
  done (took 26.619145112 seconds)
  (2/4) benchmarking "read"...
    (1/2) benchmarking "read"...
    done (took 2.97170681 seconds)
    (2/2) benchmarking "readstring"...
    done (took 2.916858761 seconds)
  done (took 8.338475868 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.435314081 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.904397997 seconds)
    (3/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.930678242 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.43445955 seconds)
  done (took 28.129570111 seconds)
  (4/4) benchmarking "skipchars"...
  done (took 7.547821716 seconds)
done (took 73.048603727 seconds)
(4/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.464251318 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.436806699 seconds)
  (3/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.422615181 seconds)
  (4/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.489050069 seconds)
  (5/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.438020157 seconds)
  (6/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.448747921 seconds)
  (7/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.441831654 seconds)
  (8/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.430667863 seconds)
  (9/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.444003471 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.442755894 seconds)
  (11/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.462302121 seconds)
  (12/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.451588345 seconds)
  (13/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.452588783 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.455760344 seconds)
  (15/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.462050802 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.440481937 seconds)
  (17/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.45415132 seconds)
  (18/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.442684668 seconds)
  (19/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.467129442 seconds)
  (20/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.439954095 seconds)
  (21/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.459683711 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.475673746 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.463523614 seconds)
  (24/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.436700678 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.451302346 seconds)
  (26/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.448148856 seconds)
  (27/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.448341329 seconds)
  (28/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.447549518 seconds)
  (29/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.446719861 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.454117751 seconds)
  (31/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.477287787 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.446960717 seconds)
  (33/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.429208774 seconds)
  (34/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.455191385 seconds)
  (35/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.4421617 seconds)
  (36/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.436866643 seconds)
  (37/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.437908215 seconds)
  (38/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.465705031 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.462819985 seconds)
  (40/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.427395997 seconds)
  (41/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.434892307 seconds)
  (42/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.448324375 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.44117316 seconds)
  (44/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.439086137 seconds)
  (45/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.44240911 seconds)
  (46/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.448393283 seconds)
  (47/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.438404357 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.446130999 seconds)
  (49/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.459981615 seconds)
  (50/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.43859363 seconds)
  (51/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.449434494 seconds)
  (52/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.494499104 seconds)
  (53/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.436107546 seconds)
  (54/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.444714638 seconds)
  (55/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.433405234 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.433248521 seconds)
  (57/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.594805187 seconds)
  (58/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.440315472 seconds)
  (59/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.447863136 seconds)
  (60/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.437394515 seconds)
  (61/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.448071846 seconds)
  (62/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.595026129 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.503223043 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.472721471 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.444010563 seconds)
  (66/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.460774554 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.46533335 seconds)
  (68/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.45011966 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.455020141 seconds)
  (70/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.565267975 seconds)
  (71/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.49164782 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.456422886 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.45079425 seconds)
  (74/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.462895403 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.455570778 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.455165231 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.453094229 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.480525265 seconds)
  (79/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.441036832 seconds)
  (80/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.458008215 seconds)
  (81/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.459522769 seconds)
  (82/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.479286477 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.561491093 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.449961545 seconds)
  (85/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.444821322 seconds)
  (86/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.439087167 seconds)
  (87/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.472257363 seconds)
  (88/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.451168918 seconds)
  (89/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.442308491 seconds)
  (90/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.469879746 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.659597855 seconds)
  (92/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.542816485 seconds)
  (93/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.450695551 seconds)
  (94/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.460883023 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.477238238 seconds)
  (96/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.424372388 seconds)
  (97/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.43039416 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.431742295 seconds)
  (99/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.463178645 seconds)
  (100/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.440246803 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.452237226 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.437036314 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.461874523 seconds)
  (104/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.430828172 seconds)
  (105/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.425956657 seconds)
  (106/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.430528882 seconds)
  (107/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.437979953 seconds)
  (108/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.434927444 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.551027385 seconds)
  (110/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.446670286 seconds)
  (111/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.447657337 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.444346118 seconds)
  (113/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.436734447 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.439460107 seconds)
  (115/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.442045146 seconds)
  (116/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.454864167 seconds)
  (117/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.440848946 seconds)
  (118/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.44694862 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.453249155 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.452323936 seconds)
  (121/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.44087987 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.45977959 seconds)
  (123/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.445906131 seconds)
  (124/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.457802918 seconds)
  (125/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.448559583 seconds)
  (126/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.447944799 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.447813096 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.463776674 seconds)
  (129/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.438617502 seconds)
  (130/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.426041113 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.440777176 seconds)
  (132/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.443463006 seconds)
  (133/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.443251254 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.458255495 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.457682748 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.438648287 seconds)
  (137/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.438131109 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.448426527 seconds)
  (139/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.464111707 seconds)
  (140/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.465073499 seconds)
  (141/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.451588112 seconds)
  (142/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.496200269 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.438112584 seconds)
  (144/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.469274232 seconds)
  (145/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.477185994 seconds)
  (146/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.450946032 seconds)
  (147/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.589469517 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.474043134 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.460403004 seconds)
  (150/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.453065828 seconds)
  (151/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.449625832 seconds)
  (152/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.461909368 seconds)
  (153/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.45662264 seconds)
  (154/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.458852606 seconds)
  (155/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.457964353 seconds)
  (156/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.441451711 seconds)
  (157/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.436144135 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.457180466 seconds)
  (159/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.433058459 seconds)
  (160/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.436680473 seconds)
  (161/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.427836677 seconds)
  (162/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.435860933 seconds)
  (163/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.468581583 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.447460076 seconds)
  (165/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.590043611 seconds)
  (166/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.445101768 seconds)
  (167/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.464235276 seconds)
  (168/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.464095034 seconds)
  (169/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.452468684 seconds)
  (170/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.445569392 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.47116312 seconds)
  (172/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.443475042 seconds)
  (173/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.4501569 seconds)
  (174/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.463612858 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.441389635 seconds)
  (176/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.447938269 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.440507539 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.467246527 seconds)
  (179/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.460979282 seconds)
  (180/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.455480424 seconds)
  (181/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.433097737 seconds)
  (182/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.436682997 seconds)
  (183/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.444705683 seconds)
  (184/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.44521983 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.451524362 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.437527254 seconds)
  (187/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.431653658 seconds)
  (188/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.448137261 seconds)
  (189/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.464397043 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.44127676 seconds)
  (191/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.437814056 seconds)
  (192/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.697892012 seconds)
  (193/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.447712021 seconds)
  (194/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.451242164 seconds)
  (195/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.467584216 seconds)
  (196/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.468291955 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.452717942 seconds)
  (198/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.436893332 seconds)
  (199/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.461827935 seconds)
  (200/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.448194562 seconds)
  (201/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.465206702 seconds)
  (202/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.485036598 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.449079149 seconds)
  (204/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.440982113 seconds)
  (205/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.450733986 seconds)
  (206/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.481523944 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.490373692 seconds)
  (208/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.490972948 seconds)
  (209/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.468324951 seconds)
  (210/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.458376749 seconds)
  (211/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.549689793 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.44839972 seconds)
  (213/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.443917543 seconds)
  (214/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.463063593 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.484218179 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.45612369 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.459781254 seconds)
  (218/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.458946119 seconds)
  (219/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.44760187 seconds)
  (220/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.455695747 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.456192215 seconds)
  (222/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.479456289 seconds)
  (223/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.453941727 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.479188856 seconds)
  (225/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.453795959 seconds)
  (226/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.487067215 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.455393583 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.476808214 seconds)
  (229/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.452628263 seconds)
  (230/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.45856491 seconds)
  (231/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.469120532 seconds)
  (232/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.445575124 seconds)
  (233/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.453976022 seconds)
  (234/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.456224105 seconds)
  (235/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.461016386 seconds)
  (236/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.449446579 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.451946403 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.494916206 seconds)
  (239/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.446535506 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.449104538 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.470162199 seconds)
  (242/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.465489461 seconds)
  (243/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.450708037 seconds)
  (244/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.454486425 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.457830732 seconds)
  (246/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.474932346 seconds)
  (247/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.45886079 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.468480605 seconds)
  (249/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.493211371 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.46672941 seconds)
  (251/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.696409801 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.446505397 seconds)
  (253/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.444097743 seconds)
  (254/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.605027335 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.46718931 seconds)
  (256/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.471908397 seconds)
  (257/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.471088142 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.436498466 seconds)
  (259/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.432703229 seconds)
  (260/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.458252458 seconds)
  (261/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.44351643 seconds)
  (262/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.452744586 seconds)
  (263/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.439279294 seconds)
  (264/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.441816093 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.450235016 seconds)
  (266/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.433157213 seconds)
  (267/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.43465773 seconds)
  (268/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.437510557 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.487584697 seconds)
  (270/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.476379335 seconds)
  (271/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.439489056 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.457243351 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.448387867 seconds)
  (274/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.439995093 seconds)
  (275/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.449354414 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.460566858 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.474113273 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.4436225 seconds)
  (279/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.476431196 seconds)
  (280/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.700188357 seconds)
  (281/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.473006321 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.479052541 seconds)
  (283/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.458511131 seconds)
  (284/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.454810742 seconds)
  (285/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.457473946 seconds)
  (286/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.445341695 seconds)
  (287/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.457022277 seconds)
  (288/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.556578768 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.468925063 seconds)
  (290/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.624378813 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.473978457 seconds)
  (292/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.447248929 seconds)
  (293/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.432296984 seconds)
  (294/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.428322944 seconds)
  (295/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.454523803 seconds)
  (296/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.445529381 seconds)
  (297/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.444314943 seconds)
  (298/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.456151102 seconds)
  (299/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.448552403 seconds)
  (300/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.476882275 seconds)
  (301/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.449337113 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.452019919 seconds)
  (303/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.499822456 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.462433045 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.453228462 seconds)
  (306/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.434230456 seconds)
  (307/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.472260168 seconds)
  (308/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.444794176 seconds)
  (309/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.428179012 seconds)
  (310/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.461343806 seconds)
  (311/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.488930654 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.473768289 seconds)
  (313/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.443713142 seconds)
  (314/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.44820979 seconds)
  (315/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.437355091 seconds)
  (316/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.43850397 seconds)
  (317/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.443916847 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.4491884 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.456848894 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.44270885 seconds)
  (321/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.445546118 seconds)
  (322/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.445862475 seconds)
  (323/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.451314839 seconds)
  (324/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.452816684 seconds)
  (325/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.446946508 seconds)
  (326/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.479617304 seconds)
  (327/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.461373233 seconds)
  (328/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.482385589 seconds)
  (329/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.470820972 seconds)
  (330/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.439880123 seconds)
  (331/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.446501982 seconds)
  (332/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.453074234 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.457192236 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.448503231 seconds)
  (335/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.444461823 seconds)
  (336/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.482768792 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.447258703 seconds)
  (338/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.492178989 seconds)
  (339/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.457625458 seconds)
  (340/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.445218057 seconds)
  (341/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.449394212 seconds)
  (342/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.437233479 seconds)
  (343/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.443150737 seconds)
  (344/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.468124581 seconds)
  (345/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.443490885 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.464623348 seconds)
  (347/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.441700161 seconds)
  (348/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.442963932 seconds)
  (349/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.465150557 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.442905941 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.447504999 seconds)
  (352/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.437406024 seconds)
  (353/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.480124315 seconds)
  (354/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.450233879 seconds)
  (355/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.491240611 seconds)
  (356/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.439222067 seconds)
  (357/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.46243871 seconds)
  (358/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.438440855 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.447318248 seconds)
  (360/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.451000843 seconds)
  (361/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.438875742 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.445397003 seconds)
  (363/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.477903504 seconds)
  (364/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.450071493 seconds)
  (365/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.446056226 seconds)
  (366/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.607190604 seconds)
  (367/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.445101338 seconds)
  (368/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.444041051 seconds)
  (369/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.458441619 seconds)
  (370/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.464118692 seconds)
  (371/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.430592399 seconds)
  (372/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.449816492 seconds)
  (373/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.445285966 seconds)
  (374/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.463003438 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.470052428 seconds)
  (376/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.449249568 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.46594382 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.459942738 seconds)
  (379/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.447031897 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.441839339 seconds)
  (381/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.454670848 seconds)
  (382/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.462721283 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.452211655 seconds)
  (384/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.437182553 seconds)
  (385/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.451457827 seconds)
  (386/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.442561033 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.447702206 seconds)
  (388/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.440174387 seconds)
  (389/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.457192638 seconds)
  (390/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.459875891 seconds)
  (391/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.443368877 seconds)
  (392/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.444144214 seconds)
  (393/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.457450801 seconds)
  (394/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.496751938 seconds)
  (395/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.444054725 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.445819201 seconds)
  (397/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.467512351 seconds)
  (398/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.455813352 seconds)
  (399/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.467654711 seconds)
  (400/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.460821968 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.449229127 seconds)
  (402/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.437427442 seconds)
  (403/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.443626693 seconds)
  (404/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.451238332 seconds)
  (405/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.448842071 seconds)
  (406/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.43733505 seconds)
  (407/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.438872643 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.447631913 seconds)
  (409/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.440533265 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.452447577 seconds)
  (411/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.444474384 seconds)
  (412/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.45525369 seconds)
  (413/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.452661098 seconds)
  (414/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.443068056 seconds)
  (415/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.462957771 seconds)
  (416/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.43877199 seconds)
  (417/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.446157641 seconds)
  (418/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.466292778 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.445492432 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.476498328 seconds)
  (421/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.446403175 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.448176405 seconds)
  (423/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.459418311 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.457198488 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.45259685 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.445985024 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.470478288 seconds)
  (428/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.483576325 seconds)
  (429/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.465995741 seconds)
  (430/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.453248639 seconds)
  (431/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.461509283 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.43965241 seconds)
  (433/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.42890573 seconds)
  (434/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.456089557 seconds)
  (435/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.45108996 seconds)
  (436/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.439084569 seconds)
  (437/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.465247032 seconds)
  (438/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.453568742 seconds)
  (439/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.449616336 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.449523673 seconds)
  (441/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.448155514 seconds)
  (442/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.46437307 seconds)
  (443/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.466196394 seconds)
  (444/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.450874587 seconds)
  (445/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.446964127 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.447652194 seconds)
  (447/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.468242289 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.46396642 seconds)
  (449/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.458401345 seconds)
  (450/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.46681929 seconds)
  (451/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.469963823 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.455866871 seconds)
  (453/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.447033823 seconds)
  (454/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.443013527 seconds)
  (455/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.454934468 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.473867656 seconds)
  (457/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.452542035 seconds)
  (458/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.449191158 seconds)
  (459/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.445799939 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.441157763 seconds)
  (461/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.471117009 seconds)
  (462/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.447424314 seconds)
  (463/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.45755551 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.444104078 seconds)
  (465/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.449710992 seconds)
  (466/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.446720882 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.459135067 seconds)
  (468/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.445026291 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.454140045 seconds)
  (470/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.436391111 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.447328755 seconds)
  (472/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.44679873 seconds)
  (473/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.454984786 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.460004255 seconds)
  (475/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.4426177 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.476982674 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.446639803 seconds)
  (478/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.448916371 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.528058972 seconds)
  (480/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.443889708 seconds)
  (481/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.445000927 seconds)
  (482/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.442481589 seconds)
  (483/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.447996853 seconds)
  (484/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.439331189 seconds)
  (485/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.462006228 seconds)
  (486/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.440408366 seconds)
  (487/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.434442345 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.445327817 seconds)
  (489/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.446340258 seconds)
  (490/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.442934623 seconds)
  (491/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.447863299 seconds)
  (492/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.448590897 seconds)
  (493/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.439868523 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.442065341 seconds)
  (495/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.452803627 seconds)
  (496/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.438292043 seconds)
  (497/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.43650491 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.439020051 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.43731534 seconds)
  (500/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.460615032 seconds)
  (501/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.449945552 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.447890685 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.453932373 seconds)
  (504/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.450287781 seconds)
  (505/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.439024738 seconds)
  (506/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.546213808 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.452135465 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.443631853 seconds)
  (509/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.441074299 seconds)
  (510/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.45639326 seconds)
  (511/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.442995913 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.449290114 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.464539164 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.436745786 seconds)
  (515/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.451436105 seconds)
  (516/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.449224008 seconds)
  (517/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.44435649 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.456749709 seconds)
  (519/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.438282544 seconds)
  (520/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.461572655 seconds)
  (521/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.445690508 seconds)
  (522/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.430355847 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.466208624 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.462896952 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.454914811 seconds)
  (526/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.452362444 seconds)
  (527/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.445012665 seconds)
  (528/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.450260863 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.487754117 seconds)
  (530/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.450532108 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.468374375 seconds)
  (532/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.42975871 seconds)
  (533/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.441725945 seconds)
  (534/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.441811515 seconds)
  (535/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.452012401 seconds)
  (536/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.460190072 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.461083667 seconds)
  (538/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.458509313 seconds)
  (539/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.635896716 seconds)
  (540/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.473883098 seconds)
  (541/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.454986746 seconds)
  (542/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.459733583 seconds)
  (543/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.483187865 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.473555711 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.472591402 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.467134451 seconds)
  (547/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.479917921 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.455682875 seconds)
  (549/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.461731044 seconds)
  (550/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.534836922 seconds)
  (551/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.446412796 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.470435176 seconds)
  (553/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.451639914 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.455765679 seconds)
  (555/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.467634761 seconds)
  (556/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.462236264 seconds)
  (557/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.490779084 seconds)
  (558/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.463424703 seconds)
  (559/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.476080986 seconds)
  (560/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.46503285 seconds)
  (561/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.476089771 seconds)
  (562/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.460680246 seconds)
  (563/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.463228863 seconds)
  (564/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.453933648 seconds)
  (565/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.471652892 seconds)
  (566/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.463345197 seconds)
  (567/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.472978452 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.463429373 seconds)
  (569/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.483767729 seconds)
  (570/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.476150906 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.483844825 seconds)
  (572/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.460215026 seconds)
  (573/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.46033316 seconds)
  (574/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.458360394 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.485024876 seconds)
  (576/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.472568307 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.471289095 seconds)
  (578/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.453381465 seconds)
  (579/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.465131871 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.456373719 seconds)
  (581/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.459607606 seconds)
  (582/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.479242978 seconds)
  (583/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.462964767 seconds)
  (584/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.469786563 seconds)
  (585/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.478825642 seconds)
  (586/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.485401867 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.497924348 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.463848961 seconds)
  (589/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.479283439 seconds)
  (590/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.474948854 seconds)
  (591/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.492208904 seconds)
  (592/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.464956001 seconds)
  (593/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.472880069 seconds)
  (594/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.473536999 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.512050826 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.550681036 seconds)
  (597/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.463070633 seconds)
  (598/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.478667856 seconds)
  (599/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.464866302 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.464763271 seconds)
  (601/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.472196658 seconds)
  (602/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.466798763 seconds)
  (603/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.466811195 seconds)
  (604/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.474037573 seconds)
  (605/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.479925711 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.467747712 seconds)
  (607/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.480906176 seconds)
  (608/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.45862038 seconds)
  (609/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.456468295 seconds)
  (610/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.492913039 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.485624056 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.455176249 seconds)
  (613/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.645221158 seconds)
  (614/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.467332616 seconds)
  (615/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.457561763 seconds)
  (616/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.439475479 seconds)
  (617/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.551414391 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.472671994 seconds)
  (619/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.443711824 seconds)
  (620/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.469906397 seconds)
  (621/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.458468242 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.496031955 seconds)
  (623/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.438562186 seconds)
  (624/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.461526059 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.465764715 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.454209611 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.470967438 seconds)
  (628/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.444093736 seconds)
  (629/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.451621887 seconds)
  (630/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.440815048 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.452923471 seconds)
  (632/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.456753154 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.451092382 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.453343143 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.456704763 seconds)
  (636/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.455086883 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.45142773 seconds)
  (638/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.449256727 seconds)
  (639/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.447034697 seconds)
  (640/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.558241117 seconds)
  (641/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.444219905 seconds)
  (642/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.464651176 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.464843994 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.450697321 seconds)
  (645/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.443076323 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.454091474 seconds)
  (647/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.454970972 seconds)
  (648/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.468664146 seconds)
  (649/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.445673273 seconds)
  (650/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.467882635 seconds)
  (651/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.448806999 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.446424972 seconds)
  (653/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.432496329 seconds)
  (654/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.450243645 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.459904538 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.44658676 seconds)
  (657/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.46834005 seconds)
  (658/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.456314518 seconds)
  (659/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.480873967 seconds)
  (660/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.447885533 seconds)
  (661/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.491351551 seconds)
  (662/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.439166852 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.479700426 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.446954663 seconds)
  (665/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.446116045 seconds)
  (666/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.456562985 seconds)
  (667/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.496517932 seconds)
  (668/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.584033287 seconds)
  (669/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.652574108 seconds)
  (670/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.740923514 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.449821442 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.479547753 seconds)
  (673/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.453631481 seconds)
  (674/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.4401774 seconds)
  (675/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.546598861 seconds)
  (676/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.51093358 seconds)
  (677/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.486450073 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.467800966 seconds)
  (679/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.452110967 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.446650297 seconds)
done (took 1676.129873298 seconds)
(5/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.67316498 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.671386739 seconds)
  done (took 17.766928929 seconds)
  (2/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.977114429 seconds)
    (2/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.456939591 seconds)
    (3/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.157952826 seconds)
    (4/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.494389326 seconds)
    (5/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.462850961 seconds)
    (6/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.633991428 seconds)
    (7/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.995789064 seconds)
    (8/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.4426589 seconds)
    (9/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.434634926 seconds)
    (10/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.903438893 seconds)
    (11/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.43321584 seconds)
    (12/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.716477997 seconds)
    (13/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.423525304 seconds)
    (14/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.438698275 seconds)
    (15/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.654243793 seconds)
    (16/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.505270795 seconds)
    (17/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.435195473 seconds)
    (18/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 3.006955357 seconds)
    (19/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.027034215 seconds)
    (20/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.968427551 seconds)
    (21/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.443027048 seconds)
    (22/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.439759939 seconds)
    (23/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.458782658 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.462458333 seconds)
    (25/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.434186236 seconds)
    (26/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.875142431 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.188189367 seconds)
    (28/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.456369992 seconds)
    (29/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.720177222 seconds)
    (30/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.438174509 seconds)
    (31/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.712539146 seconds)
    (32/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.951458988 seconds)
    (33/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.437746081 seconds)
    (34/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.444891071 seconds)
    (35/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.790931899 seconds)
    (36/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.440728169 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.425855974 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.436563576 seconds)
    (39/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.435321875 seconds)
    (40/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.159362413 seconds)
    (41/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.930819685 seconds)
    (42/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.44039874 seconds)
    (43/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.912672124 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.949241962 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.723662991 seconds)
    (46/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.988233375 seconds)
    (47/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.130587909 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.253458435 seconds)
    (49/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 3.094247473 seconds)
    (50/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 3.019998695 seconds)
    (51/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.997063456 seconds)
    (52/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.87640902 seconds)
    (53/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.443899467 seconds)
    (54/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.426614702 seconds)
    (55/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.441616923 seconds)
    (56/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.424400528 seconds)
    (57/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.285347286 seconds)
    (58/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.429658874 seconds)
    (59/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.439245747 seconds)
    (60/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 7.062375353 seconds)
    (61/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.435182615 seconds)
    (62/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.363948042 seconds)
    (63/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.435651413 seconds)
    (64/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.835670811 seconds)
    (65/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.426479195 seconds)
    (66/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.407657122 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.838941357 seconds)
    (68/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.43626865 seconds)
    (69/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.438627361 seconds)
    (70/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.743042635 seconds)
    (71/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.423170866 seconds)
    (72/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.928024931 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.42631015 seconds)
    (74/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.442345993 seconds)
    (75/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.753773391 seconds)
    (76/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.450352878 seconds)
    (77/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.423796617 seconds)
    (78/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.272115383 seconds)
    (79/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.441491913 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.822557451 seconds)
    (81/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.219152033 seconds)
    (82/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.990655791 seconds)
    (83/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.898504134 seconds)
    (84/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.428081275 seconds)
    (85/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.4356625 seconds)
    (86/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.008444201 seconds)
    (87/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.442824873 seconds)
    (88/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.902013816 seconds)
    (89/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.110567121 seconds)
    (90/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.447918013 seconds)
    (91/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.430767382 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.740293107 seconds)
    (93/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.267297778 seconds)
    (94/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.250008422 seconds)
    (95/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.422094136 seconds)
    (96/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.437595689 seconds)
    (97/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.957547876 seconds)
    (98/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 3.01610526 seconds)
    (99/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.889425855 seconds)
    (100/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.92697582 seconds)
    (101/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.426785044 seconds)
    (102/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.993730048 seconds)
    (103/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.429290643 seconds)
    (104/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.960593121 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.648472479 seconds)
    (106/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.232895726 seconds)
    (107/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.456677951 seconds)
    (108/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.953562641 seconds)
    (109/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.558779671 seconds)
    (110/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.9983867 seconds)
    (111/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.429689238 seconds)
    (112/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.426139474 seconds)
    (113/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.441839905 seconds)
    (114/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.42492352 seconds)
    (115/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 3.015331824 seconds)
    (116/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.446112007 seconds)
    (117/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.435296595 seconds)
    (118/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.887578198 seconds)
    (119/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.436238489 seconds)
    (120/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.435176917 seconds)
    (121/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.426777995 seconds)
    (122/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.893471327 seconds)
    (123/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.213581296 seconds)
    (124/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.687406012 seconds)
    (125/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.900932224 seconds)
    (126/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.950568323 seconds)
    (127/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.639182388 seconds)
    (128/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.834899112 seconds)
    (129/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.161535185 seconds)
    (130/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.402224619 seconds)
    (131/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.427754022 seconds)
    (132/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.440421503 seconds)
    (133/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.228585014 seconds)
    (134/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.437043364 seconds)
    (135/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.423626662 seconds)
    (136/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.811155662 seconds)
    (137/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.449208238 seconds)
    (138/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.435932834 seconds)
    (139/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.900780485 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.436681664 seconds)
    (141/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.069844215 seconds)
    (142/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.135124396 seconds)
    (143/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.909425123 seconds)
    (144/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.840033245 seconds)
    (145/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.72485295 seconds)
    (146/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.442896766 seconds)
    (147/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.425781499 seconds)
    (148/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.423547121 seconds)
    (149/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.435622716 seconds)
    (150/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.711881675 seconds)
    (151/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.440101506 seconds)
    (152/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.392426409 seconds)
    (153/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.42701563 seconds)
    (154/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.433955321 seconds)
    (155/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.932120073 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.439275865 seconds)
    (157/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.42423766 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.829348565 seconds)
    (159/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.441968271 seconds)
    (160/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.443524741 seconds)
    (161/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.954715789 seconds)
    (162/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.148270223 seconds)
    (163/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.894600539 seconds)
    (164/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.963668218 seconds)
    (165/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.435194622 seconds)
    (166/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 3.062345457 seconds)
    (167/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.916755331 seconds)
    (168/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.454184142 seconds)
    (169/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.435857582 seconds)
    (170/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.43112082 seconds)
    (171/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.027317768 seconds)
    (172/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.43069121 seconds)
    (173/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.941877852 seconds)
    (174/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.89435483 seconds)
    (175/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.930834178 seconds)
    (176/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.93741561 seconds)
    (177/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.444704318 seconds)
    (178/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.941325262 seconds)
    (179/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.74200261 seconds)
    (180/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.429667513 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.940464026 seconds)
    (182/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.900945008 seconds)
    (183/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.770558657 seconds)
    (184/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.935569845 seconds)
    (185/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.661830301 seconds)
    (186/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.446352237 seconds)
    (187/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.438978206 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.434468675 seconds)
    (189/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.566554283 seconds)
    (190/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.440764384 seconds)
    (191/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.433656632 seconds)
    (192/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.423540314 seconds)
    (193/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.450059125 seconds)
    (194/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.424250735 seconds)
    (195/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.434143079 seconds)
    (196/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 7.040412754 seconds)
    (197/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.965349781 seconds)
    (198/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.43337158 seconds)
    (199/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.424789293 seconds)
    (200/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.436369514 seconds)
    (201/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.446839348 seconds)
    (202/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.999386558 seconds)
    (203/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.965748738 seconds)
    (204/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.383224234 seconds)
    (205/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.804686331 seconds)
    (206/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.75959535 seconds)
    (207/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.300265688 seconds)
    (208/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.021724564 seconds)
    (209/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.440014507 seconds)
    (210/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.201274623 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.685546485 seconds)
    (212/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.43894179 seconds)
    (213/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.820664915 seconds)
    (214/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.453637436 seconds)
    (215/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.954717778 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.918058359 seconds)
    (217/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.452921785 seconds)
    (218/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.861865085 seconds)
    (219/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.5794178 seconds)
    (220/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.433208431 seconds)
    (221/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.425183131 seconds)
    (222/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.9711543 seconds)
    (223/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.919726615 seconds)
    (224/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.450530201 seconds)
  done (took 1145.980320597 seconds)
  (3/7) benchmarking "transpose"...
    (1/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.792774664 seconds)
    (2/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.727692721 seconds)
    (3/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.531666236 seconds)
    (4/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.93663787 seconds)
    (5/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 3.006114915 seconds)
    (6/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.317640523 seconds)
    (7/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.508852015 seconds)
    (8/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.596043144 seconds)
    (9/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.277777095 seconds)
    (10/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.841516711 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.271025313 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.461796372 seconds)
    (13/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.575009203 seconds)
    (14/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.977632438 seconds)
    (15/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.793648176 seconds)
    (16/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.491708332 seconds)
  done (took 88.551115695 seconds)
  (4/7) benchmarking "constructors"...
    (1/18) benchmarking ("IV", 100)...
    done (took 2.825243549 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.600102389 seconds)
    (3/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.37920998 seconds)
    (4/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.923734111 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 2.672733158 seconds)
    (6/18) benchmarking ("IJV", 1000)...
    done (took 2.769153797 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.933041495 seconds)
    (8/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.495726413 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.348126994 seconds)
    (10/18) benchmarking ("Bidiagonal", 10)...
    done (took 4.01682704 seconds)
    (11/18) benchmarking ("Diagonal", 1000)...
    done (took 2.800682731 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 3.066811013 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.703601302 seconds)
    (14/18) benchmarking ("IV", 10)...
    done (took 3.014220259 seconds)
    (15/18) benchmarking ("IJV", 100)...
    done (took 3.047241445 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.599001542 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.93281745 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.010642444 seconds)
  done (took 62.577619643 seconds)
  (5/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.600085284 seconds)
    (2/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.314709446 seconds)
    (3/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.599282096 seconds)
    (4/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.512497271 seconds)
    (5/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 6.981849566 seconds)
    (6/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.645305938 seconds)
    (7/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.294394381 seconds)
    (8/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.376543716 seconds)
    (9/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.170833549 seconds)
    (10/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.002619795 seconds)
    (11/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.68893309 seconds)
    (12/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.974956495 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.176621158 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.49824681 seconds)
    (15/54) benchmarking ("spmat", "array", 10)...
    done (took 2.535451828 seconds)
    (16/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.451470648 seconds)
    (17/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.501304809 seconds)
    (18/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.076110554 seconds)
    (19/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.177208149 seconds)
    (20/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.529299946 seconds)
    (21/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.599674607 seconds)
    (22/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.992670317 seconds)
    (23/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.523173506 seconds)
    (24/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.623107643 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.753614843 seconds)
    (26/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.434394459 seconds)
    (27/54) benchmarking ("spmat", "range", 100)...
    done (took 2.839459581 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.400569837 seconds)
    (29/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.431230102 seconds)
    (30/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.75277654 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.646007907 seconds)
    (32/54) benchmarking ("spmat", "range", 10)...
    done (took 4.084083128 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.189777501 seconds)
    (34/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.573999964 seconds)
    (35/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.176739437 seconds)
    (36/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.827901701 seconds)
    (37/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.079870637 seconds)
    (38/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.431661532 seconds)
    (39/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.442405269 seconds)
    (40/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.528099847 seconds)
    (41/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.792423808 seconds)
    (42/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.629683077 seconds)
    (43/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.701410937 seconds)
    (44/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.200824964 seconds)
    (45/54) benchmarking ("spmat", "array", 100)...
    done (took 2.920898164 seconds)
    (46/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.434364035 seconds)
    (47/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.377801021 seconds)
    (48/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.617121384 seconds)
    (49/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.010750146 seconds)
    (50/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.463164996 seconds)
    (51/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.269822437 seconds)
    (52/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.654933126 seconds)
    (53/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.200913189 seconds)
    (54/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.613898788 seconds)
  done (took 235.751859703 seconds)
  (6/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.89476479 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.534411528 seconds)
  done (took 12.892681922 seconds)
  (7/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.51780424 seconds)
    (2/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.515488751 seconds)
    (3/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.467276176 seconds)
    (4/10) benchmarking "square system (default), vector rhs"...
    done (took 7.493552677 seconds)
    (5/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.490554885 seconds)
    (6/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.489911196 seconds)
    (7/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.478060392 seconds)
    (8/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.477458621 seconds)
    (9/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.496852322 seconds)
    (10/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.520463017 seconds)
  done (took 77.383436835 seconds)
done (took 1643.328190442 seconds)
(6/23) benchmarking "micro"...
  (1/8) benchmarking "mandel"...
  done (took 3.860169487 seconds)
  (2/8) benchmarking "randmatmul"...
  done (took 7.499792886 seconds)
  (3/8) benchmarking "fib"...
  done (took 2.8460433 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.448400281 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.473956597 seconds)
  (6/8) benchmarking "parseint"...
  done (took 3.425061959 seconds)
  (7/8) benchmarking "quicksort"...
  done (took 5.517696831 seconds)
  (8/8) benchmarking "printfd"...
  done (took 7.443919908 seconds)
done (took 47.950433311 seconds)
(7/23) benchmarking "parallel"...
done (took 2.453453824 seconds)
(8/23) benchmarking "dates"...
  (1/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "DateFormat")...
    done (took 2.472995177 seconds)
    (2/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 3.069832237 seconds)
    (3/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.886689246 seconds)
    (4/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.267307247 seconds)
    (5/9) benchmarking "Date"...
    done (took 2.889280285 seconds)
    (6/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.500574569 seconds)
    (7/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.265854859 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.193228125 seconds)
    (9/9) benchmarking "DateTime"...
    done (took 3.074583955 seconds)
  done (took 29.058202273 seconds)
  (2/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.603846146 seconds)
    (2/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.504526129 seconds)
    (3/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.4838831 seconds)
    (4/18) benchmarking ("dayofyear", "Date")...
    done (took 2.640392891 seconds)
    (5/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.671923564 seconds)
    (6/18) benchmarking ("dayofweek", "Date")...
    done (took 2.480692713 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.50059696 seconds)
    (8/18) benchmarking ("isleapyear", "Date")...
    done (took 2.566635701 seconds)
    (9/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.639772197 seconds)
    (10/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.480481252 seconds)
    (11/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.620016345 seconds)
    (12/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.679950632 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.660846638 seconds)
    (14/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.636874426 seconds)
    (15/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.729665849 seconds)
    (16/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.587453337 seconds)
    (17/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.850545514 seconds)
    (18/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.935985129 seconds)
  done (took 49.71341395 seconds)
  (3/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.454627779 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.457868502 seconds)
  done (took 7.352800622 seconds)
  (4/7) benchmarking "accessor"...
    (1/7) benchmarking "millisecond"...
    done (took 2.528405393 seconds)
    (2/7) benchmarking "month"...
    done (took 2.669279328 seconds)
    (3/7) benchmarking "second"...
    done (took 2.492138878 seconds)
    (4/7) benchmarking "day"...
    done (took 2.597536695 seconds)
    (5/7) benchmarking "year"...
    done (took 2.56346181 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.489100327 seconds)
    (7/7) benchmarking "hour"...
    done (took 2.512363384 seconds)
  done (took 20.28875715 seconds)
  (5/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.506055041 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.667256923 seconds)
  done (took 9.606370226 seconds)
  (6/7) benchmarking "conversion"...
    (1/2) benchmarking "DateTime -> Date"...
    done (took 2.482389576 seconds)
    (2/2) benchmarking "Date -> DateTime"...
    done (took 2.47527268 seconds)
  done (took 7.454673794 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Hour")...
    done (took 2.469058709 seconds)
    (2/10) benchmarking ("DateTime", "Month")...
    done (took 2.974679871 seconds)
    (3/10) benchmarking ("Date", "Day")...
    done (took 2.474809436 seconds)
    (4/10) benchmarking ("Date", "Month")...
    done (took 2.847993549 seconds)
    (5/10) benchmarking ("DateTime", "Year")...
    done (took 2.897354764 seconds)
    (6/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.474428853 seconds)
    (7/10) benchmarking ("DateTime", "Second")...
    done (took 2.470636944 seconds)
    (8/10) benchmarking ("Date", "Year")...
    done (took 2.735632684 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.471462533 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.468279836 seconds)
  done (took 28.721036221 seconds)
done (took 154.628916391 seconds)
(9/23) benchmarking "scalar"...
  (1/25) benchmarking "floatexp"...
    (1/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.846647987 seconds)
    (2/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.481655904 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.479877776 seconds)
    (4/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.499675438 seconds)
    (5/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.488585153 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.486291489 seconds)
    (7/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.512963329 seconds)
    (8/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.489217861 seconds)
    (9/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.480260737 seconds)
    (10/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.49805641 seconds)
    (11/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.47306595 seconds)
    (12/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.508200183 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.503576329 seconds)
    (14/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.954028548 seconds)
    (15/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.471962301 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.511157038 seconds)
    (17/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.506409778 seconds)
    (18/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.487277775 seconds)
    (19/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.510993356 seconds)
    (20/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.492342302 seconds)
    (21/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.474103108 seconds)
    (22/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.503952554 seconds)
    (23/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.955064459 seconds)
    (24/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.480683441 seconds)
    (25/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.507799651 seconds)
    (26/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.482450513 seconds)
    (27/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.487822355 seconds)
    (28/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.507526504 seconds)
    (29/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.531721014 seconds)
    (30/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.474106407 seconds)
    (31/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.513893328 seconds)
    (32/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.474342424 seconds)
    (33/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.853352372 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.480964024 seconds)
    (35/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.481535494 seconds)
    (36/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.485923428 seconds)
    (37/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.493221396 seconds)
    (38/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.473789236 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.511553497 seconds)
    (40/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.487841997 seconds)
    (41/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.473916452 seconds)
    (42/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.509219777 seconds)
    (43/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.491715957 seconds)
    (44/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.500193214 seconds)
    (45/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.850113619 seconds)
    (46/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.486180914 seconds)
    (47/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.522438379 seconds)
    (48/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.50668741 seconds)
    (49/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.851418684 seconds)
    (50/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.510246999 seconds)
    (51/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.50636678 seconds)
    (52/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.492325565 seconds)
    (53/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.517734136 seconds)
    (54/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.499365543 seconds)
    (55/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.479666359 seconds)
  done (took 141.979572485 seconds)
  (2/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.451586341 seconds)
    (2/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.461974359 seconds)
    (3/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.455813832 seconds)
    (4/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.450748529 seconds)
    (5/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.447023457 seconds)
    (6/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.457820029 seconds)
  done (took 17.165638918 seconds)
  (3/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.528303005 seconds)
    (2/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.899436663 seconds)
    (3/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.960131164 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.495749021 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.505402887 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.484882368 seconds)
    (7/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.544451736 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.478923306 seconds)
    (9/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.492357438 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.545285258 seconds)
    (11/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.539523546 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.955509672 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.484672197 seconds)
    (14/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.507483426 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.54281 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.490737304 seconds)
    (17/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.501244985 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.478798886 seconds)
    (19/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.901110657 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.499243171 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.641535727 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.509989492 seconds)
  done (took 59.46080829 seconds)
  (4/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.510743386 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.50264231 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.52470628 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.511784193 seconds)
    (5/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.49714861 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.562984271 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.561128384 seconds)
    (8/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.552323234 seconds)
    (9/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.565490404 seconds)
    (10/30) benchmarking ("zero", "Float64")...
    done (took 2.486942752 seconds)
    (11/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.485918273 seconds)
    (12/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.494307474 seconds)
    (13/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.487223953 seconds)
    (14/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.499778669 seconds)
    (15/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.514785021 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.521981445 seconds)
    (17/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.51063057 seconds)
    (18/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.556177921 seconds)
    (19/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.51944293 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.493007037 seconds)
    (21/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.528154866 seconds)
    (22/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.48308428 seconds)
    (23/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.486552705 seconds)
    (24/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.572248384 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.494770117 seconds)
    (26/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.520207098 seconds)
    (27/30) benchmarking ("zero", "Float32")...
    done (took 2.49257133 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.508661219 seconds)
    (29/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.567034197 seconds)
    (30/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.565296377 seconds)
  done (took 78.019527163 seconds)
  (5/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.496757976 seconds)
    (2/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.491428055 seconds)
    (3/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.489884235 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.628076523 seconds)
    (5/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.499070992 seconds)
    (6/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.491507879 seconds)
    (7/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.554869855 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.505756281 seconds)
    (9/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.627136175 seconds)
    (10/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.576681419 seconds)
    (11/68) benchmarking ("x one", "Float64")...
    done (took 2.571909847 seconds)
    (12/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.488285099 seconds)
    (13/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.498662394 seconds)
    (14/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.625320359 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.501690736 seconds)
    (16/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.490948972 seconds)
    (17/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.488049498 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.490264635 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.554036062 seconds)
    (20/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.624601003 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.505083631 seconds)
    (22/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.496050885 seconds)
    (23/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.497340415 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.622293522 seconds)
    (25/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.499766696 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.495372408 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.557118208 seconds)
    (28/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.486119665 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.632996731 seconds)
    (30/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.503099219 seconds)
    (31/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.499625194 seconds)
    (32/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.506221006 seconds)
    (33/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.493709497 seconds)
    (34/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.495222344 seconds)
    (35/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.487097694 seconds)
    (36/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.493875986 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.498506032 seconds)
    (38/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.509464607 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.497246042 seconds)
    (40/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.509539747 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.634112526 seconds)
    (42/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.497241374 seconds)
    (43/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.50089915 seconds)
    (44/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.565606782 seconds)
    (45/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.498397095 seconds)
    (46/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.489736255 seconds)
    (47/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.567717536 seconds)
    (48/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.504165176 seconds)
    (49/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.56777048 seconds)
    (50/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.505886486 seconds)
    (51/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.485909935 seconds)
    (52/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.492111076 seconds)
    (53/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.488691771 seconds)
    (54/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.50194113 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.504722531 seconds)
    (56/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.514293767 seconds)
    (57/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.497600973 seconds)
    (58/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.493935023 seconds)
    (59/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.50096387 seconds)
    (60/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.569137171 seconds)
    (61/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.489368436 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.579958122 seconds)
    (63/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.501818692 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.61929283 seconds)
    (65/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.557831401 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.499823769 seconds)
    (67/68) benchmarking ("x one", "Float32")...
    done (took 2.513602292 seconds)
    (68/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.499268202 seconds)
  done (took 174.057965897 seconds)
  (6/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "UInt64")...
    done (took 2.456361138 seconds)
    (2/72) benchmarking ("isodd", "BigInt")...
    done (took 2.487424648 seconds)
    (3/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.464722702 seconds)
    (4/72) benchmarking ("isless", "Int64")...
    done (took 2.473941654 seconds)
    (5/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.474622999 seconds)
    (6/72) benchmarking ("isnan", "Float32")...
    done (took 2.467005576 seconds)
    (7/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.472863869 seconds)
    (8/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.471993449 seconds)
    (9/72) benchmarking ("isequal", "Int64")...
    done (took 2.477871003 seconds)
    (10/72) benchmarking ("isequal", "Float32")...
    done (took 2.477476792 seconds)
    (11/72) benchmarking ("isnan", "UInt64")...
    done (took 2.457405779 seconds)
    (12/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.471825539 seconds)
    (13/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.458575977 seconds)
    (14/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.629090646 seconds)
    (15/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.557659709 seconds)
    (16/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.469150356 seconds)
    (17/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.483115064 seconds)
    (18/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.473362251 seconds)
    (19/72) benchmarking ("isequal", "UInt64")...
    done (took 2.47028344 seconds)
    (20/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.472160224 seconds)
    (21/72) benchmarking ("isinteger", "Float32")...
    done (took 2.482057009 seconds)
    (22/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.475902646 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 2.473050563 seconds)
    (24/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.478427549 seconds)
    (25/72) benchmarking ("isinteger", "Float64")...
    done (took 2.472186793 seconds)
    (26/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.460055829 seconds)
    (27/72) benchmarking ("isless", "UInt64")...
    done (took 2.471898645 seconds)
    (28/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.471755046 seconds)
    (29/72) benchmarking ("isfinite", "Int64")...
    done (took 2.462140092 seconds)
    (30/72) benchmarking ("isless", "Float32")...
    done (took 2.4728498 seconds)
    (31/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.517822452 seconds)
    (32/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.461851288 seconds)
    (33/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.544016501 seconds)
    (34/72) benchmarking ("isfinite", "Float32")...
    done (took 2.472404057 seconds)
    (35/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.470132844 seconds)
    (36/72) benchmarking ("isnan", "Int64")...
    done (took 2.457234323 seconds)
    (37/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.455177167 seconds)
    (38/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.468933438 seconds)
    (39/72) benchmarking ("isnan", "BigInt")...
    done (took 2.456362704 seconds)
    (40/72) benchmarking ("isinf", "Float32")...
    done (took 2.471346579 seconds)
    (41/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.462821412 seconds)
    (42/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.474822159 seconds)
    (43/72) benchmarking ("iseven", "BigInt")...
    done (took 2.484312045 seconds)
    (44/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.474916612 seconds)
    (45/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.476660941 seconds)
    (46/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.458444826 seconds)
    (47/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.477528666 seconds)
    (48/72) benchmarking ("isequal", "Float64")...
    done (took 2.474717599 seconds)
    (49/72) benchmarking ("isnan", "Float64")...
    done (took 2.470191603 seconds)
    (50/72) benchmarking ("isinf", "Float64")...
    done (took 2.478571758 seconds)
    (51/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.459096963 seconds)
    (52/72) benchmarking ("isinf", "Int64")...
    done (took 2.461690623 seconds)
    (53/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.461510147 seconds)
    (54/72) benchmarking ("isless", "BigInt")...
    done (took 2.503200979 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.520071299 seconds)
    (56/72) benchmarking ("isless", "BigFloat")...
    done (took 2.574832859 seconds)
    (57/72) benchmarking ("isfinite", "Float64")...
    done (took 2.468670069 seconds)
    (58/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.467945169 seconds)
    (59/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.478306987 seconds)
    (60/72) benchmarking ("isequal", "BigInt")...
    done (took 2.503868563 seconds)
    (61/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.474595858 seconds)
    (62/72) benchmarking ("iseven", "Int64")...
    done (took 2.467981165 seconds)
    (63/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.46094409 seconds)
    (64/72) benchmarking ("iseven", "UInt64")...
    done (took 2.479933784 seconds)
    (65/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.472969875 seconds)
    (66/72) benchmarking ("isinteger", "Int64")...
    done (took 2.460546633 seconds)
    (67/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.476875729 seconds)
    (68/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.475214732 seconds)
    (69/72) benchmarking ("isless", "Float64")...
    done (took 2.481591712 seconds)
    (70/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.459274121 seconds)
    (71/72) benchmarking ("isinf", "BigInt")...
    done (took 2.459596154 seconds)
    (72/72) benchmarking ("isodd", "UInt64")...
    done (took 2.470549269 seconds)
  done (took 180.873697595 seconds)
  (7/25) benchmarking "tan"...
    (1/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.310339777 seconds)
    (2/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.490203517 seconds)
    (3/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.500324988 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.322059015 seconds)
    (5/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.33716104 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.504489825 seconds)
    (7/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.337179366 seconds)
    (8/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.393573606 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.512742379 seconds)
    (10/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.501880122 seconds)
    (11/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.502768735 seconds)
    (12/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.352873366 seconds)
    (13/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.289456567 seconds)
    (14/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.488910779 seconds)
    (15/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.492006799 seconds)
    (16/18) benchmarking ("zero", "Float32")...
    done (took 2.490715909 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.488779501 seconds)
    (18/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.339022864 seconds)
  done (took 54.090777265 seconds)
  (8/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.494279132 seconds)
    (2/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.496953987 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.517819796 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.498266348 seconds)
    (5/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.495301691 seconds)
    (6/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.492075911 seconds)
    (7/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.491225899 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.497737346 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.522521704 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.492341398 seconds)
    (11/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.493032178 seconds)
    (12/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.499102708 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.490725249 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.510845445 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.527050458 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.69741466 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.498599467 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.491768765 seconds)
    (19/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.548706717 seconds)
    (20/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.536843796 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.693845281 seconds)
  done (took 55.423932609 seconds)
  (9/25) benchmarking "cbrt"...
    (1/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.489717249 seconds)
    (2/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.404228162 seconds)
    (3/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.649253808 seconds)
    (4/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.58756628 seconds)
    (5/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.596648543 seconds)
    (6/20) benchmarking ("zero", "Float64")...
    done (took 2.490845871 seconds)
    (7/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.55495525 seconds)
    (8/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.594642755 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.657761529 seconds)
    (10/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.578014695 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.578149022 seconds)
    (12/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.562402403 seconds)
    (13/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.591174311 seconds)
    (14/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.562883447 seconds)
    (15/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.407323248 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.493909879 seconds)
    (17/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.560212822 seconds)
    (18/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.490914815 seconds)
    (19/20) benchmarking ("one", "Float32")...
    done (took 2.561683336 seconds)
    (20/20) benchmarking ("one", "Float64")...
    done (took 2.575975465 seconds)
  done (took 57.425156849 seconds)
  (10/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.535693459 seconds)
    (2/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.527111489 seconds)
    (3/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.527811604 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.531195086 seconds)
    (5/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.525012528 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.506416865 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.503311815 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.499149239 seconds)
    (9/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.528057936 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.501348778 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.4974478 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.504335439 seconds)
    (13/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.501258555 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.505115316 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.498942242 seconds)
    (16/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.696741011 seconds)
    (17/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.5057181 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.503101859 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.49710366 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.49841236 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.504819311 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.503377951 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.507227606 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.498230229 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.504647995 seconds)
    (26/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.529444291 seconds)
    (27/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.684222853 seconds)
    (28/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.525865648 seconds)
  done (took 73.096668868 seconds)
  (11/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.713097561 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.51222561 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.510216104 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.518773114 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.57440216 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.522917403 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.518824766 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.520983394 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.525572451 seconds)
    (10/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.579250334 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.737821354 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.522285494 seconds)
    (13/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.498705998 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.52365041 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.522763425 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.509684405 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.521072424 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.577398275 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.52525336 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.723337585 seconds)
    (21/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.501362991 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.52320815 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.52195903 seconds)
    (24/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.509522612 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.519580558 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.57869692 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.731529688 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.524288858 seconds)
    (29/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.579914982 seconds)
    (30/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.726337583 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.583433117 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.52283809 seconds)
    (33/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.505992529 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.511050796 seconds)
    (35/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.502225468 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.522480306 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.577851723 seconds)
    (38/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.726649735 seconds)
    (39/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.72595331 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.525926773 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.580048113 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.521269077 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.522655819 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.521854359 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.521095895 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.524204635 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.522438674 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.547700232 seconds)
    (49/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.582356017 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.523776233 seconds)
    (51/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.503926081 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.517961544 seconds)
    (53/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.584334467 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.57905619 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.543617318 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.725245094 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.58671576 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.535295206 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.525509976 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.511432584 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.531200522 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.580522437 seconds)
    (63/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.522904103 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.521772781 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.52625755 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.582347724 seconds)
  done (took 171.2746028 seconds)
  (12/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.498531378 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.502581597 seconds)
    (3/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.318220407 seconds)
    (4/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.498256961 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.495137793 seconds)
    (6/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.502165296 seconds)
    (7/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.51697203 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.55942943 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.51419459 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.498386071 seconds)
    (11/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.32910252 seconds)
    (12/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.49687402 seconds)
    (13/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.543345669 seconds)
    (14/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.494911149 seconds)
    (15/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.499205496 seconds)
    (16/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.501990152 seconds)
    (17/20) benchmarking ("zero", "Float32")...
    done (took 2.505271007 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.501804004 seconds)
    (19/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.535861737 seconds)
    (20/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.544406618 seconds)
  done (took 54.29645715 seconds)
  (13/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.519243224 seconds)
    (2/49) benchmarking ("add", "ComplexF64")...
    done (took 4.074565148 seconds)
    (3/49) benchmarking ("div", "Float32")...
    done (took 2.479329966 seconds)
    (4/49) benchmarking ("mul", "BigFloat")...
    done (took 3.257838612 seconds)
    (5/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.396866162 seconds)
    (6/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 5.248330836 seconds)
    (7/49) benchmarking ("add", "Float64")...
    done (took 2.485230436 seconds)
    (8/49) benchmarking ("add", "BigInt")...
    done (took 2.944307051 seconds)
    (9/49) benchmarking ("sub", "Int64")...
    done (took 3.307701186 seconds)
    (10/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.483041939 seconds)
    (11/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.491735931 seconds)
    (12/49) benchmarking ("div", "BigFloat")...
    done (took 3.488328972 seconds)
    (13/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.505444764 seconds)
    (14/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.48201584 seconds)
    (15/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.48329314 seconds)
    (16/49) benchmarking ("div", "UInt64")...
    done (took 2.481460327 seconds)
    (17/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.407912342 seconds)
    (18/49) benchmarking ("sub", "UInt64")...
    done (took 4.056534766 seconds)
    (19/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.512044961 seconds)
    (20/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.482846313 seconds)
    (21/49) benchmarking ("div", "Float64")...
    done (took 2.473990242 seconds)
    (22/49) benchmarking "13786"...
    done (took 2.474665247 seconds)
    (23/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 4.060503065 seconds)
    (24/49) benchmarking ("add", "ComplexF32")...
    done (took 2.510232018 seconds)
    (25/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.449753538 seconds)
    (26/49) benchmarking ("mul", "Float64")...
    done (took 2.492286396 seconds)
    (27/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.528786124 seconds)
    (28/49) benchmarking ("mul", "Int64")...
    done (took 2.470243445 seconds)
    (29/49) benchmarking ("sub", "Float64")...
    done (took 2.478898018 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 3.204785049 seconds)
    (31/49) benchmarking ("div", "ComplexF64")...
    done (took 3.303064944 seconds)
    (32/49) benchmarking ("add", "BigFloat")...
    done (took 2.931834235 seconds)
    (33/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.552156443 seconds)
    (34/49) benchmarking ("mul", "Float32")...
    done (took 2.473097597 seconds)
    (35/49) benchmarking ("div", "BigInt")...
    done (took 3.322611225 seconds)
    (36/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.93725223 seconds)
    (37/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.506945042 seconds)
    (38/49) benchmarking ("add", "Float32")...
    done (took 2.479270038 seconds)
    (39/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.47717756 seconds)
    (40/49) benchmarking ("add", "Int64")...
    done (took 2.473115136 seconds)
    (41/49) benchmarking ("sub", "BigFloat")...
    done (took 2.811795475 seconds)
    (42/49) benchmarking ("mul", "UInt64")...
    done (took 2.549668923 seconds)
    (43/49) benchmarking ("add", "UInt64")...
    done (took 2.473826271 seconds)
    (44/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.325303389 seconds)
    (45/49) benchmarking ("sub", "BigInt")...
    done (took 2.956168687 seconds)
    (46/49) benchmarking ("div", "ComplexF32")...
    done (took 3.318669369 seconds)
    (47/49) benchmarking ("sub", "Float32")...
    done (took 2.470921369 seconds)
    (48/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.479949194 seconds)
    (49/49) benchmarking ("div", "Int64")...
    done (took 2.480736554 seconds)
  done (took 145.506162008 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.485806725 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.489718856 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.541210372 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.486011247 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.488880869 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.526923654 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.537654408 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.501904174 seconds)
    (9/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.536843718 seconds)
    (10/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.54034773 seconds)
    (11/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.490335711 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.530102167 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.543710753 seconds)
    (14/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.543954991 seconds)
    (15/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.542117568 seconds)
    (16/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.544029426 seconds)
    (17/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.502159645 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.485531817 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.487199119 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.486349612 seconds)
    (21/22) benchmarking ("zero", "Float32")...
    done (took 2.498731122 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.487535773 seconds)
  done (took 57.714157966 seconds)
  (15/25) benchmarking "sinh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.885701409 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.050061566 seconds)
    (3/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.539896013 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.522439504 seconds)
    (5/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.531771089 seconds)
    (6/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.538112296 seconds)
    (7/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.513023123 seconds)
    (8/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.543592328 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.047880936 seconds)
    (10/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.530441482 seconds)
    (11/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.490345213 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.550334202 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.55248285 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.504375588 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.884393234 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.53740683 seconds)
    (17/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.548325026 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.490662351 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.49476693 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.524160912 seconds)
    (21/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.546522747 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.521698066 seconds)
  done (took 59.782913658 seconds)
  (16/25) benchmarking "exp2"...
    (1/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.310015632 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.48909638 seconds)
    (3/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.816383886 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.505944505 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.499927887 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.484728693 seconds)
    (7/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.503119952 seconds)
    (8/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.825955796 seconds)
    (9/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.509229692 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.455200373 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.506175843 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.502205257 seconds)
    (13/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.502824411 seconds)
    (14/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.510338503 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.31216325 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.450805988 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.44496825 seconds)
    (18/24) benchmarking ("zero", "Float32")...
    done (took 2.504924816 seconds)
    (19/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.50230712 seconds)
    (20/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.499611741 seconds)
    (21/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.505325486 seconds)
    (22/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.44944319 seconds)
    (23/24) benchmarking ("one", "Float32")...
    done (took 2.509185804 seconds)
    (24/24) benchmarking ("one", "Float64")...
    done (took 2.50799666 seconds)
  done (took 72.538880941 seconds)
  (17/25) benchmarking "iteration"...
    (1/2) benchmarking "in"...
    done (took 2.46668257 seconds)
    (2/2) benchmarking "indexed"...
    done (took 2.476935096 seconds)
  done (took 7.383850717 seconds)
  (18/25) benchmarking "acosh"...
    (1/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.615716274 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.542719903 seconds)
    (3/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.547117737 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.619036629 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.664856899 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.602826915 seconds)
    (7/8) benchmarking ("one", "Float64")...
    done (took 2.486417762 seconds)
    (8/8) benchmarking ("one", "Float32")...
    done (took 2.491042222 seconds)
  done (took 23.005667433 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.303098726 seconds)
    (2/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.319961603 seconds)
    (3/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.717899051 seconds)
    (4/16) benchmarking ("zero", "Float64")...
    done (took 2.514694242 seconds)
    (5/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.736774164 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.717104995 seconds)
    (7/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.324074974 seconds)
    (8/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.579176582 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.305299997 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.746141387 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.626740713 seconds)
    (12/16) benchmarking ("zero", "Float32")...
    done (took 2.510428531 seconds)
    (13/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.619997691 seconds)
    (14/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.581935678 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.507238241 seconds)
    (16/16) benchmarking ("one", "Float32")...
    done (took 2.514563093 seconds)
  done (took 47.058807144 seconds)
  (20/25) benchmarking "expm1"...
    (1/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.496796237 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.974342778 seconds)
    (3/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.434753256 seconds)
    (4/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.492798981 seconds)
    (5/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.493869223 seconds)
    (6/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.51349404 seconds)
    (7/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.494849927 seconds)
    (8/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.512096156 seconds)
    (9/30) benchmarking ("zero", "Float64")...
    done (took 2.530178359 seconds)
    (10/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.490014753 seconds)
    (11/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.513743233 seconds)
    (12/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.485757553 seconds)
    (13/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.514580257 seconds)
    (14/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.495677441 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.445670605 seconds)
    (16/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.519347565 seconds)
    (17/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.512338807 seconds)
    (18/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.540520447 seconds)
    (19/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.497079666 seconds)
    (20/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.513554605 seconds)
    (21/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.511061931 seconds)
    (22/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.517446492 seconds)
    (23/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.511597451 seconds)
    (24/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.511615043 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.97771144 seconds)
    (26/30) benchmarking ("zero", "Float32")...
    done (took 2.50828521 seconds)
    (27/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.509408967 seconds)
    (28/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.483173499 seconds)
    (29/30) benchmarking ("one", "Float32")...
    done (took 2.513894709 seconds)
    (30/30) benchmarking ("one", "Float64")...
    done (took 2.517532048 seconds)
  done (took 94.468516448 seconds)
  (21/25) benchmarking "sin"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.730361044 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.525025655 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.52793748 seconds)
    (4/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.499668937 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.571358131 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.542211212 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.519787673 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.506402042 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.509648816 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.517934499 seconds)
    (11/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.509356645 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.509710192 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.503792539 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.506891366 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.517803107 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.517275335 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.526361588 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.723894701 seconds)
    (19/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.497370183 seconds)
    (20/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.484410625 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.513304447 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.508248001 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.505192418 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.524707351 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.522410074 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.527678473 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.711677694 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.505726721 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.527701507 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.492301121 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.58316734 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.533048648 seconds)
    (33/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.728113793 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.515060215 seconds)
    (35/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.781593651 seconds)
    (36/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.690705853 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.838162369 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.765425529 seconds)
    (39/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.575039047 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.511307431 seconds)
    (41/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.556757212 seconds)
    (42/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.682868017 seconds)
    (43/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.722359713 seconds)
    (44/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.713179985 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.522013534 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.509958861 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.526928857 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.574129794 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.531947939 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.553008731 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.506292538 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.633055082 seconds)
    (53/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.492343544 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.510252421 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.527479543 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.511199947 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.50896504 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.516776214 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.52544472 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.519629898 seconds)
    (61/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.725878682 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.512530475 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.517323102 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.505580515 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.508654152 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.531239399 seconds)
  done (took 171.488761256 seconds)
  (22/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.576368837 seconds)
    (2/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.67750926 seconds)
    (3/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.491658695 seconds)
    (4/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.491170534 seconds)
    (5/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.630414453 seconds)
    (6/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.666196432 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.584423286 seconds)
    (8/22) benchmarking ("zero", "Float64")...
    done (took 2.493052064 seconds)
    (9/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.556090524 seconds)
    (10/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.6238851 seconds)
    (11/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.553071897 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.495619832 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.524229062 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.556373349 seconds)
    (15/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.676162413 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.555772141 seconds)
    (17/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.626537703 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.491904667 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.496489719 seconds)
    (20/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.668708227 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.523141603 seconds)
    (22/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.644199971 seconds)
  done (took 59.037090676 seconds)
  (23/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.637607509 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.578306524 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.63461521 seconds)
    (4/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.583143791 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.569691225 seconds)
    (6/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.547355907 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.57146772 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.554256968 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.571145889 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.647744047 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.565125899 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.575927941 seconds)
    (13/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.786275643 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.575464919 seconds)
    (15/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.536800139 seconds)
    (16/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.634672838 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.605759361 seconds)
    (18/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.657672901 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.600680278 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.615277376 seconds)
    (21/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.550188297 seconds)
    (22/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.534658099 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.580856265 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.585405657 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.573266634 seconds)
    (26/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.588585166 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.545725382 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.595755514 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.597043393 seconds)
    (30/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.797252493 seconds)
    (31/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.570972786 seconds)
    (32/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.64529721 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.578632305 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.574735657 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.540583029 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.567822344 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.567286576 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.570964713 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.57125614 seconds)
    (40/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.781752678 seconds)
    (41/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.573498098 seconds)
    (42/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.540815837 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.574228413 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.628536782 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.537059407 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.575643595 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.629644341 seconds)
    (48/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.626732728 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.62610241 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.56775927 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.5674908 seconds)
    (52/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.570925256 seconds)
    (53/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.630667787 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.572038518 seconds)
    (55/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.587653753 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.630320806 seconds)
    (57/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.57038009 seconds)
    (58/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.549947698 seconds)
    (59/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.776678625 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.623659119 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.767615231 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.57233019 seconds)
  done (took 163.709780687 seconds)
  (24/25) benchmarking "acos"...
    (1/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.315478589 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.496123969 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.486257209 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.508977805 seconds)
    (5/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.486739283 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.491608369 seconds)
    (7/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.484426451 seconds)
    (8/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.517619006 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.556560338 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.495944077 seconds)
    (11/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.498384726 seconds)
    (12/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.491986233 seconds)
    (13/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.490562816 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.494678342 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.50352716 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.503833627 seconds)
    (17/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.520449369 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.334600314 seconds)
  done (took 49.120104002 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.633136843 seconds)
    (2/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 3.552537783 seconds)
    (3/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.409915126 seconds)
    (4/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.529681273 seconds)
    (5/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.486080981 seconds)
    (6/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.407125952 seconds)
    (7/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 4.088224166 seconds)
    (8/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.486308464 seconds)
    (9/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.481454011 seconds)
    (10/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.89765942 seconds)
    (11/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.552388687 seconds)
    (12/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.062058083 seconds)
    (13/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.955227585 seconds)
    (14/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.933993552 seconds)
    (15/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.527016067 seconds)
    (16/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.469578092 seconds)
    (17/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.484981759 seconds)
    (18/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.270029973 seconds)
    (19/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.476031022 seconds)
    (20/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.473615741 seconds)
    (21/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.475964438 seconds)
    (22/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.418747521 seconds)
    (23/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.62596589 seconds)
    (24/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 4.027209939 seconds)
    (25/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.441109551 seconds)
    (26/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.49678328 seconds)
    (27/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.373608463 seconds)
    (28/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.801730705 seconds)
    (29/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.488094553 seconds)
    (30/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.472313923 seconds)
    (31/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.48246145 seconds)
    (32/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.477517187 seconds)
    (33/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.565130334 seconds)
    (34/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.409559529 seconds)
    (35/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 4.074587059 seconds)
    (36/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.892440647 seconds)
    (37/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.255462788 seconds)
    (38/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.890530306 seconds)
    (39/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 3.316451453 seconds)
    (40/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.491991938 seconds)
    (41/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.596144138 seconds)
    (42/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.475962685 seconds)
    (43/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.471115629 seconds)
    (44/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.196502191 seconds)
    (45/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.191850562 seconds)
    (46/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.033603171 seconds)
    (47/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 3.302609527 seconds)
    (48/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.530113537 seconds)
    (49/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.478257951 seconds)
    (50/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 3.988813975 seconds)
    (51/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 3.312026009 seconds)
    (52/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.47958167 seconds)
    (53/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.478634067 seconds)
    (54/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.866340231 seconds)
    (55/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.410075622 seconds)
    (56/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.591346226 seconds)
    (57/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.670342445 seconds)
    (58/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.463248343 seconds)
    (59/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.326343174 seconds)
    (60/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.850608214 seconds)
    (61/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.55278783 seconds)
    (62/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.484282982 seconds)
    (63/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.401935356 seconds)
    (64/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.386729493 seconds)
    (65/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.3176046 seconds)
    (66/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.619387532 seconds)
    (67/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.959700968 seconds)
    (68/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.53872191 seconds)
    (69/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.727685669 seconds)
    (70/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.093943883 seconds)
    (71/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.66980621 seconds)
    (72/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 4.160098065 seconds)
    (73/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 4.600647223 seconds)
    (74/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.621196868 seconds)
    (75/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.475667706 seconds)
    (76/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.529318802 seconds)
    (77/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.478581445 seconds)
    (78/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.483125204 seconds)
    (79/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.604125677 seconds)
    (80/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.809237921 seconds)
    (81/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.557564324 seconds)
    (82/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.94173021 seconds)
    (83/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.608727044 seconds)
    (84/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 4.023468005 seconds)
    (85/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.529980981 seconds)
    (86/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 3.01309439 seconds)
    (87/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 3.31438228 seconds)
    (88/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.257655996 seconds)
    (89/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.562338164 seconds)
    (90/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.250364494 seconds)
    (91/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.641423586 seconds)
    (92/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.010185718 seconds)
    (93/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.425759812 seconds)
    (94/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.473419864 seconds)
    (95/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.40623468 seconds)
    (96/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.50929872 seconds)
    (97/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.413452224 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.68988023 seconds)
    (99/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 4.006917075 seconds)
    (100/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.556844691 seconds)
    (101/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 4.015482411 seconds)
    (102/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.160670381 seconds)
    (103/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 3.299656121 seconds)
    (104/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.182210998 seconds)
    (105/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.331375348 seconds)
    (106/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.728109749 seconds)
    (107/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.420667033 seconds)
    (108/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.552002744 seconds)
    (109/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.482557201 seconds)
    (110/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.123952688 seconds)
    (111/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.517789565 seconds)
    (112/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.544891085 seconds)
    (113/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.48239564 seconds)
    (114/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.862349715 seconds)
    (115/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.245510669 seconds)
    (116/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.634481141 seconds)
    (117/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.095098008 seconds)
    (118/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.870549317 seconds)
    (119/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.552262413 seconds)
    (120/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.801154616 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.697153485 seconds)
    (122/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.641845348 seconds)
    (123/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.41665411 seconds)
    (124/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 5.606589618 seconds)
    (125/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 4.081168517 seconds)
    (126/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.818384484 seconds)
    (127/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.917840081 seconds)
    (128/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.700542907 seconds)
    (129/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.478322279 seconds)
    (130/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.192065552 seconds)
    (131/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.769271279 seconds)
    (132/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 4.002605818 seconds)
    (133/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.626717141 seconds)
    (134/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.66103397 seconds)
    (135/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.484899157 seconds)
    (136/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.955292505 seconds)
    (137/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.160195413 seconds)
    (138/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.457617897 seconds)
    (139/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.834534484 seconds)
    (140/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.738123988 seconds)
    (141/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.24666029 seconds)
    (142/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.561720261 seconds)
    (143/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.486608984 seconds)
    (144/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.137414509 seconds)
    (145/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.663633408 seconds)
    (146/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.861405141 seconds)
    (147/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.61883277 seconds)
    (148/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.379739912 seconds)
    (149/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 4.750506979 seconds)
    (150/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.420578881 seconds)
    (151/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.241404195 seconds)
    (152/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.356497538 seconds)
    (153/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.978300391 seconds)
    (154/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.983458096 seconds)
    (155/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.789796311 seconds)
    (156/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.997157882 seconds)
    (157/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.559227164 seconds)
    (158/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.488558958 seconds)
    (159/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.496738392 seconds)
    (160/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.529119646 seconds)
    (161/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.316311712 seconds)
    (162/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.649407453 seconds)
    (163/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.48441307 seconds)
    (164/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 3.612921662 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 4.52395145 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.850992745 seconds)
    (167/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.321169548 seconds)
    (168/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.486063929 seconds)
    (169/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.497519091 seconds)
    (170/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.934678698 seconds)
    (171/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.159044978 seconds)
    (172/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.758744983 seconds)
    (173/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.483940957 seconds)
    (174/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.477878407 seconds)
    (175/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.482822521 seconds)
    (176/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 3.968620452 seconds)
    (177/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.799684523 seconds)
    (178/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 5.168337145 seconds)
    (179/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 4.950037558 seconds)
    (180/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 3.308562147 seconds)
    (181/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.162836999 seconds)
    (182/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 3.33479631 seconds)
    (183/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.481890198 seconds)
    (184/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.791648399 seconds)
    (185/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.71725665 seconds)
    (186/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.480777171 seconds)
    (187/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.478816128 seconds)
    (188/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.482294295 seconds)
    (189/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.466297725 seconds)
    (190/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.291885831 seconds)
    (191/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.598255861 seconds)
    (192/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.479594264 seconds)
    (193/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.439881001 seconds)
    (194/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.484813547 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.490364708 seconds)
    (196/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.552052377 seconds)
    (197/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.964718886 seconds)
    (198/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.682779211 seconds)
    (199/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 4.015797554 seconds)
    (200/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.318567409 seconds)
    (201/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.912951805 seconds)
    (202/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.902462211 seconds)
    (203/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.444599629 seconds)
    (204/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.920805167 seconds)
    (205/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.550151044 seconds)
    (206/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.476541024 seconds)
    (207/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.869951 seconds)
    (208/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.864976961 seconds)
    (209/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.94535906 seconds)
    (210/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.767911773 seconds)
    (211/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 5.199902966 seconds)
    (212/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.590248964 seconds)
    (213/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.515716075 seconds)
    (214/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.953560288 seconds)
    (215/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.630953166 seconds)
    (216/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.477758762 seconds)
    (217/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.908673472 seconds)
    (218/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.721565434 seconds)
    (219/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.793643131 seconds)
    (220/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.398884555 seconds)
    (221/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.556002673 seconds)
    (222/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.796742556 seconds)
    (223/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.557567773 seconds)
    (224/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.48576565 seconds)
    (225/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.480790831 seconds)
    (226/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.542534818 seconds)
    (227/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.479907651 seconds)
    (228/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.851529637 seconds)
    (229/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.719259134 seconds)
    (230/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.857327953 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 4.0217116 seconds)
    (232/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.483372511 seconds)
    (233/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.485906004 seconds)
    (234/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.873250242 seconds)
    (235/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.387043023 seconds)
    (236/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 4.018313955 seconds)
    (237/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.98376825 seconds)
    (238/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.471539455 seconds)
    (239/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 4.164520645 seconds)
    (240/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 3.3250436 seconds)
    (241/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.475869426 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.478121534 seconds)
    (243/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.705213941 seconds)
    (244/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.680967845 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.210312704 seconds)
    (246/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.626374587 seconds)
    (247/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.480079994 seconds)
    (248/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.11278896 seconds)
    (249/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.685828875 seconds)
    (250/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.892863058 seconds)
    (251/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.769911356 seconds)
    (252/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.627410525 seconds)
    (253/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.481516834 seconds)
    (254/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.509762986 seconds)
    (255/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.483604036 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.766398577 seconds)
    (257/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.271391782 seconds)
    (258/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.650008849 seconds)
    (259/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.476746287 seconds)
    (260/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.317600096 seconds)
    (261/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.704224408 seconds)
    (262/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.859011985 seconds)
    (263/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.357742043 seconds)
    (264/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.624756911 seconds)
    (265/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.882491904 seconds)
    (266/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.725319369 seconds)
    (267/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.482242644 seconds)
    (268/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.788490495 seconds)
    (269/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.838139777 seconds)
    (270/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.353556387 seconds)
    (271/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.855354726 seconds)
    (272/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.745469176 seconds)
    (273/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.159237901 seconds)
    (274/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 3.312964691 seconds)
    (275/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.813448838 seconds)
    (276/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.773738856 seconds)
    (277/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.402245802 seconds)
    (278/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.633694651 seconds)
    (279/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 4.070848774 seconds)
    (280/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.484707396 seconds)
    (281/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.4819209 seconds)
    (282/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.476092737 seconds)
    (283/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.479745403 seconds)
    (284/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.476476967 seconds)
    (285/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.518945983 seconds)
    (286/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.792704083 seconds)
    (287/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.544365845 seconds)
    (288/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.329744757 seconds)
    (289/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.263759975 seconds)
    (290/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.613063734 seconds)
    (291/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.754788864 seconds)
    (292/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.652262083 seconds)
    (293/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.019909456 seconds)
    (294/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.719560258 seconds)
    (295/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.938942463 seconds)
    (296/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.141685616 seconds)
    (297/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.643248644 seconds)
    (298/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.411835459 seconds)
    (299/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.603847528 seconds)
    (300/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.684074917 seconds)
    (301/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.474995959 seconds)
    (302/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.068186967 seconds)
    (303/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.944760565 seconds)
    (304/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.720792991 seconds)
    (305/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.913172641 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.675519375 seconds)
    (307/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 4.006289572 seconds)
    (308/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.477550469 seconds)
    (309/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.891778263 seconds)
    (310/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.757682727 seconds)
    (311/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.945972313 seconds)
    (312/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.526304266 seconds)
    (313/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.741974149 seconds)
    (314/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.617530423 seconds)
    (315/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.479958238 seconds)
    (316/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.173744254 seconds)
    (317/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.63375648 seconds)
    (318/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.466456633 seconds)
    (319/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.84576632 seconds)
    (320/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.004845319 seconds)
    (321/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.806294283 seconds)
    (322/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.222383517 seconds)
    (323/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.592951883 seconds)
    (324/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.36899983 seconds)
    (325/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.391882977 seconds)
    (326/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.914978425 seconds)
    (327/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.526326511 seconds)
    (328/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.515680839 seconds)
    (329/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.482563361 seconds)
    (330/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.482115777 seconds)
    (331/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.478752789 seconds)
    (332/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.374755415 seconds)
    (333/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.6273698 seconds)
    (334/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.554641776 seconds)
    (335/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.639906218 seconds)
    (336/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 3.044216781 seconds)
    (337/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.546414013 seconds)
    (338/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.950761053 seconds)
    (339/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.790076397 seconds)
    (340/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.478373427 seconds)
    (341/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.604489297 seconds)
    (342/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.620073497 seconds)
    (343/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.59349109 seconds)
    (344/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.674345024 seconds)
    (345/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.481450424 seconds)
    (346/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.489590898 seconds)
    (347/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.787413401 seconds)
    (348/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.642670476 seconds)
    (349/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.479540445 seconds)
    (350/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.591722172 seconds)
    (351/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 4.015122117 seconds)
    (352/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.470244794 seconds)
    (353/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.175676509 seconds)
    (354/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.630764301 seconds)
    (355/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.85767168 seconds)
    (356/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.578855791 seconds)
    (357/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.480236835 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.481054156 seconds)
    (359/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.667623014 seconds)
    (360/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.734988519 seconds)
    (361/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.780281854 seconds)
    (362/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.223584693 seconds)
    (363/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.299715277 seconds)
    (364/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.843313656 seconds)
    (365/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.608205154 seconds)
    (366/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.575628046 seconds)
    (367/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.473827018 seconds)
    (368/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.506260454 seconds)
    (369/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 3.688607506 seconds)
    (370/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.587485475 seconds)
    (371/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.473751973 seconds)
    (372/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.547257903 seconds)
    (373/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.520334689 seconds)
    (374/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.633840592 seconds)
    (375/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.483595794 seconds)
    (376/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.502512072 seconds)
    (377/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.306920016 seconds)
    (378/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.524938148 seconds)
    (379/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.258604206 seconds)
    (380/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.518626282 seconds)
    (381/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.107959479 seconds)
    (382/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.336637803 seconds)
    (383/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.8363859 seconds)
    (384/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.591871629 seconds)
    (385/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.163546524 seconds)
    (386/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.050692713 seconds)
    (387/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.864198341 seconds)
    (388/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.477381037 seconds)
    (389/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.488601342 seconds)
    (390/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.474935434 seconds)
    (391/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.336648558 seconds)
    (392/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.381452909 seconds)
    (393/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 4.509696877 seconds)
    (394/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.547111691 seconds)
    (395/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.587689414 seconds)
    (396/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.963350545 seconds)
    (397/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.719292138 seconds)
    (398/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.479478727 seconds)
    (399/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.477727233 seconds)
    (400/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.472965902 seconds)
    (401/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.615027586 seconds)
    (402/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 3.740775882 seconds)
    (403/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.714808541 seconds)
    (404/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.481698921 seconds)
    (405/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.481999023 seconds)
    (406/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.801736854 seconds)
    (407/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.799269135 seconds)
    (408/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.62690353 seconds)
    (409/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.93545442 seconds)
    (410/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.797579678 seconds)
    (411/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.592076341 seconds)
    (412/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.185547677 seconds)
    (413/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.619854178 seconds)
    (414/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.504311761 seconds)
    (415/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.159502434 seconds)
    (416/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.677985488 seconds)
    (417/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.525723294 seconds)
    (418/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.615306533 seconds)
    (419/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 4.010128156 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.486906759 seconds)
    (421/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.778576654 seconds)
    (422/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.643079121 seconds)
    (423/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.487609314 seconds)
    (424/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.75053925 seconds)
    (425/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.603909484 seconds)
    (426/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.492464801 seconds)
    (427/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.478921811 seconds)
    (428/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.505730523 seconds)
    (429/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.491146714 seconds)
    (430/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.629925893 seconds)
    (431/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 4.695008413 seconds)
    (432/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 3.307682785 seconds)
    (433/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.353146772 seconds)
    (434/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 3.888117427 seconds)
    (435/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.487794424 seconds)
    (436/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.408281046 seconds)
    (437/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 5.176218279 seconds)
    (438/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.436957288 seconds)
    (439/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.613858341 seconds)
    (440/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.313759178 seconds)
    (441/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.273442286 seconds)
    (442/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.920899462 seconds)
    (443/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.625135982 seconds)
    (444/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.57742731 seconds)
    (445/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.89051412 seconds)
    (446/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.617096428 seconds)
    (447/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.347206434 seconds)
    (448/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.533669121 seconds)
    (449/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.834676753 seconds)
    (450/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.885982672 seconds)
    (451/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.404379635 seconds)
    (452/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.413145171 seconds)
    (453/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.202539305 seconds)
    (454/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.815327887 seconds)
    (455/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.112677327 seconds)
    (456/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.385265067 seconds)
    (457/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 4.701136819 seconds)
    (458/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.542681027 seconds)
    (459/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 4.021582125 seconds)
    (460/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.611607426 seconds)
    (461/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.664323233 seconds)
    (462/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.454993455 seconds)
    (463/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.032283066 seconds)
    (464/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.788213277 seconds)
    (465/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.805606782 seconds)
    (466/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.547905033 seconds)
    (467/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.922255831 seconds)
    (468/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.604427657 seconds)
    (469/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.952060198 seconds)
    (470/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.925653296 seconds)
    (471/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.666695413 seconds)
    (472/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.482494853 seconds)
    (473/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.485295675 seconds)
    (474/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.473356623 seconds)
    (475/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.647684502 seconds)
    (476/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.487431554 seconds)
    (477/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.523853051 seconds)
    (478/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.195689829 seconds)
    (479/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 3.311431297 seconds)
    (480/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.483651859 seconds)
    (481/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.150762317 seconds)
    (482/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.549197436 seconds)
    (483/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.83853607 seconds)
    (484/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.032029792 seconds)
    (485/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.780388189 seconds)
    (486/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.15752191 seconds)
    (487/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.821061011 seconds)
    (488/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.759075025 seconds)
    (489/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.586508682 seconds)
    (490/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 4.938250654 seconds)
    (491/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.777765987 seconds)
    (492/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.621590274 seconds)
    (493/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.472170883 seconds)
    (494/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.479365035 seconds)
    (495/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.480159298 seconds)
    (496/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.938884943 seconds)
    (497/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.278688087 seconds)
    (498/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 3.320040321 seconds)
    (499/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.208168661 seconds)
    (500/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.536817534 seconds)
    (501/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.697366126 seconds)
    (502/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.464859971 seconds)
    (503/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.911871835 seconds)
    (504/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 3.323409381 seconds)
    (505/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.436600092 seconds)
    (506/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.545411983 seconds)
    (507/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.920584459 seconds)
    (508/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.551668171 seconds)
    (509/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.505484858 seconds)
    (510/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.494935349 seconds)
    (511/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.924661859 seconds)
    (512/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.672552297 seconds)
    (513/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.639669846 seconds)
    (514/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.256635454 seconds)
    (515/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.624783932 seconds)
    (516/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.56305614 seconds)
    (517/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.054823442 seconds)
    (518/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.89627885 seconds)
    (519/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.567337028 seconds)
    (520/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.541966154 seconds)
    (521/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.481880509 seconds)
    (522/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.482871136 seconds)
    (523/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.464008277 seconds)
    (524/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.938684715 seconds)
    (525/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.645840744 seconds)
    (526/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.709724292 seconds)
    (527/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.555553109 seconds)
    (528/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.88136607 seconds)
    (529/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.199466772 seconds)
    (530/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.65365599 seconds)
    (531/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.483616049 seconds)
    (532/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.479303948 seconds)
    (533/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.925326942 seconds)
    (534/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.79099744 seconds)
    (535/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.931830083 seconds)
    (536/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.314931175 seconds)
    (537/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.756405519 seconds)
    (538/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.712547136 seconds)
    (539/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.263584549 seconds)
    (540/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.623454879 seconds)
    (541/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.250023109 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.921302624 seconds)
    (543/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.700778318 seconds)
    (544/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.687297441 seconds)
    (545/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.473647699 seconds)
    (546/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.481756907 seconds)
    (547/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.484975673 seconds)
    (548/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.474686276 seconds)
    (549/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.484035766 seconds)
    (550/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.473539488 seconds)
    (551/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.48435771 seconds)
    (552/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.017837847 seconds)
    (553/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.405305692 seconds)
    (554/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.411153865 seconds)
    (555/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.63340003 seconds)
    (556/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.499779748 seconds)
    (557/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.751918387 seconds)
    (558/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.878384334 seconds)
    (559/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.422219242 seconds)
    (560/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.607408507 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.475389511 seconds)
    (562/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.489155898 seconds)
    (563/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.452910196 seconds)
    (564/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.496632654 seconds)
    (565/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.463850371 seconds)
    (566/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.540543844 seconds)
    (567/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.59794945 seconds)
    (568/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.789735509 seconds)
    (569/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.543025124 seconds)
    (570/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.473154625 seconds)
    (571/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.594835507 seconds)
    (572/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.636086939 seconds)
    (573/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.473169456 seconds)
    (574/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.486000439 seconds)
    (575/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.475976016 seconds)
    (576/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.762076591 seconds)
    (577/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.951727366 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.75736204 seconds)
    (579/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 3.934018129 seconds)
    (580/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.739793549 seconds)
    (581/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.546653215 seconds)
    (582/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.901677675 seconds)
    (583/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.318305687 seconds)
    (584/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.314519393 seconds)
    (585/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.60834658 seconds)
    (586/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.475260313 seconds)
    (587/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.805469151 seconds)
    (588/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.345775406 seconds)
    (589/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.060043068 seconds)
    (590/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 3.797651416 seconds)
    (591/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.91512401 seconds)
    (592/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 4.04135789 seconds)
    (593/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.592024901 seconds)
    (594/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.349465969 seconds)
    (595/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.315916779 seconds)
    (596/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.879955084 seconds)
  done (took 1971.774281994 seconds)
done (took 4042.192379082 seconds)
(10/23) benchmarking "misc"...
  (1/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt", "UInt")...
    done (took 2.481424566 seconds)
    (2/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.479138697 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.488258668 seconds)
    (4/4) benchmarking ("Int", "UInt")...
    done (took 2.483385951 seconds)
  done (took 12.374451329 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.978734684 seconds)
  (3/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 3.387127449 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.864172335 seconds)
  done (took 8.755449935 seconds)
  (4/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.517974875 seconds)
    (2/3) benchmarking "Float64"...
    done (took 3.057826423 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 3.096063948 seconds)
  done (took 11.134124505 seconds)
  (5/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.300020267 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.289091988 seconds)
  done (took 9.028387802 seconds)
  (6/15) benchmarking "fastmath many args"...
  done (took 2.68233739 seconds)
  (7/15) benchmarking "23042"...
    (1/4) benchmarking "Float32"...
    done (took 2.908286267 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.747894144 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 4.316472009 seconds)
    (4/4) benchmarking "Float64"...
    done (took 3.891933884 seconds)
  done (took 17.302439578 seconds)
  (8/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.610842314 seconds)
  done (took 5.078576262 seconds)
  (9/15) benchmarking "18129"...
  done (took 7.461282276 seconds)
  (10/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.632703502 seconds)
    (2/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.964189952 seconds)
    (3/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.794073884 seconds)
  done (took 10.859768307 seconds)
  (11/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 3.049848482 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.223282099 seconds)
  done (took 8.712573585 seconds)
  (12/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.451605104 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.458570619 seconds)
    (3/3) benchmarking "Float64"...
    done (took 7.454763244 seconds)
  done (took 24.822739017 seconds)
  (13/15) benchmarking "20517"...
  done (took 2.979718004 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.760922829 seconds)
    (2/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.790454766 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.871799541 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.937217432 seconds)
    (5/10) benchmarking "zip(1:1000)"...
    done (took 2.578208365 seconds)
    (6/10) benchmarking "zip(1:1)"...
    done (took 2.82670369 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.665451182 seconds)
    (8/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.283533363 seconds)
    (9/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.954214424 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 3.024409004 seconds)
  done (took 31.132879628 seconds)
  (15/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "nested")...
    done (took 7.439785217 seconds)
    (2/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.504200331 seconds)
    (3/4) benchmarking ("parse", "function")...
    done (took 2.816221938 seconds)
    (4/4) benchmarking ("parse", "array")...
    done (took 4.462076121 seconds)
  done (took 24.699970974 seconds)
done (took 182.50934947 seconds)
(11/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.653037837 seconds)
    (2/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.688036209 seconds)
    (3/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.448311526 seconds)
    (4/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 2.663251899 seconds)
    (5/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.535793267 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.711283457 seconds)
    (7/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.662724409 seconds)
    (8/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 3.014179855 seconds)
    (9/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.471694803 seconds)
    (10/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 9.045185377 seconds)
    (11/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.651755554 seconds)
    (12/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 2.661106232 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.666486011 seconds)
    (14/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.630368866 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.784681377 seconds)
    (16/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 2.505347196 seconds)
    (17/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 2.58897395 seconds)
    (18/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.524856438 seconds)
    (19/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.53858933 seconds)
    (20/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.641135093 seconds)
    (21/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.500835303 seconds)
    (22/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.454578153 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 9.62322715 seconds)
    (24/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.486076749 seconds)
    (25/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 14.172389735 seconds)
    (26/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.475290484 seconds)
    (27/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.473882703 seconds)
    (28/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.671727628 seconds)
    (29/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.45531594 seconds)
    (30/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.743129173 seconds)
    (31/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.461499085 seconds)
    (32/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 3.116628558 seconds)
    (33/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.759033037 seconds)
    (34/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 3.056078927 seconds)
    (35/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.675521015 seconds)
    (36/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.627691852 seconds)
    (37/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.686894752 seconds)
    (38/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 2.501580458 seconds)
    (39/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.882260204 seconds)
    (40/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.966794578 seconds)
    (41/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.644113983 seconds)
    (42/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.526318252 seconds)
    (43/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.963053468 seconds)
    (44/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.728040718 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.688306854 seconds)
    (46/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.99070947 seconds)
    (47/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.574415506 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 3.343834886 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 2.679597682 seconds)
    (50/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.588344892 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.778733172 seconds)
    (52/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.690670679 seconds)
    (53/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.209147743 seconds)
    (54/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.541726755 seconds)
    (55/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 7.449727206 seconds)
    (56/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 7.525340634 seconds)
    (57/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.998120024 seconds)
    (58/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.686121107 seconds)
    (59/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.526297263 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 2.935249925 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.513287903 seconds)
    (62/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 2.67162615 seconds)
    (63/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.527492519 seconds)
    (64/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.686797497 seconds)
    (65/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.646412701 seconds)
    (66/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.243902459 seconds)
    (67/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.698630884 seconds)
    (68/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.45930724 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 10.728671094 seconds)
    (70/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.557220913 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.664287275 seconds)
    (72/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.638028408 seconds)
    (73/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.883809114 seconds)
    (74/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.704544464 seconds)
    (75/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.635280639 seconds)
    (76/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 2.682336575 seconds)
    (77/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.710332802 seconds)
    (78/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.643191497 seconds)
    (79/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.741699898 seconds)
    (80/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 2.686561375 seconds)
    (81/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.747344674 seconds)
    (82/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.303228757 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.458362526 seconds)
    (84/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.755878145 seconds)
    (85/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.446407316 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 3.188081204 seconds)
    (87/434) benchmarking ("sort", "Bool", 0)...
    done (took 2.495482568 seconds)
    (88/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.477858216 seconds)
    (89/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.588481491 seconds)
    (90/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.643496846 seconds)
    (91/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.475209847 seconds)
    (92/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 2.67191706 seconds)
    (93/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.482052514 seconds)
    (94/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 7.515965377 seconds)
    (95/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 2.613251958 seconds)
    (96/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.663634577 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.846096652 seconds)
    (98/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.549996627 seconds)
    (99/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.520594288 seconds)
    (100/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 2.458545383 seconds)
    (101/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.851808447 seconds)
    (102/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.555884107 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.643402205 seconds)
    (104/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.462726537 seconds)
    (105/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.538910453 seconds)
    (106/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.656188962 seconds)
    (107/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.537702124 seconds)
    (108/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.64166531 seconds)
    (109/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.491149643 seconds)
    (110/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.454244755 seconds)
    (111/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 7.651954214 seconds)
    (112/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 3.348765325 seconds)
    (113/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.536831176 seconds)
    (114/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 2.535218525 seconds)
    (115/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.460158388 seconds)
    (116/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 7.556067036 seconds)
    (117/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 2.540356704 seconds)
    (118/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.475395968 seconds)
    (119/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.477095224 seconds)
    (120/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.453525643 seconds)
    (121/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.721399285 seconds)
    (122/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.882093149 seconds)
    (123/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.675541202 seconds)
    (124/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.840828476 seconds)
    (125/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.477585761 seconds)
    (126/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.687889782 seconds)
    (127/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.446871341 seconds)
    (128/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.228059817 seconds)
    (129/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.79881472 seconds)
    (130/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.713380478 seconds)
    (131/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.928192365 seconds)
    (132/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.5526776 seconds)
    (133/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.92561882 seconds)
    (134/434) benchmarking ("perf_countequals", "Float64")...
    done (took 2.551519073 seconds)
    (135/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 3.149799246 seconds)
    (136/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.534644766 seconds)
    (137/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.455787131 seconds)
    (138/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.515644632 seconds)
    (139/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.52883451 seconds)
    (140/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.529988054 seconds)
    (141/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.841427112 seconds)
    (142/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.553632623 seconds)
    (143/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 2.752206357 seconds)
    (144/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.533187409 seconds)
    (145/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 2.662000312 seconds)
    (146/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.571021981 seconds)
    (147/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.454046268 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 7.350670686 seconds)
    (149/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.525626233 seconds)
    (150/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.538137413 seconds)
    (151/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.447382501 seconds)
    (152/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 9.741323224 seconds)
    (153/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.525027737 seconds)
    (154/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 2.658875889 seconds)
    (155/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.62954872 seconds)
    (156/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 2.66777811 seconds)
    (157/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.694891083 seconds)
    (158/434) benchmarking ("sort", "Int8", 0)...
    done (took 2.522345762 seconds)
    (159/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 5.061042773 seconds)
    (160/434) benchmarking ("perf_countequals", "Float32")...
    done (took 2.514904001 seconds)
    (161/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 7.445683488 seconds)
    (162/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 9.825576453 seconds)
    (163/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.676138721 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.715584016 seconds)
    (165/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.451105111 seconds)
    (166/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 6.407268312 seconds)
    (167/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.619489794 seconds)
    (168/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 2.591463878 seconds)
    (169/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.532066881 seconds)
    (170/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.444284563 seconds)
    (171/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 9.816283658 seconds)
    (172/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 2.66438958 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 5.921088825 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.460726153 seconds)
    (175/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.45852973 seconds)
    (176/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.748152933 seconds)
    (177/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 2.538590508 seconds)
    (178/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.568554395 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.522481166 seconds)
    (180/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 6.383425854 seconds)
    (181/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.455830148 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.753635027 seconds)
    (183/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.199291014 seconds)
    (184/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 3.104240646 seconds)
    (185/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.717806705 seconds)
    (186/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.828673827 seconds)
    (187/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 2.66783412 seconds)
    (188/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 3.34660104 seconds)
    (189/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.704121138 seconds)
    (190/434) benchmarking ("sort", "Int64", 0)...
    done (took 5.017625063 seconds)
    (191/434) benchmarking ("sort", "Float64", 0)...
    done (took 4.606966535 seconds)
    (192/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.446886619 seconds)
    (193/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.669163919 seconds)
    (194/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.678738028 seconds)
    (195/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 2.649303162 seconds)
    (196/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.479571987 seconds)
    (197/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.525780318 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 2.54142422 seconds)
    (199/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.81526697 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.664299606 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 3.084401148 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.462606848 seconds)
    (203/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.771109563 seconds)
    (204/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.79041803 seconds)
    (205/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.850209952 seconds)
    (206/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.480319439 seconds)
    (207/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.576614568 seconds)
    (208/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 2.675026591 seconds)
    (209/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.550492524 seconds)
    (210/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.44562208 seconds)
    (211/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.721396761 seconds)
    (212/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.529880502 seconds)
    (213/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.637756974 seconds)
    (214/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.547022958 seconds)
    (215/434) benchmarking ("perf_countequals", "Int8")...
    done (took 2.491242653 seconds)
    (216/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.462703001 seconds)
    (217/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.483613389 seconds)
    (218/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.651814899 seconds)
    (219/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 7.45248031 seconds)
    (220/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.456604188 seconds)
    (221/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 9.919919424 seconds)
    (222/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.44178078 seconds)
    (223/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 14.176833106 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.808329045 seconds)
    (225/434) benchmarking ("sort", "BigInt", 0)...
    done (took 11.764410237 seconds)
    (226/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 2.665888359 seconds)
    (227/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.745713924 seconds)
    (228/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.452673579 seconds)
    (229/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.51246385 seconds)
    (230/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.594659146 seconds)
    (231/434) benchmarking ("perf_countequals", "Int64")...
    done (took 2.513957974 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.762396131 seconds)
    (233/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.466045218 seconds)
    (234/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.170615864 seconds)
    (235/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.657874508 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.773793508 seconds)
    (237/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 2.662385394 seconds)
    (238/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.595636442 seconds)
    (239/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.523918785 seconds)
    (240/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.444551348 seconds)
    (241/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 3.145133475 seconds)
    (242/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.505322388 seconds)
    (243/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 2.663954565 seconds)
    (244/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.532540808 seconds)
    (245/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.907412313 seconds)
    (246/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 7.076349877 seconds)
    (247/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.448088166 seconds)
    (248/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 7.433665283 seconds)
    (249/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.403004916 seconds)
    (250/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 6.44395914 seconds)
    (251/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.458220247 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.750564747 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.627326258 seconds)
    (254/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.862888407 seconds)
    (255/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.531907291 seconds)
    (256/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.455668247 seconds)
    (257/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.098956291 seconds)
    (258/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 3.331658427 seconds)
    (259/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.748824484 seconds)
    (260/434) benchmarking ("sort", "Float32", 0)...
    done (took 3.168818253 seconds)
    (261/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.797202033 seconds)
    (262/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.453069434 seconds)
    (263/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 3.01477479 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.633671512 seconds)
    (265/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.91523166 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 2.66644569 seconds)
    (267/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.460260763 seconds)
    (268/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 10.934050108 seconds)
    (269/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.448981372 seconds)
    (270/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 10.118847196 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 3.13111245 seconds)
    (272/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.511260144 seconds)
    (273/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.51682064 seconds)
    (274/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.930120911 seconds)
    (275/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.824048136 seconds)
    (276/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.903089549 seconds)
    (277/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.974581966 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.769516214 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.757753273 seconds)
    (280/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.58827985 seconds)
    (281/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.597487175 seconds)
    (282/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.821316122 seconds)
    (283/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.760652316 seconds)
    (284/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.591503001 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 2.528036902 seconds)
    (286/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.474303797 seconds)
    (287/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 3.080320262 seconds)
    (288/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.686855372 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.444636827 seconds)
    (290/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 3.266142 seconds)
    (291/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 2.696112874 seconds)
    (292/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.626834948 seconds)
    (293/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.72219097 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.856694145 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.469788721 seconds)
    (296/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.452741097 seconds)
    (297/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 6.763875224 seconds)
    (298/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.84297001 seconds)
    (299/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.469237308 seconds)
    (300/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.444130206 seconds)
    (301/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 3.066451868 seconds)
    (302/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.472459519 seconds)
    (303/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.681774532 seconds)
    (304/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.549869106 seconds)
    (305/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.615857992 seconds)
    (306/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.837944474 seconds)
    (307/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.761025498 seconds)
    (308/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 2.466364029 seconds)
    (309/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.638646472 seconds)
    (310/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.46165883 seconds)
    (311/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.532168912 seconds)
    (312/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.469181836 seconds)
    (313/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.631119477 seconds)
    (314/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.448652423 seconds)
    (315/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 7.438117461 seconds)
    (316/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.811613696 seconds)
    (317/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.503420106 seconds)
    (318/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 2.591294594 seconds)
    (319/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.440479206 seconds)
    (320/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.947305872 seconds)
    (321/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.025899523 seconds)
    (322/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.520924178 seconds)
    (323/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.694142872 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.528785866 seconds)
    (325/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.445162375 seconds)
    (326/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 7.639915164 seconds)
    (327/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 3.137851468 seconds)
    (328/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 3.080989782 seconds)
    (329/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.560455129 seconds)
    (330/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.146254303 seconds)
    (331/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 2.754352265 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.686827004 seconds)
    (333/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.476356533 seconds)
    (334/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.50156529 seconds)
    (335/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.819988021 seconds)
    (336/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 7.358385372 seconds)
    (337/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.520373427 seconds)
    (338/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.544373753 seconds)
    (339/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.457791758 seconds)
    (340/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.939263274 seconds)
    (341/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.470889242 seconds)
    (342/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.457318315 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 2.646227582 seconds)
    (344/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.71784522 seconds)
    (345/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.685632359 seconds)
    (346/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.641846766 seconds)
    (347/434) benchmarking ("perf_countequals", "Bool")...
    done (took 2.500013586 seconds)
    (348/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 3.633733879 seconds)
    (349/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.466907127 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 3.105737745 seconds)
    (351/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 7.457639556 seconds)
    (352/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.550533366 seconds)
    (353/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.467661363 seconds)
    (354/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.464149489 seconds)
    (355/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.465956222 seconds)
    (356/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.65653903 seconds)
    (357/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.862620179 seconds)
    (358/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.638503356 seconds)
    (359/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.75669996 seconds)
    (360/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.681179564 seconds)
    (361/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.767369533 seconds)
    (362/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.460468026 seconds)
    (363/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.745361077 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.818933583 seconds)
    (365/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 2.535684072 seconds)
    (366/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.520037676 seconds)
    (367/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.716940222 seconds)
    (368/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 2.768599032 seconds)
    (369/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.528845838 seconds)
    (370/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.446396886 seconds)
    (371/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 9.824394589 seconds)
    (372/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.631869895 seconds)
    (373/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.516519822 seconds)
    (374/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.619266574 seconds)
    (375/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.490325141 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.646512248 seconds)
    (377/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.508675596 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.542772074 seconds)
    (379/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.466369117 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.554232369 seconds)
    (381/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.784168428 seconds)
    (382/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.529644155 seconds)
    (383/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.824303401 seconds)
    (384/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.465776354 seconds)
    (385/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.880661895 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 7.451321786 seconds)
    (387/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.707766712 seconds)
    (388/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.378181146 seconds)
    (389/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 3.677778437 seconds)
    (390/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.469016189 seconds)
    (391/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.464325216 seconds)
    (392/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 2.665531685 seconds)
    (393/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.540160111 seconds)
    (394/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 2.666738588 seconds)
    (395/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 2.666901236 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 2.673331772 seconds)
    (397/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.467911724 seconds)
    (398/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 2.806364328 seconds)
    (399/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.465455701 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 7.448744145 seconds)
    (401/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 14.100839203 seconds)
    (402/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 6.599137056 seconds)
    (403/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 2.675805316 seconds)
    (404/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.63449092 seconds)
    (405/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.713628669 seconds)
    (406/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.72281741 seconds)
    (407/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.804794373 seconds)
    (408/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.647604213 seconds)
    (409/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.75649856 seconds)
    (410/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.543977901 seconds)
    (411/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 7.446118937 seconds)
    (412/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 9.48695966 seconds)
    (413/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.727579972 seconds)
    (414/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.736893214 seconds)
    (415/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 2.669924539 seconds)
    (416/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.585464323 seconds)
    (417/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.672027219 seconds)
    (418/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.709431606 seconds)
    (419/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.461018067 seconds)
    (420/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.676523216 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 2.468516925 seconds)
    (422/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.694254039 seconds)
    (423/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.528627528 seconds)
    (424/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 2.580895583 seconds)
    (425/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.464646337 seconds)
    (426/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.584546793 seconds)
    (427/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.85167717 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.777708654 seconds)
    (429/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.957584761 seconds)
    (430/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.576317823 seconds)
    (431/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.627646788 seconds)
    (432/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 2.764007724 seconds)
    (433/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.564941618 seconds)
    (434/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 2.711303831 seconds)
  done (took 1648.473550837 seconds)
done (took 1650.919318325 seconds)
(12/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 7.469341388 seconds)
  (2/4) benchmarking "grow_array"...
  done (took 7.765649818 seconds)
  (3/4) benchmarking "arrays"...
  done (took 7.449663187 seconds)
  (4/4) benchmarking "structs"...
  done (took 7.652696363 seconds)
done (took 32.78358026 seconds)
(13/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.443389987 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.82806815 seconds)
    (3/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.446291142 seconds)
    (4/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.798653645 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.684772491 seconds)
    (6/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.452119768 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.447408139 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.637862514 seconds)
    (9/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.643269249 seconds)
    (10/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.613167242 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.493218576 seconds)
    (12/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.648786501 seconds)
    (13/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.602218118 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.622724125 seconds)
    (15/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.447350617 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.516114076 seconds)
    (17/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.654369101 seconds)
    (18/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.546870742 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.452201742 seconds)
    (20/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.758203222 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.455193412 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.679314235 seconds)
    (23/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.768973547 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.446038481 seconds)
    (25/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.676632802 seconds)
    (26/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.727693518 seconds)
    (27/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.451207581 seconds)
    (28/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.45219199 seconds)
    (29/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.448175055 seconds)
    (30/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.676601713 seconds)
    (31/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.765145476 seconds)
    (32/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.536871416 seconds)
    (33/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.640924521 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.448522304 seconds)
    (35/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.765547738 seconds)
    (36/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.449367906 seconds)
    (37/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.447513705 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.630701874 seconds)
    (39/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.779455794 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.669419639 seconds)
    (41/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.457061581 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.45228846 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.458925069 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.447367084 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.653454443 seconds)
    (46/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.4547729 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.611770088 seconds)
    (48/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.730936576 seconds)
    (49/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.658817782 seconds)
    (50/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.709461776 seconds)
    (51/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.50105787 seconds)
    (52/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.679091994 seconds)
    (53/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.675139817 seconds)
    (54/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.673082909 seconds)
    (55/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.640761829 seconds)
    (56/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.607090148 seconds)
    (57/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.698341161 seconds)
    (58/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.824767699 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.726021413 seconds)
    (60/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.447852096 seconds)
    (61/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.784257572 seconds)
    (62/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.452812583 seconds)
    (63/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.517459269 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.451794944 seconds)
    (65/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.685319254 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.822657672 seconds)
  done (took 283.921731855 seconds)
  (2/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.564032832 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.484800191 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.568967393 seconds)
    (4/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.726394139 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.546136453 seconds)
    (6/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.503666654 seconds)
    (7/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.503064778 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.525659334 seconds)
    (9/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.506307094 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.517965185 seconds)
    (11/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.489878029 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.518696906 seconds)
    (13/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.447780449 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.497812222 seconds)
    (15/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.551783205 seconds)
    (16/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.491571713 seconds)
    (17/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.691659936 seconds)
    (18/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.162760011 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.512544113 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.577579506 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.769358364 seconds)
    (22/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 3.199917772 seconds)
    (23/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.503934969 seconds)
    (24/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.50349133 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.483017772 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.516233514 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.487491455 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.509170345 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.514951998 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.514523448 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.493566117 seconds)
    (32/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.590477498 seconds)
    (33/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.480715511 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.546805924 seconds)
    (35/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.95489732 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.603131079 seconds)
    (37/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 3.060902142 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.475861529 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.428536894 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 4.00153591 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.755235334 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 3.229410308 seconds)
    (43/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.982927255 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 3.261308089 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.612128137 seconds)
    (46/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.475941247 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.479838973 seconds)
    (48/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.479591775 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.754217467 seconds)
    (50/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 3.671441104 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 4.677277123 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 3.197701881 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.490912598 seconds)
    (54/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.509128723 seconds)
    (55/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.48809887 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.547872356 seconds)
    (57/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.983297039 seconds)
    (58/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 3.392496876 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.482223333 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.477296122 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.546048626 seconds)
    (62/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.564281325 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.565404303 seconds)
    (64/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.483521161 seconds)
    (65/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.684757826 seconds)
    (66/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 3.678787795 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.756506337 seconds)
    (68/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 3.261732816 seconds)
    (69/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.498372163 seconds)
    (70/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.506292657 seconds)
    (71/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.499039016 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.495358893 seconds)
  done (took 210.96265446 seconds)
  (3/5) benchmarking "sequences"...
    (1/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.78658423 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.60374572 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.784290293 seconds)
    (4/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.707930017 seconds)
    (5/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.088163008 seconds)
    (6/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.796245662 seconds)
    (7/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.027763343 seconds)
  done (took 22.235120606 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.101396809 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.550074657 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.102420488 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.60005426 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.908150736 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.84909499 seconds)
  done (took 20.586891206 seconds)
  (5/5) benchmarking "types"...
    (1/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.503471685 seconds)
    (2/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.443665998 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.346882299 seconds)
    (4/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.553060738 seconds)
    (5/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.506271381 seconds)
    (6/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.397276144 seconds)
    (7/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.556244815 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.53746707 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.486640463 seconds)
    (10/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.555504697 seconds)
    (11/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.66674615 seconds)
    (12/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.441700385 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.518006436 seconds)
    (14/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.770892783 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.740704055 seconds)
    (16/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.493715325 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.320287322 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.356237263 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.628331908 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.782840688 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.501785762 seconds)
    (22/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.446584253 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.805711878 seconds)
    (24/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.501689642 seconds)
    (25/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.541460558 seconds)
    (26/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.640841132 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.491408586 seconds)
    (28/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.503603758 seconds)
    (29/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.669219269 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.775216658 seconds)
    (31/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.487214274 seconds)
    (32/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.44035026 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.499565775 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.49169836 seconds)
    (35/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.678515016 seconds)
    (36/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.496528098 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.702444222 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.494588463 seconds)
    (39/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.507629847 seconds)
    (40/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.736232202 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.507631893 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.894058713 seconds)
    (43/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.441796332 seconds)
    (44/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.443282263 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.504899121 seconds)
    (46/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.648414236 seconds)
    (47/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.572697169 seconds)
    (48/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.500638473 seconds)
    (49/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.329191332 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.490284697 seconds)
    (51/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.779647427 seconds)
    (52/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.515129715 seconds)
    (53/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.736195623 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.445921661 seconds)
    (55/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.797660236 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.622360777 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.490492182 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.497012718 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.484082074 seconds)
    (60/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.526574592 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.492700518 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.497424452 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.739277888 seconds)
    (64/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.63655634 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.537726122 seconds)
    (66/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.441690793 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.486555398 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.502510148 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.501883447 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.57240806 seconds)
    (71/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.48373413 seconds)
    (72/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.504402263 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.62850748 seconds)
    (74/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.515278322 seconds)
    (75/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.440685631 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.175251629 seconds)
    (77/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.634412138 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.789768507 seconds)
    (79/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.507549894 seconds)
    (80/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.509160082 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.50084177 seconds)
    (82/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.445343432 seconds)
    (83/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.501682236 seconds)
    (84/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.612348274 seconds)
    (85/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.494814948 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.502062136 seconds)
    (87/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.790983884 seconds)
    (88/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.758496704 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.741110611 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.502920691 seconds)
    (91/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.207454895 seconds)
    (92/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.488382073 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.520057449 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.669706736 seconds)
    (95/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.520278774 seconds)
    (96/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.446493706 seconds)
    (97/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.486235461 seconds)
  done (took 314.479486722 seconds)
done (took 854.629974291 seconds)
(14/23) benchmarking "shootout"...
  (1/12) benchmarking "fasta"...
  done (took 2.563419443 seconds)
  (2/12) benchmarking "k_nucleotide"...
  done (took 7.476900595 seconds)
  (3/12) benchmarking "revcomp"...
  done (took 3.573915174 seconds)
  (4/12) benchmarking "spectralnorm"...
  done (took 7.49125926 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.44645178 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.483618002 seconds)
  (7/12) benchmarking "meteor_contest"...
  done (took 8.995502917 seconds)
  (8/12) benchmarking "pidigits"...
  done (took 8.483539509 seconds)
  (9/12) benchmarking "nbody_vec"...
  done (took 6.745034968 seconds)
  (10/12) benchmarking "nbody"...
  done (took 3.504545468 seconds)
  (11/12) benchmarking "regex_dna"...
  done (took 7.462898689 seconds)
  (12/12) benchmarking "fannkuch"...
  done (took 3.815333267 seconds)
done (took 77.487700054 seconds)
(15/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.456197895 seconds)
    (2/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.465975472 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.458463365 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.456389903 seconds)
  done (took 32.286461553 seconds)
  (2/6) benchmarking "26942"...
  done (took 3.63074902 seconds)
  (3/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.605272676 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 2.897664281 seconds)
    (3/4) benchmarking ("(10000000,)", 2)...
    done (took 3.070949316 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.533272016 seconds)
  done (took 13.93714223 seconds)
  (4/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.500231446 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.503400282 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.498270874 seconds)
    (4/9) benchmarking (5, "scal_tup")...
    done (took 2.498951324 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.501793797 seconds)
    (6/9) benchmarking (3, "scal_tup")...
    done (took 2.493786316 seconds)
    (7/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.502557406 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.494488628 seconds)
    (9/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.456349579 seconds)
  done (took 29.915125135 seconds)
  (5/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 2.711711602 seconds)
    (2/6) benchmarking ("tuple", 10)...
    done (took 2.656743931 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.598276378 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 2.756298008 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.924776922 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.644275921 seconds)
  done (took 19.130146334 seconds)
  (6/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.458473222 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.455545116 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.448504169 seconds)
  done (took 23.826416924 seconds)
done (took 125.185787958 seconds)
(16/23) benchmarking "sort"...
  (1/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.460404905 seconds)
    (2/13) benchmarking "small Float64 view"...
    done (took 2.472942593 seconds)
    (3/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.952191708 seconds)
    (4/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.469436565 seconds)
    (5/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.990551912 seconds)
    (6/13) benchmarking "small Int view"...
    done (took 2.468692997 seconds)
    (7/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.872983905 seconds)
    (8/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.871316207 seconds)
    (9/13) benchmarking "Float16"...
    done (took 7.469309701 seconds)
    (10/13) benchmarking "sort(rand(10^8))"...
    done (took 13.09828844 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.621659256 seconds)
    (12/13) benchmarking "inplace sorting of a view"...
    done (took 2.62980424 seconds)
    (13/13) benchmarking "sortslices sorting very short slices"...
    done (took 7.694045708 seconds)
  done (took 82.530913012 seconds)
  (2/11) benchmarking "length = 10"...
    (1/17) benchmarking "all same"...
    done (took 2.462865012 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.465715723 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.472509502 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.472467184 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.463596523 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.475896152 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.468547063 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.471563983 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.467760482 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.467603843 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.466481192 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.473928057 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.507743695 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.474695955 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.481836928 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.485278428 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.516417089 seconds)
  done (took 44.682564632 seconds)
  (3/11) benchmarking "issorted"...
    (1/8) benchmarking ("reverse", "ascending")...
    done (took 3.10496754 seconds)
    (2/8) benchmarking ("forwards", "ascending")...
    done (took 3.073363749 seconds)
    (3/8) benchmarking ("forwards", "descending")...
    done (took 2.910390784 seconds)
    (4/8) benchmarking ("reverse", "random")...
    done (took 3.287046658 seconds)
    (5/8) benchmarking ("reverse", "ones")...
    done (took 3.511701761 seconds)
    (6/8) benchmarking ("forwards", "random")...
    done (took 3.091366434 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.558784846 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 3.310150091 seconds)
  done (took 28.31750241 seconds)
  (4/11) benchmarking "length = 30"...
    (1/17) benchmarking "all same"...
    done (took 2.515297566 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.468326204 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.475334191 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.475865321 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.474316567 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.47569041 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.481379604 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.467982055 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.480223319 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.546691037 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.543221511 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.479753603 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.486097125 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.478061633 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.485007135 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.466798134 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.622811604 seconds)
  done (took 45.141448869 seconds)
  (5/11) benchmarking "quicksort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 7.465306944 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 7.466000224 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 7.473666724 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 7.470147042 seconds)
  done (took 32.334082177 seconds)
  (6/11) benchmarking "length = 100"...
    (1/17) benchmarking "all same"...
    done (took 2.478077733 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.492999944 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.494134565 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.486287657 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.474647297 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.49302693 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.516223311 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.500670332 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.506065082 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.504145866 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.509545416 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.487402396 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.501533114 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.464216171 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.52770743 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.484356883 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 3.15082614 seconds)
  done (took 45.531064863 seconds)
  (7/11) benchmarking "length = 10000"...
    (1/17) benchmarking "all same"...
    done (took 2.673082927 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 5.021207376 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.203975194 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.174500893 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.500563176 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.133622695 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 6.703731382 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.156435366 seconds)
    (9/17) benchmarking "descending"...
    done (took 5.246028401 seconds)
    (10/17) benchmarking "ascending"...
    done (took 5.201151636 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 7.496379237 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.080239961 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.259324535 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.505771188 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 6.787821978 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.037495445 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 7.491483056 seconds)
  done (took 84.136942172 seconds)
  (8/11) benchmarking "mergesort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 7.47276702 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 7.468333173 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 7.497504609 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 7.477022307 seconds)
  done (took 32.379361748 seconds)
  (9/11) benchmarking "length = 1000"...
    (1/17) benchmarking "all same"...
    done (took 2.510249716 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.732214004 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.689612372 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.681872621 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.482790579 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.702571782 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.82712307 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.637499866 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.683824682 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.666149678 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.881004235 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.662231309 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.692648079 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.493021051 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.819674936 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.671549597 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 7.47707883 seconds)
  done (took 52.783499677 seconds)
  (10/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 2.498939928 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 2.502403196 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 2.496703624 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 2.509900043 seconds)
  done (took 12.602555725 seconds)
  (11/11) benchmarking "length = 3"...
    (1/17) benchmarking "all same"...
    done (took 2.471945246 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.47707231 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.470335578 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.47897836 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.475491512 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.525851381 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.472549251 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.474526074 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.476247785 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.472734679 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.471930692 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.478617854 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.475069461 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.46931475 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.477364707 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.466923928 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.501725141 seconds)
  done (took 44.606896788 seconds)
done (took 507.498329935 seconds)
(17/23) benchmarking "array"...
  (1/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 2.673500755 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.711667412 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 2.74968929 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 2.721911926 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.666146527 seconds)
  done (took 15.986481413 seconds)
  (2/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.458783254 seconds)
    (2/12) benchmarking ("gramschmidt!", 1000)...
    done (took 13.23978226 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.502250694 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.833535023 seconds)
    (5/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.578087201 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.843463427 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.474681336 seconds)
    (8/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.656378376 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.077520354 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 12.277610606 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.46622543 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.511731933 seconds)
  done (took 107.383580044 seconds)
  (3/13) benchmarking "index"...
    (1/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.931328045 seconds)
    (2/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.818270334 seconds)
    (3/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.462709415 seconds)
    (4/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.494181199 seconds)
    (5/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.470234181 seconds)
    (6/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.213191486 seconds)
    (7/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.645808207 seconds)
    (8/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.461060339 seconds)
    (9/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.463702699 seconds)
    (10/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.458331131 seconds)
    (11/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 4.597962214 seconds)
    (12/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.469197513 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.467057715 seconds)
    (14/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.464423458 seconds)
    (15/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.483581011 seconds)
    (16/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.463686868 seconds)
    (17/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.959154598 seconds)
    (18/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.471229782 seconds)
    (19/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.458149334 seconds)
    (20/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.492990465 seconds)
    (21/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 4.208081013 seconds)
    (22/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.469580987 seconds)
    (23/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.477967681 seconds)
    (24/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.470352056 seconds)
    (25/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.689738294 seconds)
    (26/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.466111545 seconds)
    (27/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.45553659 seconds)
    (28/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.62507986 seconds)
    (29/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 3.003384429 seconds)
    (30/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.465180401 seconds)
    (31/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.463944799 seconds)
    (32/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.46799245 seconds)
    (33/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.467204194 seconds)
    (34/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.377779812 seconds)
    (35/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.468566476 seconds)
    (36/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.468304003 seconds)
    (37/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.463682583 seconds)
    (38/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.967177071 seconds)
    (39/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.467057186 seconds)
    (40/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.456903148 seconds)
    (41/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.965752453 seconds)
    (42/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.45909287 seconds)
    (43/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.506604163 seconds)
    (44/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.4719352 seconds)
    (45/608) benchmarking ("sum", "3darray")...
    done (took 3.585053333 seconds)
    (46/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.011227528 seconds)
    (47/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.469278322 seconds)
    (48/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 4.71871296 seconds)
    (49/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.456035012 seconds)
    (50/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.584082415 seconds)
    (51/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.465143213 seconds)
    (52/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.643950002 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.459405223 seconds)
    (54/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.579135843 seconds)
    (55/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.459895851 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.477918145 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.459474987 seconds)
    (58/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.507590265 seconds)
    (59/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.457083493 seconds)
    (60/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.569860677 seconds)
    (61/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.466581233 seconds)
    (62/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.881774795 seconds)
    (63/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.851729094 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.466243307 seconds)
    (65/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.466303411 seconds)
    (66/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.100992205 seconds)
    (67/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.628109823 seconds)
    (68/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.456046478 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.570764242 seconds)
    (70/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.474087283 seconds)
    (71/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.468565087 seconds)
    (72/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.45461318 seconds)
    (73/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.473962138 seconds)
    (74/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.466491967 seconds)
    (75/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.491797333 seconds)
    (76/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.458864182 seconds)
    (77/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.753130052 seconds)
    (78/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.462407795 seconds)
    (79/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.434797864 seconds)
    (80/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.464536128 seconds)
    (81/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.460613638 seconds)
    (82/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.461724914 seconds)
    (83/608) benchmarking "6d"...
    done (took 7.444200547 seconds)
    (84/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.468346878 seconds)
    (85/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.26702946 seconds)
    (86/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.564278439 seconds)
    (87/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.427043668 seconds)
    (88/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.465827664 seconds)
    (89/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.466185983 seconds)
    (90/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.482875382 seconds)
    (91/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.464845973 seconds)
    (92/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.46200543 seconds)
    (93/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.46955548 seconds)
    (94/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 5.263756146 seconds)
    (95/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.470289317 seconds)
    (96/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.468854594 seconds)
    (97/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.463788167 seconds)
    (98/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.910596823 seconds)
    (99/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.76239894 seconds)
    (100/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.459694209 seconds)
    (101/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.453901749 seconds)
    (102/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.458423189 seconds)
    (103/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.45856112 seconds)
    (104/608) benchmarking "ind2sub"...
    done (took 3.205976546 seconds)
    (105/608) benchmarking "5d"...
    done (took 5.577609859 seconds)
    (106/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.602621547 seconds)
    (107/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.470607566 seconds)
    (108/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.498463245 seconds)
    (109/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.47042691 seconds)
    (110/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.458214478 seconds)
    (111/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.463592696 seconds)
    (112/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.46551119 seconds)
    (113/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.466431269 seconds)
    (114/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.452884986 seconds)
    (115/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.465810225 seconds)
    (116/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.457947393 seconds)
    (117/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.878790447 seconds)
    (118/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.465794858 seconds)
    (119/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 5.695965522 seconds)
    (120/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.544812134 seconds)
    (121/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.643443902 seconds)
    (122/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.461598843 seconds)
    (123/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.456037068 seconds)
    (124/608) benchmarking "3d"...
    done (took 4.039910486 seconds)
    (125/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.460317692 seconds)
    (126/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.495393613 seconds)
    (127/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.459632431 seconds)
    (128/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.516785105 seconds)
    (129/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.487187903 seconds)
    (130/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.458698473 seconds)
    (131/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.469676809 seconds)
    (132/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.459822063 seconds)
    (133/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.46306477 seconds)
    (134/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.45979271 seconds)
    (135/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.967095552 seconds)
    (136/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.467216605 seconds)
    (137/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.467233897 seconds)
    (138/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.288402019 seconds)
    (139/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.466414782 seconds)
    (140/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.869857314 seconds)
    (141/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.870680105 seconds)
    (142/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.464186271 seconds)
    (143/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.501794123 seconds)
    (144/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.465719191 seconds)
    (145/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.468202504 seconds)
    (146/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.878644575 seconds)
    (147/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.406148664 seconds)
    (148/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.465464752 seconds)
    (149/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 3.558379336 seconds)
    (150/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.904532254 seconds)
    (151/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.686971401 seconds)
    (152/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.881346796 seconds)
    (153/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.498308608 seconds)
    (154/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.863308006 seconds)
    (155/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.49321582 seconds)
    (156/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.461703807 seconds)
    (157/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.302890271 seconds)
    (158/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.571292278 seconds)
    (159/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.965845588 seconds)
    (160/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.675249878 seconds)
    (161/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.964520767 seconds)
    (162/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.461973231 seconds)
    (163/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.466104254 seconds)
    (164/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.510661086 seconds)
    (165/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 4.701840432 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.469133311 seconds)
    (167/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.460195978 seconds)
    (168/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.455981396 seconds)
    (169/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.478795738 seconds)
    (170/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.462409729 seconds)
    (171/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.065881551 seconds)
    (172/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.984484362 seconds)
    (173/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.461317444 seconds)
    (174/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.465146607 seconds)
    (175/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.465684631 seconds)
    (176/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.470906865 seconds)
    (177/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.484020849 seconds)
    (178/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.614735173 seconds)
    (179/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.496217636 seconds)
    (180/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.00331817 seconds)
    (181/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.462554438 seconds)
    (182/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.49644965 seconds)
    (183/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 6.448176129 seconds)
    (184/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.662344568 seconds)
    (185/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.466860705 seconds)
    (186/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.463727234 seconds)
    (187/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.466423074 seconds)
    (188/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.467951481 seconds)
    (189/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.455934253 seconds)
    (190/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.466887172 seconds)
    (191/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.695264308 seconds)
    (192/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.470359469 seconds)
    (193/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.452623189 seconds)
    (194/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.464206878 seconds)
    (195/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.05554625 seconds)
    (196/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.506870133 seconds)
    (197/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.572096893 seconds)
    (198/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.461486352 seconds)
    (199/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.458161577 seconds)
    (200/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.285520405 seconds)
    (201/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.468596437 seconds)
    (202/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.456052826 seconds)
    (203/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.453945529 seconds)
    (204/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.505320337 seconds)
    (205/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.4685856 seconds)
    (206/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.754079739 seconds)
    (207/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.269411459 seconds)
    (208/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.710299726 seconds)
    (209/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.266366976 seconds)
    (210/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.5625843 seconds)
    (211/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.464571743 seconds)
    (212/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.457686533 seconds)
    (213/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.464837958 seconds)
    (214/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.462157439 seconds)
    (215/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.504769559 seconds)
    (216/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.472455551 seconds)
    (217/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.468731531 seconds)
    (218/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.518241179 seconds)
    (219/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.771912945 seconds)
    (220/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.464378143 seconds)
    (221/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 4.702860786 seconds)
    (222/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.461666785 seconds)
    (223/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.877011056 seconds)
    (224/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.803869515 seconds)
    (225/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.464636429 seconds)
    (226/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.80778035 seconds)
    (227/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.534847997 seconds)
    (228/608) benchmarking "7d"...
    done (took 4.992302719 seconds)
    (229/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.467089579 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.463414393 seconds)
    (231/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 4.701064822 seconds)
    (232/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.461068199 seconds)
    (233/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.47562377 seconds)
    (234/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.495948838 seconds)
    (235/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.46462067 seconds)
    (236/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.468510092 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.072122286 seconds)
    (238/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.466090318 seconds)
    (239/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.506737767 seconds)
    (240/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.47051737 seconds)
    (241/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.924517553 seconds)
    (242/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.976171371 seconds)
    (243/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.592307199 seconds)
    (244/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.463981877 seconds)
    (245/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.929025649 seconds)
    (246/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.493166806 seconds)
    (247/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.538907866 seconds)
    (248/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.461778077 seconds)
    (249/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.936808119 seconds)
    (250/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.458366266 seconds)
    (251/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.145661127 seconds)
    (252/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.801466327 seconds)
    (253/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.637749489 seconds)
    (254/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.565810675 seconds)
    (255/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.461837311 seconds)
    (256/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.46618842 seconds)
    (257/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.458605459 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.867586885 seconds)
    (259/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.457882675 seconds)
    (260/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.459849553 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.472911574 seconds)
    (262/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.491293279 seconds)
    (263/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.062066905 seconds)
    (264/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.460374205 seconds)
    (265/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.471786909 seconds)
    (266/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.463418699 seconds)
    (267/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.481350514 seconds)
    (268/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.46229859 seconds)
    (269/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.455425103 seconds)
    (270/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 4.691795583 seconds)
    (271/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.459524721 seconds)
    (272/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.466709108 seconds)
    (273/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.459125812 seconds)
    (274/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.519762703 seconds)
    (275/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.45950802 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.471564697 seconds)
    (277/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.569806497 seconds)
    (278/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.862159531 seconds)
    (279/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.466301469 seconds)
    (280/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.468030588 seconds)
    (281/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.461197082 seconds)
    (282/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.464922964 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.497670008 seconds)
    (284/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.462521136 seconds)
    (285/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.4668877 seconds)
    (286/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.468118376 seconds)
    (287/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.718858133 seconds)
    (288/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.493352472 seconds)
    (289/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.465929944 seconds)
    (290/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.469168024 seconds)
    (291/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.498393371 seconds)
    (292/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.466730163 seconds)
    (293/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.464646508 seconds)
    (294/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.453906204 seconds)
    (295/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.289676844 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.457488785 seconds)
    (297/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.469743941 seconds)
    (298/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.458252311 seconds)
    (299/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.466140459 seconds)
    (300/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.457649816 seconds)
    (301/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.477957544 seconds)
    (302/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.453996365 seconds)
    (303/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.23458838 seconds)
    (304/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.454572442 seconds)
    (305/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.916694959 seconds)
    (306/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 4.69646115 seconds)
    (307/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.463803799 seconds)
    (308/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.460132209 seconds)
    (309/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.462955478 seconds)
    (310/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.456351023 seconds)
    (311/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.99086188 seconds)
    (312/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.458684779 seconds)
    (313/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.458629205 seconds)
    (314/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.397983826 seconds)
    (315/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.461826605 seconds)
    (316/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.461115681 seconds)
    (317/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.451732297 seconds)
    (318/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.340485536 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.556644311 seconds)
    (320/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.457368381 seconds)
    (321/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.460498128 seconds)
    (322/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.457371791 seconds)
    (323/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 6.029925268 seconds)
    (324/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.482810237 seconds)
    (325/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.454563331 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.458372721 seconds)
    (327/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.468109571 seconds)
    (328/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.725783535 seconds)
    (329/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.46733303 seconds)
    (330/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.461259881 seconds)
    (331/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.477371553 seconds)
    (332/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.720520796 seconds)
    (333/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.459607321 seconds)
    (334/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.461574089 seconds)
    (335/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.463383969 seconds)
    (336/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.461138365 seconds)
    (337/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.815317655 seconds)
    (338/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.869430061 seconds)
    (339/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.144411337 seconds)
    (340/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.288233361 seconds)
    (341/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.640906982 seconds)
    (342/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.45617968 seconds)
    (343/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.471673099 seconds)
    (344/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.489061474 seconds)
    (345/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.639665212 seconds)
    (346/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.471922023 seconds)
    (347/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.462768533 seconds)
    (348/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.461066668 seconds)
    (349/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.47752954 seconds)
    (350/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.462871138 seconds)
    (351/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.469191154 seconds)
    (352/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.458298379 seconds)
    (353/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.457547551 seconds)
    (354/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.950901609 seconds)
    (355/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.643392755 seconds)
    (356/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.463888777 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.460535696 seconds)
    (358/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.465654528 seconds)
    (359/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.460774306 seconds)
    (360/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.488966747 seconds)
    (361/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.970763394 seconds)
    (362/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.465049457 seconds)
    (363/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.9736387 seconds)
    (364/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.458193265 seconds)
    (365/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.459510093 seconds)
    (366/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.283179544 seconds)
    (367/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.466037168 seconds)
    (368/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.466023683 seconds)
    (369/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.459742596 seconds)
    (370/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.938376972 seconds)
    (371/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.94170502 seconds)
    (372/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.462103959 seconds)
    (373/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.566066733 seconds)
    (374/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.562974169 seconds)
    (375/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.45909208 seconds)
    (376/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 4.713939149 seconds)
    (377/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 6.710215347 seconds)
    (378/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.469471503 seconds)
    (379/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.492800512 seconds)
    (380/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.12050407 seconds)
    (381/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 4.70521871 seconds)
    (382/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.462556688 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.465738277 seconds)
    (384/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.451881958 seconds)
    (385/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.455708029 seconds)
    (386/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 2.487894939 seconds)
    (387/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.462583537 seconds)
    (388/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.465372413 seconds)
    (389/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.464225723 seconds)
    (390/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.813589249 seconds)
    (391/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.465557562 seconds)
    (392/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.269641739 seconds)
    (393/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 5.458578815 seconds)
    (394/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.624629118 seconds)
    (395/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.592931091 seconds)
    (396/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.461961915 seconds)
    (397/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.600996759 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.466689661 seconds)
    (399/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.461903954 seconds)
    (400/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.458933379 seconds)
    (401/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.471184196 seconds)
    (402/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.343436008 seconds)
    (403/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.985729303 seconds)
    (404/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.50295095 seconds)
    (405/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.771068011 seconds)
    (406/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.464317996 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.73082895 seconds)
    (408/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.471156463 seconds)
    (409/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.983970778 seconds)
    (410/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.465089688 seconds)
    (411/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.460858053 seconds)
    (412/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.92817833 seconds)
    (413/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.865749449 seconds)
    (414/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.462166149 seconds)
    (415/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.462021107 seconds)
    (416/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.462270052 seconds)
    (417/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.458434653 seconds)
    (418/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.482415557 seconds)
    (419/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.471858876 seconds)
    (420/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.603167773 seconds)
    (421/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.708504038 seconds)
    (422/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.630006184 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.600835113 seconds)
    (424/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.459785117 seconds)
    (425/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.454402304 seconds)
    (426/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.468252179 seconds)
    (427/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.450613387 seconds)
    (428/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.494531206 seconds)
    (429/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.480280982 seconds)
    (430/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.645434675 seconds)
    (431/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.477929633 seconds)
    (432/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.466339883 seconds)
    (433/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.464363555 seconds)
    (434/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 5.683210865 seconds)
    (435/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.469104246 seconds)
    (436/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.475632881 seconds)
    (437/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.459090622 seconds)
    (438/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.618862211 seconds)
    (439/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.566039587 seconds)
    (440/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.472163621 seconds)
    (441/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.467281523 seconds)
    (442/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.466887893 seconds)
    (443/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.463409637 seconds)
    (444/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.505694129 seconds)
    (445/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.297770619 seconds)
    (446/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.47566148 seconds)
    (447/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.895441217 seconds)
    (448/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.460141886 seconds)
    (449/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.523675218 seconds)
    (450/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.460323714 seconds)
    (451/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.455918653 seconds)
    (452/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.469800926 seconds)
    (453/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.467692357 seconds)
    (454/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.457889507 seconds)
    (455/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.455845991 seconds)
    (456/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.854621004 seconds)
    (457/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.451924539 seconds)
    (458/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.674749532 seconds)
    (459/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.164535703 seconds)
    (460/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.557010805 seconds)
    (461/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.919995104 seconds)
    (462/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.460192602 seconds)
    (463/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.457659943 seconds)
    (464/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.46188637 seconds)
    (465/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.08239716 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.455073108 seconds)
    (467/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.471985371 seconds)
    (468/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.461018922 seconds)
    (469/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.064795637 seconds)
    (470/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.565501157 seconds)
    (471/608) benchmarking "sub2ind"...
    done (took 7.631391111 seconds)
    (472/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.453858155 seconds)
    (473/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.455354764 seconds)
    (474/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.456735535 seconds)
    (475/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.455768597 seconds)
    (476/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.585593407 seconds)
    (477/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.457951613 seconds)
    (478/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.963360309 seconds)
    (479/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.861303911 seconds)
    (480/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.464694071 seconds)
    (481/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.528860878 seconds)
    (482/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.018612593 seconds)
    (483/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.459470437 seconds)
    (484/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.457726655 seconds)
    (485/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.463542686 seconds)
    (486/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.704307087 seconds)
    (487/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.762297644 seconds)
    (488/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.471898852 seconds)
    (489/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.455667714 seconds)
    (490/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.464836788 seconds)
    (491/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.463004532 seconds)
    (492/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.601356323 seconds)
    (493/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.053338858 seconds)
    (494/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.458115964 seconds)
    (495/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.461352164 seconds)
    (496/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.725486852 seconds)
    (497/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.463160309 seconds)
    (498/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 4.225331325 seconds)
    (499/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.464069548 seconds)
    (500/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.458970842 seconds)
    (501/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.461200354 seconds)
    (502/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.461400407 seconds)
    (503/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 5.675626751 seconds)
    (504/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.462896576 seconds)
    (505/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.461940676 seconds)
    (506/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.336563138 seconds)
    (507/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.454131281 seconds)
    (508/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.466656021 seconds)
    (509/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.145756612 seconds)
    (510/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.484392247 seconds)
    (511/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.451559018 seconds)
    (512/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.464661656 seconds)
    (513/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.458708529 seconds)
    (514/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.473003923 seconds)
    (515/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.476133227 seconds)
    (516/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.878153328 seconds)
    (517/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.50918924 seconds)
    (518/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.45343137 seconds)
    (519/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.472279712 seconds)
    (520/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.47034177 seconds)
    (521/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.465712327 seconds)
    (522/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.30226285 seconds)
    (523/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.464687821 seconds)
    (524/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.460251968 seconds)
    (525/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.460623978 seconds)
    (526/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.464065554 seconds)
    (527/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.831425076 seconds)
    (528/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.474548457 seconds)
    (529/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.464747607 seconds)
    (530/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.465471697 seconds)
    (531/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.462102396 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 4.908623764 seconds)
    (533/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.467067947 seconds)
    (534/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 5.234807941 seconds)
    (535/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.46535263 seconds)
    (536/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.45292451 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.45603395 seconds)
    (538/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.460263105 seconds)
    (539/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.45862431 seconds)
    (540/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.461184269 seconds)
    (541/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.458750803 seconds)
    (542/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.299068598 seconds)
    (543/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.482281202 seconds)
    (544/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.455941313 seconds)
    (545/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.321159778 seconds)
    (546/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.462511696 seconds)
    (547/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.456237723 seconds)
    (548/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.387293952 seconds)
    (549/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.489288898 seconds)
    (550/608) benchmarking "4d"...
    done (took 4.279317835 seconds)
    (551/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.466522943 seconds)
    (552/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.929106594 seconds)
    (553/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.461111037 seconds)
    (554/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.462588465 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.4620007 seconds)
    (556/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.457264998 seconds)
    (557/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.46184708 seconds)
    (558/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.943870124 seconds)
    (559/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.459299717 seconds)
    (560/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.464232539 seconds)
    (561/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.464724932 seconds)
    (562/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.465010473 seconds)
    (563/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.454062685 seconds)
    (564/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.504914071 seconds)
    (565/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.488511576 seconds)
    (566/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.954696175 seconds)
    (567/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.462278366 seconds)
    (568/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.457670882 seconds)
    (569/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.752828511 seconds)
    (570/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.460322614 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.471598707 seconds)
    (572/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.463060872 seconds)
    (573/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.860305529 seconds)
    (574/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.455093055 seconds)
    (575/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.462315466 seconds)
    (576/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.455072064 seconds)
    (577/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.454560953 seconds)
    (578/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.846487635 seconds)
    (579/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.469126789 seconds)
    (580/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.467028411 seconds)
    (581/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.622989265 seconds)
    (582/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 2.492843235 seconds)
    (583/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.45957404 seconds)
    (584/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.46939565 seconds)
    (585/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.49862649 seconds)
    (586/608) benchmarking "2d"...
    done (took 3.715293404 seconds)
    (587/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.462525958 seconds)
    (588/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.46185747 seconds)
    (589/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.478696964 seconds)
    (590/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.453094105 seconds)
    (591/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.492857742 seconds)
    (592/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.465844386 seconds)
    (593/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.472074855 seconds)
    (594/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.458385299 seconds)
    (595/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.456957481 seconds)
    (596/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.260479637 seconds)
    (597/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.561567933 seconds)
    (598/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.743054588 seconds)
    (599/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.455196302 seconds)
    (600/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.250327894 seconds)
    (601/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 2.592150078 seconds)
    (602/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.455156493 seconds)
    (603/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.460120494 seconds)
    (604/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.457035621 seconds)
    (605/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.457315178 seconds)
    (606/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.459297509 seconds)
    (607/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.469949578 seconds)
    (608/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.462087623 seconds)
  done (took 3946.482500765 seconds)
  (4/13) benchmarking "convert"...
    (1/4) benchmarking ("Float64", "Int")...
    done (took 2.979516778 seconds)
    (2/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.097042432 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.388837456 seconds)
    (4/4) benchmarking ("Int", "Float64")...
    done (took 2.907881226 seconds)
  done (took 14.836809071 seconds)
  (5/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.468949135 seconds)
    (2/6) benchmarking "boolarray_true_fill!"...
    done (took 2.935864771 seconds)
    (3/6) benchmarking "boolarray_true_load!"...
    done (took 2.895007031 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.827260847 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.462571352 seconds)
    (6/6) benchmarking "bitarray_true_load!"...
    done (took 7.466146241 seconds)
  done (took 33.515557616 seconds)
  (6/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate", "Float64")...
    done (took 2.595803839 seconds)
    (2/12) benchmarking ("cumsum", "Int")...
    done (took 3.078332108 seconds)
    (3/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.522361905 seconds)
    (4/12) benchmarking ("accumulate!", "Int")...
    done (took 3.11000547 seconds)
    (5/12) benchmarking ("cumsum", "Float64")...
    done (took 2.622759581 seconds)
    (6/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.614499888 seconds)
    (7/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.461352953 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.46137801 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 3.13141108 seconds)
    (10/12) benchmarking ("accumulate", "Int")...
    done (took 3.258327147 seconds)
    (11/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.443566795 seconds)
    (12/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.471104029 seconds)
  done (took 56.228519948 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 2.66496541 seconds)
    (2/12) benchmarking ("push_multiple!", 256)...
    done (took 2.542279171 seconds)
    (3/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.558459387 seconds)
    (4/12) benchmarking ("prerend!", 8)...
    done (took 2.729853442 seconds)
    (5/12) benchmarking ("prerend!", 256)...
    done (took 3.723445432 seconds)
    (6/12) benchmarking ("push_single!", 256)...
    done (took 2.535296265 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 3.20173378 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 2.687492614 seconds)
    (9/12) benchmarking ("prerend!", 2048)...
    done (took 2.749959493 seconds)
    (10/12) benchmarking ("append!", 8)...
    done (took 2.663883062 seconds)
    (11/12) benchmarking ("push_single!", 2048)...
    done (took 2.54631508 seconds)
    (12/12) benchmarking ("push_single!", 8)...
    done (took 2.511657624 seconds)
  done (took 35.571227033 seconds)
  (8/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.366915869 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.884193264 seconds)
    (3/20) benchmarking ("sumabs", "Float64")...
    done (took 3.44149511 seconds)
    (4/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.333690199 seconds)
    (5/20) benchmarking ("norminf", "Float64")...
    done (took 2.539314982 seconds)
    (6/20) benchmarking ("sum", "Float64")...
    done (took 3.346879308 seconds)
    (7/20) benchmarking ("norm", "Float64")...
    done (took 3.366204497 seconds)
    (8/20) benchmarking ("sum", "Int64")...
    done (took 3.198283377 seconds)
    (9/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.278427767 seconds)
    (10/20) benchmarking ("norminf", "Int64")...
    done (took 2.57045055 seconds)
    (11/20) benchmarking ("norm", "Int64")...
    done (took 2.643372582 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 3.344912151 seconds)
    (13/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.579470349 seconds)
    (14/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.333848111 seconds)
    (15/20) benchmarking ("maxabs", "Int64")...
    done (took 3.028077292 seconds)
    (16/20) benchmarking ("mean", "Float64")...
    done (took 3.393729694 seconds)
    (17/20) benchmarking ("norm1", "Int64")...
    done (took 2.890960819 seconds)
    (18/20) benchmarking ("mean", "Int64")...
    done (took 2.989820158 seconds)
    (19/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.273792922 seconds)
    (20/20) benchmarking ("sumabs", "Int64")...
    done (took 3.697380382 seconds)
  done (took 65.954674861 seconds)
  (9/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.461755825 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.467594758 seconds)
    (3/4) benchmarking "rev_load_slow!"...
    done (took 7.462046271 seconds)
    (4/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.463587017 seconds)
  done (took 32.313960744 seconds)
  (10/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.783541677 seconds)
    (2/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.830731241 seconds)
    (3/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.834132342 seconds)
    (4/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.771230568 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.78666721 seconds)
    (6/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.81353245 seconds)
    (7/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.703709465 seconds)
    (8/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.833341241 seconds)
    (9/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.808749063 seconds)
    (10/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.779508075 seconds)
    (11/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.818521609 seconds)
    (12/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.813531738 seconds)
    (13/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.830647619 seconds)
    (14/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.781899843 seconds)
    (15/24) benchmarking ("any", "BitArray")...
    done (took 3.154140056 seconds)
    (16/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.816843163 seconds)
    (17/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.822088281 seconds)
    (18/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.706719022 seconds)
    (19/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.812589707 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.812048249 seconds)
    (21/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.767147585 seconds)
    (22/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.701317412 seconds)
    (23/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.70302409 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 3.156323383 seconds)
  done (took 70.10749795 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.472358628 seconds)
    (2/17) benchmarking ("vcat", 500)...
    done (took 7.456473594 seconds)
    (3/17) benchmarking ("hcat", 5)...
    done (took 4.603127151 seconds)
    (4/17) benchmarking ("vcat_setind", 5)...
    done (took 4.702212464 seconds)
    (5/17) benchmarking ("catnd_setind", 5)...
    done (took 2.927318584 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 3.636744727 seconds)
    (7/17) benchmarking ("hvcat", 5)...
    done (took 4.770175182 seconds)
    (8/17) benchmarking ("hcat_setind", 500)...
    done (took 7.890805271 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.463115866 seconds)
    (10/17) benchmarking ("catnd", 5)...
    done (took 2.502742717 seconds)
    (11/17) benchmarking "4467"...
    done (took 2.636187427 seconds)
    (12/17) benchmarking ("vcat", 5)...
    done (took 3.597059357 seconds)
    (13/17) benchmarking ("catnd", 500)...
    done (took 7.906597555 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 7.459443543 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 3.642306729 seconds)
    (16/17) benchmarking ("vcat_setind", 500)...
    done (took 7.954051637 seconds)
    (17/17) benchmarking ("catnd_setind", 500)...
    done (took 7.465108516 seconds)
  done (took 96.554967535 seconds)
  (12/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.620611549 seconds)
    (2/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.5306341 seconds)
    (3/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.645899509 seconds)
    (4/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.839540105 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.47508412 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.489408418 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.549648335 seconds)
    (8/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.470272536 seconds)
  done (took 63.081796795 seconds)
  (13/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.90735344 seconds)
    (2/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.518891101 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.721844038 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.56423206 seconds)
    (5/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.86520322 seconds)
    (6/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.859642083 seconds)
    (7/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.657199668 seconds)
    (8/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.665961265 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.515532723 seconds)
    (10/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.869864283 seconds)
    (11/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.463423631 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.818374852 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.703226593 seconds)
    (14/24) benchmarking ("==", "BitArray")...
    done (took 2.671596848 seconds)
    (15/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.492454405 seconds)
    (16/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.843233605 seconds)
    (17/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.685066534 seconds)
    (18/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.704563663 seconds)
    (19/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.81105514 seconds)
    (20/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.788268863 seconds)
    (21/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.497462049 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.676024676 seconds)
    (23/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.697443773 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.091796667 seconds)
  done (took 72.53757029 seconds)
done (took 4613.019306146 seconds)
(18/23) benchmarking "string"...
  (1/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "different"...
    done (took 2.547495398 seconds)
    (2/4) benchmarking "identical"...
    done (took 2.766158734 seconds)
    (3/4) benchmarking "equal"...
    done (took 2.629533177 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.624653755 seconds)
  done (took 13.02426681 seconds)
  (2/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat str len 1"...
    done (took 3.382858322 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 3.200238371 seconds)
    (3/4) benchmarking "repeat char 2"...
    done (took 4.893936361 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.326405597 seconds)
  done (took 18.265339913 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "different"...
    done (took 2.522275013 seconds)
    (2/3) benchmarking "equal"...
    done (took 2.76983734 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.494996787 seconds)
  done (took 10.680318884 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.49839994 seconds)
  (5/7) benchmarking "findfirst"...
    (1/2) benchmarking "String"...
    done (took 2.65892647 seconds)
    (2/2) benchmarking "Char"...
    done (took 2.578385789 seconds)
  done (took 7.694482448 seconds)
  (6/7) benchmarking "join"...
  done (took 7.498320639 seconds)
  (7/7) benchmarking "readuntil"...
    (1/7) benchmarking "barbarian backtrack"...
    done (took 7.113185181 seconds)
    (2/7) benchmarking "target length 1"...
    done (took 3.152345723 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.125095484 seconds)
    (4/7) benchmarking "target length 1000"...
    done (took 2.702474589 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.434652745 seconds)
    (6/7) benchmarking "no backtracking"...
    done (took 5.306706931 seconds)
    (7/7) benchmarking "backtracking"...
    done (took 7.385306358 seconds)
  done (took 34.676822852 seconds)
done (took 97.799251673 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "symm!"...
    done (took 7.543028053 seconds)
    (2/36) benchmarking "symv"...
    done (took 3.981640382 seconds)
    (3/36) benchmarking "dotu"...
    done (took 3.468846006 seconds)
    (4/36) benchmarking "sbmv!"...
    done (took 4.710113903 seconds)
    (5/36) benchmarking "scal!"...
    done (took 3.424840304 seconds)
    (6/36) benchmarking "gemm!"...
    done (took 7.503664678 seconds)
    (7/36) benchmarking "trmv"...
    done (took 3.855308143 seconds)
    (8/36) benchmarking "asum"...
    done (took 3.245265589 seconds)
    (9/36) benchmarking "gemm"...
    done (took 7.525309873 seconds)
    (10/36) benchmarking "gbmv!"...
    done (took 4.934536544 seconds)
    (11/36) benchmarking "trsm"...
    done (took 7.494467979 seconds)
    (12/36) benchmarking "ger!"...
    done (took 7.463077825 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.014948942 seconds)
    (14/36) benchmarking "syr!"...
    done (took 7.457438863 seconds)
    (15/36) benchmarking "gbmv"...
    done (took 4.973083215 seconds)
    (16/36) benchmarking "symm"...
    done (took 7.525751949 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.612583608 seconds)
    (18/36) benchmarking "scal"...
    done (took 2.589279215 seconds)
    (19/36) benchmarking "trmm"...
    done (took 7.504300896 seconds)
    (20/36) benchmarking "trmv!"...
    done (took 3.828443464 seconds)
    (21/36) benchmarking "trmm!"...
    done (took 7.504628613 seconds)
    (22/36) benchmarking "dotc"...
    done (took 3.469176773 seconds)
    (23/36) benchmarking "syrk!"...
    done (took 7.507606835 seconds)
    (24/36) benchmarking "syrk"...
    done (took 7.508599071 seconds)
    (25/36) benchmarking "gemv"...
    done (took 5.628967861 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.686847572 seconds)
    (27/36) benchmarking "nrm2"...
    done (took 3.317373407 seconds)
    (28/36) benchmarking "sbmv"...
    done (took 4.762968993 seconds)
    (29/36) benchmarking "trsv!"...
    done (took 4.01222198 seconds)
    (30/36) benchmarking "axpy!"...
    done (took 3.669102243 seconds)
    (31/36) benchmarking "trsm!"...
    done (took 7.498796084 seconds)
    (32/36) benchmarking "her!"...
    done (took 7.453485637 seconds)
    (33/36) benchmarking "herk"...
    done (took 7.621440798 seconds)
    (34/36) benchmarking "dot"...
    done (took 3.482508438 seconds)
    (35/36) benchmarking "herk!"...
    done (took 7.591184569 seconds)
    (36/36) benchmarking "symv!"...
    done (took 3.915607082 seconds)
  done (took 199.739007114 seconds)
  (2/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.496998517 seconds)
    (2/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.453744292 seconds)
    (3/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.521246677 seconds)
    (4/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.459594777 seconds)
    (5/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.452261568 seconds)
    (6/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.717487186 seconds)
    (7/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.451428867 seconds)
    (8/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.451638395 seconds)
    (9/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.460819074 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.455450132 seconds)
    (11/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.453922162 seconds)
    (12/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.48194773 seconds)
    (13/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.453841613 seconds)
    (14/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.514431946 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.45559237 seconds)
    (16/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.449949182 seconds)
    (17/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.456437247 seconds)
    (18/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.639473043 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.458164175 seconds)
    (20/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.982992047 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.451760139 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.453790819 seconds)
    (23/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.542872284 seconds)
    (24/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 23.97254002 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.456016513 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.455152582 seconds)
    (27/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.539105491 seconds)
    (28/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.460044291 seconds)
    (29/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.456175341 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.457336439 seconds)
    (31/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.458587383 seconds)
    (32/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.59586847 seconds)
    (33/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.45444909 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.458391817 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.45626175 seconds)
    (36/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.515822763 seconds)
    (37/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.835242068 seconds)
    (38/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.582911674 seconds)
    (39/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.701670181 seconds)
    (40/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.450013773 seconds)
    (41/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.544459134 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.510109853 seconds)
    (43/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.451579474 seconds)
    (44/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.451729919 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.161640644 seconds)
    (46/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.455318716 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.272170257 seconds)
    (48/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.518269216 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.454400447 seconds)
    (50/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.45695685 seconds)
    (51/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.162538932 seconds)
    (52/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.45561301 seconds)
    (53/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 23.850874643 seconds)
    (54/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.200410085 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.476202542 seconds)
    (56/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.462804498 seconds)
    (57/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.459047155 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.457465769 seconds)
    (59/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.522057352 seconds)
    (60/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.457684242 seconds)
    (61/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.457430195 seconds)
    (62/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.462849273 seconds)
    (63/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.466609328 seconds)
    (64/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.492722031 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.478550779 seconds)
    (66/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.467324452 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.914501413 seconds)
    (68/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.527241595 seconds)
    (69/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.527885772 seconds)
    (70/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.528476436 seconds)
    (71/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.469188036 seconds)
    (72/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.476925491 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.479640826 seconds)
    (74/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.465104681 seconds)
    (75/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.490882081 seconds)
    (76/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.467980216 seconds)
    (77/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.461049562 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.458692196 seconds)
    (79/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.50144328 seconds)
    (80/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.678630708 seconds)
    (81/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.467115246 seconds)
    (82/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.474844918 seconds)
    (83/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.46785887 seconds)
    (84/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.537475487 seconds)
    (85/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.476436843 seconds)
    (86/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.692354579 seconds)
    (87/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.554265879 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.180994479 seconds)
    (89/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.533795337 seconds)
    (90/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.454248765 seconds)
    (91/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.476635302 seconds)
    (92/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.188604229 seconds)
    (93/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.452797683 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.846073242 seconds)
    (95/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.403986299 seconds)
    (96/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.461494464 seconds)
    (97/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.458657178 seconds)
    (98/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.463777134 seconds)
    (99/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.200391192 seconds)
    (100/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.468429583 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.464252482 seconds)
    (102/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.465305023 seconds)
    (103/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.46636958 seconds)
    (104/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.540630638 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.476189852 seconds)
    (106/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.542597815 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.473474309 seconds)
    (108/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 19.204996312 seconds)
    (109/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.496712579 seconds)
    (110/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.463775753 seconds)
    (111/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.465929807 seconds)
    (112/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.465616407 seconds)
    (113/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.465702925 seconds)
    (114/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.853817339 seconds)
    (115/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.469347023 seconds)
    (116/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.459523599 seconds)
    (117/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.600843832 seconds)
    (118/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 23.854420994 seconds)
  done (took 490.02530229 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.567202638 seconds)
  (4/4) benchmarking "factorization"...
    (1/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.487166692 seconds)
    (2/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.501424798 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.586842455 seconds)
    (4/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.865516445 seconds)
    (5/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.477676252 seconds)
    (6/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.533522101 seconds)
    (7/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.467624713 seconds)
    (8/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.487189901 seconds)
    (9/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.352209978 seconds)
    (10/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.48991889 seconds)
    (11/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.463034245 seconds)
    (12/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.485624699 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.565910533 seconds)
    (14/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.580057933 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.554379809 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.518262148 seconds)
    (17/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.484029704 seconds)
    (18/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.550309221 seconds)
    (19/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.460725732 seconds)
    (20/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.487792589 seconds)
    (21/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.502518879 seconds)
    (22/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.484114872 seconds)
    (23/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.464772676 seconds)
    (24/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.471757932 seconds)
    (25/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 9.123246271 seconds)
    (26/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.17969239 seconds)
    (27/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.430315498 seconds)
    (28/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.474242698 seconds)
    (29/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.458690847 seconds)
    (30/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.498011593 seconds)
    (31/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.622251367 seconds)
    (32/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.525997214 seconds)
  done (took 222.094683208 seconds)
done (took 916.893309225 seconds)
(20/23) benchmarking "tuple"...
  (1/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.469006126 seconds)
    (2/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.470805061 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.466911673 seconds)
    (4/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.489465484 seconds)
    (5/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.474307676 seconds)
    (6/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.465572572 seconds)
    (7/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.471867428 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.466917783 seconds)
  done (took 22.232708427 seconds)
  (2/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.494686566 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.923081895 seconds)
  done (took 7.883005292 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.468070172 seconds)
    (2/24) benchmarking ("sum", "(4,)")...
    done (took 2.464994186 seconds)
    (3/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.472230184 seconds)
    (4/24) benchmarking ("minimum", "(8,)")...
    done (took 2.465225802 seconds)
    (5/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.472121365 seconds)
    (6/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.473429403 seconds)
    (7/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.473947325 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.473317905 seconds)
    (9/24) benchmarking ("minimum", "(2,)")...
    done (took 2.462610786 seconds)
    (10/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.463948451 seconds)
    (11/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.46376102 seconds)
    (12/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.474194027 seconds)
    (13/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.46550837 seconds)
    (14/24) benchmarking ("minimum", "(16,)")...
    done (took 2.467212211 seconds)
    (15/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.472122212 seconds)
    (16/24) benchmarking ("sum", "(8,)")...
    done (took 2.464915756 seconds)
    (17/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.465546784 seconds)
    (18/24) benchmarking ("sum", "(2,)")...
    done (took 2.465942111 seconds)
    (19/24) benchmarking ("minimum", "(4,)")...
    done (took 2.46712611 seconds)
    (20/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.462987376 seconds)
    (21/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.465542215 seconds)
    (22/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.462152106 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.466872523 seconds)
    (24/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.473135099 seconds)
  done (took 61.696007029 seconds)
  (4/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.47144554 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.466861645 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.473900186 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.474139587 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.470528738 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.466221733 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.465352717 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.46768911 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.471570313 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.468330489 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.466626793 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.465191857 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.46554582 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.466697816 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.472544324 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.464867958 seconds)
  done (took 41.955626775 seconds)
done (took 136.221454304 seconds)
(21/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.675310645 seconds)
    (2/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.605332323 seconds)
    (3/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.89957442 seconds)
    (4/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.097721043 seconds)
    (5/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.642078105 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.654641873 seconds)
    (7/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.584521667 seconds)
    (8/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.628641599 seconds)
    (9/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.741876241 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.587211802 seconds)
    (11/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.609620161 seconds)
    (12/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.628864917 seconds)
    (13/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.940388099 seconds)
    (14/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.417443527 seconds)
    (15/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.591640899 seconds)
    (16/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.598807677 seconds)
    (17/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.564811918 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.881076296 seconds)
    (19/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.99659449 seconds)
    (20/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.99966608 seconds)
    (21/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.430919581 seconds)
    (22/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.651849228 seconds)
    (23/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.504601557 seconds)
    (24/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.319573403 seconds)
    (25/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.986470783 seconds)
    (26/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.604982471 seconds)
    (27/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.004474455 seconds)
    (28/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.742770859 seconds)
    (29/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.661107596 seconds)
    (30/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.584945917 seconds)
    (31/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.932899033 seconds)
    (32/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.648152394 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.090973286 seconds)
    (34/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.050111189 seconds)
    (35/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.465533845 seconds)
    (36/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.608642552 seconds)
    (37/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.59777013 seconds)
    (38/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.608886465 seconds)
    (39/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.580061998 seconds)
    (40/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.715805135 seconds)
    (41/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.666088669 seconds)
    (42/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.740622228 seconds)
  done (took 125.012498081 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.505270695 seconds)
    (2/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.584552783 seconds)
    (3/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.553994309 seconds)
    (4/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.513904454 seconds)
    (5/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.518827637 seconds)
    (6/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.550256189 seconds)
    (7/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.556215853 seconds)
    (8/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.607408349 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.571812813 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.598397737 seconds)
    (11/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 3.009017767 seconds)
    (12/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.588002232 seconds)
    (13/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.58784324 seconds)
    (14/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.549192369 seconds)
    (15/26) benchmarking ("Set", "Any", "iterate")...
    done (took 3.029326109 seconds)
    (16/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.54306305 seconds)
    (17/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.55712002 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.980215228 seconds)
    (19/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.547096974 seconds)
    (20/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.579534602 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.520886471 seconds)
    (22/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.583968549 seconds)
    (23/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.586624356 seconds)
    (24/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 3.012749779 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.510483886 seconds)
    (26/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.6049006 seconds)
  done (took 70.814146334 seconds)
  (3/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.809084435 seconds)
    (2/28) benchmarking ("IdDict", "String", "filter")...
    done (took 3.03938047 seconds)
    (3/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.893032918 seconds)
    (4/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.473795564 seconds)
    (5/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.660901593 seconds)
    (6/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.085399947 seconds)
    (7/28) benchmarking ("Set", "String", "filter")...
    done (took 2.730626523 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.537031342 seconds)
    (9/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.711745931 seconds)
    (10/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.631030904 seconds)
    (11/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.77228178 seconds)
    (12/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.534619477 seconds)
    (13/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.533356511 seconds)
    (14/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.597585277 seconds)
    (15/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.676238991 seconds)
    (16/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 3.035225484 seconds)
    (17/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.982949552 seconds)
    (18/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.675038338 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.786357828 seconds)
    (20/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.579071627 seconds)
    (21/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.615084142 seconds)
    (22/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.470931403 seconds)
    (23/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.68438307 seconds)
    (24/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.628734479 seconds)
    (25/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.807725824 seconds)
    (26/28) benchmarking ("Vector", "Int", "filter")...
    done (took 3.977168172 seconds)
    (27/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.361810634 seconds)
    (28/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.831109434 seconds)
  done (took 85.588695041 seconds)
  (4/6) benchmarking "set operations"...
    (1/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.522362601 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.618652099 seconds)
    (3/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.417902555 seconds)
    (4/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.498546505 seconds)
    (5/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.934534736 seconds)
    (6/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.568597471 seconds)
    (7/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.74740399 seconds)
    (8/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.695392471 seconds)
    (9/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 3.155511429 seconds)
    (10/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.093934979 seconds)
    (11/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.697637833 seconds)
    (12/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.543095721 seconds)
    (13/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.506195208 seconds)
    (14/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.654999444 seconds)
    (15/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.578503313 seconds)
    (16/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.257475255 seconds)
    (17/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.219081168 seconds)
    (18/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.827351229 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.626305013 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.40789442 seconds)
    (21/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.766462879 seconds)
    (22/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.603384273 seconds)
    (23/117) benchmarking ("Set", "Int", "union")...
    done (took 2.617885725 seconds)
    (24/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.773211156 seconds)
    (25/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.569851732 seconds)
    (26/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.820975462 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 3.75771021 seconds)
    (28/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 3.21968826 seconds)
    (29/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.14337814 seconds)
    (30/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.575534569 seconds)
    (31/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.502772326 seconds)
    (32/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.656631999 seconds)
    (33/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.112331494 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.804890182 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.344480985 seconds)
    (36/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.68052952 seconds)
    (37/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.523494047 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.588781618 seconds)
    (39/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.606162832 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.563456669 seconds)
    (41/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.67371629 seconds)
    (42/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.560378171 seconds)
    (43/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.851172903 seconds)
    (44/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.434582227 seconds)
    (45/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.955269423 seconds)
    (46/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.665831906 seconds)
    (47/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.719000048 seconds)
    (48/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.318237933 seconds)
    (49/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.777982848 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.571652626 seconds)
    (51/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.563255598 seconds)
    (52/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.485774226 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.64195413 seconds)
    (54/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.57417958 seconds)
    (55/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.745214651 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.482578141 seconds)
    (57/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.681357878 seconds)
    (58/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.62533352 seconds)
    (59/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.667229905 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.669588374 seconds)
    (61/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.00606165 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.272811441 seconds)
    (63/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.944963957 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.725379393 seconds)
    (65/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.330756764 seconds)
    (66/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.173801177 seconds)
    (67/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.650760983 seconds)
    (68/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.337500726 seconds)
    (69/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.181903823 seconds)
    (70/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.594656472 seconds)
    (71/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.522372313 seconds)
    (72/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.735823794 seconds)
    (73/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.764213363 seconds)
    (74/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.52667099 seconds)
    (75/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.695997508 seconds)
    (76/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.237356027 seconds)
    (77/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.526118333 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.622443164 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.11636393 seconds)
    (80/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.403526771 seconds)
    (81/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.738135954 seconds)
    (82/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 3.871765149 seconds)
    (83/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.129358126 seconds)
    (84/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.990188109 seconds)
    (85/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.637611576 seconds)
    (86/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 3.004267129 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.67050673 seconds)
    (88/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.641314109 seconds)
    (89/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.566673396 seconds)
    (90/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.63671353 seconds)
    (91/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.77430001 seconds)
    (92/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.607456667 seconds)
    (93/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.973394503 seconds)
    (94/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.578207221 seconds)
    (95/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.576085476 seconds)
    (96/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.610307597 seconds)
    (97/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.570432974 seconds)
    (98/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.61439736 seconds)
    (99/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.775156641 seconds)
    (100/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.55784869 seconds)
    (101/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.659859978 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.37522888 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.073037709 seconds)
    (104/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.780683591 seconds)
    (105/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.978478985 seconds)
    (106/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.536015174 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.584273682 seconds)
    (108/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.561533469 seconds)
    (109/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.709291649 seconds)
    (110/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.778516213 seconds)
    (111/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.430483986 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.657496828 seconds)
    (113/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 3.011360993 seconds)
    (114/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.745059839 seconds)
    (115/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.504193115 seconds)
    (116/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 3.783625607 seconds)
    (117/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 4.298680499 seconds)
  done (took 350.317053534 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.523357521 seconds)
    (2/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.927133805 seconds)
    (3/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.839362996 seconds)
    (4/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.534862558 seconds)
    (5/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.552752725 seconds)
    (6/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.489744281 seconds)
    (7/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.688432136 seconds)
    (8/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.525005243 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.589529191 seconds)
    (10/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.529191881 seconds)
    (11/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.758553146 seconds)
    (12/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.820204212 seconds)
    (13/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.993943212 seconds)
    (14/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.614663843 seconds)
    (15/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.577891556 seconds)
    (16/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.607393653 seconds)
    (17/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.723970376 seconds)
    (18/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.727283582 seconds)
    (19/105) benchmarking ("Set", "Int", "length")...
    done (took 2.483933964 seconds)
    (20/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.524480469 seconds)
    (21/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.659202512 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.581511408 seconds)
    (23/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.491433935 seconds)
    (24/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.765374568 seconds)
    (25/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.641490271 seconds)
    (26/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.783017777 seconds)
    (27/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.488953052 seconds)
    (28/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.541332372 seconds)
    (29/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.511000885 seconds)
    (30/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.529638672 seconds)
    (31/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.90322848 seconds)
    (32/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.611808208 seconds)
    (33/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.84519266 seconds)
    (34/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.887410171 seconds)
    (35/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.580770259 seconds)
    (36/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.616805444 seconds)
    (37/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.766886731 seconds)
    (38/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.549215478 seconds)
    (39/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.582978475 seconds)
    (40/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.956937403 seconds)
    (41/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.503440792 seconds)
    (42/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.510606953 seconds)
    (43/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.959008147 seconds)
    (44/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.527430501 seconds)
    (45/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.638206547 seconds)
    (46/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.504021213 seconds)
    (47/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.312322086 seconds)
    (48/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.592965048 seconds)
    (49/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.712662049 seconds)
    (50/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.686921298 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.525212689 seconds)
    (52/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.659794712 seconds)
    (53/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.531179492 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.7217567 seconds)
    (55/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.512875004 seconds)
    (56/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.981652903 seconds)
    (57/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.682122665 seconds)
    (58/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.851507611 seconds)
    (59/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.518355104 seconds)
    (60/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.590219299 seconds)
    (61/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.691863337 seconds)
    (62/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.462049328 seconds)
    (63/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 3.0345835 seconds)
    (64/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.767736857 seconds)
    (65/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.703438232 seconds)
    (66/105) benchmarking ("Set", "Int", "first")...
    done (took 2.529173687 seconds)
    (67/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.517607245 seconds)
    (68/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.532575099 seconds)
    (69/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.599194273 seconds)
    (70/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.501106489 seconds)
    (71/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.680881919 seconds)
    (72/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.499659662 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.170469899 seconds)
    (74/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 3.019346069 seconds)
    (75/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.925600339 seconds)
    (76/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.868417372 seconds)
    (77/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.753505952 seconds)
    (78/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.89471737 seconds)
    (79/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.525484456 seconds)
    (80/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.845455713 seconds)
    (81/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.514630908 seconds)
    (82/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.92197928 seconds)
    (83/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.243679811 seconds)
    (84/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.874995131 seconds)
    (85/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.946399089 seconds)
    (86/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.721066261 seconds)
    (87/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.561489101 seconds)
    (88/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.133364432 seconds)
    (89/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.581801732 seconds)
    (90/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.763217204 seconds)
    (91/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.488451765 seconds)
    (92/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.701126289 seconds)
    (93/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.500412709 seconds)
    (94/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.510819056 seconds)
    (95/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.4857838 seconds)
    (96/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.680591233 seconds)
    (97/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.584758729 seconds)
    (98/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.897627101 seconds)
    (99/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.698069855 seconds)
    (100/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.537050444 seconds)
    (101/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.570301917 seconds)
    (102/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.865787458 seconds)
    (103/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.568174864 seconds)
    (104/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.84873199 seconds)
    (105/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.785129486 seconds)
  done (took 293.820440337 seconds)
  (6/6) benchmarking "optimizations"...
    (1/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.451818239 seconds)
    (2/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.683594742 seconds)
    (3/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.462788899 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.454847138 seconds)
    (5/27) benchmarking ("BitSet", "Int8")...
    done (took 4.035589198 seconds)
    (6/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.451218079 seconds)
    (7/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.453967868 seconds)
    (8/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.456761129 seconds)
    (9/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.337095132 seconds)
    (10/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.547417103 seconds)
    (11/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.474925684 seconds)
    (12/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.612209069 seconds)
    (13/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.455824669 seconds)
    (14/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.45866836 seconds)
    (15/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.454922462 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.455322614 seconds)
    (17/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.458968475 seconds)
    (18/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.459577166 seconds)
    (19/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.458945443 seconds)
    (20/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.459261997 seconds)
    (21/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.46059477 seconds)
    (22/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.475321276 seconds)
    (23/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.854441797 seconds)
    (24/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.45888677 seconds)
    (25/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.204108118 seconds)
    (26/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.856197847 seconds)
    (27/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.478972447 seconds)
  done (took 185.332517014 seconds)
done (took 1113.350046785 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "optimization"...
    (1/12) benchmarking "many_const_calls"...
    done (took 32.663892227 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.127642286 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 35.038034629 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 36.146785569 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.640914667 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 34.374212501 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 34.362349708 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 34.125267004 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 34.601982031 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 36.525352903 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 42.61541731 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 35.16436786 seconds)
  done (took 432.847877426 seconds)
  (2/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "many_const_calls"...
    done (took 35.224984199 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.20880105 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 37.448296181 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 37.230244186 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 37.820240757 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 37.541124225 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 37.139474756 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 34.612439445 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 37.216416954 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 37.907187134 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 37.40198738 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 37.280198088 seconds)
  done (took 449.771919823 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "many_const_calls"...
    done (took 35.976282985 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 40.616504286 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 35.482001304 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 36.37152864 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.794892426 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 37.454773912 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 39.834783034 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 37.041662891 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 35.088146631 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 36.382699365 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 43.768483134 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 37.255638977 seconds)
  done (took 455.548576797 seconds)
done (took 1340.629727533 seconds)
(23/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 10.453960096 seconds)
done (took 15.945927608 seconds)
SAVING RESULT...
DONE!
